{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","approx","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=fcc8137a9062fedc","-C","extra-filename=-fcc8137a9062fedc","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","num_traits=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_traits-06e054c4c95d48c0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libapprox-fcc8137a9062fedc.rmeta"},"prelude":{"crate_id":{"name":"approx","disambiguator":[8203426696814416008,11700430433253579810]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","num":14,"id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":597,"byte_end":11440,"line_start":15,"line_end":384,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6041,"byte_end":6050,"line_start":172,"line_end":172,"column_start":22,"column_end":31},"alias_span":null,"name":"AbsDiffEq","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6073,"byte_end":6083,"line_start":173,"line_end":173,"column_start":22,"column_end":32},"alias_span":null,"name":"RelativeEq","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6102,"byte_end":6108,"line_start":174,"line_end":174,"column_start":18,"column_end":24},"alias_span":null,"name":"UlpsEq","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":597,"byte_end":11440,"line_start":15,"line_end":384,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":46},{"krate":0,"index":82},{"krate":0,"index":117},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":148},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":164},{"krate":0,"index":169},{"krate":0,"index":173}],"decl_id":null,"docs":" A crate that provides facilities for testing the approximate equality of floating-point\n based types, using either relative difference, or units in the last place (ULPs)\n comparisons.\n\n You can also use the `approx_{eq, ne}!` `assert_approx_{eq, ne}!` macros to test for equality\n using a more positional style.\n\n ```rust\n #[macro_use]\n extern crate approx;\n\n use std::f64;\n\n # fn main() {\n abs_diff_eq!(1.0, 1.0);\n abs_diff_eq!(1.0, 1.0, epsilon = f64::EPSILON);\n\n relative_eq!(1.0, 1.0);\n relative_eq!(1.0, 1.0, epsilon = f64::EPSILON);\n relative_eq!(1.0, 1.0, max_relative = 1.0);\n relative_eq!(1.0, 1.0, epsilon = f64::EPSILON, max_relative = 1.0);\n relative_eq!(1.0, 1.0, max_relative = 1.0, epsilon = f64::EPSILON);\n\n ulps_eq!(1.0, 1.0);\n ulps_eq!(1.0, 1.0, epsilon = f64::EPSILON);\n ulps_eq!(1.0, 1.0, max_ulps = 4);\n ulps_eq!(1.0, 1.0, epsilon = f64::EPSILON, max_ulps = 4);\n ulps_eq!(1.0, 1.0, max_ulps = 4, epsilon = f64::EPSILON);\n # }\n ```\n\n # Implementing approximate equality for custom types\n\n The `ApproxEq` trait allows approximate equalities to be implemented on types, based on the\n fundamental floating point implementations.\n\n For example, we might want to be able to do approximate assertions on a complex number type:\n\n ```rust\n #[macro_use]\n extern crate approx;\n # use approx::{AbsDiffEq, RelativeEq, UlpsEq};\n\n #[derive(Debug, PartialEq)]\n struct Complex<T> {\n     x: T,\n     i: T,\n }\n # impl<T: AbsDiffEq> AbsDiffEq for Complex<T> where T::Epsilon: Copy {\n #     type Epsilon = T::Epsilon;\n #     fn default_epsilon() -> T::Epsilon { T::default_epsilon() }\n #     fn abs_diff_eq(&self, other: &Self, epsilon: T::Epsilon) -> bool {\n #         T::abs_diff_eq(&self.x, &other.x, epsilon) &&\n #         T::abs_diff_eq(&self.i, &other.i, epsilon)\n #     }\n # }\n # impl<T: RelativeEq> RelativeEq for Complex<T> where T::Epsilon: Copy {\n #     fn default_max_relative() -> T::Epsilon { T::default_max_relative() }\n #     fn relative_eq(&self, other: &Self, epsilon: T::Epsilon, max_relative: T::Epsilon)\n #                   -> bool {\n #         T::relative_eq(&self.x, &other.x, epsilon, max_relative) &&\n #         T::relative_eq(&self.i, &other.i, epsilon, max_relative)\n #     }\n # }\n # impl<T: UlpsEq> UlpsEq for Complex<T> where T::Epsilon: Copy {\n #     fn default_max_ulps() -> u32 { T::default_max_ulps() }\n #     fn ulps_eq(&self, other: &Self, epsilon: T::Epsilon, max_ulps: u32) -> bool {\n #         T::ulps_eq(&self.x, &other.x, epsilon, max_ulps) &&\n #         T::ulps_eq(&self.i, &other.i, epsilon, max_ulps)\n #     }\n # }\n\n # fn main() {\n let x = Complex { x: 1.2, i: 2.3 };\n\n assert_relative_eq!(x, x);\n assert_ulps_eq!(x, x, max_ulps = 4);\n # }\n ```\n\n To do this we can implement `AbsDiffEq`, `RelativeEq` and `UlpsEq` generically in terms of a\n type parameter that also implements `ApproxEq`, `RelativeEq` and `UlpsEq` respectively. This\n means that we can make comparisons for either `Complex<f32>` or `Complex<f64>`:\n\n ```rust\n # use approx::{AbsDiffEq, RelativeEq, UlpsEq};\n # #[derive(Debug, PartialEq)]\n # struct Complex<T> { x: T, i: T, }\n #\n impl<T: AbsDiffEq> AbsDiffEq for Complex<T> where\n     T::Epsilon: Copy,\n {\n     type Epsilon = T::Epsilon;\n\n     fn default_epsilon() -> T::Epsilon {\n         T::default_epsilon()\n     }\n\n     fn abs_diff_eq(&self, other: &Self, epsilon: T::Epsilon) -> bool {\n         T::abs_diff_eq(&self.x, &other.x, epsilon) &&\n         T::abs_diff_eq(&self.i, &other.i, epsilon)\n     }\n }\n\n impl<T: RelativeEq> RelativeEq for Complex<T> where\n     T::Epsilon: Copy,\n {\n     fn default_max_relative() -> T::Epsilon {\n         T::default_max_relative()\n     }\n\n     fn relative_eq(&self, other: &Self, epsilon: T::Epsilon, max_relative: T::Epsilon) -> bool {\n         T::relative_eq(&self.x, &other.x, epsilon, max_relative) &&\n         T::relative_eq(&self.i, &other.i, epsilon, max_relative)\n     }\n }\n\n impl<T: UlpsEq> UlpsEq for Complex<T> where\n     T::Epsilon: Copy,\n {\n     fn default_max_ulps() -> u32 {\n         T::default_max_ulps()\n     }\n\n     fn ulps_eq(&self, other: &Self, epsilon: T::Epsilon, max_ulps: u32) -> bool {\n         T::ulps_eq(&self.x, &other.x, epsilon, max_ulps) &&\n         T::ulps_eq(&self.i, &other.i, epsilon, max_ulps)\n     }\n }\n ```\n\n # References\n\n Floating point is hard! Thanks goes to these links for helping to make things a _little_\n easier to understand:\n\n - [Comparing Floating Point Numbers, 2012 Edition]\n   (https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)\n - [The Floating Point Guide - Comparison](http://floating-point-gui.de/errors/comparison/)\n - [What Every Computer Scientist Should Know About Floating-Point Arithmetic]\n   (https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":11676,"byte_end":11685,"line_start":8,"line_end":8,"column_start":11,"column_end":20},"name":"AbsDiffEq","qualname":"::abs_diff_eq::AbsDiffEq","value":"AbsDiffEq<Rhs = Self>: PartialEq<Rhs>","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Equality that is defined using the absolute difference of two numbers.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":11798,"byte_end":11805,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"Epsilon","qualname":"::abs_diff_eq::AbsDiffEq::Epsilon","value":"type Epsilon;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Used for specifying relative comparisons.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":12031,"byte_end":12046,"line_start":19,"line_end":19,"column_start":8,"column_end":23},"name":"default_epsilon","qualname":"::abs_diff_eq::AbsDiffEq::default_epsilon","value":"fn () -> Self::Epsilon","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" The default tolerance to use when testing values that are close together.\n\n This is used when no `epsilon` value is supplied to the `abs_diff_eq!`, `relative_eq!`, or\n `ulps_eq!` macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":12197,"byte_end":12208,"line_start":23,"line_end":23,"column_start":8,"column_end":19},"name":"abs_diff_eq","qualname":"::abs_diff_eq::AbsDiffEq::abs_diff_eq","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon) -> bool","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" A test for equality that uses the absolute difference to compute the approximate\n equality of two numbers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":12318,"byte_end":12329,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"abs_diff_ne","qualname":"::abs_diff_eq::AbsDiffEq::abs_diff_ne","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon) -> bool","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" The inverse of `ApproxEq::abs_diff_eq`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":16839,"byte_end":16849,"line_start":11,"line_end":11,"column_start":11,"column_end":21},"name":"RelativeEq","qualname":"::relative_eq::RelativeEq","value":"RelativeEq<Rhs = Self>: AbsDiffEq<Rhs>","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" Equality comparisons between two numbers using both the absolute difference and\n relative based comparisons.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":17086,"byte_end":17106,"line_start":18,"line_end":18,"column_start":8,"column_end":28},"name":"default_max_relative","qualname":"::relative_eq::RelativeEq::default_max_relative","value":"fn () -> Self::Epsilon","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The default relative tolerance for testing values that are far-apart.\n\n This is used when no `max_relative` value is supplied to the `relative_eq` macro.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":17224,"byte_end":17235,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"relative_eq","qualname":"::relative_eq::RelativeEq::relative_eq","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon, max_relative: Self::Epsilon) -> bool","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" A test for equality that uses a relative comparison if the values are far apart.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":17413,"byte_end":17424,"line_start":29,"line_end":29,"column_start":8,"column_end":19},"name":"relative_ne","qualname":"::relative_eq::RelativeEq::relative_ne","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon, max_relative: Self::Epsilon) -> bool","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The inverse of `ApproxEq::relative_eq`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":22405,"byte_end":22411,"line_start":11,"line_end":11,"column_start":11,"column_end":17},"name":"UlpsEq","qualname":"::ulps_eq::UlpsEq","value":"UlpsEq<Rhs = Self>: AbsDiffEq<Rhs>","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"decl_id":null,"docs":" Equality comparisons between two numbers using both the absolute difference and ULPs\n (Units in Last Place) based comparisons.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":22639,"byte_end":22655,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"default_max_ulps","qualname":"::ulps_eq::UlpsEq::default_max_ulps","value":"fn () -> u32","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The default ULPs to tolerate when testing values that are far-apart.\n\n This is used when no `max_ulps` value is supplied to the `ulps_eq` macro.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":22771,"byte_end":22778,"line_start":21,"line_end":21,"column_start":8,"column_end":15},"name":"ulps_eq","qualname":"::ulps_eq::UlpsEq::ulps_eq","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon, max_ulps: u32) -> bool","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" A test for equality that uses units in the last place (ULP) if the values are far apart.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":22899,"byte_end":22906,"line_start":24,"line_end":24,"column_start":8,"column_end":15},"name":"ulps_ne","qualname":"::ulps_eq::UlpsEq::ulps_ne","value":"fn (&self, other: &Rhs, epsilon: Self::Epsilon, max_ulps: u32) -> bool","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" The inverse of `ApproxEq::ulps_eq`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6549,"byte_end":6556,"line_start":191,"line_end":191,"column_start":12,"column_end":19},"name":"AbsDiff","qualname":"::AbsDiff","value":"AbsDiff { epsilon }","parent":null,"children":[{"krate":0,"index":137}],"decl_id":null,"docs":" The requisite parameters for testing for approximate equality using a\n absolute difference based comparison.\n\n This is not normally used directly, rather via the\n `assert_abs_diff_{eq|ne}!` and `abs_diff_{eq|ne}!` macros.\n\n # Example\n\n ```rust\n use std::f64;\n use approx::AbsDiff;\n\n AbsDiff::default().eq(&1.0, &1.0);\n AbsDiff::default().epsilon(f64::EPSILON).eq(&1.0, &1.0);\n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6702,"byte_end":6709,"line_start":197,"line_end":197,"column_start":9,"column_end":16},"name":"epsilon","qualname":"::AbsDiff::epsilon","value":"<A as abs_diff_eq::AbsDiffEq<B>>::Epsilon","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" The tolerance to use when testing values that are close together.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7107,"byte_end":7114,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"epsilon","qualname":"<AbsDiff<A, B>>::epsilon","value":"fn (self, epsilon: A::Epsilon) -> AbsDiff<A, B>","parent":null,"children":[],"decl_id":null,"docs":" Replace the epsilon value with the one specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7086,"byte_end":7095,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7268,"byte_end":7270,"line_start":226,"line_end":226,"column_start":12,"column_end":14},"name":"eq","qualname":"<AbsDiff<A, B>>::eq","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the equality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7247,"byte_end":7256,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7425,"byte_end":7427,"line_start":232,"line_end":232,"column_start":12,"column_end":14},"name":"ne","qualname":"<AbsDiff<A, B>>::ne","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the inequality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":7404,"byte_end":7413,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8166,"byte_end":8174,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"Relative","qualname":"::Relative","value":"Relative { epsilon, max_relative }","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" The requisite parameters for testing for approximate equality using a\n relative based comparison.\n\n This is not normally used directly, rather via the\n `assert_relative_{eq|ne}!` and `relative_{eq|ne}!` macros.\n\n # Example\n\n ```rust\n use std::f64;\n use approx::Relative;\n\n Relative::default().eq(&1.0, &1.0);\n Relative::default().epsilon(f64::EPSILON).eq(&1.0, &1.0);\n Relative::default().max_relative(1.0).eq(&1.0, &1.0);\n Relative::default().epsilon(f64::EPSILON).max_relative(1.0).eq(&1.0, &1.0);\n Relative::default().max_relative(1.0).epsilon(f64::EPSILON).eq(&1.0, &1.0);\n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8321,"byte_end":8328,"line_start":261,"line_end":261,"column_start":9,"column_end":16},"name":"epsilon","qualname":"::Relative::epsilon","value":"<A as abs_diff_eq::AbsDiffEq<B>>::Epsilon","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" The tolerance to use when testing values that are close together.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8420,"byte_end":8432,"line_start":263,"line_end":263,"column_start":9,"column_end":21},"name":"max_relative","qualname":"::Relative::max_relative","value":"<A as abs_diff_eq::AbsDiffEq<B>>::Epsilon","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" The relative tolerance for testing values that are far-apart.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8889,"byte_end":8896,"line_start":287,"line_end":287,"column_start":12,"column_end":19},"name":"epsilon","qualname":"<Relative<A, B>>::epsilon","value":"fn (self, epsilon: A::Epsilon) -> Relative<A, B>","parent":null,"children":[],"decl_id":null,"docs":" Replace the epsilon value with the one specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8868,"byte_end":8877,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9080,"byte_end":9092,"line_start":293,"line_end":293,"column_start":12,"column_end":24},"name":"max_relative","qualname":"<Relative<A, B>>::max_relative","value":"fn (self, max_relative: A::Epsilon) -> Relative<A, B>","parent":null,"children":[],"decl_id":null,"docs":" Replace the maximum relative value with the one specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9059,"byte_end":9068,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9290,"byte_end":9292,"line_start":302,"line_end":302,"column_start":12,"column_end":14},"name":"eq","qualname":"<Relative<A, B>>::eq","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the equality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9269,"byte_end":9278,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9466,"byte_end":9468,"line_start":308,"line_end":308,"column_start":12,"column_end":14},"name":"ne","qualname":"<Relative<A, B>>::ne","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the inequality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":9445,"byte_end":9454,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10173,"byte_end":10177,"line_start":331,"line_end":331,"column_start":12,"column_end":16},"name":"Ulps","qualname":"::Ulps","value":"Ulps { epsilon, max_ulps }","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" The requisite parameters for testing for approximate equality using an ULPs\n based comparison.\n\n This is not normally used directly, rather via the `assert_ulps_{eq|ne}!`\n and `ulps_{eq|ne}!` macros.\n\n # Example\n\n ```rust\n use std::f64;\n use approx::Ulps;\n\n Ulps::default().eq(&1.0, &1.0);\n Ulps::default().epsilon(f64::EPSILON).eq(&1.0, &1.0);\n Ulps::default().max_ulps(4).eq(&1.0, &1.0);\n Ulps::default().epsilon(f64::EPSILON).max_ulps(4).eq(&1.0, &1.0);\n Ulps::default().max_ulps(4).epsilon(f64::EPSILON).eq(&1.0, &1.0);\n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10320,"byte_end":10327,"line_start":337,"line_end":337,"column_start":9,"column_end":16},"name":"epsilon","qualname":"::Ulps::epsilon","value":"<A as abs_diff_eq::AbsDiffEq<B>>::Epsilon","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The tolerance to use when testing values that are close together.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10418,"byte_end":10426,"line_start":339,"line_end":339,"column_start":9,"column_end":17},"name":"max_ulps","qualname":"::Ulps::max_ulps","value":"u32","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The ULPs to tolerate when testing values that are far-apart.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10844,"byte_end":10851,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"epsilon","qualname":"<Ulps<A, B>>::epsilon","value":"fn (self, epsilon: A::Epsilon) -> Ulps<A, B>","parent":null,"children":[],"decl_id":null,"docs":" Replace the epsilon value with the one specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10823,"byte_end":10832,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":11019,"byte_end":11027,"line_start":369,"line_end":369,"column_start":12,"column_end":20},"name":"max_ulps","qualname":"<Ulps<A, B>>::max_ulps","value":"fn (self, max_ulps: u32) -> Ulps<A, B>","parent":null,"children":[],"decl_id":null,"docs":" Replace the max ulps value with the one specified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10998,"byte_end":11007,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":11170,"byte_end":11172,"line_start":375,"line_end":375,"column_start":12,"column_end":14},"name":"eq","qualname":"<Ulps<A, B>>::eq","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the equality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":11149,"byte_end":11158,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":11338,"byte_end":11340,"line_start":381,"line_end":381,"column_start":12,"column_end":14},"name":"ne","qualname":"<Ulps<A, B>>::ne","value":"fn (self, lhs: &A, rhs: &B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Peform the inequality comparison\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":11317,"byte_end":11326,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":15002,"byte_end":15006,"line_start":121,"line_end":121,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":15345,"byte_end":15352,"line_start":135,"line_end":135,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":20305,"byte_end":20309,"line_start":124,"line_end":124,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":20707,"byte_end":20714,"line_start":141,"line_end":141,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":25254,"byte_end":25258,"line_start":96,"line_end":96,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":25571,"byte_end":25578,"line_start":108,"line_end":108,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6749,"byte_end":6756,"line_start":200,"line_end":200,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6957,"byte_end":6964,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8472,"byte_end":8480,"line_start":266,"line_end":266,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8737,"byte_end":8745,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10459,"byte_end":10463,"line_start":342,"line_end":342,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10700,"byte_end":10704,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":11699,"byte_end":11708,"line_start":8,"line_end":8,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":15002,"byte_end":15006,"line_start":121,"line_end":121,"column_start":47,"column_end":51},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":2820},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\abs_diff_eq.rs","byte_start":15345,"byte_end":15352,"line_start":135,"line_end":135,"column_start":49,"column_end":56},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":2877},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":16863,"byte_end":16872,"line_start":11,"line_end":11,"column_start":35,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":9},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":20305,"byte_end":20309,"line_start":124,"line_end":124,"column_start":49,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":2,"index":2820},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\relative_eq.rs","byte_start":20707,"byte_end":20714,"line_start":141,"line_end":141,"column_start":51,"column_end":58},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":2877},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":22425,"byte_end":22434,"line_start":11,"line_end":11,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":9},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":25254,"byte_end":25258,"line_start":96,"line_end":96,"column_start":41,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":2820},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\ulps_eq.rs","byte_start":25571,"byte_end":25578,"line_start":108,"line_end":108,"column_start":43,"column_end":50},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":2877},"to":{"krate":0,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6749,"byte_end":6756,"line_start":200,"line_end":200,"column_start":24,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":134},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":6957,"byte_end":6964,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8472,"byte_end":8480,"line_start":266,"line_end":266,"column_start":24,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":148},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":8737,"byte_end":8745,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10459,"byte_end":10463,"line_start":342,"line_end":342,"column_start":24,"column_end":28},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\approx-0.3.2\\src\\lib.rs","byte_start":10700,"byte_end":10704,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}}]}