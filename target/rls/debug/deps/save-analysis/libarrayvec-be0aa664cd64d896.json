{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","arrayvec","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=be0aa664cd64d896","-C","extra-filename=-be0aa664cd64d896","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","nodrop=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnodrop-18444182de76378b.rmeta","--cap-lints","allow","--cfg","has_stable_maybe_uninit","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libarrayvec-be0aa664cd64d896.rmeta"},"prelude":{"crate_id":{"name":"arrayvec","disambiguator":[6543394233664560307,17017585260114543812]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","num":14,"id":{"name":"nodrop","disambiguator":[7097596393523900264,609746783444761983]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":0,"byte_end":30381,"line_start":1,"line_end":1084,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":1719,"byte_end":1724,"line_start":73,"line_end":73,"column_start":16,"column_end":21},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":1741,"byte_end":1754,"line_start":74,"line_end":74,"column_start":16,"column_end":29},"alias_span":null,"name":"RangeArgument","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":1796,"byte_end":1807,"line_start":76,"line_end":76,"column_start":23,"column_end":34},"alias_span":null,"name":"ArrayString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":1825,"byte_end":1838,"line_start":77,"line_end":77,"column_start":17,"column_end":30},"alias_span":null,"name":"CapacityError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":0,"byte_end":30381,"line_start":1,"line_end":1084,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":63},{"krate":0,"index":174},{"krate":0,"index":185},{"krate":0,"index":202},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":264},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":280},{"krate":0,"index":286},{"krate":0,"index":291},{"krate":0,"index":295},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":334},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":346},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":408},{"krate":0,"index":411}],"decl_id":null,"docs":" **arrayvec** provides the types `ArrayVec` and `ArrayString`: \n array-backed vector and string types, which store their contents inline.\n\n The arrayvec package has the following cargo features:\n\n - `std`\n   - Optional, enabled by default\n   - Use libstd; disable to use `no_std` instead.\n\n - `serde-1`\n   - Optional\n   - Enable serialization for ArrayVec and ArrayString using serde 1.0\n - `array-sizes-33-128`, `array-sizes-129-255`\n   - Optional\n   - Enable more array sizes (see [Array] for more information)\n\n ## Rust Version\n\n This version of arrayvec requires Rust 1.13 or later.\n\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32163,"byte_end":32168,"line_start":15,"line_end":15,"column_start":18,"column_end":23},"name":"Array","qualname":"::array::Array","value":"Array","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Trait for fixed size arrays.\n\n This trait is implemented for some specific array sizes, see\n the implementor list below. At the current state of Rust we can't\n make this fully general for every array size.\n\n The following crate features add more array sizes (and they are not\n enabled by default due to their impact on compliation speed).\n\n - `array-sizes-33-128`: All sizes 33 to 128 are implemented\n   (a few in this range are included by default).\n - `array-sizes-129-255`: All sizes 129 to 255 are implemented\n   (a few in this range are included by default).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32215,"byte_end":32219,"line_start":17,"line_end":17,"column_start":10,"column_end":14},"name":"Item","qualname":"::array::Array::Item","value":"type Item;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" The array’s element type\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32305,"byte_end":32310,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Index","qualname":"::array::Array::Index","value":"type Index: Index;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" The smallest index type that indexes the array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32345,"byte_end":32351,"line_start":22,"line_end":22,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::array::Array::as_ptr","value":"fn (&self) -> *const Self::Item","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32407,"byte_end":32417,"line_start":24,"line_end":24,"column_start":8,"column_end":18},"name":"as_mut_ptr","qualname":"::array::Array::as_mut_ptr","value":"fn (&mut self) -> *mut Self::Item","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32475,"byte_end":32483,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"capacity","qualname":"::array::Array::capacity","value":"fn () -> usize","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32509,"byte_end":32514,"line_start":29,"line_end":29,"column_start":11,"column_end":16},"name":"Index","qualname":"::array::Index","value":"Index: PartialEq + Copy","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32543,"byte_end":32551,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::array::Index::to_usize","value":"fn (self) -> usize","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32575,"byte_end":32579,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"from","qualname":"::array::Index::from","value":"fn (usize) -> Self","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":36735,"byte_end":36746,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"ArrayString","qualname":"::array_string::ArrayString","value":"ArrayString {  }","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"decl_id":null,"docs":" A string with a fixed capacity.\n\n The `ArrayString` is a string backed by a fixed size array. It keeps track\n of its length.\n\n The string is a contiguous value that you can store directly on the stack\n if needed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":37419,"byte_end":37422,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayString<A>>::new","value":"fn () -> ArrayString<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ArrayString`.\n\n Capacity is inferred from the type parameter.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 16]>::new();\n string.push_str(\"foo\");\n assert_eq!(&string[..], \"foo\");\n assert_eq!(string.capacity(), 16);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":38128,"byte_end":38132,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"from","qualname":"<ArrayString<A>>::from","value":"fn (s: &str) -> Result<Self, CapacityError<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ArrayString` from a `str`.\n\n Capacity is inferred from the type parameter.\n\n **Errors** if the backing array is not large enough to fit the string.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 3]>::from(\"foo\").unwrap();\n assert_eq!(&string[..], \"foo\");\n assert_eq!(string.len(), 3);\n assert_eq!(string.capacity(), 3);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":38584,"byte_end":38600,"line_start":93,"line_end":93,"column_start":12,"column_end":28},"name":"from_byte_string","qualname":"<ArrayString<A>>::from_byte_string","value":"fn (b: &A) -> Result<Self, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ArrayString` from a byte string literal.\n\n **Errors** if the byte string literal is not valid UTF-8.\n\n ```\n use arrayvec::ArrayString;\n\n let string = ArrayString::from_byte_string(b\"hello world\").unwrap();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":39088,"byte_end":39096,"line_start":110,"line_end":110,"column_start":12,"column_end":20},"name":"capacity","qualname":"<ArrayString<A>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the capacity of the `ArrayString`.\n\n ```\n use arrayvec::ArrayString;\n\n let string = ArrayString::<[_; 3]>::new();\n assert_eq!(string.capacity(), 3);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":39067,"byte_end":39076,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":39432,"byte_end":39439,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"is_full","qualname":"<ArrayString<A>>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the `ArrayString` is completely filled.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 1]>::new();\n assert!(!string.is_full());\n string.push_str(\"A\");\n assert!(string.is_full());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":39890,"byte_end":39894,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"push","qualname":"<ArrayString<A>>::push","value":"fn (&mut self, c: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds the given char to the end of the string.\n\n ***Panics*** if the backing array is not large enough to fit the additional char.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 2]>::new();\n\n string.push('a');\n string.push('b');\n\n assert_eq!(&string[..], \"ab\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":40537,"byte_end":40545,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"try_push","qualname":"<ArrayString<A>>::try_push","value":"fn (&mut self, c: char) -> Result<(), CapacityError<char>>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given char to the end of the string.\n\n Returns `Ok` if the push succeeds.\n\n **Errors** if the backing array is not large enough to fit the additional char.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 2]>::new();\n\n string.try_push('a').unwrap();\n string.try_push('b').unwrap();\n let overflow = string.try_push('c');\n\n assert_eq!(&string[..], \"ab\");\n assert_eq!(overflow.unwrap_err().element(), 'c');\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":41326,"byte_end":41334,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"push_str","qualname":"<ArrayString<A>>::push_str","value":"fn (&mut self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds the given string slice to the end of the string.\n\n ***Panics*** if the backing array is not large enough to fit the string.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 2]>::new();\n\n string.push_str(\"a\");\n string.push_str(\"d\");\n\n assert_eq!(&string[..], \"ad\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":42106,"byte_end":42118,"line_start":211,"line_end":211,"column_start":12,"column_end":24},"name":"try_push_str","qualname":"<ArrayString<A>>::try_push_str","value":"fn <'a> (&mut self, s: &'a str) -> Result<(), CapacityError<&'a str>>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given string slice to the end of the string.\n\n Returns `Ok` if the push succeeds.\n\n **Errors** if the backing array is not large enough to fit the string.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 2]>::new();\n\n string.try_push_str(\"a\").unwrap();\n let overflow1 = string.try_push_str(\"bc\");\n string.try_push_str(\"d\").unwrap();\n let overflow2 = string.try_push_str(\"ef\");\n\n assert_eq!(&string[..], \"ad\");\n assert_eq!(overflow1.unwrap_err().element(), \"bc\");\n assert_eq!(overflow2.unwrap_err().element(), \"ef\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":43051,"byte_end":43054,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"pop","qualname":"<ArrayString<A>>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string and returns it.\n\n Returns `None` if this `ArrayString` is empty.\n\n ```\n use arrayvec::ArrayString;\n \n let mut s = ArrayString::<[_; 3]>::from(\"foo\").unwrap();\n\n assert_eq!(s.pop(), Some('o'));\n assert_eq!(s.pop(), Some('o'));\n assert_eq!(s.pop(), Some('f'));\n\n assert_eq!(s.pop(), None);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":43030,"byte_end":43039,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":43894,"byte_end":43902,"line_start":270,"line_end":270,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ArrayString<A>>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `ArrayString` to the specified length.\n\n If `new_len` is greater than the string’s current length, this has no\n effect.\n\n ***Panics*** if `new_len` does not lie on a `char` boundary.\n\n ```\n use arrayvec::ArrayString;\n\n let mut string = ArrayString::<[_; 6]>::from(\"foobar\").unwrap();\n string.truncate(3);\n assert_eq!(&string[..], \"foo\");\n string.truncate(4);\n assert_eq!(&string[..], \"foo\");\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":43873,"byte_end":43882,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":44988,"byte_end":44994,"line_start":301,"line_end":301,"column_start":12,"column_end":18},"name":"remove","qualname":"<ArrayString<A>>::remove","value":"fn (&mut self, idx: usize) -> char","parent":null,"children":[],"decl_id":null,"docs":" Removes a `char` from this `ArrayString` at a byte position and returns it.\n\n This is an `O(n)` operation, as it requires copying every element in the\n array.\n\n ***Panics*** if `idx` is larger than or equal to the `ArrayString`’s length,\n or if it does not lie on a `char` boundary.\n\n ```\n use arrayvec::ArrayString;\n \n let mut s = ArrayString::<[_; 3]>::from(\"foo\").unwrap();\n\n assert_eq!(s.remove(0), 'f');\n assert_eq!(s.remove(1), 'o');\n assert_eq!(s.remove(0), 'o');\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":44967,"byte_end":44976,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":45562,"byte_end":45567,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"name":"clear","qualname":"<ArrayString<A>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Make the string empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":45987,"byte_end":45994,"line_start":333,"line_end":333,"column_start":19,"column_end":26},"name":"set_len","qualname":"<ArrayString<A>>::set_len","value":"fn (&mut self, length: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the strings’s length.\n\n This function is `unsafe` because it changes the notion of the\n number of “valid” bytes in the string. Use with care.\n\n This method uses *debug assertions* to check the validity of `length`\n and may use other debug assertions.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":45959,"byte_end":45968,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":46189,"byte_end":46195,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"as_str","qualname":"<ArrayString<A>>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return a string slice of the whole `ArrayString`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":53994,"byte_end":54007,"line_start":14,"line_end":14,"column_start":11,"column_end":24},"name":"RangeArgument","qualname":"::range::RangeArgument","value":"RangeArgument","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":" `RangeArgument` is implemented by Rust's built-in range types, produced\n by range syntax like `..`, `a..`, `..b` or `c..d`.\n\n Note: This is arrayvec's provisional trait, waiting for stable Rust to\n provide an equivalent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54063,"byte_end":54068,"line_start":17,"line_end":17,"column_start":8,"column_end":13},"name":"start","qualname":"::range::RangeArgument::start","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Start index (inclusive)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54014,"byte_end":54023,"line_start":15,"line_end":15,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54153,"byte_end":54156,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"end","qualname":"::range::RangeArgument::end","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" End index (exclusive)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54106,"byte_end":54115,"line_start":18,"line_end":18,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":54857,"byte_end":54870,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"CapacityError","qualname":"::errors::CapacityError","value":"CapacityError {  }","parent":null,"children":[{"krate":0,"index":879}],"decl_id":null,"docs":" Error value indicating insufficient capacity\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":54991,"byte_end":54994,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<CapacityError<T>>::new","value":"fn (element: T) -> CapacityError<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CapacityError` from `element`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55151,"byte_end":55158,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"element","qualname":"<CapacityError<T>>::element","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Extract the overflowing element\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55282,"byte_end":55290,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"simplify","qualname":"<CapacityError<T>>::simplify","value":"fn (self) -> CapacityError","parent":null,"children":[],"decl_id":null,"docs":" Convert into a `CapacityError` that does not carry an element.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":2279,"byte_end":2287,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"ArrayVec","qualname":"::ArrayVec","value":"ArrayVec {  }","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229}],"decl_id":null,"docs":" A vector with a fixed capacity.\n\n The `ArrayVec` is a vector backed by a fixed size array. It keeps track of\n the number of initialized elements.\n\n The vector is a contiguous value that you can store directly on the stack\n if needed.\n\n It offers a simple API but also dereferences to a slice, so\n that the full slice API is available.\n\n ArrayVec can be converted into a by value iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":3220,"byte_end":3223,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayVec<A>>::new","value":"fn () -> ArrayVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ArrayVec`.\n\n Capacity is inferred from the type parameter.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 16]>::new();\n array.push(1);\n array.push(2);\n assert_eq!(&array[..], &[1, 2]);\n assert_eq!(array.capacity(), 16);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":3618,"byte_end":3621,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"len","qualname":"<ArrayVec<A>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the `ArrayVec`.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3]);\n array.pop();\n assert_eq!(array.len(), 2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":3597,"byte_end":3606,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":3895,"byte_end":3903,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"capacity","qualname":"<ArrayVec<A>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the capacity of the `ArrayVec`.\n\n ```\n use arrayvec::ArrayVec;\n\n let array = ArrayVec::from([1, 2, 3]);\n assert_eq!(array.capacity(), 3);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":3874,"byte_end":3883,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":4220,"byte_end":4227,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"is_full","qualname":"<ArrayVec<A>>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the `ArrayVec` is completely filled.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 1]>::new();\n assert!(!array.is_full());\n array.push(1);\n assert!(array.is_full());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":4624,"byte_end":4628,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"push","qualname":"<ArrayVec<A>>::push","value":"fn (&mut self, element: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push `element` to the end of the vector.\n\n ***Panics*** if the vector is already full.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n array.push(1);\n array.push(2);\n\n assert_eq!(&array[..], &[1, 2]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":5299,"byte_end":5307,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"try_push","qualname":"<ArrayVec<A>>::try_push","value":"fn (&mut self, element: A::Item) -> Result<(), CapacityError<A::Item>>","parent":null,"children":[],"decl_id":null,"docs":" Push `element` to the end of the vector.\n\n Return `Ok` if the push succeeds, or return an error if the vector\n is already full.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n let push1 = array.try_push(1);\n let push2 = array.try_push(2);\n\n assert!(push1.is_ok());\n assert!(push2.is_ok());\n\n assert_eq!(&array[..], &[1, 2]);\n\n let overflow = array.try_push(3);\n\n assert!(overflow.is_err());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":6263,"byte_end":6277,"line_start":243,"line_end":243,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<ArrayVec<A>>::push_unchecked","value":"fn (&mut self, element: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push `element` to the end of the vector without checking the capacity.\n\n It is up to the caller to ensure the capacity of the vector is\n sufficiently large.\n\n This method uses *debug assertions* to check that the arrayvec is not full.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n if array.len() + 2 <= array.capacity() {\n     unsafe {\n         array.push_unchecked(1);\n         array.push_unchecked(2);\n     }\n }\n\n assert_eq!(&array[..], &[1, 2]);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":6235,"byte_end":6244,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":7258,"byte_end":7264,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"insert","qualname":"<ArrayVec<A>>::insert","value":"fn (&mut self, index: usize, element: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `element` at position `index`.\n\n Shift up all elements after `index`.\n\n It is an error if the index is greater than the length or if the\n arrayvec is full.\n\n ***Panics*** if the array is full or the `index` is out of bounds. See\n `try_insert` for fallible version.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n array.insert(0, \"x\");\n array.insert(0, \"y\");\n assert_eq!(&array[..], &[\"y\", \"x\"]);\n\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":8003,"byte_end":8013,"line_start":299,"line_end":299,"column_start":12,"column_end":22},"name":"try_insert","qualname":"<ArrayVec<A>>::try_insert","value":"fn (&mut self, index: usize, element: A::Item) -> Result<(), CapacityError<A::Item>>","parent":null,"children":[],"decl_id":null,"docs":" Insert `element` at position `index`.\n\n Shift up all elements after `index`; the `index` must be less than\n or equal to the length.\n\n Returns an error if vector is already at full capacity.\n\n ***Panics*** `index` is out of bounds.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n assert!(array.try_insert(0, \"x\").is_ok());\n assert!(array.try_insert(0, \"y\").is_ok());\n assert!(array.try_insert(0, \"z\").is_err());\n assert_eq!(&array[..], &[\"y\", \"x\"]);\n\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":9346,"byte_end":9349,"line_start":339,"line_end":339,"column_start":12,"column_end":15},"name":"pop","qualname":"<ArrayVec<A>>::pop","value":"fn (&mut self) -> Option<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last element in the vector and return it.\n\n Return `Some(` *element* `)` if the vector is non-empty, else `None`.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::<[_; 2]>::new();\n\n array.push(1);\n\n assert_eq!(array.pop(), Some(1));\n assert_eq!(array.pop(), None);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":10194,"byte_end":10205,"line_start":369,"line_end":369,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<ArrayVec<A>>::swap_remove","value":"fn (&mut self, index: usize) -> A::Item","parent":null,"children":[],"decl_id":null,"docs":" Remove the element at `index` and swap the last element into its place.\n\n This operation is O(1).\n\n Return the *element* if the index is in bounds, else panic.\n\n ***Panics*** if the `index` is out of bounds.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3]);\n\n assert_eq!(array.swap_remove(0), 1);\n assert_eq!(&array[..], &[3, 2]);\n\n assert_eq!(array.swap_remove(1), 2);\n assert_eq!(&array[..], &[3]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":10934,"byte_end":10942,"line_start":393,"line_end":393,"column_start":12,"column_end":20},"name":"swap_pop","qualname":"<ArrayVec<A>>::swap_pop","value":"fn (&mut self, index: usize) -> Option<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Remove the element at `index` and swap the last element into its place.\n\n This is a checked version of `.swap_remove`.  \n This operation is O(1).\n\n Return `Some(` *element* `)` if the index is in bounds, else `None`.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3]);\n\n assert_eq!(array.swap_pop(0), Some(1));\n assert_eq!(&array[..], &[3, 2]);\n\n assert_eq!(array.swap_pop(10), None);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":11623,"byte_end":11629,"line_start":417,"line_end":417,"column_start":12,"column_end":18},"name":"remove","qualname":"<ArrayVec<A>>::remove","value":"fn (&mut self, index: usize) -> A::Item","parent":null,"children":[],"decl_id":null,"docs":" Remove the element at `index` and shift down the following elements.\n\n The `index` must be strictly less than the length of the vector.\n\n ***Panics*** if the `index` is out of bounds.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3]);\n\n let removed_elt = array.remove(0);\n assert_eq!(removed_elt, 1);\n assert_eq!(&array[..], &[2, 3]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":12373,"byte_end":12379,"line_start":440,"line_end":440,"column_start":12,"column_end":18},"name":"pop_at","qualname":"<ArrayVec<A>>::pop_at","value":"fn (&mut self, index: usize) -> Option<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Remove the element at `index` and shift down the following elements.\n\n This is a checked version of `.remove(index)`. Returns `None` if there\n is no element at `index`. Otherwise, return the element inside `Some`.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3]);\n\n assert!(array.pop_at(0).is_some());\n assert_eq!(&array[..], &[2, 3]);\n\n assert!(array.pop_at(2).is_none());\n assert!(array.pop_at(10).is_none());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":13032,"byte_end":13040,"line_start":463,"line_end":463,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ArrayVec<A>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping\n the rest.\n\n If `len` is greater than the vector’s current length this has no\n effect.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3, 4, 5]);\n array.truncate(3);\n assert_eq!(&array[..], &[1, 2, 3]);\n array.truncate(4);\n assert_eq!(&array[..], &[1, 2, 3]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":13174,"byte_end":13179,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"clear","qualname":"<ArrayVec<A>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":13712,"byte_end":13718,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"retain","qualname":"<ArrayVec<A>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.\n\n In other words, remove all elements `e` such that `f(&mut e)` returns false.\n This method operates in place and preserves the order of the retained\n elements.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut array = ArrayVec::from([1, 2, 3, 4]);\n array.retain(|x| *x & 1 != 0 );\n assert_eq!(&array[..], &[1, 3]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":14561,"byte_end":14568,"line_start":514,"line_end":514,"column_start":19,"column_end":26},"name":"set_len","qualname":"<ArrayVec<A>>::set_len","value":"fn (&mut self, length: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the vector’s length without dropping or moving out elements\n\n This method is `unsafe` because it changes the notion of the\n number of “valid” elements in the vector. Use with care.\n\n This method uses *debug assertions* to check that check that `length` is\n not greater than the capacity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":14533,"byte_end":14542,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":15457,"byte_end":15462,"line_start":537,"line_end":537,"column_start":12,"column_end":17},"name":"drain","qualname":"<ArrayVec<A>>::drain","value":"fn <R> (&mut self, range: R) -> Drain<A>","parent":null,"children":[],"decl_id":null,"docs":" Create a draining iterator that removes the specified range in the vector\n and yields the removed items from start to end. The element range is\n removed even if the iterator is not consumed until the end.\n\n Note: It is unspecified how many elements are removed from the vector,\n if the `Drain` value is leaked.\n\n **Panics** if the starting point is greater than the end point or if\n the end point is greater than the length of the vector.\n\n ```\n use arrayvec::ArrayVec;\n\n let mut v = ArrayVec::from([1, 2, 3]);\n let u: ArrayVec<[_; 3]> = v.drain(0..2).collect();\n assert_eq!(&v[..], &[3]);\n assert_eq!(&u[..], &[1, 2]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":16915,"byte_end":16925,"line_start":573,"line_end":573,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ArrayVec<A>>::into_inner","value":"fn (self) -> Result<A, Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the inner fixed size array, if it is full to its capacity.\n\n Return an `Ok` value with the array if length equals capacity,\n return an `Err` with self otherwise.\n\n `Note:` This function may incur unproportionally large overhead\n to move the array out, its performance is not optimal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17298,"byte_end":17305,"line_start":586,"line_end":586,"column_start":12,"column_end":19},"name":"dispose","qualname":"<ArrayVec<A>>::dispose","value":"fn (mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Dispose of `self` without the overwriting that is needed in Drop.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17447,"byte_end":17455,"line_start":592,"line_end":592,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ArrayVec<A>>::as_slice","value":"fn (&self) -> &[A::Item]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice containing all elements of the vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17580,"byte_end":17592,"line_start":597,"line_end":597,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<ArrayVec<A>>::as_mut_slice","value":"fn (&mut self) -> &mut [A::Item]","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable slice containing all elements of the vector.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":19761,"byte_end":19769,"line_start":693,"line_end":693,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" By-value iterator for `ArrayVec`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":21836,"byte_end":21841,"line_start":777,"line_end":777,"column_start":12,"column_end":17},"name":"Drain","qualname":"::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"decl_id":null,"docs":" A draining iterator for `ArrayVec`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\maybe_uninit_stable.rs","byte_start":30518,"byte_end":30529,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32844,"byte_end":32845,"line_start":45,"line_end":45,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":36889,"byte_end":36900,"line_start":34,"line_end":34,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":37041,"byte_end":37052,"line_start":41,"line_end":41,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":46465,"byte_end":46476,"line_start":349,"line_end":349,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":46746,"byte_end":46757,"line_start":360,"line_end":360,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47080,"byte_end":47091,"line_start":371,"line_end":371,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47212,"byte_end":47223,"line_start":377,"line_end":377,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47471,"byte_end":47482,"line_start":389,"line_end":389,"column_start":32,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47524,"byte_end":47535,"line_start":391,"line_end":391,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47658,"byte_end":47669,"line_start":397,"line_end":397,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47755,"byte_end":47766,"line_start":401,"line_end":401,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47852,"byte_end":47863,"line_start":405,"line_end":405,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47990,"byte_end":48001,"line_start":409,"line_end":409,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48185,"byte_end":48196,"line_start":414,"line_end":414,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48470,"byte_end":48481,"line_start":424,"line_end":424,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48749,"byte_end":48760,"line_start":435,"line_end":435,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":49147,"byte_end":49158,"line_start":445,"line_end":445,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":49961,"byte_end":49972,"line_start":465,"line_end":465,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54217,"byte_end":54226,"line_start":24,"line_end":24,"column_start":24,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54254,"byte_end":54263,"line_start":26,"line_end":26,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54371,"byte_end":54378,"line_start":31,"line_end":31,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54482,"byte_end":54487,"line_start":36,"line_end":36,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":54908,"byte_end":54921,"line_start":13,"line_end":13,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55496,"byte_end":55509,"line_start":36,"line_end":36,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55602,"byte_end":55615,"line_start":42,"line_end":42,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55746,"byte_end":55759,"line_start":48,"line_end":48,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":2370,"byte_end":2378,"line_start":97,"line_end":97,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":2841,"byte_end":2849,"line_start":114,"line_end":114,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17671,"byte_end":17679,"line_start":602,"line_end":602,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17889,"byte_end":17897,"line_start":612,"line_end":612,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":18328,"byte_end":18336,"line_start":631,"line_end":631,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":19537,"byte_end":19545,"line_start":683,"line_end":683,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":19854,"byte_end":19862,"line_start":698,"line_end":698,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20426,"byte_end":20434,"line_start":720,"line_end":720,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20822,"byte_end":20830,"line_start":735,"line_end":735,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20863,"byte_end":20871,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":21311,"byte_end":21319,"line_start":752,"line_end":752,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":21572,"byte_end":21580,"line_start":765,"line_end":765,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22146,"byte_end":22151,"line_start":790,"line_end":790,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22204,"byte_end":22209,"line_start":791,"line_end":791,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22253,"byte_end":22258,"line_start":793,"line_end":793,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22656,"byte_end":22661,"line_start":813,"line_end":813,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22938,"byte_end":22943,"line_start":826,"line_end":826,"column_start":42,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":23001,"byte_end":23006,"line_start":828,"line_end":828,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":23914,"byte_end":23928,"line_start":860,"line_end":860,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":24257,"byte_end":24265,"line_start":874,"line_end":874,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":25418,"byte_end":25426,"line_start":904,"line_end":904,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":25616,"byte_end":25624,"line_start":912,"line_end":912,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26245,"byte_end":26253,"line_start":936,"line_end":936,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26403,"byte_end":26411,"line_start":944,"line_end":944,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26562,"byte_end":26570,"line_start":952,"line_end":952,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26707,"byte_end":26715,"line_start":960,"line_end":960,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26779,"byte_end":26787,"line_start":962,"line_end":962,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26880,"byte_end":26888,"line_start":966,"line_end":966,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26989,"byte_end":26997,"line_start":970,"line_end":970,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27086,"byte_end":27094,"line_start":974,"line_end":974,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27185,"byte_end":27193,"line_start":978,"line_end":978,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27332,"byte_end":27340,"line_start":982,"line_end":982,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27473,"byte_end":27481,"line_start":989,"line_end":989,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":28025,"byte_end":28033,"line_start":1016,"line_end":1016,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":28307,"byte_end":28315,"line_start":1026,"line_end":1026,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\maybe_uninit_stable.rs","byte_start":30518,"byte_end":30529,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32517,"byte_end":32526,"line_start":29,"line_end":29,"column_start":19,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":40}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32529,"byte_end":32533,"line_start":29,"line_end":29,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":40}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32655,"byte_end":32660,"line_start":36,"line_end":36,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":34},"to":{"krate":0,"index":45}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array.rs","byte_start":32844,"byte_end":32845,"line_start":45,"line_end":45,"column_start":22,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":45}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":36889,"byte_end":36900,"line_start":34,"line_end":34,"column_start":37,"column_end":48},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":37041,"byte_end":37052,"line_start":41,"line_end":41,"column_start":25,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":46465,"byte_end":46476,"line_start":349,"line_end":349,"column_start":35,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":46746,"byte_end":46757,"line_start":360,"line_end":360,"column_start":38,"column_end":49},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47080,"byte_end":47091,"line_start":371,"line_end":371,"column_start":39,"column_end":50},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47212,"byte_end":47223,"line_start":377,"line_end":377,"column_start":44,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47471,"byte_end":47482,"line_start":389,"line_end":389,"column_start":32,"column_end":43},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47524,"byte_end":47535,"line_start":391,"line_end":391,"column_start":34,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47658,"byte_end":47669,"line_start":397,"line_end":397,"column_start":41,"column_end":52},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47755,"byte_end":47766,"line_start":401,"line_end":401,"column_start":40,"column_end":51},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47852,"byte_end":47863,"line_start":405,"line_end":405,"column_start":40,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":47990,"byte_end":48001,"line_start":409,"line_end":409,"column_start":42,"column_end":53},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48185,"byte_end":48196,"line_start":414,"line_end":414,"column_start":40,"column_end":51},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":7602}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48470,"byte_end":48481,"line_start":424,"line_end":424,"column_start":42,"column_end":53},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":48749,"byte_end":48760,"line_start":435,"line_end":435,"column_start":40,"column_end":51},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":49147,"byte_end":49158,"line_start":445,"line_end":445,"column_start":45,"column_end":56},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\array_string.rs","byte_start":49961,"byte_end":49972,"line_start":465,"line_end":465,"column_start":33,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":871},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54217,"byte_end":54226,"line_start":24,"line_end":24,"column_start":24,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":2,"index":26852},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54254,"byte_end":54263,"line_start":26,"line_end":26,"column_start":24,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":2,"index":26888},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54371,"byte_end":54378,"line_start":31,"line_end":31,"column_start":24,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":2,"index":26909},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\range.rs","byte_start":54482,"byte_end":54487,"line_start":36,"line_end":36,"column_start":24,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":2,"index":26866},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":54908,"byte_end":54921,"line_start":13,"line_end":13,"column_start":9,"column_end":22},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55496,"byte_end":55509,"line_start":36,"line_end":36,"column_start":24,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":877},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55602,"byte_end":55615,"line_start":42,"line_end":42,"column_start":26,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":877},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\errors.rs","byte_start":55746,"byte_end":55759,"line_start":48,"line_end":48,"column_start":24,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":877},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":2370,"byte_end":2378,"line_start":97,"line_end":97,"column_start":25,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":2841,"byte_end":2849,"line_start":114,"line_end":114,"column_start":16,"column_end":24},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17671,"byte_end":17679,"line_start":602,"line_end":602,"column_start":26,"column_end":34},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":17889,"byte_end":17897,"line_start":612,"line_end":612,"column_start":29,"column_end":37},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":18328,"byte_end":18336,"line_start":631,"line_end":631,"column_start":28,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":19537,"byte_end":19545,"line_start":683,"line_end":683,"column_start":33,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3951}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":19854,"byte_end":19862,"line_start":698,"line_end":698,"column_start":29,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20426,"byte_end":20434,"line_start":720,"line_end":720,"column_start":40,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20822,"byte_end":20830,"line_start":735,"line_end":735,"column_start":38,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":20863,"byte_end":20871,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":21311,"byte_end":21319,"line_start":752,"line_end":752,"column_start":26,"column_end":34},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":21572,"byte_end":21580,"line_start":765,"line_end":765,"column_start":31,"column_end":39},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22146,"byte_end":22151,"line_start":790,"line_end":790,"column_start":43,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22204,"byte_end":22209,"line_start":791,"line_end":791,"column_start":43,"column_end":48},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22253,"byte_end":22258,"line_start":793,"line_end":793,"column_start":33,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22656,"byte_end":22661,"line_start":813,"line_end":813,"column_start":44,"column_end":49},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":22938,"byte_end":22943,"line_start":826,"line_end":826,"column_start":42,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":23001,"byte_end":23006,"line_start":828,"line_end":828,"column_start":29,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":314},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":23914,"byte_end":23928,"line_start":860,"line_end":860,"column_start":27,"column_end":41},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":346},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":24257,"byte_end":24265,"line_start":874,"line_end":874,"column_start":36,"column_end":44},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":25418,"byte_end":25426,"line_start":904,"line_end":904,"column_start":48,"column_end":56},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3947}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":25616,"byte_end":25624,"line_start":912,"line_end":912,"column_start":26,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26245,"byte_end":26253,"line_start":936,"line_end":936,"column_start":25,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26403,"byte_end":26411,"line_start":944,"line_end":944,"column_start":30,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26562,"byte_end":26570,"line_start":952,"line_end":952,"column_start":41,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26707,"byte_end":26715,"line_start":960,"line_end":960,"column_start":23,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26779,"byte_end":26787,"line_start":962,"line_end":962,"column_start":38,"column_end":46},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26880,"byte_end":26888,"line_start":966,"line_end":966,"column_start":41,"column_end":49},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2328}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":26989,"byte_end":26997,"line_start":970,"line_end":970,"column_start":37,"column_end":45},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27086,"byte_end":27094,"line_start":974,"line_end":974,"column_start":37,"column_end":45},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2252}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27185,"byte_end":27193,"line_start":978,"line_end":978,"column_start":31,"column_end":39},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27332,"byte_end":27340,"line_start":982,"line_end":982,"column_start":28,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":27473,"byte_end":27481,"line_start":989,"line_end":989,"column_start":31,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":28025,"byte_end":28033,"line_start":1016,"line_end":1016,"column_start":24,"column_end":32},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\arrayvec-0.4.12\\src\\lib.rs","byte_start":28307,"byte_end":28315,"line_start":1026,"line_end":1026,"column_start":39,"column_end":47},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":226},"to":{"krate":1,"index":2903}}]}