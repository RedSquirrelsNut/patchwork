{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","backtrace","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"backtrace-sys\"","--cfg","feature=\"dbghelp\"","--cfg","feature=\"default\"","--cfg","feature=\"dladdr\"","--cfg","feature=\"libbacktrace\"","--cfg","feature=\"libunwind\"","--cfg","feature=\"std\"","-C","metadata=6d1b0ddfa29f8cd0","-C","extra-filename=-6d1b0ddfa29f8cd0","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","backtrace_sys=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbacktrace_sys-a2bbfa2375498123.rmeta","--extern","cfg_if=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcfg_if-2fc5ec101de62cb7.rmeta","--extern","libc=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblibc-2255fea2c26f5573.rmeta","--extern","rustc_demangle=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librustc_demangle-1892f0a90635b225.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbacktrace-6d1b0ddfa29f8cd0.rmeta"},"prelude":{"crate_id":{"name":"backtrace","disambiguator":[4081245599486101636,15110426415547361709]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[11556819724398783699,7640034588614552800]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","num":15,"id":{"name":"cfg_if","disambiguator":[17449466799846026439,9910330128128269589]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":0,"byte_end":4549,"line_start":1,"line_end":159,"column_start":1,"column_end":13}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2566,"byte_end":2586,"line_start":79,"line_end":79,"column_start":28,"column_end":48},"alias_span":null,"name":"trace_unsynchronized","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2588,"byte_end":2593,"line_start":79,"line_end":79,"column_start":50,"column_end":55},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2638,"byte_end":2666,"line_start":82,"line_end":82,"column_start":27,"column_end":55},"alias_span":null,"name":"resolve_frame_unsynchronized","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2695,"byte_end":2717,"line_start":83,"line_end":83,"column_start":28,"column_end":50},"alias_span":null,"name":"resolve_unsynchronized","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2719,"byte_end":2725,"line_start":83,"line_end":83,"column_start":52,"column_end":58},"alias_span":null,"name":"Symbol","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2727,"byte_end":2737,"line_start":83,"line_end":83,"column_start":60,"column_end":70},"alias_span":null,"name":"SymbolName","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2778,"byte_end":2795,"line_start":86,"line_end":86,"column_start":23,"column_end":40},"alias_span":null,"name":"BytesOrWideString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2859,"byte_end":2877,"line_start":90,"line_end":90,"column_start":27,"column_end":45},"alias_span":null,"name":"clear_symbol_cache","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2907,"byte_end":2919,"line_start":93,"line_end":93,"column_start":17,"column_end":29},"alias_span":null,"name":"BacktraceFmt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2921,"byte_end":2938,"line_start":93,"line_end":93,"column_start":31,"column_end":48},"alias_span":null,"name":"BacktraceFrameFmt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2940,"byte_end":2948,"line_start":93,"line_end":93,"column_start":50,"column_end":58},"alias_span":null,"name":"PrintFmt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3037,"byte_end":3042,"line_start":97,"line_end":97,"column_start":35,"column_end":40},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3079,"byte_end":3086,"line_start":98,"line_end":98,"column_start":36,"column_end":43},"alias_span":null,"name":"resolve","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3088,"byte_end":3101,"line_start":98,"line_end":98,"column_start":45,"column_end":58},"alias_span":null,"name":"resolve_frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3137,"byte_end":3146,"line_start":99,"line_end":99,"column_start":34,"column_end":43},"alias_span":null,"name":"Backtrace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3148,"byte_end":3162,"line_start":99,"line_end":99,"column_start":45,"column_end":59},"alias_span":null,"name":"BacktraceFrame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3164,"byte_end":3179,"line_start":99,"line_end":99,"column_start":61,"column_end":76},"alias_span":null,"name":"BacktraceSymbol","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":0,"byte_end":4549,"line_start":1,"line_end":159,"column_start":1,"column_end":13},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":25},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":131},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":338},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":158},{"krate":0,"index":174}],"decl_id":null,"docs":" A library for acquiring a backtrace at runtime\n\n This library is meant to supplement the `RUST_BACKTRACE=1` support of the\n standard library by allowing an acquisition of a backtrace at runtime\n programmatically. The backtraces generated by this library do not need to be\n parsed, for example, and expose the functionality of multiple backend\n implementations.\n\n # Implementation\n\n This library makes use of a number of strategies for actually acquiring a\n backtrace. For example unix uses libgcc's libunwind bindings by default to\n acquire a backtrace, but coresymbolication or dladdr is used on OSX to\n acquire symbol names while linux uses gcc's libbacktrace.\n\n When using the default feature set of this library the \"most reasonable\" set\n of defaults is chosen for the current platform, but the features activated\n can also be controlled at a finer granularity.\n\n # API Principles\n\n This library attempts to be as flexible as possible to accommodate different\n backend implementations of acquiring a backtrace. Consequently the currently\n exported functions are closure-based as opposed to the likely expected\n iterator-based versions. This is done due to limitations of the underlying\n APIs used from the system.\n\n # Usage\n\n First, add this to your Cargo.toml\n\n ```toml\n [dependencies]\n backtrace = \"0.3\"\n ```\n\n Next:\n\n ```\n extern crate backtrace;\n\n fn main() {\n # // Unsafe here so test passes on no_std.\n # #[cfg(feature = \"std\")] {\n     backtrace::trace(|frame| {\n         let ip = frame.ip();\n         let symbol_address = frame.symbol_address();\n\n         // Resolve this instruction pointer to a symbol name\n         backtrace::resolve_frame(frame, |symbol| {\n             if let Some(name) = symbol.name() {\n                 // ...\n             }\n             if let Some(filename) = symbol.filename() {\n                 // ...\n             }\n         });\n\n         true // keep going to the next frame\n     });\n }\n # }\n ```\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2182,"byte_end":2204,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2205,"byte_end":2215,"line_start":67,"line_end":67,"column_start":1,"column_end":11}},{"value":"allow(bare_trait_objects)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2332,"byte_end":2361,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"allow(rust_2018_idioms)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":2408,"byte_end":2435,"line_start":73,"line_end":73,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":6377,"byte_end":6382,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"trace","qualname":"::backtrace::trace","value":"fn <F> (cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inspects the current call-stack, passing all active frames into the closure\n provided to calculate a stack trace.\n\n This function is the workhorse of this library in calculating the stack\n traces for a program. The given closure `cb` is yielded instances of a\n `Frame` which represent information about that call frame on the stack. The\n closure is yielded frames in a top-down fashion (most recently called\n functions first).\n\n The closure's return value is an indication of whether the backtrace should\n continue. A return value of `false` will terminate the backtrace and return\n immediately.\n\n Once a `Frame` is acquired you will likely want to call `backtrace::resolve`\n to convert the `ip` (instruction pointer) or symbol address to a `Symbol`\n through which the name and/or filename/line number can be learned.\n\n Note that this is a relatively low-level function and if you'd like to, for\n example, capture a backtrace to be inspected later, then the `Backtrace`\n type may be more appropriate.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n\n # Panics\n\n This function strives to never panic, but if the `cb` provided panics then\n some platforms will force a double panic to abort the process. Some\n platforms use a C library which internally uses callbacks which cannot be\n unwound through, so panicking from `cb` may trigger a process abort.\n\n # Example\n\n ```\n extern crate backtrace;\n\n fn main() {\n     backtrace::trace(|frame| {\n         // ...\n\n         true // continue the backtrace\n     });\n }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":6346,"byte_end":6369,"line_start":50,"line_end":50,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":6859,"byte_end":6879,"line_start":65,"line_end":65,"column_start":15,"column_end":35},"name":"trace_unsynchronized","qualname":"::backtrace::trace_unsynchronized","value":"fn <F> (mut cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Same as `trace`, only unsafe as it's unsynchronized.\n\n This function does not have synchronization guarentees but is available\n when the `std` feature of this crate isn't compiled in. See the `trace`\n function for more documentation and examples.\n\n # Panics\n\n See information on `trace` for caveats on `cb` panicking.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":7252,"byte_end":7257,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"Frame","qualname":"::backtrace::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" A trait representing one frame of a backtrace, yielded to the `trace`\n function of this crate.\n\n The tracing function's closure will be yielded frames, and the frame is\n virtually dispatched as the underlying implementation is not always known\n until runtime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":7685,"byte_end":7687,"line_start":89,"line_end":89,"column_start":12,"column_end":14},"name":"ip","qualname":"<Frame>::ip","value":"fn (&self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Returns the current instruction pointer of this frame.\n\n This is normally the next instruction to execute in the frame, but not\n all implementations list this with 100% accuracy (but it's generally\n pretty close).\n\n It is recommended to pass this value to `backtrace::resolve` to turn it\n into a symbol name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":8178,"byte_end":8192,"line_start":101,"line_end":101,"column_start":12,"column_end":26},"name":"symbol_address","qualname":"<Frame>::symbol_address","value":"fn (&self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting symbol address of the frame of this function.\n\n This will attempt to rewind the instruction pointer returned by `ip` to\n the start of the function, returning that value. In some cases, however,\n backends will just return `ip` from this function.\n\n The returned value can sometimes be used if `backtrace::resolve` failed\n on the `ip` given above.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":11499,"byte_end":11506,"line_start":61,"line_end":61,"column_start":8,"column_end":15},"name":"resolve","qualname":"::symbolize::resolve","value":"fn <F> (addr: *mut c_void, cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resolve an address to a symbol, passing the symbol to the specified\n closure.\n\n This function will look up the given address in areas such as the local\n symbol table, dynamic symbol table, or DWARF debug info (depending on the\n activated implementation) to find symbols to yield.\n\n The closure may not be called if resolution could not be performed, and it\n also may be called more than once in the case of inlined functions.\n\n Symbols yielded represent the execution at the specified `addr`, returning\n file/line pairs for that address (if available).\n\n Note that if you have a `Frame` then it's recommended to use the\n `resolve_frame` function instead of this one.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n\n # Panics\n\n This function strives to never panic, but if the `cb` provided panics then\n some platforms will force a double panic to abort the process. Some\n platforms use a C library which internally uses callbacks which cannot be\n unwound through, so panicking from `cb` may trigger a process abort.\n\n # Example\n\n ```\n extern crate backtrace;\n\n fn main() {\n     backtrace::trace(|frame| {\n         let ip = frame.ip();\n\n         backtrace::resolve(ip, |symbol| {\n             // ...\n         });\n\n         false // only look at the top frame\n     });\n }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":11468,"byte_end":11491,"line_start":60,"line_end":60,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":12888,"byte_end":12901,"line_start":103,"line_end":103,"column_start":8,"column_end":21},"name":"resolve_frame","qualname":"::symbolize::resolve_frame","value":"fn <F> (frame: &Frame, cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resolve a previously capture frame to a symbol, passing the symbol to the\n specified closure.\n\n This functin performs the same function as `resolve` except that it takes a\n `Frame` as an argument instead of an address. This can allow some platform\n implementations of backtracing to provide more accurate symbol information\n or information about inline frames for example. It's recommended to use this\n if you can.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n\n # Panics\n\n This function strives to never panic, but if the `cb` provided panics then\n some platforms will force a double panic to abort the process. Some\n platforms use a C library which internally uses callbacks which cannot be\n unwound through, so panicking from `cb` may trigger a process abort.\n\n # Example\n\n ```\n extern crate backtrace;\n\n fn main() {\n     backtrace::trace(|frame| {\n         backtrace::resolve_frame(frame, |symbol| {\n             // ...\n         });\n\n         false // only look at the top frame\n     });\n }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":12857,"byte_end":12880,"line_start":102,"line_end":102,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":14868,"byte_end":14890,"line_start":158,"line_end":158,"column_start":15,"column_end":37},"name":"resolve_unsynchronized","qualname":"::symbolize::resolve_unsynchronized","value":"fn <F> (addr: *mut c_void, mut cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Same as `resolve`, only unsafe as it's unsynchronized.\n\n This function does not have synchronization guarentees but is available when\n the `std` feature of this crate isn't compiled in. See the `resolve`\n function for more documentation and examples.\n\n # Panics\n\n See information on `resolve` for caveats on `cb` panicking.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":15395,"byte_end":15423,"line_start":174,"line_end":174,"column_start":15,"column_end":43},"name":"resolve_frame_unsynchronized","qualname":"::symbolize::resolve_frame_unsynchronized","value":"fn <F> (frame: &Frame, mut cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Same as `resolve_frame`, only unsafe as it's unsynchronized.\n\n This function does not have synchronization guarentees but is available\n when the `std` feature of this crate isn't compiled in. See the\n `resolve_frame` function for more documentation and examples.\n\n # Panics\n\n See information on `resolve_frame` for caveats on `cb` panicking.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":16049,"byte_end":16055,"line_start":190,"line_end":190,"column_start":12,"column_end":18},"name":"Symbol","qualname":"::symbolize::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":" A trait representing the resolution of a symbol in a file.\n\n This trait is yielded as a trait object to the closure given to the\n `backtrace::resolve` function, and it is virtually dispatched as it's\n unknown which implementation is behind it.\n\n A symbol can give contextual information about a function, for example the\n name, filename, line number, precise address, etc. Not all information is\n always available in a symbol, however, so all methods return an `Option`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":16735,"byte_end":16739,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"name","qualname":"<Symbol>::name","value":"fn (&self) -> Option<SymbolName>","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of this function.\n\n The returned structure can be used to query various properties about the\n symbol name:\n\n * The `Display` implementation will print out the demangled symbol.\n * The raw `str` value of the symbol can be accessed (if it's valid\n   utf-8).\n * The raw bytes for the symbol name can be accessed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":16870,"byte_end":16874,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"name":"addr","qualname":"<Symbol>::addr","value":"fn (&self) -> Option<*mut c_void>","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting address of this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":17074,"byte_end":17086,"line_start":218,"line_end":218,"column_start":12,"column_end":24},"name":"filename_raw","qualname":"<Symbol>::filename_raw","value":"fn (&self) -> Option<BytesOrWideString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw filename as a slice. This is mainly useful for `no_std`\n environments.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":17395,"byte_end":17401,"line_start":226,"line_end":226,"column_start":12,"column_end":18},"name":"lineno","qualname":"<Symbol>::lineno","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the line number for where this symbol is currently executing.\n\n This return value is typically `Some` if `filename` returns `Some`, and\n is consequently subject to similar caveats.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":18043,"byte_end":18051,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"filename","qualname":"<Symbol>::filename","value":"fn (&self) -> Option<&Path>","parent":null,"children":[],"decl_id":null,"docs":" Returns the file name where this function was defined.\n\n This is currently only available when libbacktrace is being used (e.g.\n unix platforms other than OSX) and when a binary is compiled with\n debuginfo. If neither of these conditions is met then this will likely\n return `None`.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":17977,"byte_end":18000,"line_start":241,"line_end":241,"column_start":5,"column_end":28}},{"value":"allow(unreachable_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":18005,"byte_end":18031,"line_start":242,"line_end":242,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":20008,"byte_end":20018,"line_start":310,"line_end":310,"column_start":12,"column_end":22},"name":"SymbolName","qualname":"::symbolize::SymbolName","value":"SymbolName {  }","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" A wrapper around a symbol name to provide ergonomic accessors to the\n demangled name, the raw bytes, the raw string, etc.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":19977,"byte_end":19996,"line_start":309,"line_end":309,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":20228,"byte_end":20231,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"new","qualname":"<SymbolName>::new","value":"fn (bytes: &'a [u8]) -> SymbolName<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new symbol name from the raw underlying bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":20854,"byte_end":20860,"line_start":338,"line_end":338,"column_start":12,"column_end":18},"name":"as_str","qualname":"<SymbolName>::as_str","value":"fn (&self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw (mangled) symbol name as a `str` if the symbol is valid utf-8.\n\n Use the `Display` implementation if you want the demangled version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":21097,"byte_end":21105,"line_start":346,"line_end":346,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SymbolName>::as_bytes","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw symbol name as a list of bytes\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":24500,"byte_end":24518,"line_start":451,"line_end":451,"column_start":8,"column_end":26},"name":"clear_symbol_cache","qualname":"::symbolize::clear_symbol_cache","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Attempt to reclaim that cached memory used to symbolicate addresses.\n\n This method will attempt to release any global data structures that have\n otherwise been cached globally or in the thread which typically represent\n parsed DWARF information or similar.\n\n # Caveats\n\n While this function is always available it doesn't actually do anything on\n most implementations. Libraries like dbghelp or libbacktrace do not provide\n facilities to deallocate state and manage the allocated memory. For now the\n `gimli-symbolize` feature of this crate is the only feature where this\n function has any effect.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":24469,"byte_end":24492,"line_start":450,"line_end":450,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":30955,"byte_end":30960,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::types::BytesOrWideString::Bytes","value":"BytesOrWideString::Bytes(&'a [u8])","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" A slice, typically provided on Unix platforms.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":31021,"byte_end":31025,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Wide","qualname":"::types::BytesOrWideString::Wide","value":"BytesOrWideString::Wide(&'a [u16])","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" Wide strings typically from Windows.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":30872,"byte_end":30889,"line_start":17,"line_end":17,"column_start":10,"column_end":27},"name":"BytesOrWideString","qualname":"::types::BytesOrWideString","value":"BytesOrWideString::{Bytes, Wide}","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":308}],"decl_id":null,"docs":" A platform independent representation of a string. When working with `std`\n enabled it is recommended to the convenience methods for providing\n conversions to `std` types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":31424,"byte_end":31436,"line_start":33,"line_end":33,"column_start":12,"column_end":24},"name":"to_str_lossy","qualname":"<BytesOrWideString>::to_str_lossy","value":"fn (&self) -> Cow<'a, str>","parent":null,"children":[],"decl_id":null,"docs":" Lossy converts to a `Cow<str>`, will allocate if `Bytes` is not valid\n UTF-8 or if `BytesOrWideString` is `Wide`.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":31935,"byte_end":31948,"line_start":48,"line_end":48,"column_start":12,"column_end":25},"name":"into_path_buf","qualname":"<BytesOrWideString>::into_path_buf","value":"fn (self) -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Provides a `Path` representation of `BytesOrWideString`.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33305,"byte_end":33317,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"BacktraceFmt","qualname":"::print::BacktraceFmt","value":"BacktraceFmt {  }","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":" A formatter for backtraces.\n\n This type can be used to print a backtrace regardless of where the backtrace\n itself comes from. If you have a `Backtrace` type then its `Debug`\n implementation already uses this printing format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33697,"byte_end":33702,"line_start":26,"line_end":26,"column_start":5,"column_end":10},"name":"Short","qualname":"::print::PrintFmt::Short","value":"PrintFmt::Short","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Prints a terser backtrace which ideally only contains relevant information\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33774,"byte_end":33778,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Full","qualname":"::print::PrintFmt::Full","value":"PrintFmt::Full","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Prints a backtrace that contains all possible information\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33803,"byte_end":33818,"line_start":30,"line_end":30,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::print::PrintFmt::__Nonexhaustive","value":"PrintFmt::__Nonexhaustive","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33599,"byte_end":33607,"line_start":24,"line_end":24,"column_start":10,"column_end":18},"name":"PrintFmt","qualname":"::print::PrintFmt","value":"PrintFmt::{Short, Full, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":319}],"decl_id":null,"docs":" The styles of printing that we can print\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":34276,"byte_end":34279,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<BacktraceFmt>::new","value":"fn (fmt: &'a mut fmt::Formatter<'b>, format: PrintFmt, print_path:\n    &'a mut (FnMut(&mut fmt::Formatter, BytesOrWideString) -> fmt::Result +\n             'b)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BacktraceFmt` which will write output to the provided\n `fmt`.\n\n The `format` argument will control the style in which the backtrace is\n printed, and the `print_path` argument will be used to print the\n `BytesOrWideString` instances of filenames. This type itself doesn't do\n any printing of filenames, but this callback is required to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":34873,"byte_end":34884,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"add_context","qualname":"<BacktraceFmt>::add_context","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Prints a preamble for the backtrace about to be printed.\n\n This is required on some platforms for backtraces to be fully\n sumbolicated later, and otherwise this should just be the first method\n you call after creating a `BacktraceFmt`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":35323,"byte_end":35328,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"frame","qualname":"<BacktraceFmt>::frame","value":"fn (&mut self) -> BacktraceFrameFmt<'_, 'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":" Adds a frame to the backtrace output.\n\n This commit returns an RAII instance of a `BacktraceFrameFmt` which can be used\n to actually print a frame, and on destruction it will increment the\n frame counter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":35635,"byte_end":35641,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"finish","qualname":"<BacktraceFmt>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Completes the backtrace output.\n\n This is currently a no-op but is added for future compatibility with\n backtrace formats.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":35906,"byte_end":35923,"line_start":91,"line_end":91,"column_start":12,"column_end":29},"name":"BacktraceFrameFmt","qualname":"::print::BacktraceFrameFmt","value":"BacktraceFrameFmt {  }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A formatter for just one frame of a backtrace.\n\n This type is created by the `BacktraceFmt::frame` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":36445,"byte_end":36460,"line_start":107,"line_end":107,"column_start":12,"column_end":27},"name":"backtrace_frame","qualname":"<BacktraceFrameFmt>::backtrace_frame","value":"fn (&mut self, frame: &crate::BacktraceFrame) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Prints a `BacktraceFrame` with this frame formatter.\n\n This will recusrively print all `BacktraceSymbol` instances within the\n `BacktraceFrame`.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":36410,"byte_end":36433,"line_start":106,"line_end":106,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":37062,"byte_end":37078,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"backtrace_symbol","qualname":"<BacktraceFrameFmt>::backtrace_symbol","value":"fn (&mut self, frame: &crate::BacktraceFrame, symbol: &crate::BacktraceSymbol) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Prints a `BacktraceSymbol` within a `BacktraceFrame`.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":37027,"byte_end":37050,"line_start":124,"line_end":124,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":37801,"byte_end":37807,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"symbol","qualname":"<BacktraceFrameFmt>::symbol","value":"fn (&mut self, frame: &crate::Frame, symbol: &crate::Symbol) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Prints a raw traced `Frame` and `Symbol`, typically from within the raw\n callbacks of this crate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":38320,"byte_end":38329,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"print_raw","qualname":"<BacktraceFrameFmt>::print_raw","value":"fn (&mut self, frame_ip: *mut c_void, symbol_name: Option<crate::SymbolName>, filename: Option<BytesOrWideString>, lineno: Option<u32>) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Adds a raw frame to the backtrace output.\n\n This method, unlike the previous, takes the raw arguments in case\n they're being source from different locations. Note that this may be\n called multiple times for one frame.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8728547,"byte_end":8728556,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"Backtrace","qualname":"::capture::Backtrace","value":"Backtrace {  }","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"decl_id":null,"docs":" Representation of an owned and self-contained backtrace.\n\n This structure can be used to capture a backtrace at various points in a\n program and later used to inspect what the backtrace was at that time.\n\n `Backtrace` supports pretty-printing of backtraces through its `Debug`\n implementation.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8729282,"byte_end":8729296,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"BacktraceFrame","qualname":"::capture::BacktraceFrame","value":"BacktraceFrame {  }","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":404}],"decl_id":null,"docs":" Captured version of a frame in a backtrace.\n\n This type is returned as a list from `Backtrace::frames` and represents one\n stack frame in a captured backtrace.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8730459,"byte_end":8730474,"line_start":92,"line_end":92,"column_start":12,"column_end":27},"name":"BacktraceSymbol","qualname":"::capture::BacktraceSymbol","value":"BacktraceSymbol {  }","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":" Captured version of a symbol in a backtrace.\n\n This type is returned as a list from `BacktraceFrame::symbols` and\n represents the metadata for a symbol in a backtrace.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8731755,"byte_end":8731758,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<Backtrace>::new","value":"fn () -> Backtrace","parent":null,"children":[],"decl_id":null,"docs":" Captures a backtrace at the callsite of this function, returning an\n owned representation.\n\n This function is useful for representing a backtrace as an object in\n Rust. This returned value can be sent across threads and printed\n elsewhere, and the purpose of this value is to be entirely self\n contained.\n\n Note that on some platforms acquiring a full backtrace and resolving it\n can be extremely expensive. If the cost is too much for your application\n it's recommended to instead use `Backtrace::new_unresolved()` which\n avoids the symbol resolution step (which typically takes the longest)\n and allows deferring that to a later date.\n\n # Examples\n\n ```\n use backtrace::Backtrace;\n\n let current_backtrace = Backtrace::new();\n ```\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8731675,"byte_end":8731691,"line_start":126,"line_end":126,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8732924,"byte_end":8732938,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"new_unresolved","qualname":"<Backtrace>::new_unresolved","value":"fn () -> Backtrace","parent":null,"children":[],"decl_id":null,"docs":" Similar to `new` except that this does not resolve any symbols, this\n simply captures the backtrace as a list of addresses.\n\n At a later time the `resolve` function can be called to resolve this\n backtrace's symbols into readable names. This function exists because\n the resolution process can sometimes take a significant amount of time\n whereas any one backtrace may only be rarely printed.\n\n # Examples\n\n ```\n use backtrace::Backtrace;\n\n let mut current_backtrace = Backtrace::new_unresolved();\n println!(\"{:?}\", current_backtrace); // no symbol names\n current_backtrace.resolve();\n println!(\"{:?}\", current_backtrace); // symbol names now present\n ```\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8732844,"byte_end":8732860,"line_start":156,"line_end":156,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8734065,"byte_end":8734071,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"frames","qualname":"<Backtrace>::frames","value":"fn (&self) -> &[BacktraceFrame]","parent":null,"children":[],"decl_id":null,"docs":" Returns the frames from when this backtrace was captured.\n\n The first entry of this slice is likely the function `Backtrace::new`,\n and the last frame is likely something about how this thread or the main\n function started.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8734639,"byte_end":8734646,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Backtrace>::resolve","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" If this backtrace was created from `new_unresolved` then this function\n will resolve all addresses in the backtrace to their symbolic names.\n\n If this backtrace has been previously resolved or was created through\n `new`, this function does nothing.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8736086,"byte_end":8736088,"line_start":252,"line_end":252,"column_start":12,"column_end":14},"name":"ip","qualname":"<BacktraceFrame>::ip","value":"fn (&self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Same as `Frame::ip`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8736396,"byte_end":8736410,"line_start":262,"line_end":262,"column_start":12,"column_end":26},"name":"symbol_address","qualname":"<BacktraceFrame>::symbol_address","value":"fn (&self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Same as `Frame::symbol_address`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8737177,"byte_end":8737184,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"symbols","qualname":"<BacktraceFrame>::symbols","value":"fn (&self) -> &[BacktraceSymbol]","parent":null,"children":[],"decl_id":null,"docs":" Returns the list of symbols that this frame corresponds to.\n\n Normally there is only one symbol per frame, but sometimes if a number\n of functions are inlined into one frame then multiple symbols will be\n returned. The first symbol listed is the \"innermost function\", whereas\n the last symbol is the outermost (last caller).\n\n Note that if this frame came from an unresolved backtrace then this will\n return an empty list.\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8737537,"byte_end":8737541,"line_start":292,"line_end":292,"column_start":12,"column_end":16},"name":"name","qualname":"<BacktraceSymbol>::name","value":"fn (&self) -> Option<SymbolName>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Symbol::name`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8737863,"byte_end":8737867,"line_start":302,"line_end":302,"column_start":12,"column_end":16},"name":"addr","qualname":"<BacktraceSymbol>::addr","value":"fn (&self) -> Option<*mut c_void>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Symbol::addr`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8738183,"byte_end":8738191,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"filename","qualname":"<BacktraceSymbol>::filename","value":"fn (&self) -> Option<&Path>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Symbol::filename`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8738500,"byte_end":8738506,"line_start":322,"line_end":322,"column_start":12,"column_end":18},"name":"lineno","qualname":"<BacktraceSymbol>::lineno","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Symbol::lineno`\n\n # Required features\n\n This function requires the `std` feature of the `backtrace` crate to be\n enabled, and the `std` feature is enabled by default.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":7300,"byte_end":7305,"line_start":80,"line_end":80,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":8282,"byte_end":8287,"line_start":106,"line_end":106,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712857,"byte_end":8712862,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712887,"byte_end":8712892,"line_start":38,"line_end":38,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712902,"byte_end":8712907,"line_start":40,"line_end":40,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":13128,"byte_end":13139,"line_start":113,"line_end":113,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":16324,"byte_end":16330,"line_start":197,"line_end":197,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":18137,"byte_end":18143,"line_start":248,"line_end":248,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":19511,"byte_end":19526,"line_start":294,"line_end":294,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":20135,"byte_end":20145,"line_start":316,"line_end":316,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":22287,"byte_end":22297,"line_start":389,"line_end":389,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":23517,"byte_end":23527,"line_start":425,"line_end":425,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\dladdr.rs","byte_start":29709,"byte_end":29715,"line_start":85,"line_end":85,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\dbghelp.rs","byte_start":8722187,"byte_end":8722193,"line_start":55,"line_end":55,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":31074,"byte_end":31091,"line_start":25,"line_end":25,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":32747,"byte_end":32764,"line_start":79,"line_end":79,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33836,"byte_end":33848,"line_start":33,"line_end":33,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":36014,"byte_end":36031,"line_start":96,"line_end":96,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":42487,"byte_end":42504,"line_start":264,"line_end":264,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8729524,"byte_end":8729529,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8730593,"byte_end":8730602,"line_start":99,"line_end":99,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735563,"byte_end":8735572,"line_start":230,"line_end":230,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735755,"byte_end":8735764,"line_start":239,"line_end":239,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735844,"byte_end":8735858,"line_start":245,"line_end":245,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8737291,"byte_end":8737306,"line_start":285,"line_end":285,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8738580,"byte_end":8738589,"line_start":327,"line_end":327,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8739878,"byte_end":8739887,"line_start":363,"line_end":363,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8739976,"byte_end":8739990,"line_start":369,"line_end":369,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8740246,"byte_end":8740261,"line_start":378,"line_end":378,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3302,"byte_end":3306,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3832,"byte_end":3841,"line_start":131,"line_end":131,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\dbghelp.rs","byte_start":57030,"byte_end":57034,"line_start":363,"line_end":363,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":7300,"byte_end":7305,"line_start":80,"line_end":80,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\mod.rs","byte_start":8282,"byte_end":8287,"line_start":106,"line_end":106,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712857,"byte_end":8712862,"line_start":37,"line_end":37,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712887,"byte_end":8712892,"line_start":38,"line_end":38,"column_start":22,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\backtrace\\dbghelp.rs","byte_start":8712902,"byte_end":8712907,"line_start":40,"line_end":40,"column_start":6,"column_end":11},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":13128,"byte_end":13139,"line_start":113,"line_end":113,"column_start":10,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":16324,"byte_end":16330,"line_start":197,"line_end":197,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":55},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":18137,"byte_end":18143,"line_start":248,"line_end":248,"column_start":21,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":55},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":19511,"byte_end":19526,"line_start":294,"line_end":294,"column_start":18,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":20135,"byte_end":20145,"line_start":316,"line_end":316,"column_start":10,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":66},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":22287,"byte_end":22297,"line_start":389,"line_end":389,"column_start":35,"column_end":45},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":66},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\mod.rs","byte_start":23517,"byte_end":23527,"line_start":425,"line_end":425,"column_start":33,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":66},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\dladdr.rs","byte_start":29709,"byte_end":29715,"line_start":85,"line_end":85,"column_start":14,"column_end":20},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\symbolize\\dbghelp.rs","byte_start":8722187,"byte_end":8722193,"line_start":55,"line_end":55,"column_start":6,"column_end":12},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":31074,"byte_end":31091,"line_start":25,"line_end":25,"column_start":10,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\types.rs","byte_start":32747,"byte_end":32764,"line_start":79,"line_end":79,"column_start":27,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":303},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":33836,"byte_end":33848,"line_start":33,"line_end":33,"column_start":14,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":36014,"byte_end":36031,"line_start":96,"line_end":96,"column_start":6,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\print.rs","byte_start":42487,"byte_end":42504,"line_start":264,"line_end":264,"column_start":15,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":114},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8729524,"byte_end":8729529,"line_start":64,"line_end":64,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8730593,"byte_end":8730602,"line_start":99,"line_end":99,"column_start":6,"column_end":15},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735563,"byte_end":8735572,"line_start":230,"line_end":230,"column_start":36,"column_end":45},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735755,"byte_end":8735764,"line_start":239,"line_end":239,"column_start":36,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2255}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8735844,"byte_end":8735858,"line_start":245,"line_end":245,"column_start":6,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8737291,"byte_end":8737306,"line_start":285,"line_end":285,"column_start":6,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8738580,"byte_end":8738589,"line_start":327,"line_end":327,"column_start":21,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8739878,"byte_end":8739887,"line_start":363,"line_end":363,"column_start":18,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8739976,"byte_end":8739990,"line_start":369,"line_end":369,"column_start":21,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":402},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\capture.rs","byte_start":8740246,"byte_end":8740261,"line_start":378,"line_end":378,"column_start":21,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":416},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3302,"byte_end":3306,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":135},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\lib.rs","byte_start":3832,"byte_end":3841,"line_start":131,"line_end":131,"column_start":19,"column_end":28},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":146},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\backtrace-0.3.43\\src\\dbghelp.rs","byte_start":57030,"byte_end":57034,"line_start":363,"line_end":363,"column_start":15,"column_end":19},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":164},"to":{"krate":1,"index":1726}}]}