{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bytecount","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=bafbbe9d62d0ba7b","-C","extra-filename=-bafbbe9d62d0ba7b","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbytecount-bafbbe9d62d0ba7b.rmeta"},"prelude":{"crate_id":{"name":"bytecount","disambiguator":[6766751392029057890,5588078478227244972]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":4208,"line_start":1,"line_end":138,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":1460,"byte_end":1461,"line_start":44,"line_end":44,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"naive_num_chars, naive_count","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":0,"byte_end":4208,"line_start":1,"line_end":138,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":25},{"krate":0,"index":26}],"decl_id":null,"docs":" count occurrences of a given byte, or the number of UTF-8 code points, in a\n byte slice, fast.\n\n This crate has the [`count`](fn.count.html) method to count byte\n occurrences (for example newlines) in a larger `&[u8]` slice.\n\n For example:\n\n ```rust\n assert_eq!(5, bytecount::count(b\"Hello, this is the bytecount crate!\", b' '));\n ```\n\n Also there is a [`num_chars`](fn.num_chars.html) method to count\n the number of UTF8 characters in a slice. It will work the same as\n `str::chars().count()` for byte slices of correct UTF-8 character\n sequences. The result will likely be off for invalid sequences,\n although the result is guaranteed to be between `0` and\n `[_]::len()`, inclusive.\n\n Example:\n\n ```rust\n let sequence = \"Wenn ich ein Vöglein wär, flög ich zu Dir!\";\n assert_eq!(sequence.chars().count(),\n            bytecount::num_chars(sequence.as_bytes()));\n ```\n\n For completeness and easy comparison, the \"naive\" versions of both\n count and num_chars are provided. Those are also faster if used on\n predominantly small strings. The\n [`naive_count_32`](fn.naive_count_32.html) method can be faster\n still on small strings.\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":1229,"byte_end":1251,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":1305,"byte_end":1311,"line_start":36,"line_end":36,"column_start":53,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\naive.rs","byte_start":4489,"byte_end":4503,"line_start":11,"line_end":11,"column_start":8,"column_end":22},"name":"naive_count_32","qualname":"::naive::naive_count_32","value":"fn (haystack: &[u8], needle: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count up to `(2^32)-1` occurrences of a byte in a slice\n of bytes, simple\n\n # Example\n\n ```\n let s = b\"This is yet another Text with spaces\";\n let number_of_spaces = bytecount::naive_count_32(s, b' ');\n assert_eq!(number_of_spaces, 6);\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\naive.rs","byte_start":4873,"byte_end":4884,"line_start":24,"line_end":24,"column_start":8,"column_end":19},"name":"naive_count","qualname":"::naive::naive_count","value":"fn (utf8_chars: &[u8], needle: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count occurrences of a byte in a slice of bytes, simple\n\n # Example\n\n ```\n let s = b\"This is yet another Text with spaces\";\n let number_of_spaces = bytecount::naive_count(s, b' ');\n assert_eq!(number_of_spaces, 6);\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\naive.rs","byte_start":5401,"byte_end":5416,"line_start":40,"line_end":40,"column_start":8,"column_end":23},"name":"naive_num_chars","qualname":"::naive::naive_num_chars","value":"fn (utf8_chars: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the number of UTF-8 encoded unicode codepoints in a slice of bytes, simple\n\n This function is safe to use on any byte array, valid UTF-8 or not,\n but the output is only meaningful for well-formed UTF-8.\n\n # Example\n\n ```\n let swordfish = \"メカジキ\";\n let char_count = bytecount::naive_num_chars(swordfish.as_bytes());\n assert_eq!(char_count, 4);\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":1869,"byte_end":1874,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"count","qualname":"::count","value":"fn (haystack: &[u8], needle: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count occurrences of a byte in a slice of bytes, fast\n\n # Examples\n\n ```\n let s = b\"This is a Text with spaces\";\n let number_of_spaces = bytecount::count(s, b' ');\n assert_eq!(number_of_spaces, 5);\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytecount-0.4.0\\src\\lib.rs","byte_start":3243,"byte_end":3252,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"num_chars","qualname":"::num_chars","value":"fn (utf8_chars: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the number of UTF-8 encoded unicode codepoints in a slice of bytes, fast\n\n This function is safe to use on any byte array, valid UTF-8 or not,\n but the output is only meaningful for well-formed UTF-8.\n\n # Example\n\n ```\n let swordfish = \"メカジキ\";\n let char_count = bytecount::num_chars(swordfish.as_bytes());\n assert_eq!(char_count, 4);\n ```\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}