{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","cpal","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=412a126b556a8453","-C","extra-filename=-412a126b556a8453","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","lazy_static=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblazy_static-79de1231268f023b.rmeta","--extern","winapi=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libwinapi-978bfab176c482d4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcpal-412a126b556a8453.rmeta"},"prelude":{"crate_id":{"name":"cpal","disambiguator":[16450987391932769755,14050607960513736324]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","num":14,"id":{"name":"lazy_static","disambiguator":[17281579441627161632,7326486140096487162]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\mod.rs","num":15,"id":{"name":"winapi","disambiguator":[5636639422687459420,15773350436437932257]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":0,"byte_end":25099,"line_start":1,"line_end":784,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":5099,"byte_end":5105,"line_start":126,"line_end":126,"column_start":27,"column_end":33},"alias_span":null,"name":"Sample","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":5107,"byte_end":5119,"line_start":126,"line_end":126,"column_start":35,"column_end":47},"alias_span":null,"name":"SampleFormat","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":0,"byte_end":25099,"line_start":1,"line_end":784,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":72},{"krate":0,"index":105},{"krate":0,"index":628},{"krate":0,"index":638},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":401},{"krate":0,"index":640},{"krate":0,"index":655},{"krate":0,"index":653},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":643},{"krate":0,"index":404},{"krate":0,"index":657},{"krate":0,"index":678},{"krate":0,"index":676},{"krate":0,"index":675},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":662},{"krate":0,"index":660},{"krate":0,"index":680},{"krate":0,"index":693},{"krate":0,"index":691},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":695},{"krate":0,"index":709},{"krate":0,"index":707},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":405},{"krate":0,"index":411},{"krate":0,"index":415},{"krate":0,"index":419},{"krate":0,"index":430},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":728},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":467},{"krate":0,"index":477},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":495},{"krate":0,"index":500},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540}],"decl_id":null,"docs":" # How to use cpal\n\n Here are some concepts cpal exposes:\n\n - A `Device` is an audio device that may have any number of input and output streams.\n - A stream is an open audio channel. Input streams allow you to receive audio data, output\n   streams allow you to play audio data. You must choose which `Device` runs your stream before\n   you create one.\n - An `EventLoop` is a collection of streams being run by one or more `Device`. Each stream must\n   belong to an `EventLoop`, and all the streams that belong to an `EventLoop` are managed\n   together.\n\n The first step is to create an `EventLoop`:\n\n ```\n use cpal::EventLoop;\n let event_loop = EventLoop::new();\n ```\n\n Then choose a `Device`. The easiest way is to use the default input or output `Device` via the\n `default_input_device()` or `default_output_device()` functions. Alternatively you can\n enumerate all the available devices with the `devices()` function. Beware that the\n `default_*_device()` functions return an `Option` in case no device is available for that\n stream type on the system.\n\n ```\n let device = cpal::default_output_device().expect(\"no output device available\");\n ```\n\n Before we can create a stream, we must decide what the format of the audio samples is going to\n be. You can query all the supported formats with the `supported_input_formats()` and\n `supported_output_formats()` methods. These produce a list of `SupportedFormat` structs which\n can later be turned into actual `Format` structs. If you don't want to query the list of\n formats, you can also build your own `Format` manually, but doing so could lead to an error\n when building the stream if the format is not supported by the device.\n\n > **Note**: the `supported_formats()` method could return an error for example if the device\n > has been disconnected.\n\n ```no_run\n # let device = cpal::default_output_device().unwrap();\n let mut supported_formats_range = device.supported_output_formats()\n     .expect(\"error while querying formats\");\n let format = supported_formats_range.next()\n     .expect(\"no supported format?!\")\n     .with_max_sample_rate();\n ```\n\n Now that we have everything, we can create a stream from our event loop:\n\n ```no_run\n # let device = cpal::default_output_device().unwrap();\n # let format = device.supported_output_formats().unwrap().next().unwrap().with_max_sample_rate();\n # let event_loop = cpal::EventLoop::new();\n let stream_id = event_loop.build_output_stream(&device, &format).unwrap();\n ```\n\n The value returned by `build_output_stream()` is of type `StreamId` and is an identifier that\n will allow you to control the stream.\n\n Now we must start the stream. This is done with the `play_stream()` method on the event loop.\n\n ```\n # let event_loop: cpal::EventLoop = return;\n # let stream_id: cpal::StreamId = return;\n event_loop.play_stream(stream_id);\n ```\n\n Once everything is ready! Now we call `run()` on the `event_loop` to begin processing.\n\n ```no_run\n # let event_loop = cpal::EventLoop::new();\n event_loop.run(move |_stream_id, _stream_data| {\n     // read or write stream data here\n });\n ```\n\n > **Note**: Calling `run()` will block the thread forever, so it's usually best done in a\n > separate thread.\n\n While `run()` is running, the audio device of the user will from time to time call the callback\n that you passed to this function. The callback gets passed the stream ID an instance of type\n `StreamData` that represents the data that must be read from or written to. The inner\n `UnknownTypeOutputBuffer` can be one of `I16`, `U16` or `F32` depending on the format that was\n passed to `build_output_stream`.\n\n In this example, we simply simply fill the given output buffer with zeroes.\n\n ```no_run\n use cpal::{StreamData, UnknownTypeOutputBuffer};\n\n # let event_loop = cpal::EventLoop::new();\n event_loop.run(move |_stream_id, mut stream_data| {\n     match stream_data {\n         StreamData::Output { buffer: UnknownTypeOutputBuffer::U16(mut buffer) } => {\n             for elem in buffer.iter_mut() {\n                 *elem = u16::max_value() / 2;\n             }\n         },\n         StreamData::Output { buffer: UnknownTypeOutputBuffer::I16(mut buffer) } => {\n             for elem in buffer.iter_mut() {\n                 *elem = 0;\n             }\n         },\n         StreamData::Output { buffer: UnknownTypeOutputBuffer::F32(mut buffer) } => {\n             for elem in buffer.iter_mut() {\n                 *elem = 0.0;\n             }\n         },\n         _ => (),\n     }\n });\n ```\n","sig":null,"attributes":[{"value":"recursion_limit = \"512\"","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":4820,"byte_end":4847,"line_start":115,"line_end":115,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28333,"byte_end":28336,"line_start":7,"line_end":7,"column_start":5,"column_end":8},"name":"I16","qualname":"::samples_formats::SampleFormat::I16","value":"SampleFormat::I16","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" The value 0 corresponds to 0.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28384,"byte_end":28387,"line_start":9,"line_end":9,"column_start":5,"column_end":8},"name":"U16","qualname":"::samples_formats::SampleFormat::U16","value":"SampleFormat::U16","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" The value 0 corresponds to 32768.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28433,"byte_end":28436,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"F32","qualname":"::samples_formats::SampleFormat::F32","value":"SampleFormat::F32","parent":{"krate":0,"index":572},"children":[],"decl_id":null,"docs":" The boundaries are (-1.0, 1.0).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28276,"byte_end":28288,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"SampleFormat","qualname":"::samples_formats::SampleFormat","value":"SampleFormat::{I16, U16, F32}","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577}],"decl_id":null,"docs":" Format that each sample has.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28548,"byte_end":28559,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"sample_size","qualname":"<SampleFormat>::sample_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size in bytes of a sample of this format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28527,"byte_end":28536,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28877,"byte_end":28892,"line_start":28,"line_end":28,"column_start":12,"column_end":27},"name":"get_sample_size","qualname":"<SampleFormat>::get_sample_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. Use `sample_size` instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28838,"byte_end":28847,"line_start":26,"line_end":26,"column_start":5,"column_end":14}},{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28852,"byte_end":28865,"line_start":27,"line_end":27,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29012,"byte_end":29018,"line_start":34,"line_end":34,"column_start":18,"column_end":24},"name":"Sample","qualname":"::samples_formats::Sample","value":"Sample: Copy + Clone","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" Trait for containers that contain PCM data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29173,"byte_end":29183,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"get_format","qualname":"::samples_formats::Sample::get_format","value":"fn () -> SampleFormat","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Returns the `SampleFormat` corresponding to this data type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29277,"byte_end":29283,"line_start":40,"line_end":40,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::samples_formats::Sample::to_f32","value":"fn (&self) -> f32","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Turns the sample into its equivalent as a floating-point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29363,"byte_end":29369,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::samples_formats::Sample::to_i16","value":"fn (&self) -> i16","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Converts this sample into a standard i16 sample.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29449,"byte_end":29455,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::samples_formats::Sample::to_u16","value":"fn (&self) -> u16","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Converts this sample into a standard u16 sample.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29567,"byte_end":29571,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"from","qualname":"::samples_formats::Sample::from","value":"fn <S> (&S) -> Self","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":" Converts any sample type to this one by calling `to_i16`, `to_u16` or `to_f32`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6032,"byte_end":6038,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"Device","qualname":"::Device","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque type that identifies a device that is capable of either audio input or output.\n\n Please note that `Device`s may become invalid if they get disconnected. Therefore all the\n methods that involve a device return a `Result`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6189,"byte_end":6198,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"EventLoop","qualname":"::EventLoop","value":"","parent":null,"children":[],"decl_id":null,"docs":" Collection of voices managed together.\n\n Created with the [`new`](struct.EventLoop.html#method.new) method.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6330,"byte_end":6338,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"StreamId","qualname":"::StreamId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Identifier of a stream within the `EventLoop`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6395,"byte_end":6407,"line_start":173,"line_end":173,"column_start":10,"column_end":22},"name":"ChannelCount","qualname":"::ChannelCount","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Number of channels.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6567,"byte_end":6577,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"SampleRate","qualname":"::SampleRate","value":"","parent":null,"children":[],"decl_id":null,"docs":" The number of samples processed per second for a single channel of audio.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6690,"byte_end":6696,"line_start":181,"line_end":181,"column_start":12,"column_end":18},"name":"Format","qualname":"::Format","value":"Format { channels, sample_rate, data_type }","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683}],"decl_id":null,"docs":" The format of an input or output audio stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6707,"byte_end":6715,"line_start":182,"line_end":182,"column_start":9,"column_end":17},"name":"channels","qualname":"::Format::channels","value":"u16","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6739,"byte_end":6750,"line_start":183,"line_end":183,"column_start":9,"column_end":20},"name":"sample_rate","qualname":"::Format::sample_rate","value":"SampleRate","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6772,"byte_end":6781,"line_start":184,"line_end":184,"column_start":9,"column_end":18},"name":"data_type","qualname":"::Format::data_type","value":"samples_formats::SampleFormat","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6901,"byte_end":6916,"line_start":189,"line_end":189,"column_start":12,"column_end":27},"name":"SupportedFormat","qualname":"::SupportedFormat","value":"SupportedFormat { channels, min_sample_rate, max_sample_rate, data_type }","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699}],"decl_id":null,"docs":" Describes a range of supported stream formats.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":6927,"byte_end":6935,"line_start":190,"line_end":190,"column_start":9,"column_end":17},"name":"channels","qualname":"::SupportedFormat::channels","value":"u16","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7028,"byte_end":7043,"line_start":192,"line_end":192,"column_start":9,"column_end":24},"name":"min_sample_rate","qualname":"::SupportedFormat::min_sample_rate","value":"SampleRate","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Minimum value for the samples rate of the supported formats.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7134,"byte_end":7149,"line_start":194,"line_end":194,"column_start":9,"column_end":24},"name":"max_sample_rate","qualname":"::SupportedFormat::max_sample_rate","value":"SampleRate","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Maximum value for the samples rate of the supported formats.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7216,"byte_end":7225,"line_start":196,"line_end":196,"column_start":9,"column_end":18},"name":"data_type","qualname":"::SupportedFormat::data_type","value":"samples_formats::SampleFormat","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":" Type of data expected by the device.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7331,"byte_end":7336,"line_start":201,"line_end":201,"column_start":5,"column_end":10},"name":"Input","qualname":"::StreamData::Input","value":"StreamData::Input { buffer }","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7394,"byte_end":7400,"line_start":204,"line_end":204,"column_start":5,"column_end":11},"name":"Output","qualname":"::StreamData::Output","value":"StreamData::Output { buffer }","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7310,"byte_end":7320,"line_start":200,"line_end":200,"column_start":10,"column_end":20},"name":"StreamData","qualname":"::StreamData","value":"StreamData::{Input, Output}","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":409}],"decl_id":null,"docs":" Stream data passed to the `EventLoop::run` callback.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":7747,"byte_end":7758,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"InputBuffer","qualname":"::InputBuffer","value":"InputBuffer {  }","parent":null,"children":[{"krate":0,"index":414}],"decl_id":null,"docs":" Represents a buffer containing audio data that may be read.\n\n This struct implements the `Deref` trait targeting `[T]`. Therefore this buffer can be read the\n same way as reading from a `Vec` or any other kind of Rust array.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8370,"byte_end":8382,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"OutputBuffer","qualname":"::OutputBuffer","value":"OutputBuffer {  }","parent":null,"children":[{"krate":0,"index":418}],"decl_id":null,"docs":" Represents a buffer that must be filled with audio data.\n\n You should destroy this object as soon as possible. Data is only sent to the audio device when\n this object is destroyed.\n\n This struct implements the `Deref` and `DerefMut` traits to `[T]`. Therefore writing to this\n buffer is done in the same way as writing to a `Vec` or any other kind of Rust array.\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8347,"byte_end":8358,"line_start":231,"line_end":231,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8820,"byte_end":8823,"line_start":246,"line_end":246,"column_start":5,"column_end":8},"name":"U16","qualname":"::UnknownTypeInputBuffer::U16","value":"UnknownTypeInputBuffer::U16(InputBuffer<'a, u16>)","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Samples whose format is `u16`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8890,"byte_end":8893,"line_start":248,"line_end":248,"column_start":5,"column_end":8},"name":"I16","qualname":"::UnknownTypeInputBuffer::I16","value":"UnknownTypeInputBuffer::I16(InputBuffer<'a, i16>)","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Samples whose format is `i16`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8960,"byte_end":8963,"line_start":250,"line_end":250,"column_start":5,"column_end":8},"name":"F32","qualname":"::UnknownTypeInputBuffer::F32","value":"UnknownTypeInputBuffer::F32(InputBuffer<'a, f32>)","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" Samples whose format is `f32`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":8748,"byte_end":8770,"line_start":244,"line_end":244,"column_start":10,"column_end":32},"name":"UnknownTypeInputBuffer","qualname":"::UnknownTypeInputBuffer","value":"UnknownTypeInputBuffer::{U16, I16, F32}","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427}],"decl_id":null,"docs":" This is the struct that is provided to you by cpal when you want to read samples from a buffer.\n\n Since the type of data is only known at runtime, you have to read the right buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9263,"byte_end":9266,"line_start":258,"line_end":258,"column_start":5,"column_end":8},"name":"U16","qualname":"::UnknownTypeOutputBuffer::U16","value":"UnknownTypeOutputBuffer::U16(OutputBuffer<'a, u16>)","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Samples whose format is `u16`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9334,"byte_end":9337,"line_start":260,"line_end":260,"column_start":5,"column_end":8},"name":"I16","qualname":"::UnknownTypeOutputBuffer::I16","value":"UnknownTypeOutputBuffer::I16(OutputBuffer<'a, i16>)","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Samples whose format is `i16`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9405,"byte_end":9408,"line_start":262,"line_end":262,"column_start":5,"column_end":8},"name":"F32","qualname":"::UnknownTypeOutputBuffer::F32","value":"UnknownTypeOutputBuffer::F32(OutputBuffer<'a, f32>)","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Samples whose format is `f32`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9190,"byte_end":9213,"line_start":256,"line_end":256,"column_start":10,"column_end":33},"name":"UnknownTypeOutputBuffer","qualname":"::UnknownTypeOutputBuffer","value":"UnknownTypeOutputBuffer::{U16, I16, F32}","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438}],"decl_id":null,"docs":" This is the struct that is provided to you by cpal when you want to write samples to a buffer.\n\n Since the type of data is only known at runtime, you have to fill the right buffer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9565,"byte_end":9572,"line_start":268,"line_end":268,"column_start":12,"column_end":19},"name":"Devices","qualname":"::Devices","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all `Device`s currently available to the system.\n\n See [`devices()`](fn.devices.html).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9651,"byte_end":9663,"line_start":271,"line_end":271,"column_start":10,"column_end":22},"name":"InputDevices","qualname":"::InputDevices","value":"iter::Filter<Devices, fn(&Device) -> bool>","parent":null,"children":[],"decl_id":null,"docs":" A `Devices` yielding only *input* devices.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":9768,"byte_end":9781,"line_start":274,"line_end":274,"column_start":10,"column_end":23},"name":"OutputDevices","qualname":"::OutputDevices","value":"iter::Filter<Devices, fn(&Device) -> bool>","parent":null,"children":[],"decl_id":null,"docs":" A `Devices` yielding only *output* devices.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10028,"byte_end":10049,"line_start":279,"line_end":279,"column_start":12,"column_end":33},"name":"SupportedInputFormats","qualname":"::SupportedInputFormats","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that produces a list of input stream formats supported by the device.\n\n See [`Device::supported_input_formats()`](struct.Device.html#method.supported_input_formats).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10288,"byte_end":10310,"line_start":284,"line_end":284,"column_start":12,"column_end":34},"name":"SupportedOutputFormats","qualname":"::SupportedOutputFormats","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that produces a list of output stream formats supported by the device.\n\n See [`Device::supported_output_formats()`](struct.Device.html#method.supported_output_formats).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10599,"byte_end":10617,"line_start":291,"line_end":291,"column_start":5,"column_end":23},"name":"DeviceNotAvailable","qualname":"::FormatsEnumerationError::DeviceNotAvailable","value":"FormatsEnumerationError::DeviceNotAvailable","parent":{"krate":0,"index":711},"children":[],"decl_id":null,"docs":" The device no longer exists. This can happen if the device is disconnected while the\n program is running.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10448,"byte_end":10471,"line_start":288,"line_end":288,"column_start":10,"column_end":33},"name":"FormatsEnumerationError","qualname":"::FormatsEnumerationError","value":"FormatsEnumerationError::{DeviceNotAvailable}","parent":null,"children":[{"krate":0,"index":712}],"decl_id":null,"docs":" Error that can happen when enumerating the list of supported formats.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10894,"byte_end":10912,"line_start":299,"line_end":299,"column_start":5,"column_end":23},"name":"DeviceNotAvailable","qualname":"::DefaultFormatError::DeviceNotAvailable","value":"DefaultFormatError::DeviceNotAvailable","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" The device no longer exists. This can happen if the device is disconnected while the\n program is running.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11014,"byte_end":11036,"line_start":301,"line_end":301,"column_start":5,"column_end":27},"name":"StreamTypeNotSupported","qualname":"::DefaultFormatError::StreamTypeNotSupported","value":"DefaultFormatError::StreamTypeNotSupported","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Returned if e.g. the default input format was requested on an output-only audio device.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":10748,"byte_end":10766,"line_start":296,"line_end":296,"column_start":10,"column_end":28},"name":"DefaultFormatError","qualname":"::DefaultFormatError","value":"DefaultFormatError::{DeviceNotAvailable, StreamTypeNotSupported}","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":719}],"decl_id":null,"docs":" May occur when attempting to request the default input or output stream format from a `Device`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11259,"byte_end":11277,"line_start":309,"line_end":309,"column_start":5,"column_end":23},"name":"DeviceNotAvailable","qualname":"::CreationError::DeviceNotAvailable","value":"CreationError::DeviceNotAvailable","parent":{"krate":0,"index":723},"children":[],"decl_id":null,"docs":" The device no longer exists. This can happen if the device is disconnected while the\n program is running.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11329,"byte_end":11347,"line_start":311,"line_end":311,"column_start":5,"column_end":23},"name":"FormatNotSupported","qualname":"::CreationError::FormatNotSupported","value":"CreationError::FormatNotSupported","parent":{"krate":0,"index":723},"children":[],"decl_id":null,"docs":" The required format is not supported.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11118,"byte_end":11131,"line_start":306,"line_end":306,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::CreationError","value":"CreationError::{DeviceNotAvailable, FormatNotSupported}","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":726}],"decl_id":null,"docs":" Error that can happen when creating a `Voice`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11513,"byte_end":11520,"line_start":318,"line_end":318,"column_start":8,"column_end":15},"name":"devices","qualname":"::devices","value":"fn () -> Devices","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all `Device`s currently available to the system.\n\n Can be empty if the system does not support audio in general.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11496,"byte_end":11505,"line_start":317,"line_end":317,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":11767,"byte_end":11780,"line_start":326,"line_end":326,"column_start":8,"column_end":21},"name":"input_devices","qualname":"::input_devices","value":"fn () -> InputDevices","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all `Device`s currently available to the system that support one or more\n input stream formats.\n\n Can be empty if the system does not support audio input.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12216,"byte_end":12230,"line_start":339,"line_end":339,"column_start":8,"column_end":22},"name":"output_devices","qualname":"::output_devices","value":"fn () -> OutputDevices","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all `Device`s currently available to the system that support one or more\n output stream formats.\n\n Can be empty if the system does not support audio output.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12585,"byte_end":12605,"line_start":351,"line_end":351,"column_start":8,"column_end":28},"name":"default_input_device","qualname":"::default_input_device","value":"fn () -> Option<Device>","parent":null,"children":[],"decl_id":null,"docs":" The default input audio device on the system.\n\n Returns `None` if no input device is available.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12796,"byte_end":12817,"line_start":358,"line_end":358,"column_start":8,"column_end":29},"name":"default_output_device","qualname":"::default_output_device","value":"fn () -> Option<Device>","parent":null,"children":[],"decl_id":null,"docs":" The default output audio device on the system.\n\n Returns `None` if no output device is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12980,"byte_end":12984,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"name":"name","qualname":"<Device>::name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" The human-readable name of the device.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12959,"byte_end":12968,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13231,"byte_end":13254,"line_start":373,"line_end":373,"column_start":12,"column_end":35},"name":"supported_input_formats","qualname":"<Device>::supported_input_formats","value":"fn (&self) -> Result<SupportedInputFormats, FormatsEnumerationError>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding formats that are supported by the backend.\n\n Can return an error if the device is no longer valid (eg. it has been disconnected).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13210,"byte_end":13219,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13609,"byte_end":13633,"line_start":381,"line_end":381,"column_start":12,"column_end":36},"name":"supported_output_formats","qualname":"<Device>::supported_output_formats","value":"fn (&self) -> Result<SupportedOutputFormats, FormatsEnumerationError>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding output stream formats that are supported by the device.\n\n Can return an error if the device is no longer valid (eg. it has been disconnected).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13588,"byte_end":13597,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13861,"byte_end":13881,"line_start":387,"line_end":387,"column_start":12,"column_end":32},"name":"default_input_format","qualname":"<Device>::default_input_format","value":"fn (&self) -> Result<Format, DefaultFormatError>","parent":null,"children":[],"decl_id":null,"docs":" The default input stream format for the device.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":13840,"byte_end":13849,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14056,"byte_end":14077,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"default_output_format","qualname":"<Device>::default_output_format","value":"fn (&self) -> Result<Format, DefaultFormatError>","parent":null,"children":[],"decl_id":null,"docs":" The default output stream format for the device.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14035,"byte_end":14044,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14254,"byte_end":14257,"line_start":401,"line_end":401,"column_start":12,"column_end":15},"name":"new","qualname":"<EventLoop>::new","value":"fn () -> EventLoop","parent":null,"children":[],"decl_id":null,"docs":" Initializes a new events loop.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14233,"byte_end":14242,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14658,"byte_end":14676,"line_start":412,"line_end":412,"column_start":12,"column_end":30},"name":"build_input_stream","qualname":"<EventLoop>::build_input_stream","value":"fn (&self, device: &Device, format: &Format) -> Result<StreamId, CreationError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new input stream that will run from the given device and with the given format.\n\n On success, returns an identifier for the stream.\n\n Can return an error if the device is no longer valid, or if the input stream format is not\n supported by the device.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14637,"byte_end":14646,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":15194,"byte_end":15213,"line_start":428,"line_end":428,"column_start":12,"column_end":31},"name":"build_output_stream","qualname":"<EventLoop>::build_output_stream","value":"fn (&self, device: &Device, format: &Format) -> Result<StreamId, CreationError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new output stream that will play on the given device and with the given format.\n\n On success, returns an identifier for the stream.\n\n Can return an error if the device is no longer valid, or if the output stream format is not\n supported by the device.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":15173,"byte_end":15182,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":15815,"byte_end":15826,"line_start":448,"line_end":448,"column_start":12,"column_end":23},"name":"play_stream","qualname":"<EventLoop>::play_stream","value":"fn (&self, stream: StreamId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Instructs the audio device that it should start playing the stream with the given ID.\n\n Has no effect is the stream was already playing.\n\n Only call this after you have submitted some data, otherwise you may hear some glitches.\n\n # Panic\n\n If the stream does not exist, this function can either panic or be a no-op.\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":15794,"byte_end":15803,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":16290,"byte_end":16302,"line_start":463,"line_end":463,"column_start":12,"column_end":24},"name":"pause_stream","qualname":"<EventLoop>::pause_stream","value":"fn (&self, stream: StreamId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Instructs the audio device that it should stop playing the stream with the given ID.\n\n Has no effect is the stream was already paused.\n\n If you call `play` afterwards, the playback will resume where it was.\n\n # Panic\n\n If the stream does not exist, this function can either panic or be a no-op.\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":16269,"byte_end":16278,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":16561,"byte_end":16575,"line_start":474,"line_end":474,"column_start":12,"column_end":26},"name":"destroy_stream","qualname":"<EventLoop>::destroy_stream","value":"fn (&self, stream_id: StreamId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Destroys an existing stream.\n\n # Panic\n\n If the stream does not exist, this function can either panic or be a no-op.\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":16540,"byte_end":16549,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17070,"byte_end":17073,"line_start":486,"line_end":486,"column_start":12,"column_end":15},"name":"run","qualname":"<EventLoop>::run","value":"fn <F> (&self, mut callback: F) -> !","parent":null,"children":[],"decl_id":null,"docs":" Takes control of the current thread and begins the stream processing.\n\n > **Note**: Since it takes control of the thread, this method is best called on a separate\n > thread.\n\n Whenever a stream needs to be fed some data, the closure passed as parameter is called.\n You can call the other methods of `EventLoop` without getting a deadlock.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17049,"byte_end":17058,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17382,"byte_end":17402,"line_start":496,"line_end":496,"column_start":12,"column_end":32},"name":"with_max_sample_rate","qualname":"<SupportedFormat>::with_max_sample_rate","value":"fn (self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Turns this `SupportedFormat` into a `Format` corresponding to the maximum samples rate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17361,"byte_end":17370,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":18364,"byte_end":18386,"line_start":528,"line_end":528,"column_start":12,"column_end":34},"name":"cmp_default_heuristics","qualname":"<SupportedFormat>::cmp_default_heuristics","value":"fn (&self, other: &Self) -> std::cmp::Ordering","parent":null,"children":[],"decl_id":null,"docs":" A comparison function which compares two `SupportedFormat`s in terms of their priority of\n use as a default stream format.\n\n Some backends do not provide a default stream format for their audio devices. In these\n cases, CPAL attempts to decide on a reasonable default format for the user. To do this we\n use the \"greatest\" of all supported stream formats when compared with this method.\n\n Formats are prioritised by the following heuristics:\n\n **Channels**:\n\n - Stereo\n - Mono\n - Max available channels\n\n **Sample format**:\n - f32\n - i16\n - u16\n\n **Sample rate**:\n\n - 44100 (cd quality)\n - Max sample rate\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20889,"byte_end":20892,"line_start":628,"line_end":628,"column_start":12,"column_end":15},"name":"len","qualname":"<UnknownTypeInputBuffer>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the buffer in number of samples.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20868,"byte_end":20877,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21270,"byte_end":21273,"line_start":640,"line_end":640,"column_start":12,"column_end":15},"name":"len","qualname":"<UnknownTypeOutputBuffer>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the buffer in number of samples.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21249,"byte_end":21258,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":25304,"byte_end":25313,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":26264,"byte_end":26271,"line_start":59,"line_end":59,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":26587,"byte_end":26593,"line_start":81,"line_end":81,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27317,"byte_end":27338,"line_start":111,"line_end":111,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27481,"byte_end":27503,"line_start":120,"line_end":120,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27787,"byte_end":27798,"line_start":137,"line_end":137,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27950,"byte_end":27962,"line_start":148,"line_end":148,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28446,"byte_end":28458,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\com.rs","byte_start":34715,"byte_end":34729,"line_start":24,"line_end":24,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":36579,"byte_end":36598,"line_start":68,"line_end":68,"column_start":22,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":36624,"byte_end":36643,"line_start":70,"line_end":70,"column_start":22,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":37306,"byte_end":37321,"line_start":93,"line_end":93,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":37436,"byte_end":37446,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":38253,"byte_end":38263,"line_start":125,"line_end":125,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":38499,"byte_end":38509,"line_start":135,"line_end":135,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44323,"byte_end":44329,"line_start":286,"line_end":286,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44355,"byte_end":44361,"line_start":288,"line_end":288,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44372,"byte_end":44378,"line_start":291,"line_end":291,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54456,"byte_end":54462,"line_start":531,"line_end":531,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54579,"byte_end":54585,"line_start":538,"line_end":538,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54606,"byte_end":54612,"line_start":541,"line_end":541,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54876,"byte_end":54882,"line_start":555,"line_end":555,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55177,"byte_end":55185,"line_start":570,"line_end":570,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55321,"byte_end":55329,"line_start":578,"line_end":578,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55528,"byte_end":55536,"line_start":587,"line_end":587,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56545,"byte_end":56555,"line_start":622,"line_end":622,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56581,"byte_end":56591,"line_start":624,"line_end":624,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56611,"byte_end":56621,"line_start":627,"line_end":627,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56902,"byte_end":56909,"line_start":643,"line_end":643,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56935,"byte_end":56942,"line_start":645,"line_end":645,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56962,"byte_end":56969,"line_start":648,"line_end":648,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":57106,"byte_end":57113,"line_start":657,"line_end":657,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":57937,"byte_end":57944,"line_start":683,"line_end":683,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":62291,"byte_end":62300,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85655,"byte_end":85664,"line_start":619,"line_end":619,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85829,"byte_end":85838,"line_start":628,"line_end":628,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85864,"byte_end":85873,"line_start":630,"line_end":630,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86049,"byte_end":86064,"line_start":637,"line_end":637,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86364,"byte_end":86375,"line_start":648,"line_end":648,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86814,"byte_end":86826,"line_start":672,"line_end":672,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86851,"byte_end":86862,"line_start":675,"line_end":675,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":87041,"byte_end":87053,"line_start":687,"line_end":687,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12899,"byte_end":12905,"line_start":362,"line_end":362,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14178,"byte_end":14187,"line_start":398,"line_end":398,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17243,"byte_end":17258,"line_start":493,"line_end":493,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":19900,"byte_end":19911,"line_start":576,"line_end":576,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20086,"byte_end":20097,"line_start":587,"line_end":587,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20243,"byte_end":20255,"line_start":596,"line_end":596,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20452,"byte_end":20464,"line_start":607,"line_end":607,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20627,"byte_end":20639,"line_start":616,"line_end":616,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20772,"byte_end":20794,"line_start":625,"line_end":625,"column_start":10,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21152,"byte_end":21175,"line_start":637,"line_end":637,"column_start":10,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21624,"byte_end":21639,"line_start":649,"line_end":649,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21946,"byte_end":21953,"line_start":661,"line_end":661,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22203,"byte_end":22224,"line_start":675,"line_end":675,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22476,"byte_end":22498,"line_start":689,"line_end":689,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22754,"byte_end":22777,"line_start":703,"line_end":703,"column_start":23,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22936,"byte_end":22959,"line_start":710,"line_end":710,"column_start":16,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23251,"byte_end":23264,"line_start":721,"line_end":721,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23423,"byte_end":23436,"line_start":728,"line_end":728,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23865,"byte_end":23883,"line_start":743,"line_end":743,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":24042,"byte_end":24060,"line_start":750,"line_end":750,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":25304,"byte_end":25313,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":26264,"byte_end":26271,"line_start":59,"line_end":59,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":26587,"byte_end":26593,"line_start":81,"line_end":81,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27317,"byte_end":27338,"line_start":111,"line_end":111,"column_start":19,"column_end":40},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":43},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27481,"byte_end":27503,"line_start":120,"line_end":120,"column_start":19,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":45},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27787,"byte_end":27798,"line_start":137,"line_end":137,"column_start":13,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\null\\mod.rs","byte_start":27950,"byte_end":27962,"line_start":148,"line_end":148,"column_start":13,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":57},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":28446,"byte_end":28458,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29020,"byte_end":29024,"line_start":34,"line_end":34,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":77}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\samples_formats.rs","byte_start":29027,"byte_end":29032,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":77}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\com.rs","byte_start":34715,"byte_end":34729,"line_start":24,"line_end":24,"column_start":15,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":36579,"byte_end":36598,"line_start":68,"line_end":68,"column_start":22,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":594},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":36624,"byte_end":36643,"line_start":70,"line_end":70,"column_start":22,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":594},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":37306,"byte_end":37321,"line_start":93,"line_end":93,"column_start":15,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":210},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":37436,"byte_end":37446,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":38253,"byte_end":38263,"line_start":125,"line_end":125,"column_start":16,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":203},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":38499,"byte_end":38509,"line_start":135,"line_end":135,"column_start":19,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":203},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44323,"byte_end":44329,"line_start":286,"line_end":286,"column_start":22,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44355,"byte_end":44361,"line_start":288,"line_end":288,"column_start":22,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":44372,"byte_end":44378,"line_start":291,"line_end":291,"column_start":6,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54456,"byte_end":54462,"line_start":531,"line_end":531,"column_start":20,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54579,"byte_end":54585,"line_start":538,"line_end":538,"column_start":13,"column_end":19},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54606,"byte_end":54612,"line_start":541,"line_end":541,"column_start":16,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":54876,"byte_end":54882,"line_start":555,"line_end":555,"column_start":15,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55177,"byte_end":55185,"line_start":570,"line_end":570,"column_start":15,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55321,"byte_end":55329,"line_start":578,"line_end":578,"column_start":33,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":55528,"byte_end":55536,"line_start":587,"line_end":587,"column_start":6,"column_end":14},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56545,"byte_end":56555,"line_start":622,"line_end":622,"column_start":22,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":257},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56581,"byte_end":56591,"line_start":624,"line_end":624,"column_start":22,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":257},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56611,"byte_end":56621,"line_start":627,"line_end":627,"column_start":15,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":257},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56902,"byte_end":56909,"line_start":643,"line_end":643,"column_start":22,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56935,"byte_end":56942,"line_start":645,"line_end":645,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":56962,"byte_end":56969,"line_start":648,"line_end":648,"column_start":15,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":57106,"byte_end":57113,"line_start":657,"line_end":657,"column_start":18,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\device.rs","byte_start":57937,"byte_end":57944,"line_start":683,"line_end":683,"column_start":19,"column_end":26},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":264},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":62291,"byte_end":62300,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85655,"byte_end":85664,"line_start":619,"line_end":619,"column_start":15,"column_end":24},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":316},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85829,"byte_end":85838,"line_start":628,"line_end":628,"column_start":22,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":316},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":85864,"byte_end":85873,"line_start":630,"line_end":630,"column_start":22,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":316},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86049,"byte_end":86064,"line_start":637,"line_end":637,"column_start":15,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":337},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86364,"byte_end":86375,"line_start":648,"line_end":648,"column_start":15,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86814,"byte_end":86826,"line_start":672,"line_end":672,"column_start":29,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":376},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":86851,"byte_end":86862,"line_start":675,"line_end":675,"column_start":13,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\wasapi\\stream.rs","byte_start":87041,"byte_end":87053,"line_start":687,"line_end":687,"column_start":13,"column_end":25},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":12899,"byte_end":12905,"line_start":362,"line_end":362,"column_start":6,"column_end":12},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":14178,"byte_end":14187,"line_start":398,"line_end":398,"column_start":6,"column_end":15},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":17243,"byte_end":17258,"line_start":493,"line_end":493,"column_start":6,"column_end":21},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":19900,"byte_end":19911,"line_start":576,"line_end":576,"column_start":23,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20086,"byte_end":20097,"line_start":587,"line_end":587,"column_start":22,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20243,"byte_end":20255,"line_start":596,"line_end":596,"column_start":23,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20452,"byte_end":20464,"line_start":607,"line_end":607,"column_start":26,"column_end":38},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20627,"byte_end":20639,"line_start":616,"line_end":616,"column_start":22,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":20772,"byte_end":20794,"line_start":625,"line_end":625,"column_start":10,"column_end":32},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21152,"byte_end":21175,"line_start":637,"line_end":637,"column_start":10,"column_end":33},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21624,"byte_end":21639,"line_start":649,"line_end":649,"column_start":23,"column_end":38},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":21946,"byte_end":21953,"line_start":661,"line_end":661,"column_start":19,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22203,"byte_end":22224,"line_start":675,"line_end":675,"column_start":19,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":446},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22476,"byte_end":22498,"line_start":689,"line_end":689,"column_start":19,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":449},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22754,"byte_end":22777,"line_start":703,"line_end":703,"column_start":23,"column_end":46},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":711},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":22936,"byte_end":22959,"line_start":710,"line_end":710,"column_start":16,"column_end":39},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":711},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23251,"byte_end":23264,"line_start":721,"line_end":721,"column_start":23,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":723},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23423,"byte_end":23436,"line_start":728,"line_end":728,"column_start":16,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":723},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":23865,"byte_end":23883,"line_start":743,"line_end":743,"column_start":23,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":716},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cpal-0.8.2\\src\\lib.rs","byte_start":24042,"byte_end":24060,"line_start":750,"line_end":750,"column_start":16,"column_end":34},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":1616}}]}