{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","crc32fast","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=fa772b045600203d","-C","extra-filename=-fa772b045600203d","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","cfg_if=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcfg_if-ea23fff8dcc69735.rmeta","--cap-lints","allow","--cfg","crc32fast_stdarchx86","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrc32fast-fa772b045600203d.rmeta"},"prelude":{"crate_id":{"name":"crc32fast","disambiguator":[14984425738714601369,14028776434072473916]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","num":14,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":0,"byte_end":4729,"line_start":1,"line_end":178,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":0,"byte_end":4729,"line_start":1,"line_end":178,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":19},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":85},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49}],"decl_id":null,"docs":" ## Example\n\n ```rust\n use crc32fast::Hasher;\n\n let mut hasher = Hasher::new();\n hasher.update(b\"foo bar baz\");\n let checksum = hasher.finalize();\n ```\n\n ## Performance\n\n This crate contains multiple CRC32 implementations:\n\n - A fast baseline implementation which processes up to 16 bytes per iteration\n - An optimized implementation for modern `x86` using `sse` and `pclmulqdq` instructions\n\n Calling the `Hasher::new` constructor at runtime will perform a feature detection to select the most\n optimal implementation for the current CPU feature set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1187,"byte_end":1193,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"Hasher","qualname":"::Hasher","value":"Hasher {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" Represents an in-progress CRC32 computation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1485,"byte_end":1488,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<Hasher>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Hasher`.\n\n This will perform a CPU feature detection at runtime to select the most\n optimal implementation for the current processor architecture.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1755,"byte_end":1771,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"new_with_initial","qualname":"<Hasher>::new_with_initial","value":"fn (init: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Hasher` with an initial CRC32 state.\n\n This works just like `Hasher::new`, except that it allows for an initial\n CRC32 state to be passed in.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1965,"byte_end":1986,"line_start":80,"line_end":80,"column_start":12,"column_end":33},"name":"internal_new_baseline","qualname":"<Hasher>::internal_new_baseline","value":"fn (init: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":2196,"byte_end":2220,"line_start":89,"line_end":89,"column_start":12,"column_end":36},"name":"internal_new_specialized","qualname":"<Hasher>::internal_new_specialized","value":"fn (init: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":2586,"byte_end":2592,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"update","qualname":"<Hasher>::update","value":"fn (&mut self, buf: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Process the given byte slice and update the hash state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":2916,"byte_end":2924,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Hasher>::finalize","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Finalize the hash state and return the computed CRC32 value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3140,"byte_end":3145,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"reset","qualname":"<Hasher>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the hash state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3450,"byte_end":3457,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"name":"combine","qualname":"<Hasher>::combine","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the hash state with the hash state for the subsequent block of bytes.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\baseline.rs","byte_start":4816,"byte_end":4821,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\specialized\\pclmulqdq.rs","byte_start":8529498,"byte_end":8529503,"line_start":11,"line_end":11,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1275,"byte_end":1281,"line_start":61,"line_end":61,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3813,"byte_end":3819,"line_start":138,"line_end":138,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3960,"byte_end":3966,"line_start":144,"line_end":144,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":4047,"byte_end":4053,"line_start":150,"line_end":150,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\baseline.rs","byte_start":4816,"byte_end":4821,"line_start":8,"line_end":8,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":52},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\specialized\\pclmulqdq.rs","byte_start":8529498,"byte_end":8529503,"line_start":11,"line_end":11,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":1275,"byte_end":1281,"line_start":61,"line_end":61,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3813,"byte_end":3819,"line_start":138,"line_end":138,"column_start":21,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":94},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":3960,"byte_end":3966,"line_start":144,"line_end":144,"column_start":18,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":94},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crc32fast-1.2.0\\src\\lib.rs","byte_start":4047,"byte_end":4053,"line_start":150,"line_end":150,"column_start":23,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":94},"to":{"krate":2,"index":7293}}]}