{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","crossbeam_deque","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=36ddcd3e74457ae2","-C","extra-filename=-36ddcd3e74457ae2","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","crossbeam_epoch=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrossbeam_epoch-ef047b4736e772bf.rmeta","--extern","crossbeam_utils=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrossbeam_utils-7691cda68fa03b20.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrossbeam_deque-36ddcd3e74457ae2.rmeta"},"prelude":{"crate_id":{"name":"crossbeam_deque","disambiguator":[5018473264195450183,6382778854308847870]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":14,"id":{"name":"crossbeam_epoch","disambiguator":[17054536658623444655,6154134795048836908]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":16,"id":{"name":"crossbeam_utils","disambiguator":[7709528671052336800,4286142518779901766]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":17,"id":{"name":"lazy_static","disambiguator":[17281579441627161632,7326486140096487162]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":18,"id":{"name":"memoffset","disambiguator":[16489986462602757596,1492316565336062603]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","num":19,"id":{"name":"scopeguard","disambiguator":[8293681837284562385,10699146686669501925]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":0,"byte_end":65720,"line_start":1,"line_end":1996,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":0,"byte_end":65720,"line_start":1,"line_end":1996,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":55},{"krate":0,"index":166},{"krate":0,"index":180},{"krate":0,"index":179},{"krate":0,"index":177},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":58},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":119},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":182},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":194},{"krate":0,"index":191},{"krate":0,"index":151},{"krate":0,"index":159},{"krate":0,"index":162}],"decl_id":null,"docs":" Concurrent work-stealing deques.\n\n These data structures are most commonly used in work-stealing schedulers. The typical setup\n involves a number of threads, each having its own FIFO or LIFO queue (*worker*). There is also\n one global FIFO queue (*injector*) and a list of references to *worker* queues that are able to\n steal tasks (*stealers*).\n\n We spawn a new task onto the scheduler by pushing it into the *injector* queue. Each worker\n thread waits in a loop until it finds the next task to run and then runs it. To find a task, it\n first looks into its local *worker* queue, and then into the *injector* and *stealers*.\n\n # Queues\n\n [`Injector`] is a FIFO queue, where tasks are pushed and stolen from opposite ends. It is\n shared among threads and is usually the entry point for new tasks.\n\n [`Worker`] has two constructors:\n\n * [`new_fifo()`] - Creates a FIFO queue, in which tasks are pushed and popped from opposite\n   ends.\n * [`new_lifo()`] - Creates a LIFO queue, in which tasks are pushed and popped from the same\n   end.\n\n Each [`Worker`] is owned by a single thread and supports only push and pop operations.\n\n Method [`stealer()`] creates a [`Stealer`] that may be shared among threads and can only steal\n tasks from its [`Worker`]. Tasks are stolen from the end opposite to where they get pushed.\n\n # Stealing\n\n Steal operations come in three flavors:\n\n 1. [`steal()`] - Steals one task.\n 2. [`steal_batch()`] - Steals a batch of tasks and moves them into another worker.\n 3. [`steal_batch_and_pop()`] - Steals a batch of tasks, moves them into another queue, and pops\n    one task from that worker.\n\n In contrast to push and pop operations, stealing can spuriously fail with [`Steal::Retry`], in\n which case the steal operation needs to be retried.\n\n # Examples\n\n Suppose a thread in a work-stealing scheduler is idle and looking for the next task to run. To\n find an available task, it might do the following:\n\n 1. Try popping one task from the local worker queue.\n 2. Try stealing a batch of tasks from the global injector queue.\n 3. Try stealing one task from another thread using the stealer list.\n\n An implementation of this work-stealing strategy:\n\n ```\n use crossbeam_deque::{Injector, Steal, Stealer, Worker};\n use std::iter;\n\n fn find_task<T>(\n     local: &Worker<T>,\n     global: &Injector<T>,\n     stealers: &[Stealer<T>],\n ) -> Option<T> {\n     // Pop a task from the local queue, if not empty.\n     local.pop().or_else(|| {\n         // Otherwise, we need to look for a task elsewhere.\n         iter::repeat_with(|| {\n             // Try stealing a batch of tasks from the global queue.\n             global.steal_batch_and_pop(local)\n                 // Or try stealing a task from one of the other threads.\n                 .or_else(|| stealers.iter().map(|s| s.steal()).collect())\n         })\n         // Loop while no task was stolen and any steal operation needs to be retried.\n         .find(|s| !s.is_retry())\n         // Extract the stolen task, if there is one.\n         .and_then(|s| s.success())\n     })\n }\n ```\n\n [`Worker`]: struct.Worker.html\n [`Stealer`]: struct.Stealer.html\n [`Injector`]: struct.Injector.html\n [`Steal::Retry`]: enum.Steal.html#variant.Retry\n [`new_fifo()`]: struct.Worker.html#method.new_fifo\n [`new_lifo()`]: struct.Worker.html#method.new_lifo\n [`stealer()`]: struct.Worker.html#method.stealer\n [`steal()`]: struct.Stealer.html#method.steal\n [`steal_batch()`]: struct.Stealer.html#method.steal_batch\n [`steal_batch_and_pop()`]: struct.Stealer.html#method.steal_batch_and_pop\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":3804,"byte_end":3826,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":3827,"byte_end":3866,"line_start":90,"line_end":90,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":9500,"byte_end":9506,"line_start":281,"line_end":281,"column_start":12,"column_end":18},"name":"Worker","qualname":"::Worker","value":"Worker {  }","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"decl_id":null,"docs":" A worker queue.\n\n This is a FIFO or LIFO queue that is owned by a single thread, but other threads may steal\n tasks from it. Task schedulers typically create a single worker queue per thread.\n\n # Examples\n\n A FIFO worker:\n\n ```\n use crossbeam_deque::{Steal, Worker};\n\n let w = Worker::new_fifo();\n let s = w.stealer();\n\n w.push(1);\n w.push(2);\n w.push(3);\n\n assert_eq!(s.steal(), Steal::Success(1));\n assert_eq!(w.pop(), Some(2));\n assert_eq!(w.pop(), Some(3));\n ```\n\n A LIFO worker:\n\n ```\n use crossbeam_deque::{Steal, Worker};\n\n let w = Worker::new_lifo();\n let s = w.stealer();\n\n w.push(1);\n w.push(2);\n w.push(3);\n\n assert_eq!(s.steal(), Steal::Success(1));\n assert_eq!(w.pop(), Some(3));\n assert_eq!(w.pop(), Some(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":10193,"byte_end":10201,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"new_fifo","qualname":"<Worker<T>>::new_fifo","value":"fn () -> Worker<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a FIFO worker queue.\n\n Tasks are pushed and popped from opposite ends.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::<i32>::new_fifo();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":10889,"byte_end":10897,"line_start":337,"line_end":337,"column_start":12,"column_end":20},"name":"new_lifo","qualname":"<Worker<T>>::new_lifo","value":"fn () -> Worker<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a LIFO worker queue.\n\n Tasks are pushed and popped from the same end.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::<i32>::new_lifo();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":11633,"byte_end":11640,"line_start":366,"line_end":366,"column_start":12,"column_end":19},"name":"stealer","qualname":"<Worker<T>>::stealer","value":"fn (&self) -> Stealer<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a stealer for this queue.\n\n The returned stealer can be shared among threads and cloned.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::<i32>::new_lifo();\n let s = w.stealer();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":14257,"byte_end":14265,"line_start":447,"line_end":447,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Worker<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue is empty.\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::new_lifo();\n\n assert!(w.is_empty());\n w.push(1);\n assert!(!w.is_empty());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":14662,"byte_end":14666,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"push","qualname":"<Worker<T>>::push","value":"fn (&self, task: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes a task into the queue.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::new_lifo();\n w.push(1);\n w.push(2);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":16000,"byte_end":16003,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"pop","qualname":"<Worker<T>>::pop","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Pops a task from the queue.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::new_fifo();\n w.push(1);\n w.push(2);\n\n assert_eq!(w.pop(), Some(1));\n assert_eq!(w.pop(), Some(2));\n assert_eq!(w.pop(), None);\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20204,"byte_end":20211,"line_start":635,"line_end":635,"column_start":12,"column_end":19},"name":"Stealer","qualname":"::Stealer","value":"Stealer {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" A stealer handle of a worker queue.\n\n Stealers can be shared among threads.\n\n Task schedulers typically have a single worker queue per worker thread.\n\n # Examples\n\n ```\n use crossbeam_deque::{Steal, Worker};\n\n let w = Worker::new_lifo();\n w.push(1);\n w.push(2);\n\n let s = w.stealer();\n assert_eq!(s.steal(), Steal::Success(1));\n assert_eq!(s.steal(), Steal::Success(2));\n assert_eq!(s.steal(), Steal::Empty);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20774,"byte_end":20782,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Stealer<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue is empty.\n\n ```\n use crossbeam_deque::Worker;\n\n let w = Worker::new_lifo();\n let s = w.stealer();\n\n assert!(s.is_empty());\n w.push(1);\n assert!(!s.is_empty());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":21367,"byte_end":21372,"line_start":681,"line_end":681,"column_start":12,"column_end":17},"name":"steal","qualname":"<Stealer<T>>::steal","value":"fn (&self) -> Steal<T>","parent":null,"children":[],"decl_id":null,"docs":" Steals a task from the queue.\n\n # Examples\n\n ```\n use crossbeam_deque::{Steal, Worker};\n\n let w = Worker::new_lifo();\n w.push(1);\n w.push(2);\n\n let s = w.stealer();\n assert_eq!(s.steal(), Steal::Success(1));\n assert_eq!(s.steal(), Steal::Success(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":23385,"byte_end":23396,"line_start":747,"line_end":747,"column_start":12,"column_end":23},"name":"steal_batch","qualname":"<Stealer<T>>::steal_batch","value":"fn (&self, dest: &Worker<T>) -> Steal<()>","parent":null,"children":[],"decl_id":null,"docs":" Steals a batch of tasks and pushes them into another worker.\n\n How many tasks exactly will be stolen is not specified. That said, this method will try to\n steal around half of the tasks in the queue, but also not more than some constant limit.\n\n # Examples\n\n ```\n use crossbeam_deque::Worker;\n\n let w1 = Worker::new_fifo();\n w1.push(1);\n w1.push(2);\n w1.push(3);\n w1.push(4);\n\n let s = w1.stealer();\n let w2 = Worker::new_fifo();\n\n s.steal_batch(&w2);\n assert_eq!(w2.pop(), Some(1));\n assert_eq!(w2.pop(), Some(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":30025,"byte_end":30044,"line_start":924,"line_end":924,"column_start":12,"column_end":31},"name":"steal_batch_and_pop","qualname":"<Stealer<T>>::steal_batch_and_pop","value":"fn (&self, dest: &Worker<T>) -> Steal<T>","parent":null,"children":[],"decl_id":null,"docs":" Steals a batch of tasks, pushes them into another worker, and pops a task from that worker.\n\n How many tasks exactly will be stolen is not specified. That said, this method will try to\n steal around half of the tasks in the queue, but also not more than some constant limit.\n\n # Examples\n\n ```\n use crossbeam_deque::{Steal, Worker};\n\n let w1 = Worker::new_fifo();\n w1.push(1);\n w1.push(2);\n w1.push(3);\n w1.push(4);\n\n let s = w1.stealer();\n let w2 = Worker::new_fifo();\n\n assert_eq!(s.steal_batch_and_pop(&w2), Steal::Success(1));\n assert_eq!(w2.pop(), Some(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40009,"byte_end":40017,"line_start":1221,"line_end":1221,"column_start":12,"column_end":20},"name":"Injector","qualname":"::Injector","value":"Injector {  }","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" An injector queue.\n\n This is a FIFO queue that can be shared among multiple threads. Task schedulers typically have\n a single injector queue, which is the entry point for new tasks.\n\n # Examples\n\n ```\n use crossbeam_deque::{Injector, Steal};\n\n let q = Injector::new();\n q.push(1);\n q.push(2);\n\n assert_eq!(q.steal(), Steal::Success(1));\n assert_eq!(q.steal(), Steal::Success(2));\n assert_eq!(q.steal(), Steal::Empty);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40576,"byte_end":40579,"line_start":1245,"line_end":1245,"column_start":12,"column_end":15},"name":"new","qualname":"<Injector<T>>::new","value":"fn () -> Injector<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new injector queue.\n\n # Examples\n\n ```\n use crossbeam_deque::Injector;\n\n let q = Injector::<i32>::new();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":41263,"byte_end":41267,"line_start":1271,"line_end":1271,"column_start":12,"column_end":16},"name":"push","qualname":"<Injector<T>>::push","value":"fn (&self, task: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes a task into the queue.\n\n # Examples\n\n ```\n use crossbeam_deque::Injector;\n\n let w = Injector::new();\n w.push(1);\n w.push(2);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":44028,"byte_end":44033,"line_start":1346,"line_end":1346,"column_start":12,"column_end":17},"name":"steal","qualname":"<Injector<T>>::steal","value":"fn (&self) -> Steal<T>","parent":null,"children":[],"decl_id":null,"docs":" Steals a task from the queue.\n\n # Examples\n\n ```\n use crossbeam_deque::{Injector, Steal};\n\n let q = Injector::new();\n q.push(1);\n q.push(2);\n\n assert_eq!(q.steal(), Steal::Success(1));\n assert_eq!(q.steal(), Steal::Success(2));\n assert_eq!(q.steal(), Steal::Empty);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":47356,"byte_end":47367,"line_start":1446,"line_end":1446,"column_start":12,"column_end":23},"name":"steal_batch","qualname":"<Injector<T>>::steal_batch","value":"fn (&self, dest: &Worker<T>) -> Steal<()>","parent":null,"children":[],"decl_id":null,"docs":" Steals a batch of tasks and pushes them into a worker.\n\n How many tasks exactly will be stolen is not specified. That said, this method will try to\n steal around half of the tasks in the queue, but also not more than some constant limit.\n\n # Examples\n\n ```\n use crossbeam_deque::{Injector, Worker};\n\n let q = Injector::new();\n q.push(1);\n q.push(2);\n q.push(3);\n q.push(4);\n\n let w = Worker::new_fifo();\n q.steal_batch(&w);\n assert_eq!(w.pop(), Some(1));\n assert_eq!(w.pop(), Some(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":53290,"byte_end":53309,"line_start":1607,"line_end":1607,"column_start":12,"column_end":31},"name":"steal_batch_and_pop","qualname":"<Injector<T>>::steal_batch_and_pop","value":"fn (&self, dest: &Worker<T>) -> Steal<T>","parent":null,"children":[],"decl_id":null,"docs":" Steals a batch of tasks, pushes them into a worker, and pops a task from that worker.\n\n How many tasks exactly will be stolen is not specified. That said, this method will try to\n steal around half of the tasks in the queue, but also not more than some constant limit.\n\n # Examples\n\n ```\n use crossbeam_deque::{Injector, Steal, Worker};\n\n let q = Injector::new();\n q.push(1);\n q.push(2);\n q.push(3);\n q.push(4);\n\n let w = Worker::new_fifo();\n assert_eq!(q.steal_batch_and_pop(&w), Steal::Success(1));\n assert_eq!(w.pop(), Some(2));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":59100,"byte_end":59108,"line_start":1767,"line_end":1767,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Injector<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue is empty.\n\n # Examples\n\n ```\n use crossbeam_deque::Injector;\n\n let q = Injector::new();\n\n assert!(q.is_empty());\n q.push(1);\n assert!(!q.is_empty());\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61437,"byte_end":61442,"line_start":1837,"line_end":1837,"column_start":5,"column_end":10},"name":"Empty","qualname":"::Steal::Empty","value":"Steal::Empty","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" The queue was empty at the time of stealing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61500,"byte_end":61507,"line_start":1840,"line_end":1840,"column_start":5,"column_end":12},"name":"Success","qualname":"::Steal::Success","value":"Steal::Success(T)","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" At least one task was successfully stolen.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61566,"byte_end":61571,"line_start":1843,"line_end":1843,"column_start":5,"column_end":10},"name":"Retry","qualname":"::Steal::Retry","value":"Steal::Retry","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" The steal operation needs to be retried.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61369,"byte_end":61374,"line_start":1835,"line_end":1835,"column_start":10,"column_end":15},"name":"Steal","qualname":"::Steal","value":"Steal::{Empty, Success, Retry}","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":189}],"decl_id":null,"docs":" Possible outcomes of a steal operation.\n\n # Examples\n\n There are lots of ways to chain results of steal operations together:\n\n ```\n use crossbeam_deque::Steal::{self, Empty, Retry, Success};\n\n let collect = |v: Vec<Steal<i32>>| v.into_iter().collect::<Steal<i32>>();\n\n assert_eq!(collect(vec![Empty, Empty, Empty]), Empty);\n assert_eq!(collect(vec![Empty, Retry, Empty]), Retry);\n assert_eq!(collect(vec![Retry, Success(1), Empty]), Success(1));\n\n assert_eq!(collect(vec![Empty, Empty]).or_else(|| Retry), Retry);\n assert_eq!(collect(vec![Retry, Empty]).or_else(|| Success(1)), Success(1));\n ```\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61310,"byte_end":61321,"line_start":1833,"line_end":1833,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61939,"byte_end":61947,"line_start":1859,"line_end":1859,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Steal<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue was empty at the time of stealing.\n\n # Examples\n\n ```\n use crossbeam_deque::Steal::{Empty, Retry, Success};\n\n assert!(!Success(7).is_empty());\n assert!(!Retry::<i32>.is_empty());\n\n assert!(Empty::<i32>.is_empty());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":62396,"byte_end":62406,"line_start":1878,"line_end":1878,"column_start":12,"column_end":22},"name":"is_success","qualname":"<Steal<T>>::is_success","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if at least one task was stolen.\n\n # Examples\n\n ```\n use crossbeam_deque::Steal::{Empty, Retry, Success};\n\n assert!(!Empty::<i32>.is_success());\n assert!(!Retry::<i32>.is_success());\n\n assert!(Success(7).is_success());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":62865,"byte_end":62873,"line_start":1897,"line_end":1897,"column_start":12,"column_end":20},"name":"is_retry","qualname":"<Steal<T>>::is_retry","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the steal operation needs to be retried.\n\n # Examples\n\n ```\n use crossbeam_deque::Steal::{Empty, Retry, Success};\n\n assert!(!Empty::<i32>.is_retry());\n assert!(!Success(7).is_retry());\n\n assert!(Retry::<i32>.is_retry());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":63345,"byte_end":63352,"line_start":1916,"line_end":1916,"column_start":12,"column_end":19},"name":"success","qualname":"<Steal<T>>::success","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of the operation, if successful.\n\n # Examples\n\n ```\n use crossbeam_deque::Steal::{Empty, Retry, Success};\n\n assert_eq!(Empty::<i32>.success(), None);\n assert_eq!(Retry::<i32>.success(), None);\n\n assert_eq!(Success(7).success(), Some(7));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":64351,"byte_end":64358,"line_start":1944,"line_end":1944,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Steal<T>>::or_else","value":"fn <F> (self, f: F) -> Steal<T>","parent":null,"children":[],"decl_id":null,"docs":" If no task was stolen, attempts another steal operation.\n\n Returns this steal result if it is `Success`. Otherwise, closure `f` is invoked and then:\n\n * If the second steal resulted in `Success`, it is returned.\n * If both steals were unsuccessful but any resulted in `Retry`, then `Retry` is returned.\n * If both resulted in `None`, then `None` is returned.\n\n # Examples\n\n ```\n use crossbeam_deque::Steal::{Empty, Retry, Success};\n\n assert_eq!(Success(1).or_else(|| Success(2)), Success(1));\n assert_eq!(Retry.or_else(|| Success(2)), Success(2));\n\n assert_eq!(Retry.or_else(|| Empty), Retry::<i32>);\n assert_eq!(Empty.or_else(|| Retry), Retry::<i32>);\n\n assert_eq!(Empty.or_else(|| Empty), Empty::<i32>);\n ```\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":5001,"byte_end":5007,"line_start":128,"line_end":128,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":5023,"byte_end":5029,"line_start":130,"line_end":130,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":6725,"byte_end":6731,"line_start":174,"line_end":174,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":6879,"byte_end":6885,"line_start":183,"line_end":183,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":7757,"byte_end":7762,"line_start":209,"line_end":209,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":9900,"byte_end":9906,"line_start":295,"line_end":295,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":9922,"byte_end":9928,"line_start":297,"line_end":297,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":19607,"byte_end":19613,"line_start":609,"line_end":609,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20405,"byte_end":20412,"line_start":643,"line_end":643,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20449,"byte_end":20456,"line_start":644,"line_end":644,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20472,"byte_end":20479,"line_start":646,"line_end":646,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":36463,"byte_end":36470,"line_start":1093,"line_end":1093,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":36644,"byte_end":36651,"line_start":1102,"line_end":1102,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":37514,"byte_end":37518,"line_start":1134,"line_end":1134,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":38014,"byte_end":38019,"line_start":1155,"line_end":1155,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40298,"byte_end":40306,"line_start":1232,"line_end":1232,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40343,"byte_end":40351,"line_start":1233,"line_end":1233,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40367,"byte_end":40375,"line_start":1235,"line_end":1235,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":59309,"byte_end":59317,"line_start":1774,"line_end":1774,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":60546,"byte_end":60554,"line_start":1809,"line_end":1809,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61584,"byte_end":61589,"line_start":1846,"line_end":1846,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":64781,"byte_end":64786,"line_start":1962,"line_end":1962,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":65069,"byte_end":65074,"line_start":1972,"line_end":1972,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":5001,"byte_end":5007,"line_start":128,"line_end":128,"column_start":25,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":5023,"byte_end":5029,"line_start":130,"line_end":130,"column_start":9,"column_end":15},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":6725,"byte_end":6731,"line_start":174,"line_end":174,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":6879,"byte_end":6885,"line_start":183,"line_end":183,"column_start":18,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":7757,"byte_end":7762,"line_start":209,"line_end":209,"column_start":18,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":50},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":9900,"byte_end":9906,"line_start":295,"line_end":295,"column_start":31,"column_end":37},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":58},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":9922,"byte_end":9928,"line_start":297,"line_end":297,"column_start":9,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":19607,"byte_end":19613,"line_start":609,"line_end":609,"column_start":24,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":58},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20405,"byte_end":20412,"line_start":643,"line_end":643,"column_start":31,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20449,"byte_end":20456,"line_start":644,"line_end":644,"column_start":31,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":20472,"byte_end":20479,"line_start":646,"line_end":646,"column_start":9,"column_end":16},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":36463,"byte_end":36470,"line_start":1093,"line_end":1093,"column_start":19,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":36644,"byte_end":36651,"line_start":1102,"line_end":1102,"column_start":24,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":37514,"byte_end":37518,"line_start":1134,"line_end":1134,"column_start":9,"column_end":13},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":38014,"byte_end":38019,"line_start":1155,"line_end":1155,"column_start":9,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40298,"byte_end":40306,"line_start":1232,"line_end":1232,"column_start":31,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40343,"byte_end":40351,"line_start":1233,"line_end":1233,"column_start":31,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":40367,"byte_end":40375,"line_start":1235,"line_end":1235,"column_start":9,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":59309,"byte_end":59317,"line_start":1774,"line_end":1774,"column_start":18,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":60546,"byte_end":60554,"line_start":1809,"line_end":1809,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":61584,"byte_end":61589,"line_start":1846,"line_end":1846,"column_start":9,"column_end":14},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":64781,"byte_end":64786,"line_start":1962,"line_end":1962,"column_start":24,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\crossbeam-deque-0.7.2\\src\\lib.rs","byte_start":65069,"byte_end":65074,"line_start":1972,"line_end":1972,"column_start":36,"column_end":41},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":3947}}]}