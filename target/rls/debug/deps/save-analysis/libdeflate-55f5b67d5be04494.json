{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","deflate","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=55f5b67d5be04494","-C","extra-filename=-55f5b67d5be04494","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","adler32=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libadler32-0e7d7819f92c0c27.rmeta","--extern","byteorder=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbyteorder-64f7b87f82657a23.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libdeflate-55f5b67d5be04494.rmeta"},"prelude":{"crate_id":{"name":"deflate","disambiguator":[18193453627713725514,15097347517493833582]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":14,"id":{"name":"adler32","disambiguator":[5470020609090045846,14440380773254217963]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","num":15,"id":{"name":"byteorder","disambiguator":[373764108737062493,6998070977021925776]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":0,"byte_end":14941,"line_start":1,"line_end":495,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3003,"byte_end":3021,"line_start":102,"line_end":102,"column_start":31,"column_end":49},"alias_span":null,"name":"CompressionOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3023,"byte_end":3037,"line_start":102,"line_end":102,"column_start":51,"column_end":65},"alias_span":null,"name":"SpecialOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3039,"byte_end":3050,"line_start":102,"line_end":102,"column_start":67,"column_end":78},"alias_span":null,"name":"Compression","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3088,"byte_end":3100,"line_start":104,"line_end":104,"column_start":15,"column_end":27},"alias_span":null,"name":"MatchingType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3221,"byte_end":3235,"line_start":110,"line_end":110,"column_start":22,"column_end":36},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":647}},{"kind":"Use","ref_id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3237,"byte_end":3248,"line_start":110,"line_end":110,"column_start":38,"column_end":49},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":647}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":0,"byte_end":14941,"line_start":1,"line_end":495,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":27},{"krate":0,"index":98},{"krate":0,"index":161},{"krate":0,"index":172},{"krate":0,"index":209},{"krate":0,"index":241},{"krate":0,"index":274},{"krate":0,"index":288},{"krate":0,"index":352},{"krate":0,"index":379},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":434},{"krate":0,"index":464},{"krate":0,"index":474},{"krate":0,"index":490},{"krate":0,"index":537},{"krate":0,"index":560},{"krate":0,"index":575},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":660}],"decl_id":null,"docs":" An implementation an encoder using [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html)\n compression algorightm in pure rust.\n\n This library provides functions to compress data using the DEFLATE algorithm,\n optionally wrapped using the [zlib](https://tools.ietf.org/html/rfc1950) or\n [gzip](http://www.gzip.org/zlib/rfc-gzip.html) formats.\n The current implementation is still a bit lacking speed-wise compared to C-libraries\n like zlib and miniz.\n\n The deflate algorithm is an older compression algorithm that is still widely used today,\n by e.g html headers, the `.png` inage format, the unix `gzip` program and commonly in `.zip`\n files. The `zlib` and `gzip` formats are wrappers around DEFLATE-compressed data, containing\n some extra metadata and a checksum to validate the integrity of the raw data.\n\n The deflate algorithm does not perform as well as newer algorhitms used in file formats such as\n `.7z`, `.rar`, `.xz` and `.bz2`, and is thus not the ideal choice for applications where\n the `DEFLATE` format (with or without wrappers) is not required.\n\n Support for the gzip wrapper (the wrapper that is used in `.gz` files) is disabled by default,\n but can be enabled with the `gzip` feature.\n\n As this library is still in development, the compression output may change slightly\n between versions.\n\n\n # Examples:\n ## Simple compression function:\n ``` rust\n use deflate::deflate_bytes;\n\n let data = b\"Some data\";\n let compressed = deflate_bytes(data);\n # let _ = compressed;\n ```\n\n ## Using a writer:\n ``` rust\n use std::io::Write;\n\n use deflate::Compression;\n use deflate::write::ZlibEncoder;\n\n let data = b\"This is some test data\";\n let mut encoder = ZlibEncoder::new(Vec::new(), Compression::Default);\n encoder.write_all(data).expect(\"Write error!\");\n let compressed_data = encoder.finish().expect(\"Failed to finish compression!\");\n # let _ = compressed_data;\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16369,"byte_end":16373,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Fast","qualname":"::compression_options::Compression::Fast","value":"Compression::Fast","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Fast minimal compression (`CompressionOptions::fast()`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16436,"byte_end":16443,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"Default","qualname":"::compression_options::Compression::Default","value":"Compression::Default","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Default level (`CompressionOptions::default()`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16697,"byte_end":16701,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"Best","qualname":"::compression_options::Compression::Best","value":"Compression::Best","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Higher compression level (`CompressionOptions::high()`).\n\n Best in this context isn't actually the highest possible level\n the encoder can do, but is meant to emulate the `Best` setting in the `Flate2`\n library.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16286,"byte_end":16297,"line_start":31,"line_end":31,"column_start":10,"column_end":21},"name":"Compression","qualname":"::compression_options::Compression","value":"Compression::{Fast, Default, Best}","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666}],"decl_id":null,"docs":" An enum describing the level of compression to be used by the encoder\n\n Higher compression ratios will take longer to encode.\n\n This is a simplified interface to specify a compression level.\n\n [See also `CompressionOptions`](./struct.CompressionOptions.html) which provides for\n tweaking the settings more finely.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16979,"byte_end":16985,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Normal","qualname":"::compression_options::SpecialOptions::Normal","value":"SpecialOptions::Normal","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Compress normally.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":17045,"byte_end":17056,"line_start":56,"line_end":56,"column_start":5,"column_end":16},"name":"_ForceFixed","qualname":"::compression_options::SpecialOptions::_ForceFixed","value":"SpecialOptions::_ForceFixed","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Force fixed huffman tables. (Unimplemented!).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":17129,"byte_end":17141,"line_start":58,"line_end":58,"column_start":5,"column_end":17},"name":"_ForceStored","qualname":"::compression_options::SpecialOptions::_ForceStored","value":"SpecialOptions::_ForceStored","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Force stored (uncompressed) blocks only. (Unimplemented!).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16931,"byte_end":16945,"line_start":52,"line_end":52,"column_start":10,"column_end":24},"name":"SpecialOptions","qualname":"::compression_options::SpecialOptions","value":"SpecialOptions::{Normal, _ForceFixed, _ForceStored}","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691}],"decl_id":null,"docs":" Enum allowing some special options (not implemented yet)!\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":17707,"byte_end":17725,"line_start":78,"line_end":78,"column_start":12,"column_end":30},"name":"CompressionOptions","qualname":"::compression_options::CompressionOptions","value":"CompressionOptions { max_hash_checks, lazy_if_less_than, matching_type, special }","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"decl_id":null,"docs":" A struct describing the options for a compressor or compression function.\n\n These values are not stable and still subject to change!\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":18163,"byte_end":18178,"line_start":87,"line_end":87,"column_start":9,"column_end":24},"name":"max_hash_checks","qualname":"::compression_options::CompressionOptions::max_hash_checks","value":"u16","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" The maximum number of checks to make in the hash table for matches.\n\n Higher numbers mean slower, but better compression. Very high (say `>1024`) values\n will impact compression speed a lot. The maximum match length is 2^15, so values higher than\n this won't make any difference, and will be truncated to 2^15 by the compression\n function/writer.\n\n Default value: `128`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":18782,"byte_end":18799,"line_start":101,"line_end":101,"column_start":9,"column_end":26},"name":"lazy_if_less_than","qualname":"::compression_options::CompressionOptions::lazy_if_less_than","value":"u16","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" Only lazy match if we have a length less than this value.\n\n Higher values degrade compression slightly, but improve compression speed.\n\n * `0`: Never lazy match. (Same effect as setting MatchingType to greedy, but may be slower).\n * `1...257`: Only check for a better match if the first match was shorter than this value.\n * `258`: Always lazy match.\n\n As the maximum length of a match is `258`, values higher than this will have\n no further effect.\n\n * Default value: `32`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":19424,"byte_end":19437,"line_start":116,"line_end":116,"column_start":9,"column_end":22},"name":"matching_type","qualname":"::compression_options::CompressionOptions::matching_type","value":"lz77::MatchingType","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" Whether to use lazy or greedy matching.\n\n Lazy matching will provide better compression, at the expense of compression speed.\n\n As a special case, if max_hash_checks is set to 0, and matching_type is set to lazy,\n compression using only run-length encoding (i.e maximum match distance of 1) is performed.\n (This may be changed in the future but is defined like this at the moment to avoid API\n breakage.\n\n [See `MatchingType`](./enum.MatchingType.html)\n\n * Default value: `MatchingType::Lazy`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":19568,"byte_end":19575,"line_start":119,"line_end":119,"column_start":9,"column_end":16},"name":"special","qualname":"::compression_options::CompressionOptions::special","value":"compression_options::SpecialOptions","parent":{"krate":0,"index":707},"children":[],"decl_id":null,"docs":" Force fixed/stored blocks (Not implemented yet).\n * Default value: `SpecialOptions::Normal`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":19872,"byte_end":19876,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"high","qualname":"<CompressionOptions>::high","value":"fn () -> CompressionOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":20511,"byte_end":20515,"line_start":141,"line_end":141,"column_start":12,"column_end":16},"name":"fast","qualname":"<CompressionOptions>::fast","value":"fn () -> CompressionOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns  a fast set of compression settings\n\n Ideally this should roughly correspond to the `FAST(1)` setting in miniz.\n However, that setting makes miniz use a somewhat different algorhithm,\n so currently hte fast level in this library is slower and better compressing\n than the corresponding level in miniz.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":21076,"byte_end":21088,"line_start":155,"line_end":155,"column_start":12,"column_end":24},"name":"huffman_only","qualname":"<CompressionOptions>::huffman_only","value":"fn () -> CompressionOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of compression settings that makes the compressor only compress using\n huffman coding. (Ignoring any length/distance matching)\n\n This will normally have the worst compression ratio (besides only using uncompressed data),\n but may be the fastest method in some cases.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":21767,"byte_end":21770,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"rle","qualname":"<CompressionOptions>::rle","value":"fn () -> CompressionOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of compression settings that makes the compressor compress only using\n run-length encoding (i.e only looking for matches one byte back).\n\n This is very fast, but tends to compress worse than looking for more matches using hash\n chains that the slower settings do.\n Works best on data that has runs of equivialent bytes, like binary or simple images,\n less good for text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":49299,"byte_end":49305,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Greedy","qualname":"::lz77::MatchingType::Greedy","value":"MatchingType::Greedy","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Use greedy matching: the matching algorithm simply uses a match right away\n if found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":49623,"byte_end":49627,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Lazy","qualname":"::lz77::MatchingType::Lazy","value":"MatchingType::Lazy","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Use lazy matching: after finding a match, the next input byte is checked, to see\n if there is a better match starting at that byte.\n\n As a special case, if max_hash_checks is set to 0, compression using only run-length\n (i.e maximum match distance of 1) is performed instead.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":49179,"byte_end":49191,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"name":"MatchingType","qualname":"::lz77::MatchingType","value":"MatchingType::{Greedy, Lazy}","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":745}],"decl_id":null,"docs":" An enum describing whether we use lazy or greedy matching.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":596},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":227816,"byte_end":227830,"line_start":91,"line_end":91,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::writer::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":598}],"decl_id":null,"docs":" A DEFLATE encoder/compressor.\n\n A struct implementing a [`Write`] interface that takes unencoded data and compresses it to\n the provided writer using DEFLATE compression.\n\n # Examples\n\n ```rust\n # use std::io;\n #\n # fn try_main() -> io::Result<Vec<u8>> {\n #\n use std::io::Write;\n\n use deflate::Compression;\n use deflate::write::DeflateEncoder;\n\n let data = b\"This is some test data\";\n let mut encoder = DeflateEncoder::new(Vec::new(), Compression::Default);\n encoder.write_all(data)?;\n let compressed_data = encoder.finish()?;\n # Ok(compressed_data)\n #\n # }\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":227998,"byte_end":228001,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn <O> (writer: W, options: O) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using the provided compression options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":228349,"byte_end":228355,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Encode all pending data to the contained writer, consume this `DeflateEncoder`,\n and return the contained writer if writing succeeds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":228771,"byte_end":228776,"line_start":114,"line_end":114,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the encoder (except the compression options), replacing the current writer\n with a new one, returning the old one.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":231160,"byte_end":231171,"line_start":186,"line_end":186,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::writer::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617}],"decl_id":null,"docs":" A Zlib encoder/compressor.\n\n A struct implementing a [`Write`] interface that takes unencoded data and compresses it to\n the provided writer using DEFLATE compression with Zlib headers and trailers.\n\n # Examples\n\n ```rust\n # use std::io;\n #\n # fn try_main() -> io::Result<Vec<u8>> {\n #\n use std::io::Write;\n\n use deflate::Compression;\n use deflate::write::ZlibEncoder;\n\n let data = b\"This is some test data\";\n let mut encoder = ZlibEncoder::new(Vec::new(), Compression::Default);\n encoder.write_all(data)?;\n let compressed_data = encoder.finish()?;\n # Ok(compressed_data)\n #\n # }\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":231398,"byte_end":231401,"line_start":194,"line_end":194,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn <O> (writer: W, options: O) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ZlibEncoder` using the provided compression options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":232146,"byte_end":232152,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Encode all pending data to the contained writer, consume this `ZlibEncoder`,\n and return the contained writer if writing succeeds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":232568,"byte_end":232573,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, writer: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the encoder (except the compression options), replacing the current writer\n with a new one, returning the old one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":233475,"byte_end":233483,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"checksum","qualname":"<ZlibEncoder<W>>::checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Return the adler32 checksum of the currently consumed data.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":3192,"byte_end":3197,"line_start":109,"line_end":109,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":648}],"decl_id":null,"docs":" Encoders implementing a `Write` interface.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":4237,"byte_end":4255,"line_start":143,"line_end":143,"column_start":8,"column_end":26},"name":"deflate_bytes_conf","qualname":"::deflate_bytes_conf","value":"fn <O> (input: &[u8], options: O) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the given slice of bytes with DEFLATE compression.\n\n Returns a `Vec<u8>` of the compressed data.\n\n # Examples\n\n ```\n use deflate::{deflate_bytes_conf, Compression};\n\n let data = b\"This is some test data\";\n let compressed_data = deflate_bytes_conf(data, Compression::Best);\n # let _ = compressed_data;\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":4908,"byte_end":4921,"line_start":168,"line_end":168,"column_start":8,"column_end":21},"name":"deflate_bytes","qualname":"::deflate_bytes","value":"fn (input: &[u8]) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the given slice of bytes with DEFLATE compression using the default compression\n level.\n\n Returns a `Vec<u8>` of the compressed data.\n\n # Examples\n\n ```\n use deflate::deflate_bytes;\n\n let data = b\"This is some test data\";\n let compressed_data = deflate_bytes(data);\n # let _ = compressed_data;\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":5461,"byte_end":5484,"line_start":187,"line_end":187,"column_start":8,"column_end":31},"name":"deflate_bytes_zlib_conf","qualname":"::deflate_bytes_zlib_conf","value":"fn <O> (input: &[u8], options: O) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.\n\n Returns a `Vec<u8>` of the compressed data.\n\n Zlib dictionaries are not yet suppored.\n\n # Examples\n\n ```\n use deflate::{deflate_bytes_zlib_conf, Compression};\n\n let data = b\"This is some test data\";\n let compressed_data = deflate_bytes_zlib_conf(data, Compression::Best);\n # let _ = compressed_data;\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lib.rs","byte_start":6606,"byte_end":6624,"line_start":222,"line_end":222,"column_start":8,"column_end":26},"name":"deflate_bytes_zlib","qualname":"::deflate_bytes_zlib","value":"fn (input: &[u8]) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer,\n using the default compression level.\n\n Returns a Vec<u8> of the compressed data.\n\n Zlib dictionaries are not yet suppored.\n\n # Examples\n\n ```\n use deflate::deflate_bytes_zlib;\n\n let data = b\"This is some test data\";\n let compressed_data = deflate_bytes_zlib(data);\n # let _ = compressed_data;\n ```\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16723,"byte_end":16734,"line_start":44,"line_end":44,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":17163,"byte_end":17177,"line_start":61,"line_end":61,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":19746,"byte_end":19764,"line_start":124,"line_end":124,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":22020,"byte_end":22038,"line_start":181,"line_end":181,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":22212,"byte_end":22230,"line_start":188,"line_end":188,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":36975,"byte_end":36986,"line_start":1333,"line_end":1333,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":37205,"byte_end":37216,"line_start":1344,"line_end":1344,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":40020,"byte_end":40032,"line_start":1425,"line_end":1425,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":49654,"byte_end":49666,"line_start":40,"line_end":40,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":51190,"byte_end":51199,"line_start":77,"line_end":77,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":54175,"byte_end":54185,"line_start":176,"line_end":176,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lzvalue.rs","byte_start":96316,"byte_end":96328,"line_start":10,"line_end":10,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lzvalue.rs","byte_start":97099,"byte_end":97106,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":99445,"byte_end":99451,"line_start":16,"line_end":16,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":99608,"byte_end":99614,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":101130,"byte_end":101146,"line_start":80,"line_end":80,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\length_encode.rs","byte_start":110884,"byte_end":110897,"line_start":18,"line_end":18,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\output_writer.rs","byte_start":146359,"byte_end":146372,"line_start":34,"line_end":34,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":170823,"byte_end":170833,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":170925,"byte_end":170935,"line_start":17,"line_end":17,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":171332,"byte_end":171347,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":171502,"byte_end":171517,"line_start":45,"line_end":45,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\bitstream.rs","byte_start":174785,"byte_end":174794,"line_start":58,"line_end":58,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\bitstream.rs","byte_start":176248,"byte_end":176257,"line_start":106,"line_end":106,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\encoder_state.rs","byte_start":180024,"byte_end":180036,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\input_buffer.rs","byte_start":199201,"byte_end":199212,"line_start":15,"line_end":15,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":204434,"byte_end":204446,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":205042,"byte_end":205055,"line_start":55,"line_end":55,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":206574,"byte_end":206586,"line_start":93,"line_end":93,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":227897,"byte_end":227911,"line_start":95,"line_end":95,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":229131,"byte_end":229145,"line_start":125,"line_end":125,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":229729,"byte_end":229743,"line_start":141,"line_end":141,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":231295,"byte_end":231306,"line_start":192,"line_end":192,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":233575,"byte_end":233586,"line_start":254,"line_end":254,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":234584,"byte_end":234595,"line_start":280,"line_end":280,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":16723,"byte_end":16734,"line_start":44,"line_end":44,"column_start":18,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":661},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":17163,"byte_end":17177,"line_start":61,"line_end":61,"column_start":18,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":19746,"byte_end":19764,"line_start":124,"line_end":124,"column_start":6,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":22020,"byte_end":22038,"line_start":181,"line_end":181,"column_start":18,"column_end":36},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\compression_options.rs","byte_start":22212,"byte_end":22230,"line_start":188,"line_end":188,"column_start":28,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":36975,"byte_end":36986,"line_start":1333,"line_end":1333,"column_start":21,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":734},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":37205,"byte_end":37216,"line_start":1344,"line_end":1344,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\huffman_table.rs","byte_start":40020,"byte_end":40032,"line_start":1425,"line_end":1425,"column_start":6,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":49654,"byte_end":49666,"line_start":40,"line_end":40,"column_start":23,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":742},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":51190,"byte_end":51199,"line_start":77,"line_end":77,"column_start":6,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lz77.rs","byte_start":54175,"byte_end":54185,"line_start":176,"line_end":176,"column_start":6,"column_end":16},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lzvalue.rs","byte_start":96316,"byte_end":96328,"line_start":10,"line_end":10,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\lzvalue.rs","byte_start":97099,"byte_end":97106,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":833},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":99445,"byte_end":99451,"line_start":16,"line_end":16,"column_start":18,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":177},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":99608,"byte_end":99614,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\chained_hash_table.rs","byte_start":101130,"byte_end":101146,"line_start":80,"line_end":80,"column_start":6,"column_end":22},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\length_encode.rs","byte_start":110884,"byte_end":110897,"line_start":18,"line_end":18,"column_start":6,"column_end":19},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\output_writer.rs","byte_start":146359,"byte_end":146372,"line_start":34,"line_end":34,"column_start":6,"column_end":19},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":170823,"byte_end":170833,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":170925,"byte_end":170935,"line_start":17,"line_end":17,"column_start":26,"column_end":36},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":385},"to":{"krate":0,"index":381}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":171332,"byte_end":171347,"line_start":37,"line_end":37,"column_start":6,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\checksum.rs","byte_start":171502,"byte_end":171517,"line_start":45,"line_end":45,"column_start":26,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":397},"to":{"krate":0,"index":381}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\bitstream.rs","byte_start":174785,"byte_end":174794,"line_start":58,"line_end":58,"column_start":6,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\bitstream.rs","byte_start":176248,"byte_end":176257,"line_start":106,"line_end":106,"column_start":16,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":421},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\encoder_state.rs","byte_start":180024,"byte_end":180036,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\input_buffer.rs","byte_start":199201,"byte_end":199212,"line_start":15,"line_end":15,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":204434,"byte_end":204446,"line_start":22,"line_end":22,"column_start":6,"column_end":18},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":205042,"byte_end":205055,"line_start":55,"line_end":55,"column_start":6,"column_end":19},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\deflate_state.rs","byte_start":206574,"byte_end":206586,"line_start":93,"line_end":93,"column_start":16,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":227897,"byte_end":227911,"line_start":95,"line_end":95,"column_start":16,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":229131,"byte_end":229145,"line_start":125,"line_end":125,"column_start":30,"column_end":44},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":229729,"byte_end":229743,"line_start":141,"line_end":141,"column_start":25,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":596},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":231295,"byte_end":231306,"line_start":192,"line_end":192,"column_start":16,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":233575,"byte_end":233586,"line_start":254,"line_end":254,"column_start":30,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":613},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\deflate-0.7.20\\src\\writer.rs","byte_start":234584,"byte_end":234595,"line_start":280,"line_end":280,"column_start":25,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":613},"to":{"krate":2,"index":1726}}]}