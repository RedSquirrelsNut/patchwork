{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","error_chain","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"backtrace\"","-C","metadata=c1fa39292aabbdf0","-C","extra-filename=-c1fa39292aabbdf0","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","backtrace=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbacktrace-6d1b0ddfa29f8cd0.rmeta","--cap-lints","allow","--cfg","has_error_source","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liberror_chain-c1fa39292aabbdf0.rmeta"},"prelude":{"crate_id":{"name":"error_chain","disambiguator":[14065263172186327255,1905504923812964145]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","num":14,"id":{"name":"backtrace","disambiguator":[4081245599486101636,15110426415547361709]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","num":15,"id":{"name":"rustc_demangle","disambiguator":[11556819724398783699,7640034588614552800]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","num":16,"id":{"name":"cfg_if","disambiguator":[17449466799846026439,9910330128128269589]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":26705,"line_start":1,"line_end":808,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20016,"byte_end":20024,"line_start":548,"line_end":548,"column_start":21,"column_end":29},"alias_span":null,"name":"ExitCode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":59784,"byte_end":59793,"line_start":1,"line_end":1,"column_start":21,"column_end":30},"alias_span":null,"name":"Backtrace","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":59795,"byte_end":59812,"line_start":1,"line_end":1,"column_start":32,"column_end":49},"alias_span":null,"name":"InternalBacktrace","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":14,"index":397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20125,"byte_end":20134,"line_start":552,"line_end":552,"column_start":20,"column_end":29},"alias_span":null,"name":"Backtrace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20170,"byte_end":20187,"line_start":554,"line_end":554,"column_start":20,"column_end":37},"alias_span":null,"name":"InternalBacktrace","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":26705,"line_start":1,"line_end":808,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":62},{"krate":0,"index":102},{"krate":0,"index":107},{"krate":0,"index":78},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" A library for consistent and reliable error handling\n\n error-chain makes it easy to take full advantage of Rust's\n powerful error handling features without the overhead of\n maintaining boilerplate error types and conversions. It implements\n an opinionated strategy for defining your own error types, as well\n as conversions from others' error types.\n\n ## Quick start\n\n If you just want to set up your new project with error-chain,\n follow the [quickstart.rs] template, and read this [intro]\n to error-chain.\n\n [quickstart.rs]: https://github.com/rust-lang-nursery/error-chain/blob/master/examples/quickstart.rs\n [intro]: http://brson.github.io/2016/11/30/starting-with-error-chain\n\n ## Why error chain?\n\n * error-chain is easy to configure. Handle errors robustly with minimal\n   effort.\n * Basic error handling requires no maintenance of custom error types\n   nor the [`From`] conversions that make `?` work.\n * error-chain scales from simple error handling strategies to more\n   rigorous.  Return formatted strings for simple errors, only\n   introducing error variants and their strong typing as needed for\n   advanced error recovery.\n * error-chain makes it trivial to correctly manage the [cause] of\n   the errors generated by your own code. This is the \"chaining\"\n   in \"error-chain\".\n\n [cause]: https://doc.rust-lang.org/std/error/trait.Error.html#method.cause\n\n ## Principles of error-chain\n\n error-chain is based on the following principles:\n\n * No error should ever be discarded. This library primarily\n   makes it easy to \"chain\" errors with the [`chain_err`] method.\n * Introducing new errors is trivial. Simple errors can be introduced\n   at the error site with just a string.\n * Handling errors is possible with pattern matching.\n * Conversions between error types are done in an automatic and\n   consistent way - [`From`] conversion behavior is never specified\n   explicitly.\n * Errors implement [`Send`].\n * Errors can carry backtraces.\n\n Similar to other libraries like [error-type] and [quick-error],\n this library introduces the error chaining mechanism originally\n employed by Cargo.  The [`error_chain!`] macro declares the types\n and implementation boilerplate necessary for fulfilling a\n particular error-handling strategy. Most importantly it defines a\n custom error type (called [`Error`] by convention) and the [`From`]\n conversions that let the `?` operator work.\n\n This library differs in a few ways from previous error libs:\n\n * Instead of defining the custom [`Error`] type as an enum, it is a\n   struct containing an [`ErrorKind`][] (which defines the\n   [`description`] and [`display_chain`] methods for the error), an opaque,\n   optional, boxed [`std::error::Error`]` + `[`Send`]` + 'static` object\n   (which defines the [`cause`], and establishes the links in the\n   error chain), and a [`Backtrace`].\n * The macro also defines a [`ResultExt`] trait that defines a\n   [`chain_err`] method. This method on all [`std::error::Error`]` + `[`Send`]` + 'static`\n   types extends the error chain by boxing the current\n   error into an opaque object and putting it inside a new concrete\n   error.\n * It provides automatic [`From`] conversions between other error types\n   defined by the [`error_chain!`] that preserve type information,\n   and facilitate seamless error composition and matching of composed\n   errors.\n * It provides automatic [`From`] conversions between any other error\n   type that hides the type of the other error in the [`cause`] box.\n * If `RUST_BACKTRACE` is enabled, it collects a single backtrace at\n   the earliest opportunity and propagates it down the stack through\n   [`From`] and [`ResultExt`] conversions.\n\n To accomplish its goals it makes some tradeoffs:\n\n * The split between the [`Error`] and [`ErrorKind`] types can make it\n   slightly more cumbersome to instantiate new (unchained) errors,\n   requiring an [`Into`] or [`From`] conversion; as well as slightly\n   more cumbersome to match on errors with another layer of types\n   to match.\n * Because the error type contains [`std::error::Error`]` + `[`Send`]` + 'static` objects,\n   it can't implement [`PartialEq`] for easy comparisons.\n\n ## Declaring error types\n\n Generally, you define one family of error types per crate, though\n it's also perfectly fine to define error types on a finer-grained\n basis, such as per module.\n\n Assuming you are using crate-level error types, typically you will\n define an `errors` module and inside it call [`error_chain!`]:\n\n ```\n # #[macro_use] extern crate error_chain;\n mod other_error {\n     error_chain! {}\n }\n\n error_chain! {\n     // The type defined for this error. These are the conventional\n     // and recommended names, but they can be arbitrarily chosen.\n     //\n     // It is also possible to leave this section out entirely, or\n     // leave it empty, and these names will be used automatically.\n     types {\n         Error, ErrorKind, ResultExt, Result;\n     }\n\n     // Without the `Result` wrapper:\n     //\n     // types {\n     //     Error, ErrorKind, ResultExt;\n     // }\n\n     // Automatic conversions between this error chain and other\n     // error chains. In this case, it will e.g. generate an\n     // `ErrorKind` variant called `Another` which in turn contains\n     // the `other_error::ErrorKind`, with conversions from\n     // `other_error::Error`.\n     //\n     // Optionally, some attributes can be added to a variant.\n     //\n     // This section can be empty.\n     links {\n         Another(other_error::Error, other_error::ErrorKind) #[cfg(unix)];\n     }\n\n     // Automatic conversions between this error chain and other\n     // error types not defined by the `error_chain!`. These will be\n     // wrapped in a new error with, in the first case, the\n     // `ErrorKind::Fmt` variant. The description and cause will\n     // forward to the description and cause of the original error.\n     //\n     // Optionally, some attributes can be added to a variant.\n     //\n     // This section can be empty.\n     foreign_links {\n         Fmt(::std::fmt::Error);\n         Io(::std::io::Error) #[cfg(unix)];\n     }\n\n     // Define additional `ErrorKind` variants.  Define custom responses with the\n     // `description` and `display` calls.\n     errors {\n         InvalidToolchainName(t: String) {\n             description(\"invalid toolchain name\")\n             display(\"invalid toolchain name: '{}'\", t)\n         }\n\n         // You can also add commas after description/display.\n         // This may work better with some editor auto-indentation modes:\n         UnknownToolchainVersion(v: String) {\n             description(\"unknown toolchain version\"), // note the ,\n             display(\"unknown toolchain version: '{}'\", v), // trailing comma is allowed\n         }\n     }\n }\n\n # fn main() {}\n ```\n\n Each section, `types`, `links`, `foreign_links`, and `errors` may\n be omitted if it is empty.\n\n This populates the module with a number of definitions,\n the most important of which are the [`Error`] type\n and the [`ErrorKind`] type. An example of generated code can be found in the\n [example_generated](example_generated/index.html) module.\n\n ## Returning new errors\n\n Introducing new error chains, with a string message:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # error_chain! {}\n fn foo() -> Result<()> {\n     Err(\"foo error!\".into())\n }\n ```\n\n Introducing new error chains, with an [`ErrorKind`]:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n error_chain! {\n     errors { FooError }\n }\n\n fn foo() -> Result<()> {\n     Err(ErrorKind::FooError.into())\n }\n ```\n\n Note that the return type is the typedef [`Result`], which is\n defined by the macro as `pub type Result<T> =\n ::std::result::Result<T, Error>`. Note that in both cases\n [`.into()`] is called to convert a type into the [`Error`] type; both\n strings and [`ErrorKind`] have [`From`] conversions to turn them into\n [`Error`].\n\n When the error is emitted behind the `?` operator, the explicit conversion\n isn't needed; `Err(ErrorKind)` will automatically be converted to `Err(Error)`.\n So the below is equivalent to the previous:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # error_chain! { errors { FooError } }\n fn foo() -> Result<()> {\n     Ok(Err(ErrorKind::FooError)?)\n }\n\n fn bar() -> Result<()> {\n     Ok(Err(\"bogus!\")?)\n }\n ```\n\n ## The `bail!` macro\n\n The above method of introducing new errors works but is a little\n verbose. Instead, we can use the [`bail!`] macro, which performs an early return\n with conversions done automatically.\n\n With [`bail!`] the previous examples look like:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # error_chain! { errors { FooError } }\n fn foo() -> Result<()> {\n     if true {\n         bail!(ErrorKind::FooError);\n     } else {\n         Ok(())\n     }\n }\n\n fn bar() -> Result<()> {\n     if true {\n         bail!(\"bogus!\");\n     } else {\n         Ok(())\n     }\n }\n ```\n\n ## Chaining errors\n error-chain supports extending an error chain by appending new errors.\n This can be done on a Result or on an existing Error.\n\n To extend the error chain:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # error_chain! {}\n # fn do_something() -> Result<()> { unimplemented!() }\n # fn test() -> Result<()> {\n let res: Result<()> = do_something().chain_err(|| \"something went wrong\");\n # Ok(())\n # }\n ```\n\n [`chain_err`] can be called on any [`Result`] type where the contained\n error type implements [`std::error::Error`]` + `[`Send`]` + 'static`, as long as\n the [`Result`] type's corresponding [`ResultExt`] trait is in scope.  If\n the [`Result`] is an `Err` then [`chain_err`] evaluates the closure,\n which returns *some type that can be converted to [`ErrorKind`]*,\n boxes the original error to store as the cause, then returns a new\n error containing the original error.\n\n Calling [`chain_err`][Error_chain_err] on an existing [`Error`] instance has\n the same signature and produces the same outcome as being called on a\n [`Result`] matching the properties described above. This is most useful when\n partially handling errors using the [`map_err`] function.\n\n To chain an error directly, use [`with_chain`]:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # error_chain! {}\n # fn do_something() -> Result<()> { unimplemented!() }\n # fn test() -> Result<()> {\n let res: Result<()> =\n     do_something().map_err(|e| Error::with_chain(e, \"something went wrong\"));\n # Ok(())\n # }\n ```\n\n ## Linking errors\n\n To convert an error from another error chain to this error chain:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {}\n # mod other { error_chain! {} }\n error_chain! {\n     links {\n         OtherError(other::Error, other::ErrorKind);\n     }\n }\n\n fn do_other_thing() -> other::Result<()> { unimplemented!() }\n\n # fn test() -> Result<()> {\n let res: Result<()> = do_other_thing().map_err(|e| e.into());\n # Ok(())\n # }\n ```\n\n The [`Error`] and [`ErrorKind`] types implements [`From`] for the corresponding\n types of all linked error chains. Linked errors do not introduce a new\n cause to the error chain.\n\n ## Matching errors\n\n error-chain error variants are matched with simple patterns.\n [`Error`] is a tuple struct and its first field is the [`ErrorKind`],\n making dispatching on error kinds relatively compact:\n\n ```\n # #[macro_use] extern crate error_chain;\n # fn main() {\n error_chain! {\n     errors {\n         InvalidToolchainName(t: String) {\n             description(\"invalid toolchain name\")\n             display(\"invalid toolchain name: '{}'\", t)\n         }\n     }\n }\n\n match Error::from(\"error!\") {\n     Error(ErrorKind::InvalidToolchainName(_), _) => { }\n     Error(ErrorKind::Msg(_), _) => { }\n     _ => { }\n }\n # }\n ```\n\n Chained errors are also matched with (relatively) compact syntax\n\n ```\n # #[macro_use] extern crate error_chain;\n mod utils {\n     error_chain! {\n         errors {\n             BadStuff {\n                 description(\"bad stuff\")\n             }\n         }\n     }\n }\n\n mod app {\n     error_chain! {\n         links {\n             Utils(::utils::Error, ::utils::ErrorKind);\n         }\n     }\n }\n\n\n # fn main() {\n match app::Error::from(\"error!\") {\n     app::Error(app::ErrorKind::Utils(utils::ErrorKind::BadStuff), _) => { }\n     _ => { }\n }\n # }\n ```\n\n ## Inspecting errors\n\n An error-chain error contains information about the error itself, a backtrace, and the chain\n of causing errors. For reporting purposes, this information can be accessed as follows.\n\n ```\n # #[macro_use] extern crate error_chain;\n use error_chain::ChainedError;  // for e.display_chain()\n\n error_chain! {\n     errors {\n         InvalidToolchainName(t: String) {\n             description(\"invalid toolchain name\")\n             display(\"invalid toolchain name: '{}'\", t)\n         }\n     }\n }\n\n # fn main() {\n // Generate an example error to inspect:\n let e = \"xyzzy\".parse::<i32>()\n     .chain_err(|| ErrorKind::InvalidToolchainName(\"xyzzy\".to_string()))\n     .unwrap_err();\n\n // Get the brief description of the error:\n assert_eq!(e.description(), \"invalid toolchain name\");\n\n // Get the display version of the error:\n assert_eq!(e.to_string(), \"invalid toolchain name: 'xyzzy'\");\n\n // Get the full cause and backtrace:\n println!(\"{}\", e.display_chain().to_string());\n //     Error: invalid toolchain name: 'xyzzy'\n //     Caused by: invalid digit found in string\n //     stack backtrace:\n //        0:     0x7fa9f684fc94 - backtrace::backtrace::libunwind::trace\n //                             at src/backtrace/libunwind.rs:53\n //                              - backtrace::backtrace::trace<closure>\n //                             at src/backtrace/mod.rs:42\n //        1:     0x7fa9f6850b0e - backtrace::capture::{{impl}}::new\n //                             at out/capture.rs:79\n //     [..]\n # }\n ```\n\n The [`Error`] and [`ErrorKind`] types also allow programmatic access to these elements.\n\n ## Foreign links\n\n Errors that do not conform to the same conventions as this library\n can still be included in the error chain. They are considered \"foreign\n errors\", and are declared using the `foreign_links` block of the\n [`error_chain!`] macro. [`Error`]s are automatically created from\n foreign errors by the `?` operator.\n\n Foreign links and regular links have one crucial difference:\n [`From`] conversions for regular links *do not introduce a new error\n into the error chain*, while conversions for foreign links *always\n introduce a new error into the error chain*. So for the example\n above all errors deriving from the [`std::fmt::Error`] type will be\n presented to the user as a new [`ErrorKind`] variant, and the\n cause will be the original [`std::fmt::Error`] error. In contrast, when\n `other_error::Error` is converted to `Error` the two `ErrorKind`s\n are converted between each other to create a new `Error` but the\n old error is discarded; there is no \"cause\" created from the\n original error.\n\n ## Backtraces\n\n If the `RUST_BACKTRACE` environment variable is set to anything\n but ``0``, the earliest non-foreign error to be generated creates\n a single backtrace, which is passed through all [`From`] conversions\n and [`chain_err`] invocations of compatible types. To read the\n backtrace just call the [`backtrace`] method.\n\n Backtrace generation can be disabled by turning off the `backtrace` feature.\n\n The Backtrace contains a Vec of [`BacktraceFrame`]s that can be operated\n on directly.  For example, to only see the files and line numbers of code\n within your own project.\n\n ```\n # #[macro_use]\n # extern crate error_chain;\n # mod errors {\n #   error_chain! {\n #       foreign_links {\n #           Io(::std::io::Error);\n #       }\n #   }\n # }\n # use errors::*;\n # #[cfg(feature=\"backtrace\")]\n # fn main() {\n if let Err(ref e) = open_file() {\n     if let Some(backtrace) = e.backtrace() {\n         let frames = backtrace.frames();\n         for frame in frames.iter() {\n             for symbol in frame.symbols().iter() {\n                 if let (Some(file), Some(lineno)) = (symbol.filename(), symbol.lineno()) {\n                     if file.display().to_string()[0..3] == \"src\".to_string(){\n                         println!(\"{}:{}\", file.display().to_string(), lineno);\n                     }\n                 }\n             }\n         }\n     }\n };\n # }\n # #[cfg(not(feature=\"backtrace\"))]\n # fn main() { }\n\n fn open_file() -> Result<()> {\n    std::fs::File::open(\"does_not_exist\")?;\n    Ok(())\n }\n ```\n\n ## Iteration\n\n The [`iter`] method returns an iterator over the chain of error boxes.\n\n [error-type]: https://github.com/DanielKeep/rust-error-type\n [quick-error]: https://github.com/tailhook/quick-error\n [`display_chain`]: trait.ChainedError.html#method.display_chain\n [`error_chain!`]: macro.error_chain.html\n [`bail!`]: macro.bail.html\n [`Backtrace`]: struct.Backtrace.html\n [`Error`]: example_generated/struct.Error.html\n [`with_chain`]: example_generated/struct.Error.html#method.with_chain\n [Error_chain_err]: example_generated/struct.Error.html#method.chain_err\n [`cause`]: example_generated/struct.Error.html#method.cause\n [`backtrace`]: example_generated/struct.Error.html#method.backtrace\n [`iter`]: example_generated/struct.Error.html#method.iter\n [`ErrorKind`]: example_generated/enum.ErrorKind.html\n [`description`]: example_generated/enum.ErrorKind.html#method.description\n [`Result`]: example_generated/type.Result.html\n [`ResultExt`]: example_generated/trait.ResultExt.html\n [`chain_err`]: example_generated/trait.ResultExt.html#tymethod.chain_err\n [`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Into`]: https://doc.rust-lang.org/std/convert/trait.Into.html\n [`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n [`std::fmt::Error`]: https://doc.rust-lang.org/std/fmt/struct.Error.html\n [`.into()`]: https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into\n [`map_err`]: https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err\n [`BacktraceFrame`]: https://docs.rs/backtrace/0.3.2/backtrace/struct.BacktraceFrame.html\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\quick_main.rs","byte_start":59529,"byte_end":59537,"line_start":62,"line_end":62,"column_start":11,"column_end":19},"name":"ExitCode","qualname":"::quick_main::ExitCode","value":"ExitCode","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" Represents a value that can be used as the exit status of the process.\n See [`quick_main!`](macro.quick_main.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\quick_main.rs","byte_start":59600,"byte_end":59604,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"code","qualname":"::quick_main::ExitCode::code","value":"fn (self) -> i32","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Returns the value to use as the exit status.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60140,"byte_end":60157,"line_start":16,"line_end":16,"column_start":16,"column_end":33},"name":"InternalBacktrace","qualname":"::backtrace::imp::InternalBacktrace","value":"InternalBacktrace {  }","parent":null,"children":[{"krate":0,"index":92}],"decl_id":null,"docs":" Internal representation of a backtrace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60722,"byte_end":60725,"line_start":35,"line_end":35,"column_start":16,"column_end":19},"name":"new","qualname":"<InternalBacktrace>::new","value":"fn () -> InternalBacktrace","parent":null,"children":[],"decl_id":null,"docs":" Returns a backtrace of the current call stack if `RUST_BACKTRACE`\n is set to anything but ``0``, and `None` otherwise.  This is used\n in the generated error implementations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":61747,"byte_end":61759,"line_start":63,"line_end":63,"column_start":16,"column_end":28},"name":"as_backtrace","qualname":"<InternalBacktrace>::as_backtrace","value":"fn (&self) -> Option<&Backtrace>","parent":null,"children":[],"decl_id":null,"docs":" Acquire the internal backtrace\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20287,"byte_end":20291,"line_start":558,"line_end":558,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the error chain using the `Error::cause()` method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20431,"byte_end":20434,"line_start":562,"line_end":562,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn (err: Option<&'a error::Error>) -> Iter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new iterator over the error chain using `Error::cause()`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21098,"byte_end":21110,"line_start":588,"line_end":588,"column_start":11,"column_end":23},"name":"ChainedError","qualname":"::ChainedError","value":"ChainedError: error::Error + Send + 'static","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" This trait is implemented on all the errors generated by the `error_chain`\n macro.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21183,"byte_end":21192,"line_start":590,"line_end":590,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ChainedError::ErrorKind","value":"type ErrorKind;","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Associated kind type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21270,"byte_end":21279,"line_start":593,"line_end":593,"column_start":8,"column_end":17},"name":"from_kind","qualname":"::ChainedError::from_kind","value":"fn (kind: Self::ErrorKind) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Constructs an error from a kind, and generates a backtrace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21431,"byte_end":21441,"line_start":596,"line_end":596,"column_start":8,"column_end":18},"name":"with_chain","qualname":"::ChainedError::with_chain","value":"fn <E, K> (error: E, kind: K) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Constructs a chained error from another error and a kind, and generates a backtrace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21644,"byte_end":21648,"line_start":602,"line_end":602,"column_start":8,"column_end":12},"name":"kind","qualname":"::ChainedError::kind","value":"fn (&self) -> &Self::ErrorKind","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the kind of the error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21724,"byte_end":21728,"line_start":605,"line_end":605,"column_start":8,"column_end":12},"name":"iter","qualname":"::ChainedError::iter","value":"fn (&self) -> Iter","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Iterates over the error chain.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21811,"byte_end":21820,"line_start":608,"line_end":608,"column_start":8,"column_end":17},"name":"backtrace","qualname":"::ChainedError::backtrace","value":"fn (&self) -> Option<&Backtrace>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the backtrace associated with this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22046,"byte_end":22059,"line_start":614,"line_end":614,"column_start":8,"column_end":21},"name":"display_chain","qualname":"::ChainedError::display_chain","value":"fn <'a> (&'a self) -> DisplayChain<'a, Self>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns an object which implements `Display` for printing the full\n context of this error.\n\n The full cause chain and backtrace, if present, will be printed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22193,"byte_end":22202,"line_start":619,"line_end":619,"column_start":8,"column_end":17},"name":"chain_err","qualname":"::ChainedError::chain_err","value":"fn <F, EK> (self, error: F) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Extends the error chain with a new entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22376,"byte_end":22379,"line_start":625,"line_end":625,"column_start":8,"column_end":11},"name":"new","qualname":"::ChainedError::new","value":"fn (kind: Self::ErrorKind, state: State) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Creates an error from its parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22592,"byte_end":22609,"line_start":630,"line_end":630,"column_start":8,"column_end":25},"name":"extract_backtrace","qualname":"::ChainedError::extract_backtrace","value":"fn (e: &(error::Error + Send + 'static)) -> Option<InternalBacktrace>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the first known backtrace, either from its State or from one\n of the errors from `foreign_links`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22782,"byte_end":22794,"line_start":636,"line_end":636,"column_start":12,"column_end":24},"name":"DisplayChain","qualname":"::DisplayChain","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct which formats an error for output.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23375,"byte_end":23380,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"State","qualname":"::State","value":"State { next_error, backtrace }","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113}],"decl_id":null,"docs":" Common state between errors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23430,"byte_end":23440,"line_start":662,"line_end":662,"column_start":9,"column_end":19},"name":"next_error","qualname":"::State::next_error","value":"std::option::Option<std::boxed::Box<(dyn std::error::Error + std::marker::Send + 'static)>>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Next error in the error chain.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23525,"byte_end":23534,"line_start":664,"line_end":664,"column_start":9,"column_end":18},"name":"backtrace","qualname":"::State::backtrace","value":"backtrace::imp::InternalBacktrace","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Backtrace for the current error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23782,"byte_end":23785,"line_start":678,"line_end":678,"column_start":12,"column_end":15},"name":"new","qualname":"<State>::new","value":"fn <CE> (e: Box<error::Error + Send>) -> State","parent":null,"children":[],"decl_id":null,"docs":" Creates a new State type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":24107,"byte_end":24116,"line_start":688,"line_end":688,"column_start":12,"column_end":21},"name":"backtrace","qualname":"<State>::backtrace","value":"fn (&self) -> Option<&Backtrace>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner backtrace if present.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":26678,"byte_end":26682,"line_start":806,"line_end":806,"column_start":9,"column_end":13},"name":"mock","qualname":"::mock","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":118},{"krate":0,"index":131},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":189},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":168},{"krate":0,"index":175},{"krate":0,"index":116}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60346,"byte_end":60359,"line_start":25,"line_end":25,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60388,"byte_end":60401,"line_start":26,"line_end":26,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60456,"byte_end":60473,"line_start":30,"line_end":30,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":62243,"byte_end":62260,"line_start":79,"line_end":79,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20333,"byte_end":20337,"line_start":560,"line_end":560,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20529,"byte_end":20533,"line_start":567,"line_end":567,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22853,"byte_end":22865,"line_start":638,"line_end":638,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23575,"byte_end":23580,"line_start":667,"line_end":667,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23730,"byte_end":23735,"line_start":676,"line_end":676,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60346,"byte_end":60359,"line_start":25,"line_end":25,"column_start":26,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60388,"byte_end":60401,"line_start":26,"line_end":26,"column_start":26,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":60456,"byte_end":60473,"line_start":30,"line_end":30,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\backtrace.rs","byte_start":62243,"byte_end":62260,"line_start":79,"line_end":79,"column_start":25,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20333,"byte_end":20337,"line_start":560,"line_end":560,"column_start":10,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":20529,"byte_end":20533,"line_start":567,"line_end":567,"column_start":23,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21119,"byte_end":21124,"line_start":588,"line_end":588,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1616},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":21127,"byte_end":21131,"line_start":588,"line_end":588,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":1533},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":22853,"byte_end":22865,"line_start":638,"line_end":638,"column_start":30,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":102},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23575,"byte_end":23580,"line_start":667,"line_end":667,"column_start":18,"column_end":23},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":111},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\error-chain-0.12.1\\src\\lib.rs","byte_start":23730,"byte_end":23735,"line_start":676,"line_end":676,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":111},"to":{"krate":4294967295,"index":4294967295}}]}