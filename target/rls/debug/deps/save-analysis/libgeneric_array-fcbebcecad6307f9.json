{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","generic_array","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=fcbebcecad6307f9","-C","extra-filename=-fcbebcecad6307f9","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","typenum=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libtypenum-2b62f88af3d35d4c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libgeneric_array-fcbebcecad6307f9.rmeta"},"prelude":{"crate_id":{"name":"generic_array","disambiguator":[18023000605358026641,11151959693814071701]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","num":4,"id":{"name":"typenum","disambiguator":[5806260238053524433,8448313915306359665]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":0,"byte_end":16976,"line_start":1,"line_end":635,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1550,"byte_end":1566,"line_start":71,"line_end":71,"column_start":21,"column_end":37},"alias_span":null,"name":"GenericArrayIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":0,"byte_end":16976,"line_start":1,"line_end":635,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":31},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":135},{"krate":0,"index":180},{"krate":0,"index":248},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":368},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":398},{"krate":0,"index":402},{"krate":0,"index":407},{"krate":0,"index":413},{"krate":0,"index":417},{"krate":0,"index":422},{"krate":0,"index":427},{"krate":0,"index":431},{"krate":0,"index":438},{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":471},{"krate":0,"index":476},{"krate":0,"index":492},{"krate":0,"index":499},{"krate":0,"index":504},{"krate":0,"index":509},{"krate":0,"index":513},{"krate":0,"index":519}],"decl_id":null,"docs":" This crate implements a structure that can be used as a generic array type.\n Core Rust array types `[T; N]` can't be used generically with\n respect to `N`, so for example this:\n\n ```{should_fail}\n struct Foo<T, N> {\n     data: [T; N]\n }\n ```\n\n won't work.\n\n **generic-array** exports a `GenericArray<T,N>` type, which lets\n the above be implemented as:\n\n ```\n # use generic_array::{ArrayLength, GenericArray};\n struct Foo<T, N: ArrayLength<T>> {\n     data: GenericArray<T,N>\n }\n ```\n\n The `ArrayLength<T>` trait is implemented by default for\n [unsigned integer types](../typenum/uint/index.html) from\n [typenum](../typenum/index.html).\n\n For ease of use, an `arr!` macro is provided - example below:\n\n ```\n # #[macro_use]\n # extern crate generic_array;\n # extern crate typenum;\n # fn main() {\n let array = arr![u32; 1, 2, 3];\n assert_eq!(array[2], 3);\n # }\n ```\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":975,"byte_end":997,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":998,"byte_end":1008,"line_start":40,"line_end":40,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arr","qualname":"::arr","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" Implementation for `arr!` macro.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":25767,"byte_end":25776,"line_start":8,"line_end":8,"column_start":11,"column_end":20},"name":"AddLength","qualname":"::arr::AddLength","value":"AddLength<T, N: ArrayLength<T>>: ArrayLength<T>","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" Helper trait for `arr!` macro\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":25851,"byte_end":25857,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::arr::AddLength::Output","value":"type Output: ArrayLength<T>;","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":" Resulting length\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":26117,"byte_end":26120,"line_start":23,"line_end":23,"column_start":10,"column_end":13},"name":"Inc","qualname":"::arr::Inc","value":"<U as AddLength<T, U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Helper type for `arr!` macro\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"functional","qualname":"::functional","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":149},{"krate":0,"index":155},{"krate":0,"index":159},{"krate":0,"index":172},{"krate":0,"index":176}],"decl_id":null,"docs":" Functional programming with generic sequences\n\n Please see `tests/generics.rs` for examples of how to best use these in your generic functions.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":27789,"byte_end":27810,"line_start":12,"line_end":12,"column_start":18,"column_end":39},"name":"MappedGenericSequence","qualname":"::functional::MappedGenericSequence","value":"MappedGenericSequence<T, U>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" Defines the relationship between one generic sequence and another,\n for operations such as `map` and `zip`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":27917,"byte_end":27923,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Mapped","qualname":"::functional::MappedGenericSequence::Mapped","value":"type Mapped: GenericSequence<U, Length = Self::Length>;","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" Mapped sequence type\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":28692,"byte_end":28706,"line_start":39,"line_end":39,"column_start":10,"column_end":24},"name":"MappedSequence","qualname":"::functional::MappedSequence","value":"<<S as MappedGenericSequence<T, U>>::Mapped as GenericSequence<U>>::Sequence","parent":null,"children":[],"decl_id":null,"docs":" Accessor type for a mapped generic sequence\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":28883,"byte_end":28901,"line_start":43,"line_end":43,"column_start":18,"column_end":36},"name":"FunctionalSequence","qualname":"::functional::FunctionalSequence","value":"FunctionalSequence<T>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":169}],"decl_id":null,"docs":" Defines functional programming methods for generic sequences\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":29192,"byte_end":29195,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"map","qualname":"::functional::FunctionalSequence::map","value":"fn <U, F> (self, f: F) -> MappedSequence<Self, T, U>","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" Maps a `GenericSequence` to another `GenericSequence`.\n\n If the mapping function panics, any already initialized elements in the new sequence\n will be dropped, AND any unused elements in the source sequence will also be dropped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":29834,"byte_end":29837,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"zip","qualname":"::functional::FunctionalSequence::zip","value":"fn <B, Rhs, U, F> (self, rhs: Rhs, f: F) -> MappedSequence<Self, T, U>","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" Combines two `GenericSequence` instances and iterates through both of them,\n initializing a new `GenericSequence` with the result of the zipped mapping function.\n\n If the mapping function panics, any already initialized elements in the new sequence\n will be dropped, AND any unused elements in the source sequences will also be dropped.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":29817,"byte_end":29826,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":30397,"byte_end":30401,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"fold","qualname":"::functional::FunctionalSequence::fold","value":"fn <U, F> (self, init: U, f: F) -> U","parent":{"krate":0,"index":159},"children":[],"decl_id":null,"docs":" Folds (or reduces) a sequence of data into a single value.\n\n If the fold function panics, any unused elements will be dropped.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":191},{"krate":0,"index":197},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":233},{"krate":0,"index":241},{"krate":0,"index":245}],"decl_id":null,"docs":" `GenericArray` iterator implementation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31016,"byte_end":31032,"line_start":9,"line_end":9,"column_start":12,"column_end":28},"name":"GenericArrayIter","qualname":"::iter::GenericArrayIter","value":"GenericArrayIter {  }","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" An iterator that moves out of a `GenericArray`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31690,"byte_end":31698,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<GenericArrayIter<T, N>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31669,"byte_end":31678,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31880,"byte_end":31892,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<GenericArrayIter<T, N>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a mutable slice\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31859,"byte_end":31868,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sequence","qualname":"::sequence","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":284},{"krate":0,"index":292},{"krate":0,"index":297},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":314},{"krate":0,"index":320},{"krate":0,"index":327},{"krate":0,"index":333}],"decl_id":null,"docs":" Useful traits for manipulating sequences of data stored in `GenericArray`s\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":36915,"byte_end":36930,"line_start":11,"line_end":11,"column_start":18,"column_end":33},"name":"GenericSequence","qualname":"::sequence::GenericSequence","value":"GenericSequence<T>: Sized + IntoIterator","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":268}],"decl_id":null,"docs":" Defines some sequence with an associated length and iteration capabilities.\n\n This is useful for passing N-length generic arrays as generics.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":37008,"byte_end":37014,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"name":"Length","qualname":"::sequence::GenericSequence::Length","value":"type Length: ArrayLength<T>;","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" `GenericArray` associated length\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":37144,"byte_end":37152,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"Sequence","qualname":"::sequence::GenericSequence::Sequence","value":"type Sequence: GenericSequence<T, Length = Self::Length> + FromIterator<T>;","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" Concrete sequence type used in conjuction with reference implementations of `GenericSequence`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":37433,"byte_end":37441,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"generate","qualname":"::sequence::GenericSequence::generate","value":"fn <F> (f: F) -> Self::Sequence","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":" Initializes a new sequence instance using the given function.\n\n If the generator function panics while initializing the sequence,\n any already initialized elements will be dropped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":37536,"byte_end":37548,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"inverted_zip","qualname":"::sequence::GenericSequence::inverted_zip","value":"fn <B, U, F> (self, lhs: GenericArray<B, Self::Length>, mut f: F) -> MappedSequence<GenericArray<B, Self::Length>, B, U>","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":38462,"byte_end":38475,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"inverted_zip2","qualname":"::sequence::GenericSequence::inverted_zip2","value":"fn <B, Lhs, U, F> (self, lhs: Lhs, mut f: F) -> MappedSequence<Lhs, B, U>","parent":{"krate":0,"index":257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":39130,"byte_end":39142,"line_start":72,"line_end":72,"column_start":10,"column_end":22},"name":"SequenceItem","qualname":"::sequence::SequenceItem","value":"<T as IntoIterator>::Item","parent":null,"children":[],"decl_id":null,"docs":" Accessor for `GenericSequence` item type, which is really `IntoIterator::Item`\n\n For deeply nested generic mapped sequence types, like shown in `tests/generics.rs`,\n this can be useful for keeping things organized.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40034,"byte_end":40042,"line_start":110,"line_end":110,"column_start":18,"column_end":26},"name":"Lengthen","qualname":"::sequence::Lengthen","value":"Lengthen<T>: Sized + GenericSequence<T>","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"decl_id":null,"docs":" Defines any `GenericSequence` which can be lengthened or extended by appending\n or prepending an element to it.\n\n Any lengthened sequence can be shortened back to the original using `pop_front` or `pop_back`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40149,"byte_end":40155,"line_start":112,"line_end":112,"column_start":10,"column_end":16},"name":"Longer","qualname":"::sequence::Lengthen::Longer","value":"type Longer: Shorten<T, Shorter = Self>;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" `GenericSequence` that has one more element than `Self`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40461,"byte_end":40467,"line_start":125,"line_end":125,"column_start":8,"column_end":14},"name":"append","qualname":"::sequence::Lengthen::append","value":"fn (self, last: T) -> Self::Longer","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns a new array with the given element appended to the end of it.\n\n Example:\n\n ```ignore\n let a = arr![i32; 1, 2, 3];\n\n let b = a.append(4);\n\n assert_eq!(b, arr![i32; 1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40780,"byte_end":40787,"line_start":138,"line_end":138,"column_start":8,"column_end":15},"name":"prepend","qualname":"::sequence::Lengthen::prepend","value":"fn (self, first: T) -> Self::Longer","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Returns a new array with the given element prepended to the front of it.\n\n Example:\n\n ```ignore\n let a = arr![i32; 1, 2, 3];\n\n let b = a.prepend(4);\n\n assert_eq!(b, arr![i32; 4, 1, 2, 3]);\n ```\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41055,"byte_end":41062,"line_start":145,"line_end":145,"column_start":18,"column_end":25},"name":"Shorten","qualname":"::sequence::Shorten","value":"Shorten<T>: Sized + GenericSequence<T>","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"decl_id":null,"docs":" Defines a `GenericSequence` which can be shortened by removing the first or last element from it.\n\n Additionally, any shortened sequence can be lengthened by\n appending or prepending an element to it.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41169,"byte_end":41176,"line_start":147,"line_end":147,"column_start":10,"column_end":17},"name":"Shorter","qualname":"::sequence::Shorten::Shorter","value":"type Shorter: Lengthen<T, Longer = Self>;","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" `GenericSequence` that has one less element than `Self`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41524,"byte_end":41532,"line_start":161,"line_end":161,"column_start":8,"column_end":16},"name":"pop_back","qualname":"::sequence::Shorten::pop_back","value":"fn (self) -> (Self::Shorter, T)","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Returns a new array without the last element, and the last element.\n\n Example:\n\n ```ignore\n let a = arr![i32; 1, 2, 3, 4];\n\n let (init, last) = a.pop_back();\n\n assert_eq!(init, arr![i32; 1, 2, 3]);\n assert_eq!(last, 4);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41875,"byte_end":41884,"line_start":174,"line_end":174,"column_start":8,"column_end":17},"name":"pop_front","qualname":"::sequence::Shorten::pop_front","value":"fn (self) -> (T, Self::Shorter)","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Returns a new array without the first element, and the first element.\n Example:\n\n ```ignore\n let a = arr![i32; 1, 2, 3, 4];\n\n let (head, tail) = a.pop_front();\n\n assert_eq!(head, 1);\n assert_eq!(tail, arr![i32; 2, 3, 4]);\n ```\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":43756,"byte_end":43761,"line_start":246,"line_end":246,"column_start":18,"column_end":23},"name":"Split","qualname":"::sequence::Split","value":"Split<T, K>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"decl_id":null,"docs":" Defines a `GenericSequence` that can be split into two parts at a given pivot index.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":43876,"byte_end":43881,"line_start":251,"line_end":251,"column_start":10,"column_end":15},"name":"First","qualname":"::sequence::Split::First","value":"type First: GenericSequence<T>;","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" First part of the resulting split array\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":43961,"byte_end":43967,"line_start":253,"line_end":253,"column_start":10,"column_end":16},"name":"Second","qualname":"::sequence::Split::Second","value":"type Second: GenericSequence<T>;","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Second part of the resulting split array\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44084,"byte_end":44089,"line_start":256,"line_end":256,"column_start":8,"column_end":13},"name":"split","qualname":"::sequence::Split::split","value":"fn (self) -> (Self::First, Self::Second)","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Splits an array at the given index, returning the separate parts of the array.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44800,"byte_end":44806,"line_start":283,"line_end":283,"column_start":18,"column_end":24},"name":"Concat","qualname":"::sequence::Concat","value":"Concat<T, M>: GenericSequence<T>","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" Defines `GenericSequence`s which can be joined together, forming a larger array.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44921,"byte_end":44925,"line_start":288,"line_end":288,"column_start":10,"column_end":14},"name":"Rest","qualname":"::sequence::Concat::Rest","value":"type Rest: GenericSequence<T, Length = M>;","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Sequence to be concatenated with `self`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":45025,"byte_end":45031,"line_start":291,"line_end":291,"column_start":10,"column_end":16},"name":"Output","qualname":"::sequence::Concat::Output","value":"type Output: GenericSequence<T>;","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Resulting sequence formed by the concatenation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":45106,"byte_end":45112,"line_start":294,"line_end":294,"column_start":8,"column_end":14},"name":"concat","qualname":"::sequence::Concat::concat","value":"fn (self, rest: Self::Rest) -> Self::Output","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Concatenate, or join, two sequences.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1694,"byte_end":1705,"line_start":75,"line_end":75,"column_start":18,"column_end":29},"name":"ArrayLength","qualname":"::ArrayLength","value":"ArrayLength<T>: Unsigned","parent":null,"children":[{"krate":0,"index":345}],"decl_id":null,"docs":" Trait making `GenericArray` work, marking types to be used as length of an array\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1797,"byte_end":1806,"line_start":77,"line_end":77,"column_start":10,"column_end":19},"name":"ArrayType","qualname":"::ArrayLength::ArrayType","value":"type ArrayType;","parent":{"krate":0,"index":343},"children":[],"decl_id":null,"docs":" Associated type representing the array type for the number\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2021,"byte_end":2041,"line_start":89,"line_end":89,"column_start":12,"column_end":32},"name":"GenericArrayImplEven","qualname":"::GenericArrayImplEven","value":"GenericArrayImplEven {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354}],"decl_id":null,"docs":" Internal type used to generate a struct of appropriate size\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1964,"byte_end":1983,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1984,"byte_end":1994,"line_start":87,"line_end":87,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2584,"byte_end":2603,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"GenericArrayImplOdd","qualname":"::GenericArrayImplOdd","value":"GenericArrayImplOdd {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"decl_id":null,"docs":" Internal type used to generate a struct of appropriate size\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2527,"byte_end":2546,"line_start":108,"line_end":108,"column_start":1,"column_end":20}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2547,"byte_end":2557,"line_start":109,"line_end":109,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3438,"byte_end":3450,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"name":"GenericArray","qualname":"::GenericArray","value":"GenericArray {  }","parent":null,"children":[{"krate":0,"index":386}],"decl_id":null,"docs":" Struct representing a generic array - `GenericArray<T, N>` works like [T; N]\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3386,"byte_end":3405,"line_start":140,"line_end":140,"column_start":1,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3406,"byte_end":3426,"line_start":141,"line_end":141,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":4396,"byte_end":4408,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"ArrayBuilder","qualname":"::ArrayBuilder","value":"ArrayBuilder {  }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406}],"decl_id":null,"docs":" Creates an array one element at a time using a mutable iterator\n you can write to with `ptr::write`.\n\n Incremenent the position while iterating to mark off created elements,\n which will be dropped if `into_inner` is not called.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":4601,"byte_end":4604,"line_start":185,"line_end":185,"column_start":19,"column_end":22},"name":"new","qualname":"<ArrayBuilder<T, N>>::new","value":"fn () -> ArrayBuilder<T, N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":4573,"byte_end":4582,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5029,"byte_end":5042,"line_start":198,"line_end":198,"column_start":19,"column_end":32},"name":"iter_position","qualname":"<ArrayBuilder<T, N>>::iter_position","value":"fn (&mut self) -> (slice::IterMut<T>, &mut usize)","parent":null,"children":[],"decl_id":null,"docs":" Creates a mutable iterator for writing to the array using `ptr::write`.\n\n Increment the position value given as a mutable reference as you iterate\n to mark how many elements have been created.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5001,"byte_end":5010,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5302,"byte_end":5312,"line_start":206,"line_end":206,"column_start":19,"column_end":29},"name":"into_inner","qualname":"<ArrayBuilder<T, N>>::into_inner","value":"fn (self) -> GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" When done writing (assuming all elements have been written to),\n get the inner array.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5274,"byte_end":5283,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5871,"byte_end":5884,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"ArrayConsumer","qualname":"::ArrayConsumer","value":"ArrayConsumer {  }","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":" Consumes an array.\n\n Increment the position while iterating and any leftover elements\n will be dropped if position does not go to N\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6078,"byte_end":6081,"line_start":238,"line_end":238,"column_start":19,"column_end":22},"name":"new","qualname":"<ArrayConsumer<T, N>>::new","value":"fn (array: GenericArray<T, N>) -> ArrayConsumer<T, N>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6050,"byte_end":6059,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6499,"byte_end":6512,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"name":"iter_position","qualname":"<ArrayConsumer<T, N>>::iter_position","value":"fn (&mut self) -> (slice::Iter<T>, &mut usize)","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator and mutable reference to the internal position\n to keep track of consumed elements.\n\n Increment the position as you iterate to mark off consumed elements\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6471,"byte_end":6480,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":12898,"byte_end":12906,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<GenericArray<T, N>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire array.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":12877,"byte_end":12886,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13039,"byte_end":13051,"line_start":498,"line_end":498,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<GenericArray<T, N>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice containing the entire array.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13018,"byte_end":13027,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13286,"byte_end":13296,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<GenericArray<T, N>>::from_slice","value":"fn (slice: &[T]) -> &GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts slice to a generic array reference with inferred length;\n\n Length of the slice must be equal to the length of the array.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13265,"byte_end":13274,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13534,"byte_end":13548,"line_start":514,"line_end":514,"column_start":12,"column_end":26},"name":"from_mut_slice","qualname":"<GenericArray<T, N>>::from_mut_slice","value":"fn (slice: &mut [T]) -> &mut GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts mutable slice to a mutable generic array reference\n\n Length of the slice must be equal to the length of the array.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":13513,"byte_end":13522,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14712,"byte_end":14728,"line_start":551,"line_end":551,"column_start":12,"column_end":28},"name":"clone_from_slice","qualname":"<GenericArray<T, N>>::clone_from_slice","value":"fn (list: &[T]) -> GenericArray<T, N>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `GenericArray` from a slice by cloning its content\n\n Length of the slice must be equal to the length of the array\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14691,"byte_end":14700,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":15157,"byte_end":15172,"line_start":564,"line_end":564,"column_start":12,"column_end":27},"name":"from_exact_iter","qualname":"<GenericArray<T, N>>::from_exact_iter","value":"fn <I> (iter: I) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `GenericArray` instance from an iterator with a known exact size.\n\n Returns `None` if the size is not equal to the number of elements in the `GenericArray`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":16044,"byte_end":16053,"line_start":597,"line_end":597,"column_start":15,"column_end":24},"name":"transmute","qualname":"::transmute","value":"fn <A, B> (a: A) -> B","parent":null,"children":[],"decl_id":null,"docs":" A reimplementation of the `transmute` function, avoiding problems\n when the compiler can't prove equal sizes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":16005,"byte_end":16014,"line_start":595,"line_end":595,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\hex.rs","byte_start":17688,"byte_end":17700,"line_start":27,"line_end":27,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\hex.rs","byte_start":19188,"byte_end":19200,"line_start":67,"line_end":67,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":20896,"byte_end":20908,"line_start":11,"line_end":11,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21065,"byte_end":21077,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21225,"byte_end":21237,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21338,"byte_end":21350,"line_start":37,"line_end":37,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21485,"byte_end":21497,"line_start":45,"line_end":45,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21570,"byte_end":21582,"line_start":47,"line_end":47,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21796,"byte_end":21808,"line_start":56,"line_end":56,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21995,"byte_end":22007,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22168,"byte_end":22180,"line_start":74,"line_end":74,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22328,"byte_end":22340,"line_start":84,"line_end":84,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22500,"byte_end":22512,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22656,"byte_end":22668,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22824,"byte_end":22836,"line_start":114,"line_end":114,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":25915,"byte_end":25917,"line_start":13,"line_end":13,"column_start":38,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31547,"byte_end":31563,"line_start":30,"line_end":30,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32023,"byte_end":32035,"line_start":47,"line_end":47,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32410,"byte_end":32426,"line_start":64,"line_end":64,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32653,"byte_end":32669,"line_start":75,"line_end":75,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32992,"byte_end":33008,"line_start":91,"line_end":91,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":33636,"byte_end":33652,"line_start":116,"line_end":116,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":35340,"byte_end":35356,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":36304,"byte_end":36320,"line_start":238,"line_end":238,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":36462,"byte_end":36478,"line_start":247,"line_end":247,"column_start":30,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41967,"byte_end":41979,"line_start":177,"line_end":177,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":42827,"byte_end":42839,"line_start":211,"line_end":211,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44168,"byte_end":44180,"line_start":259,"line_end":259,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":45195,"byte_end":45207,"line_start":297,"line_end":297,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1845,"byte_end":1850,"line_start":80,"line_end":80,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2149,"byte_end":2169,"line_start":95,"line_end":95,"column_start":36,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2432,"byte_end":2452,"line_start":105,"line_end":105,"column_start":33,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2695,"byte_end":2714,"line_start":117,"line_end":117,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2978,"byte_end":2997,"line_start":127,"line_end":127,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3061,"byte_end":3065,"line_start":129,"line_end":129,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3210,"byte_end":3214,"line_start":134,"line_end":134,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3551,"byte_end":3563,"line_start":146,"line_end":146,"column_start":50,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3622,"byte_end":3634,"line_start":147,"line_end":147,"column_start":50,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3666,"byte_end":3678,"line_start":149,"line_end":149,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3914,"byte_end":3926,"line_start":161,"line_end":161,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":4529,"byte_end":4541,"line_start":182,"line_end":182,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5501,"byte_end":5513,"line_start":215,"line_end":215,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6005,"byte_end":6018,"line_start":235,"line_end":235,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6651,"byte_end":6664,"line_start":256,"line_end":256,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":7440,"byte_end":7452,"line_start":290,"line_end":290,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":8457,"byte_end":8469,"line_start":331,"line_end":331,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":11089,"byte_end":11101,"line_start":420,"line_end":420,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":11297,"byte_end":11309,"line_start":428,"line_end":428,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":483},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":12769,"byte_end":12781,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14489,"byte_end":14501,"line_start":543,"line_end":543,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14903,"byte_end":14915,"line_start":557,"line_end":557,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1447,"byte_end":1450,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":117}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1460,"byte_end":1470,"line_start":66,"line_end":66,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1480,"byte_end":1484,"line_start":67,"line_end":67,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":180}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1494,"byte_end":1502,"line_start":68,"line_end":68,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":248}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\hex.rs","byte_start":17688,"byte_end":17700,"line_start":27,"line_end":27,"column_start":44,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7654}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\hex.rs","byte_start":19188,"byte_end":19200,"line_start":67,"line_end":67,"column_start":44,"column_end":56},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7656}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":20896,"byte_end":20908,"line_start":11,"line_end":11,"column_start":33,"column_end":45},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21065,"byte_end":21077,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21225,"byte_end":21237,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21338,"byte_end":21350,"line_start":37,"line_end":37,"column_start":37,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21485,"byte_end":21497,"line_start":45,"line_end":45,"column_start":23,"column_end":35},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21570,"byte_end":21582,"line_start":47,"line_end":47,"column_start":39,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21796,"byte_end":21808,"line_start":56,"line_end":56,"column_start":25,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":21995,"byte_end":22007,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22168,"byte_end":22180,"line_start":74,"line_end":74,"column_start":28,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22328,"byte_end":22340,"line_start":84,"line_end":84,"column_start":31,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2328}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22500,"byte_end":22512,"line_start":94,"line_end":94,"column_start":27,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22656,"byte_end":22668,"line_start":104,"line_end":104,"column_start":27,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2252}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\impls.rs","byte_start":22824,"byte_end":22836,"line_start":114,"line_end":114,"column_start":27,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":25800,"byte_end":25811,"line_start":8,"line_end":8,"column_start":44,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":343},"to":{"krate":0,"index":121}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\arr.rs","byte_start":25915,"byte_end":25917,"line_start":13,"line_end":13,"column_start":38,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":27818,"byte_end":27833,"line_start":12,"line_end":12,"column_start":47,"column_end":62},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":139}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\functional.rs","byte_start":28906,"byte_end":28921,"line_start":43,"line_end":43,"column_start":41,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":159}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":31547,"byte_end":31563,"line_start":30,"line_end":30,"column_start":12,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32023,"byte_end":32035,"line_start":47,"line_end":47,"column_start":29,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":3951}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32410,"byte_end":32426,"line_start":64,"line_end":64,"column_start":39,"column_end":55},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32653,"byte_end":32669,"line_start":75,"line_end":75,"column_start":21,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":32992,"byte_end":33008,"line_start":91,"line_end":91,"column_start":29,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":33636,"byte_end":33652,"line_start":116,"line_end":116,"column_start":25,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":35340,"byte_end":35356,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":36304,"byte_end":36320,"line_start":238,"line_end":238,"column_start":34,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\iter.rs","byte_start":36462,"byte_end":36478,"line_start":247,"line_end":247,"column_start":30,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":191},"to":{"krate":1,"index":4010}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":36935,"byte_end":36940,"line_start":11,"line_end":11,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":36943,"byte_end":36955,"line_start":11,"line_end":11,"column_start":46,"column_end":58},"kind":"SuperTrait","from":{"krate":1,"index":3951},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40047,"byte_end":40052,"line_start":110,"line_end":110,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":292}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":40055,"byte_end":40070,"line_start":110,"line_end":110,"column_start":39,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":292}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41067,"byte_end":41072,"line_start":145,"line_end":145,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1538},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41075,"byte_end":41090,"line_start":145,"line_end":145,"column_start":38,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":41967,"byte_end":41979,"line_start":177,"line_end":177,"column_start":51,"column_end":63},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":292}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":42827,"byte_end":42839,"line_start":211,"line_end":211,"column_start":50,"column_end":62},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":297}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":43769,"byte_end":43784,"line_start":246,"line_end":246,"column_start":31,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":314}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44168,"byte_end":44180,"line_start":259,"line_end":259,"column_start":38,"column_end":50},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":314}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":44814,"byte_end":44829,"line_start":283,"line_end":283,"column_start":32,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":257},"to":{"krate":0,"index":327}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\sequence.rs","byte_start":45195,"byte_end":45207,"line_start":297,"line_end":297,"column_start":39,"column_end":51},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":327}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1710,"byte_end":1718,"line_start":75,"line_end":75,"column_start":34,"column_end":42},"kind":"SuperTrait","from":{"krate":4,"index":502},"to":{"krate":0,"index":343}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":1845,"byte_end":1850,"line_start":80,"line_end":80,"column_start":35,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":4,"index":5928},"to":{"krate":0,"index":343}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2149,"byte_end":2169,"line_start":95,"line_end":95,"column_start":36,"column_end":56},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":349},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2432,"byte_end":2452,"line_start":105,"line_end":105,"column_start":33,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":349},"to":{"krate":1,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2695,"byte_end":2714,"line_start":117,"line_end":117,"column_start":36,"column_end":55},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":2978,"byte_end":2997,"line_start":127,"line_end":127,"column_start":33,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3061,"byte_end":3065,"line_start":129,"line_end":129,"column_start":54,"column_end":58},"kind":{"Impl":{"id":34}},"from":{"krate":4,"index":5877},"to":{"krate":0,"index":343}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3210,"byte_end":3214,"line_start":134,"line_end":134,"column_start":54,"column_end":58},"kind":{"Impl":{"id":35}},"from":{"krate":4,"index":5877},"to":{"krate":0,"index":343}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3551,"byte_end":3563,"line_start":146,"line_end":146,"column_start":50,"column_end":62},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3622,"byte_end":3634,"line_start":147,"line_end":147,"column_start":50,"column_end":62},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3666,"byte_end":3678,"line_start":149,"line_end":149,"column_start":22,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":3914,"byte_end":3926,"line_start":161,"line_end":161,"column_start":25,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":4529,"byte_end":4541,"line_start":182,"line_end":182,"column_start":28,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":5501,"byte_end":5513,"line_start":215,"line_end":215,"column_start":37,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":402},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6005,"byte_end":6018,"line_start":235,"line_end":235,"column_start":28,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":6651,"byte_end":6664,"line_start":256,"line_end":256,"column_start":37,"column_end":50},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":417},"to":{"krate":1,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":7440,"byte_end":7452,"line_start":290,"line_end":290,"column_start":32,"column_end":44},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":3947}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":8457,"byte_end":8469,"line_start":331,"line_end":331,"column_start":42,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":11089,"byte_end":11101,"line_start":420,"line_end":420,"column_start":54,"column_end":66},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":139}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":11297,"byte_end":11309,"line_start":428,"line_end":428,"column_start":45,"column_end":57},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":159}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":12769,"byte_end":12781,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14489,"byte_end":14501,"line_start":543,"line_end":543,"column_start":19,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\generic-array-0.13.2\\src\\lib.rs","byte_start":14903,"byte_end":14915,"line_start":557,"line_end":557,"column_start":12,"column_end":24},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}}]}