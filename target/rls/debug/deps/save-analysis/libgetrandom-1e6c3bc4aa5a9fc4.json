{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","getrandom","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=1e6c3bc4aa5a9fc4","-C","extra-filename=-1e6c3bc4aa5a9fc4","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","cfg_if=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcfg_if-ea23fff8dcc69735.rmeta","--cap-lints","allow","-l","advapi32","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libgetrandom-1e6c3bc4aa5a9fc4.rmeta"},"prelude":{"crate_id":{"name":"getrandom","disambiguator":[41322740403071273,6117145283354986736]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","num":4,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":5,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":6,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":7,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":8,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":9,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":10,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":356,"byte_end":12501,"line_start":9,"line_end":282,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":7830,"byte_end":7835,"line_start":159,"line_end":159,"column_start":23,"column_end":28},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":356,"byte_end":12501,"line_start":9,"line_end":282,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":5},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":76},{"krate":0,"index":89},{"krate":0,"index":58}],"decl_id":null,"docs":" Interface to the random number generator of the operating system.\n\n # Platform sources\n\n | OS               | interface\n |------------------|---------------------------------------------------------\n | Linux, Android   | [`getrandom`][1] system call if available, otherwise [`/dev/urandom`][2] after successfully polling `/dev/random`\n | Windows          | [`RtlGenRandom`][3]\n | macOS            | [`getentropy()`][19] if available, otherwise [`/dev/random`][20] (identical to `/dev/urandom`)\n | iOS              | [`SecRandomCopyBytes`][4]\n | FreeBSD          | [`getrandom()`][21] if available, otherwise [`kern.arandom`][5]\n | OpenBSD          | [`getentropy`][6]\n | NetBSD           | [`kern.arandom`][7]\n | Dragonfly BSD    | [`/dev/random`][8]\n | Solaris, illumos | [`getrandom`][9] system call if available, otherwise [`/dev/random`][10]\n | Fuchsia OS       | [`cprng_draw`][11]\n | Redox            | [`rand:`][12]\n | CloudABI         | [`cloudabi_sys_random_get`][13]\n | Haiku            | `/dev/random` (identical to `/dev/urandom`)\n | L4RE, SGX, UEFI  | [RDRAND][18]\n | Hermit           | [RDRAND][18] as [`sys_rand`][22] is currently broken.\n | VxWorks          | `randABytes` after checking entropy pool initialization with `randSecure`\n | Web browsers     | [`Crypto.getRandomValues`][14] (see [Support for WebAssembly and asm.js][16])\n | Node.js          | [`crypto.randomBytes`][15] (see [Support for WebAssembly and asm.js][16])\n | WASI             | [`__wasi_random_get`][17]\n\n Getrandom doesn't have a blanket implementation for all Unix-like operating\n systems that reads from `/dev/urandom`. This ensures all supported operating\n systems are using the recommended interface and respect maximum buffer\n sizes.\n\n ## Unsupported targets\n\n By default, compiling `getrandom` for an unsupported target will result in\n a compilation error. If you want to build an application which uses `getrandom`\n for such target, you can either:\n - Use [`[replace]`][replace] or [`[patch]`][patch] section in your `Cargo.toml`\n to switch to a custom implementation with a support of your target.\n - Enable the `dummy` feature to have getrandom use an implementation that always\n fails at run-time on unsupported targets.\n\n [replace]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-replace-section\n [patch]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-patch-section\n\n ## Support for WebAssembly and asm.js\n\n Getrandom supports all of Rust's current `wasm32` targets, and it works with\n both Node.js and web browsers. The three Emscripten targets\n `asmjs-unknown-emscripten`, `wasm32-unknown-emscripten`, and\n `wasm32-experimental-emscripten` use Emscripten's `/dev/random` emulation.\n The WASI target `wasm32-wasi` uses the [`__wasi_random_get`][17] function\n defined by the WASI standard.\n\n Getrandom also supports `wasm32-unknown-unknown` by directly calling\n JavaScript methods. Rust currently has two ways to do this: [bindgen] and\n [stdweb]. Getrandom supports using either one by enabling the\n `wasm-bindgen` or `stdweb` crate features. Note that if both features are\n enabled, `wasm-bindgen` will be used. If neither feature is enabled, calls\n to `getrandom` will always fail at runtime.\n\n [bindgen]: https://github.com/rust-lang/rust-bindgen\n [stdweb]: https://github.com/koute/stdweb\n\n ## Early boot\n\n It is possible that early in the boot process the OS hasn't had enough time\n yet to collect entropy to securely seed its RNG, especially on virtual\n machines.\n\n Some operating systems always block the thread until the RNG is securely\n seeded. This can take anywhere from a few seconds to more than a minute.\n Others make a best effort to use a seed from before the shutdown and don't\n document much.\n\n A few, Linux, NetBSD and Solaris, offer a choice between blocking and\n getting an error; in these cases we always choose to block.\n\n On Linux (when the `getrandom` system call is not available) and on NetBSD\n reading from `/dev/urandom` never blocks, even when the OS hasn't collected\n enough entropy yet. To avoid returning low-entropy bytes, we first read from\n `/dev/random` and only switch to `/dev/urandom` once this has succeeded.\n\n # Error handling\n\n We always choose failure over returning insecure \"random\" bytes. In general,\n on supported platforms, failure is highly unlikely, though not impossible.\n If an error does occur, then it is likely that it will occur on every call to\n `getrandom`, hence after the first successful call one can be reasonably\n confident that no errors will occur.\n\n On unsupported platforms, `getrandom` always fails. See the [`Error`] type\n for more information on what data is returned on failure.\n\n [1]: http://man7.org/linux/man-pages/man2/getrandom.2.html\n [2]: http://man7.org/linux/man-pages/man4/urandom.4.html\n [3]: https://docs.microsoft.com/en-us/windows/desktop/api/ntsecapi/nf-ntsecapi-rtlgenrandom\n [4]: https://developer.apple.com/documentation/security/1399291-secrandomcopybytes?language=objc\n [5]: https://www.freebsd.org/cgi/man.cgi?query=random&sektion=4\n [6]: https://man.openbsd.org/getentropy.2\n [7]: https://netbsd.gw.com/cgi-bin/man-cgi?sysctl+7+NetBSD-8.0\n [8]: https://leaf.dragonflybsd.org/cgi/web-man?command=random&section=4\n [9]: https://docs.oracle.com/cd/E88353_01/html/E37841/getrandom-2.html\n [10]: https://docs.oracle.com/cd/E86824_01/html/E54777/random-7d.html\n [11]: https://fuchsia.dev/fuchsia-src/zircon/syscalls/cprng_draw\n [12]: https://github.com/redox-os/randd/blob/master/src/main.rs\n [13]: https://github.com/nuxinl/cloudabi#random_get\n [14]: https://www.w3.org/TR/WebCryptoAPI/#Crypto-method-getRandomValues\n [15]: https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n [16]: #support-for-webassembly-and-asmjs\n [17]: https://github.com/WebAssembly/WASI/blob/master/design/WASI-core.md#__wasi_random_get\n [18]: https://software.intel.com/en-us/articles/intel-digital-random-number-generator-drng-software-implementation-guide\n [19]: https://www.unix.com/man-page/mojave/2/getentropy/\n [20]: https://www.unix.com/man-page/mojave/4/random/\n [21]: https://www.freebsd.org/cgi/man.cgi?query=getrandom&manpath=FreeBSD+12.0-stable\n [22]: https://github.com/hermitcore/libhermit-rs/blob/09c38b0371cee6f56a541400ba453e319e43db53/src/syscalls/random.rs#L21\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":7213,"byte_end":7223,"line_start":130,"line_end":130,"column_start":1,"column_end":11}},{"value":"warn(rust_2018_idioms, unused_lifetimes, missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":7282,"byte_end":7340,"line_start":132,"line_end":132,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13384,"byte_end":13389,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small and `no_std` compatible error type.\n\n The [`Error::raw_os_error()`] will indicate if the error is from the OS, and\n if so, which error code the OS gave the application. If such an error is\n encountered, please consult with your system documentation.\n\n Internally this type is a NonZeroU32, with certain values reserved for\n certain purposes, see [`Error::INTERNAL_START`] and [`Error::CUSTOM_START`].\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13489,"byte_end":13496,"line_start":25,"line_end":25,"column_start":15,"column_end":22},"name":"UNKNOWN","qualname":"::error::Error::UNKNOWN","value":"Error","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Unknown error.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.7\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13421,"byte_end":13451,"line_start":23,"line_end":23,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13614,"byte_end":13625,"line_start":28,"line_end":28,"column_start":15,"column_end":26},"name":"UNAVAILABLE","qualname":"::error::Error::UNAVAILABLE","value":"Error","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" System entropy source is unavailable.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.7\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13523,"byte_end":13553,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13881,"byte_end":13895,"line_start":33,"line_end":33,"column_start":15,"column_end":29},"name":"INTERNAL_START","qualname":"::error::Error::INTERNAL_START","value":"u32","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Codes below this point represent OS Errors (i.e. positive i32 values).\n Codes at or above this point, but below [`Error::CUSTOM_START`] are\n reserved for use by the `rand` and `getrandom` crates.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":14028,"byte_end":14040,"line_start":37,"line_end":37,"column_start":15,"column_end":27},"name":"CUSTOM_START","qualname":"::error::Error::CUSTOM_START","value":"u32","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Codes at or above this point can be used by users to define their own\n custom errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":14409,"byte_end":14421,"line_start":45,"line_end":45,"column_start":12,"column_end":24},"name":"raw_os_error","qualname":"<Error>::raw_os_error","value":"fn (self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Extract the raw OS error code (if this error came from the OS)\n\n This method is identical to `std::io::Error::raw_os_error()`, except\n that it works in `no_std` contexts. If this method returns `None`, the\n error value can still be formatted via the `Display` implementation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":14388,"byte_end":14397,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":14788,"byte_end":14792,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"code","qualname":"<Error>::code","value":"fn (self) -> NonZeroU32","parent":null,"children":[],"decl_id":null,"docs":" Extract the bare error code.\n\n This code can either come from the underlying OS, or be a custom error.\n Use [`Error::raw_os_error()`] to disambiguate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":14767,"byte_end":14776,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\lib.rs","byte_start":12358,"byte_end":12367,"line_start":277,"line_end":277,"column_start":8,"column_end":17},"name":"getrandom","qualname":"::getrandom","value":"fn (dest: &mut [u8]) -> Result<(), error::Error>","parent":null,"children":[],"decl_id":null,"docs":" Fill `dest` with random bytes from the system's preferred random number\n source.\n\n This function returns an error on any failure, including partial reads. We\n make no guarantees regarding the contents of `dest` on error. If `dest` is\n empty, `getrandom` immediately returns success, making no calls to the\n underlying operating system.\n\n Blocking is possible, at least during early boot; see module documentation.\n\n In general, `getrandom` will be fast enough for interactive usage, though\n significantly slower than a user-space CSPRNG; for the latter consider\n [`rand::thread_rng`](https://docs.rs/rand/*/rand/fn.thread_rng.html).\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13409,"byte_end":13414,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":15639,"byte_end":15644,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":16299,"byte_end":16304,"line_start":106,"line_end":106,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":16823,"byte_end":16828,"line_start":122,"line_end":122,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\util.rs","byte_start":20387,"byte_end":20396,"line_start":31,"line_end":31,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\util.rs","byte_start":21227,"byte_end":21235,"line_start":56,"line_end":56,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444200,"byte_end":4444205,"line_start":15,"line_end":15,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444485,"byte_end":4444490,"line_start":26,"line_end":26,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444735,"byte_end":4444740,"line_start":35,"line_end":35,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":13409,"byte_end":13414,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":62},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":15639,"byte_end":15644,"line_start":87,"line_end":87,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":16299,"byte_end":16304,"line_start":106,"line_end":106,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error.rs","byte_start":16823,"byte_end":16828,"line_start":122,"line_end":122,"column_start":27,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\util.rs","byte_start":20387,"byte_end":20396,"line_start":31,"line_end":31,"column_start":6,"column_end":15},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\util.rs","byte_start":21227,"byte_end":21235,"line_start":56,"line_end":56,"column_start":6,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444200,"byte_end":4444205,"line_start":15,"line_end":15,"column_start":26,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":62},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444485,"byte_end":4444490,"line_start":26,"line_end":26,"column_start":26,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":2469},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getrandom-0.1.14\\src\\error_impls.rs","byte_start":4444735,"byte_end":4444740,"line_start":35,"line_end":35,"column_start":28,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":62},"to":{"krate":5,"index":1616}}]}