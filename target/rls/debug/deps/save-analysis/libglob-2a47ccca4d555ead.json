{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","glob","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=2a47ccca4d555ead","-C","extra-filename=-2a47ccca4d555ead","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libglob-2a47ccca4d555ead.rmeta"},"prelude":{"crate_id":{"name":"glob","disambiguator":[6158135010595628180,4610998262844296818]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":467,"byte_end":48369,"line_start":11,"line_end":1312,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":467,"byte_end":48369,"line_start":11,"line_end":1312,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":107},{"krate":0,"index":141},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":120},{"krate":0,"index":118},{"krate":0,"index":115},{"krate":0,"index":113},{"krate":0,"index":111},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":143},{"krate":0,"index":179},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":166},{"krate":0,"index":164},{"krate":0,"index":161},{"krate":0,"index":159},{"krate":0,"index":181},{"krate":0,"index":215},{"krate":0,"index":213},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":196},{"krate":0,"index":194},{"krate":0,"index":191},{"krate":0,"index":189},{"krate":0,"index":216},{"krate":0,"index":228},{"krate":0,"index":226},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":84},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":229},{"krate":0,"index":261},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":240},{"krate":0,"index":238},{"krate":0,"index":235},{"krate":0,"index":233},{"krate":0,"index":95}],"decl_id":null,"docs":" Support for matching file paths against Unix shell style patterns.\n\n The `glob` and `glob_with` functions, in concert with the `Paths`\n type, allow querying the filesystem for all files that match a particular\n pattern - just like the libc `glob` function (for an example see the `glob`\n documentation). The methods on the `Pattern` type provide functionality\n for checking if individual paths match a particular pattern - in a similar\n manner to the libc `fnmatch` function\n For consistency across platforms, and for Windows support, this module\n is implemented entirely in Rust rather than deferring to the libc\n `glob`/`fnmatch` functions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":2265,"byte_end":2270,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"Paths","qualname":"::Paths","value":"Paths {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" An iterator that yields `Path`s from the filesystem that match a particular\n pattern.\n\n Note that it yields `GlobResult` in order to report any `IoErrors` that may\n arise during iteration. If a directory matches but is unreadable,\n thereby preventing its contents from being checked for matches, a\n `GlobError` is returned to express this.\n\n See the `glob` function for more details.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":4287,"byte_end":4291,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"glob","qualname":"::glob","value":"fn (pattern: &str) -> Result<Paths, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that produces all the Paths that match the given pattern,\n which may be absolute or relative to the current working directory.\n\n This may return an error if the pattern is invalid.\n\n This method uses the default match options and is equivalent to calling\n `glob_with(pattern, MatchOptions::new())`. Use `glob_with` directly if you\n want to use non-default match options.\n\n When iterating, each result is a `GlobResult` which expresses the\n possibility that there was an `IoError` when attempting to read the contents\n of the matched path.  In other words, each item returned by the iterator\n will either be an `Ok(Path)` if the path matched, or an `Err(GlobError)` if\n the path (partially) matched _but_ its contents could not be read in order\n to determine if its contents matched.\n\n See the `Paths` documentation for more information.\n\n # Example\n\n Consider a directory `/media/pictures` containing only the files\n `kittens.jpg`, `puppies.jpg` and `hamsters.gif`:\n\n ```rust\n use glob::glob;\n\n for entry in glob(\"/media/pictures/*.jpg\").unwrap() {\n     match entry {\n         Ok(path) => println!(\"{:?}\", path.display()),\n\n         // if the path matched but was unreadable,\n         // thereby preventing its contents from matching\n         Err(e) => println!(\"{:?}\", e),\n     }\n }\n ```\n\n The above code will print:\n\n ```ignore\n /media/pictures/kittens.jpg\n /media/pictures/puppies.jpg\n ```\n\n If you want to ignore unreadable paths, you can use something like\n `filter_map`:\n\n ```rust\n use glob::glob;\n use std::result::Result;\n\n for path in glob(\"/media/pictures/*.jpg\").unwrap().filter_map(Result::ok) {\n     println!(\"{}\", path.display());\n }\n ```\n\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":4969,"byte_end":4978,"line_start":132,"line_end":132,"column_start":8,"column_end":17},"name":"glob_with","qualname":"::glob_with","value":"fn (pattern: &str, options: &MatchOptions) -> Result<Paths, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that produces all the Paths that match the given pattern,\n which may be absolute or relative to the current working directory.\n\n This may return an error if the pattern is invalid.\n\n This function accepts Unix shell style patterns as described by\n `Pattern::new(..)`.  The options given are passed through unchanged to\n `Pattern::matches_with(..)` with the exception that\n `require_literal_separator` is always set to `true` regardless of the value\n passed to this function.\n\n Paths are yielded in alphabetical order.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":7984,"byte_end":7993,"line_start":228,"line_end":228,"column_start":12,"column_end":21},"name":"GlobError","qualname":"::GlobError","value":"GlobError {  }","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"decl_id":null,"docs":" A glob iteration error.\n\n This is typically returned when a particular path cannot be read\n to determine if its contents match the glob pattern. This is possible\n if the program lacks the permissions, for example.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8116,"byte_end":8120,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"path","qualname":"<GlobError>::path","value":"fn (&self) -> &Path","parent":null,"children":[],"decl_id":null,"docs":" The Path that the error corresponds to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8207,"byte_end":8212,"line_start":240,"line_end":240,"column_start":12,"column_end":17},"name":"error","qualname":"<GlobError>::error","value":"fn (&self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" The error in question.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8969,"byte_end":8979,"line_start":271,"line_end":271,"column_start":10,"column_end":20},"name":"GlobResult","qualname":"::GlobResult","value":"Result<PathBuf, GlobError>","parent":null,"children":[],"decl_id":null,"docs":" An alias for a glob iteration result.\n\n This represents either a matched path or a glob iteration error,\n such as failing to read a particular directory's contents.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":12981,"byte_end":12993,"line_start":375,"line_end":375,"column_start":12,"column_end":24},"name":"PatternError","qualname":"::PatternError","value":"PatternError { pos, msg }","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" A pattern parsing error.\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":12931,"byte_end":12969,"line_start":374,"line_end":374,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13073,"byte_end":13076,"line_start":377,"line_end":377,"column_start":9,"column_end":12},"name":"pos","qualname":"::PatternError::pos","value":"usize","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" The approximate character index of where the error occurred.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13134,"byte_end":13137,"line_start":380,"line_end":380,"column_start":9,"column_end":12},"name":"msg","qualname":"::PatternError::msg","value":"&'static str","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" A message describing the error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":14781,"byte_end":14788,"line_start":424,"line_end":424,"column_start":12,"column_end":19},"name":"Pattern","qualname":"::Pattern","value":"Pattern {  }","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" A compiled Unix shell style pattern.\n\n `?` matches any single character\n\n `*` matches any (possibly empty) sequence of characters\n\n `**` matches the current directory and arbitrary subdirectories. This\n sequence **must** form a single path component, so both `**a` and `b**` are\n invalid and will result in an error.  A sequence of more than two\n consecutive `*` characters is also invalid.\n\n `[...]` matches any character inside the brackets.\n Character sequences can also specify ranges\n of characters, as ordered by Unicode, so e.g. `[0-9]` specifies any\n character between 0 and 9 inclusive. An unclosed bracket is invalid.\n\n `[!...]` is the negation of `[...]`, i.e. it matches any characters **not**\n in the brackets.\n\n The metacharacters `?`, `*`, `[`, `]` can be matched by using brackets\n (e.g. `[?]`).  When a `]` occurs immediately following `[` or `[!` then\n it is interpreted as being part of, rather then ending, the character\n set, so `]` and NOT `]` can be matched by `[]]` and `[!]]` respectively.\n The `-` character can be specified inside a character sequence pattern by\n placing it at the start or the end, e.g. `[abc-]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":16139,"byte_end":16142,"line_start":477,"line_end":477,"column_start":12,"column_end":15},"name":"new","qualname":"<Pattern>::new","value":"fn (pattern: &str) -> Result<Pattern, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" This function compiles Unix shell style patterns.\n\n An invalid glob pattern will yield an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":20891,"byte_end":20897,"line_start":594,"line_end":594,"column_start":12,"column_end":18},"name":"escape","qualname":"<Pattern>::escape","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escape metacharacters within the given string by surrounding them in\n brackets. The resulting string will, when compiled into a `Pattern`,\n match the input string and nothing else.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":21859,"byte_end":21866,"line_start":625,"line_end":625,"column_start":12,"column_end":19},"name":"matches","qualname":"<Pattern>::matches","value":"fn (&self, str: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `str` matches this `Pattern` using the default\n match options (i.e. `MatchOptions::new()`).\n\n # Example\n\n ```rust\n use glob::Pattern;\n\n assert!(Pattern::new(\"c?t\").unwrap().matches(\"cat\"));\n assert!(Pattern::new(\"k[!e]tteh\").unwrap().matches(\"kitteh\"));\n assert!(Pattern::new(\"d*g\").unwrap().matches(\"doog\"));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":22122,"byte_end":22134,"line_start":631,"line_end":631,"column_start":12,"column_end":24},"name":"matches_path","qualname":"<Pattern>::matches_path","value":"fn (&self, path: &Path) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `Path`, when converted to a `str`, matches this\n `Pattern` using the default match options (i.e. `MatchOptions::new()`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":22402,"byte_end":22414,"line_start":638,"line_end":638,"column_start":12,"column_end":24},"name":"matches_with","qualname":"<Pattern>::matches_with","value":"fn (&self, str: &str, options: &MatchOptions) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `str` matches this `Pattern` using the specified\n match options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":22680,"byte_end":22697,"line_start":644,"line_end":644,"column_start":12,"column_end":29},"name":"matches_path_with","qualname":"<Pattern>::matches_path_with","value":"fn (&self, path: &Path, options: &MatchOptions) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `Path`, when converted to a `str`, matches this\n `Pattern` using the specified match options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":22945,"byte_end":22951,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Pattern>::as_str","value":"fn <'a> (&'a self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Access the original glob pattern.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":32419,"byte_end":32431,"line_start":898,"line_end":898,"column_start":12,"column_end":24},"name":"MatchOptions","qualname":"::MatchOptions","value":"MatchOptions { case_sensitive, require_literal_separator, require_literal_leading_dot }","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"decl_id":null,"docs":" Configuration options to modify the behaviour of `Pattern::matches_with(..)`\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":32305,"byte_end":32343,"line_start":896,"line_end":896,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":32690,"byte_end":32704,"line_start":903,"line_end":903,"column_start":9,"column_end":23},"name":"case_sensitive","qualname":"::MatchOptions::case_sensitive","value":"bool","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Whether or not patterns should be matched in a case-sensitive manner.\n This currently only considers upper/lower case relationships between\n ASCII characters, but in future this might be extended to work with\n Unicode.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":32893,"byte_end":32918,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"name":"require_literal_separator","qualname":"::MatchOptions::require_literal_separator","value":"bool","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" If this is true then path-component separator characters (e.g. `/` on\n Posix) must be matched by a literal `/`, rather than by `*` or `?` or\n `[...]`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":33301,"byte_end":33328,"line_start":915,"line_end":915,"column_start":9,"column_end":36},"name":"require_literal_leading_dot","qualname":"::MatchOptions::require_literal_leading_dot","value":"bool","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" If this is true then paths that contain components that start with a `.`\n will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\n or `[...]` will not match. This is useful because such files are\n conventionally considered hidden on Unix systems and it might be\n desirable to skip them when listing files.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":33804,"byte_end":33807,"line_start":932,"line_end":932,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchOptions>::new","value":"fn () -> MatchOptions","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `MatchOptions` with default field values. This is used\n when calling functions that do not take an explicit `MatchOptions`\n parameter.\n\n This function always returns this value:\n\n ```rust,ignore\n MatchOptions {\n     case_sensitive: true,\n     require_literal_separator: false.\n     require_literal_leading_dot: false\n }\n ```\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8045,"byte_end":8054,"line_start":233,"line_end":233,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8280,"byte_end":8289,"line_start":245,"line_end":245,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8464,"byte_end":8473,"line_start":254,"line_end":254,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":9029,"byte_end":9034,"line_start":273,"line_end":273,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13171,"byte_end":13183,"line_start":383,"line_end":383,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13270,"byte_end":13282,"line_start":389,"line_end":389,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":14929,"byte_end":14936,"line_start":431,"line_end":431,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":15053,"byte_end":15060,"line_start":437,"line_end":437,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":15999,"byte_end":16006,"line_start":473,"line_end":473,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":33344,"byte_end":33356,"line_start":918,"line_end":918,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8045,"byte_end":8054,"line_start":233,"line_end":233,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8280,"byte_end":8289,"line_start":245,"line_end":245,"column_start":16,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":97},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":8464,"byte_end":8473,"line_start":254,"line_end":254,"column_start":23,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":97},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":9029,"byte_end":9034,"line_start":273,"line_end":273,"column_start":19,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":30},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13171,"byte_end":13183,"line_start":383,"line_end":383,"column_start":16,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":102},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":13270,"byte_end":13282,"line_start":389,"line_end":389,"column_start":23,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":102},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":14929,"byte_end":14936,"line_start":431,"line_end":431,"column_start":23,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":15053,"byte_end":15060,"line_start":437,"line_end":437,"column_start":18,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":15999,"byte_end":16006,"line_start":473,"line_end":473,"column_start":6,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\glob-0.2.11\\src\\lib.rs","byte_start":33344,"byte_end":33356,"line_start":918,"line_end":918,"column_start":6,"column_end":18},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}}]}