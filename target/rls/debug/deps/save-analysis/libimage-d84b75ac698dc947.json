{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dxt\"","--cfg","feature=\"gif\"","--cfg","feature=\"gif_codec\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg-decoder\"","--cfg","feature=\"png\"","--cfg","feature=\"png_codec\"","--cfg","feature=\"pnm\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=d84b75ac698dc947","-C","extra-filename=-d84b75ac698dc947","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbyteorder-64f7b87f82657a23.rmeta","--extern","gif=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libgif-1b29e8aed6ac1b80.rmeta","--extern","jpeg_decoder=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libjpeg_decoder-5f4b47710f59318f.rmeta","--extern","num_iter=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_iter-5ca84e4bb925b062.rmeta","--extern","num_rational=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_rational-217fde7fdb02c161.rmeta","--extern","num_traits=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_traits-06e054c4c95d48c0.rmeta","--extern","png=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libpng-8fbc5556a18e8a5a.rmeta","--extern","tiff=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libtiff-6b8f7b781c3a2591.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libimage-d84b75ac698dc947.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[1935038203305223919,5353769694287098238]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":14,"id":{"name":"byteorder","disambiguator":[373764108737062493,6998070977021925776]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":15,"id":{"name":"num_iter","disambiguator":[12318372167477621423,10756738261409737925]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":16,"id":{"name":"num_integer","disambiguator":[3873470759457277054,11692439525196161537]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","num":18,"id":{"name":"num_rational","disambiguator":[15863994761067920867,5154642504162158822]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","num":19,"id":{"name":"gif","disambiguator":[18371189255484967979,1430782751927475450]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","num":20,"id":{"name":"lzw","disambiguator":[15099569162670075523,3508576874480256305]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","num":21,"id":{"name":"color_quant","disambiguator":[8792847916174623078,12727662811981802366]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","num":22,"id":{"name":"jpeg_decoder","disambiguator":[758147955806502111,8707752624763186886]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":23,"id":{"name":"png","disambiguator":[6919433470532112786,17775363673190376838]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":24,"id":{"name":"bitflags","disambiguator":[1258995681021104935,10120995213895226001]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":25,"id":{"name":"crc32fast","disambiguator":[14984425738714601369,14028776434072473916]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":26,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":27,"id":{"name":"inflate","disambiguator":[6088455039282492040,13490784073788723862]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":28,"id":{"name":"adler32","disambiguator":[5470020609090045846,14440380773254217963]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","num":29,"id":{"name":"deflate","disambiguator":[18193453627713725514,15097347517493833582]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","num":30,"id":{"name":"tiff","disambiguator":[9539525316966597552,12718911907625137902]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","num":31,"id":{"name":"num_derive","disambiguator":[7489501388021603328,18314253685790029]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":0,"byte_end":3470,"line_start":1,"line_end":143,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3516},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":730,"byte_end":734,"line_start":29,"line_end":29,"column_start":28,"column_end":32},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":736,"byte_end":740,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":742,"byte_end":747,"line_start":29,"line_end":29,"column_start":40,"column_end":45},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3523},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":749,"byte_end":756,"line_start":29,"line_end":29,"column_start":47,"column_end":54},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":758,"byte_end":761,"line_start":29,"line_end":29,"column_start":56,"column_end":59},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3529},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":763,"byte_end":767,"line_start":29,"line_end":29,"column_start":61,"column_end":65},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3532},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":769,"byte_end":772,"line_start":29,"line_end":29,"column_start":67,"column_end":70},"alias_span":null,"name":"BGR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":774,"byte_end":778,"line_start":29,"line_end":29,"column_start":72,"column_end":76},"alias_span":null,"name":"BGRA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":798,"byte_end":802,"line_start":31,"line_end":31,"column_start":17,"column_end":21},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3968},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":804,"byte_end":809,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":811,"byte_end":814,"line_start":31,"line_end":31,"column_start":30,"column_end":33},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3910},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":816,"byte_end":820,"line_start":31,"line_end":31,"column_start":35,"column_end":39},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":822,"byte_end":825,"line_start":31,"line_end":31,"column_start":41,"column_end":44},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":827,"byte_end":831,"line_start":31,"line_end":31,"column_start":46,"column_end":50},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":851,"byte_end":867,"line_start":33,"line_end":33,"column_start":17,"column_end":33},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":885,"byte_end":897,"line_start":34,"line_end":34,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2815},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":915,"byte_end":931,"line_start":35,"line_end":35,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":949,"byte_end":961,"line_start":36,"line_end":36,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":979,"byte_end":994,"line_start":37,"line_end":37,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4018},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1012,"byte_end":1022,"line_start":38,"line_end":38,"column_start":17,"column_end":27},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1040,"byte_end":1051,"line_start":39,"line_end":39,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1098,"byte_end":1104,"line_start":41,"line_end":41,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1122,"byte_end":1130,"line_start":42,"line_end":42,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1165,"byte_end":1169,"line_start":44,"line_end":44,"column_start":32,"column_end":36},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1171,"byte_end":1181,"line_start":44,"line_end":44,"column_start":38,"column_end":48},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1183,"byte_end":1191,"line_start":44,"line_end":44,"column_start":50,"column_end":58},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1193,"byte_end":1201,"line_start":44,"line_end":44,"column_start":60,"column_end":68},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1203,"byte_end":1210,"line_start":44,"line_end":44,"column_start":70,"column_end":77},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1212,"byte_end":1220,"line_start":44,"line_end":44,"column_start":79,"column_end":87},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4041},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1253,"byte_end":1257,"line_start":46,"line_end":46,"column_start":30,"column_end":34},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4056},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1259,"byte_end":1262,"line_start":46,"line_end":46,"column_start":36,"column_end":39},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4046},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1264,"byte_end":1267,"line_start":46,"line_end":46,"column_start":41,"column_end":44},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1269,"byte_end":1272,"line_start":46,"line_end":46,"column_start":46,"column_end":49},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1274,"byte_end":1278,"line_start":46,"line_end":46,"column_start":51,"column_end":55},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4042},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1280,"byte_end":1283,"line_start":46,"line_end":46,"column_start":57,"column_end":60},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4050},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1285,"byte_end":1288,"line_start":46,"line_end":46,"column_start":62,"column_end":65},"alias_span":null,"name":"PNM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4048},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1290,"byte_end":1294,"line_start":46,"line_end":46,"column_start":67,"column_end":71},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4073},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1313,"byte_end":1330,"line_start":48,"line_end":48,"column_start":16,"column_end":33},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1350,"byte_end":1363,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2452},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1382,"byte_end":1396,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2451},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1415,"byte_end":1424,"line_start":52,"line_end":52,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3505},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1475,"byte_end":1486,"line_start":54,"line_end":54,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1505,"byte_end":1510,"line_start":55,"line_end":55,"column_start":18,"column_end":23},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2449},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1529,"byte_end":1537,"line_start":56,"line_end":56,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2450},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1556,"byte_end":1565,"line_start":57,"line_end":57,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2945},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1584,"byte_end":1595,"line_start":59,"line_end":59,"column_start":16,"column_end":27},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1625,"byte_end":1634,"line_start":62,"line_end":62,"column_start":17,"column_end":26},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1696,"byte_end":1708,"line_start":65,"line_end":65,"column_start":30,"column_end":42},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1710,"byte_end":1714,"line_start":65,"line_end":65,"column_start":44,"column_end":48},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1736,"byte_end":1752,"line_start":66,"line_end":66,"column_start":20,"column_end":36},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2732},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1754,"byte_end":1782,"line_start":66,"line_end":66,"column_start":38,"column_end":66},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1784,"byte_end":1788,"line_start":66,"line_end":66,"column_start":68,"column_end":72},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2727},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1809,"byte_end":1820,"line_start":67,"line_end":67,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2729},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1822,"byte_end":1845,"line_start":67,"line_end":67,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2725},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1847,"byte_end":1863,"line_start":67,"line_end":67,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1900,"byte_end":1904,"line_start":69,"line_end":69,"column_start":34,"column_end":38},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1906,"byte_end":1916,"line_start":69,"line_end":69,"column_start":40,"column_end":50},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4001},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1918,"byte_end":1929,"line_start":69,"line_end":69,"column_start":52,"column_end":63},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1931,"byte_end":1940,"line_start":69,"line_end":69,"column_start":65,"column_end":74},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1942,"byte_end":1952,"line_start":69,"line_end":69,"column_start":76,"column_end":86},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1954,"byte_end":1963,"line_start":69,"line_end":69,"column_start":88,"column_end":97},"alias_span":null,"name":"ImageBgr8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4013},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1965,"byte_end":1975,"line_start":69,"line_end":69,"column_start":99,"column_end":109},"alias_span":null,"name":"ImageBgra8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":1999,"byte_end":2004,"line_start":71,"line_end":71,"column_start":21,"column_end":26},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2006,"byte_end":2012,"line_start":71,"line_end":71,"column_start":28,"column_end":34},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18459,"byte_end":18469,"line_start":8,"line_end":8,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18507,"byte_end":18517,"line_start":10,"line_end":10,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18519,"byte_end":18527,"line_start":10,"line_end":10,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18529,"byte_end":18537,"line_start":10,"line_end":10,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18539,"byte_end":18546,"line_start":10,"line_end":10,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18548,"byte_end":18556,"line_start":10,"line_end":10,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18615,"byte_end":18630,"line_start":14,"line_end":14,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18632,"byte_end":18656,"line_start":14,"line_end":14,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18658,"byte_end":18671,"line_start":14,"line_end":14,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18673,"byte_end":18695,"line_start":14,"line_end":14,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18697,"byte_end":18706,"line_start":14,"line_end":14,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18712,"byte_end":18730,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18732,"byte_end":18741,"line_start":15,"line_end":15,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18743,"byte_end":18751,"line_start":15,"line_end":15,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18753,"byte_end":18765,"line_start":15,"line_end":15,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18767,"byte_end":18778,"line_start":15,"line_end":15,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18780,"byte_end":18792,"line_start":15,"line_end":15,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18794,"byte_end":18812,"line_start":15,"line_end":15,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18814,"byte_end":18830,"line_start":15,"line_end":15,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18877,"byte_end":18881,"line_start":19,"line_end":19,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18883,"byte_end":18892,"line_start":19,"line_end":19,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18894,"byte_end":18900,"line_start":19,"line_end":19,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18902,"byte_end":18911,"line_start":19,"line_end":19,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18913,"byte_end":18922,"line_start":19,"line_end":19,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18972,"byte_end":18980,"line_start":22,"line_end":22,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18982,"byte_end":18990,"line_start":22,"line_end":22,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":18992,"byte_end":18998,"line_start":22,"line_end":22,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19000,"byte_end":19009,"line_start":22,"line_end":22,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19011,"byte_end":19020,"line_start":22,"line_end":22,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19022,"byte_end":19034,"line_start":22,"line_end":22,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19036,"byte_end":19042,"line_start":22,"line_end":22,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":2924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19069,"byte_end":19076,"line_start":23,"line_end":23,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19078,"byte_end":19086,"line_start":23,"line_end":23,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":125}},{"kind":"Use","ref_id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\mod.rs","byte_start":75287,"byte_end":75293,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":365}},{"kind":"Use","ref_id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\mod.rs","byte_start":153749,"byte_end":153759,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPDecoder","value":"","parent":{"krate":0,"index":622}},{"kind":"Use","ref_id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\mod.rs","byte_start":153784,"byte_end":153794,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":622}},{"kind":"Use","ref_id":{"krate":19,"index":283},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243606,"byte_end":243620,"line_start":39,"line_end":39,"column_start":21,"column_end":35},"alias_span":null,"name":"DisposalMethod","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":19,"index":352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243622,"byte_end":243627,"line_start":39,"line_end":39,"column_start":37,"column_end":42},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\mod.rs","byte_start":255016,"byte_end":255026,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"ICODecoder","value":"","parent":{"krate":0,"index":1045}},{"kind":"Use","ref_id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\mod.rs","byte_start":255051,"byte_end":255061,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1045}},{"kind":"Use","ref_id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\mod.rs","byte_start":267792,"byte_end":267803,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGDecoder","value":"","parent":{"krate":0,"index":1146}},{"kind":"Use","ref_id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\mod.rs","byte_start":267828,"byte_end":267839,"line_start":11,"line_end":11,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1146}},{"kind":"Use","ref_id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313560,"byte_end":313570,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMDecoder","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313595,"byte_end":313605,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3309},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313662,"byte_end":313677,"line_start":10,"line_end":10,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313679,"byte_end":313696,"line_start":10,"line_end":10,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3280},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313698,"byte_end":313710,"line_start":10,"line_end":10,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313712,"byte_end":313725,"line_start":10,"line_end":10,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313750,"byte_end":313762,"line_start":11,"line_end":11,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":1677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313788,"byte_end":313797,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313799,"byte_end":313809,"line_start":12,"line_end":12,"column_start":35,"column_end":45},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":3240},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":313811,"byte_end":313825,"line_start":12,"line_end":12,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1367}},{"kind":"Use","ref_id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\mod.rs","byte_start":392066,"byte_end":392076,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TGADecoder","value":"","parent":{"krate":0,"index":1715}},{"kind":"Use","ref_id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\mod.rs","byte_start":413591,"byte_end":413602,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebpDecoder","value":"","parent":{"krate":0,"index":1870}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":0,"byte_end":3470,"line_start":1,"line_end":143,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":17},{"krate":0,"index":24},{"krate":0,"index":34},{"krate":0,"index":41},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":72},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":125},{"krate":0,"index":365},{"krate":0,"index":465},{"krate":0,"index":622},{"krate":0,"index":842},{"krate":0,"index":954},{"krate":0,"index":1045},{"krate":0,"index":1146},{"krate":0,"index":1310},{"krate":0,"index":1367},{"krate":0,"index":1715},{"krate":0,"index":1818},{"krate":0,"index":1870},{"krate":0,"index":2102},{"krate":0,"index":2126},{"krate":0,"index":2455},{"krate":0,"index":2607},{"krate":0,"index":2734},{"krate":0,"index":2871},{"krate":0,"index":2899},{"krate":0,"index":2911},{"krate":0,"index":4117},{"krate":0,"index":2912}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":132,"byte_end":154,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":155,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":187,"byte_end":212,"line_start":7,"line_end":7,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":213,"byte_end":233,"line_start":8,"line_end":8,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":234,"byte_end":272,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":370,"byte_end":411,"line_start":12,"line_end":12,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":122}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":2913},{"krate":0,"index":2921},{"krate":0,"index":2919},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":108}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":5777,"byte_end":5785,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":6087,"byte_end":6090,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (samplefac: i32, colors: usize, pixels: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":6631,"byte_end":6635,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut self, pixels: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":7625,"byte_end":7634,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&self, pixel: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":7596,"byte_end":7613,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":8186,"byte_end":8194,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&self, pixel: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":8157,"byte_end":8174,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":123}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\utils.rs","byte_start":18157,"byte_end":18162,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (a: N, min: N, max: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range\n\n ```\n use image::math::utils;\n\n assert_eq!(utils::clamp(-5, 0, 10),  0);\n assert_eq!(utils::clamp( 6, 0, 10),  6);\n assert_eq!(utils::clamp(15, 0, 10), 10);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\utils.rs","byte_start":18140,"byte_end":18149,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":139},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":169},{"krate":0,"index":207},{"krate":0,"index":270},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":362}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":26142,"byte_end":26150,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":26482,"byte_end":26491,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":26824,"byte_end":26833,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":27221,"byte_end":27232,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":27929,"byte_end":27941,"line_start":66,"line_end":66,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":28647,"byte_end":28659,"line_start":89,"line_end":89,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":29288,"byte_end":29303,"line_start":112,"line_end":112,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":29628,"byte_end":29641,"line_start":124,"line_end":124,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":30023,"byte_end":30041,"line_start":136,"line_end":136,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":30725,"byte_end":30741,"line_start":159,"line_end":159,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":31391,"byte_end":31409,"line_start":182,"line_end":182,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":32189,"byte_end":32213,"line_start":213,"line_end":213,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\affine.rs","byte_start":32619,"byte_end":32641,"line_start":228,"line_end":228,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":235},{"krate":0,"index":241},{"krate":0,"index":246},{"krate":0,"index":2924},{"krate":0,"index":2927},{"krate":0,"index":2926},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":267}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":37979,"byte_end":37988,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (image: &I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":38527,"byte_end":38533,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":38996,"byte_end":39004,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":39979,"byte_end":39987,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":40973,"byte_end":40982,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":42896,"byte_end":42904,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":42968,"byte_end":42973,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43065,"byte_end":43073,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&self, color: &Self::Color) -> usize","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43179,"byte_end":43188,"line_start":187,"line_end":187,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&self, color: &mut Self::Color) -> ()","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43284,"byte_end":43291,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":45150,"byte_end":45156,"line_start":258,"line_end":258,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":46701,"byte_end":46713,"line_start":296,"line_end":296,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50360,"byte_end":50367,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2929},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50396,"byte_end":50404,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2929},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50432,"byte_end":50442,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2929},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50473,"byte_end":50481,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2929},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50518,"byte_end":50526,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2929},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":50318,"byte_end":50328,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":2930},{"krate":0,"index":2932},{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2938}],"decl_id":null,"docs":" Available Sampling Filters.\n\n ## Examples\n\n To test the different sampling filters on a real example, you can find two\n examples called\n [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)\n and\n [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)\n in the `examples` directory of the crate source code.\n\n Here is a 3.58 MiB\n [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)\n that has been scaled down to 300x225 px:\n\n <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->\n <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">\n   <div style=\"margin: 0 8px 8px 0;\">\n     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>\n     Nearest Neighbor\n   </div>\n   <div style=\"margin: 0 8px 8px 0;\">\n     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>\n     Linear: Triangle\n   </div>\n   <div style=\"margin: 0 8px 8px 0;\">\n     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>\n     Cubic: Catmull-Rom\n   </div>\n   <div style=\"margin: 0 8px 8px 0;\">\n     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>\n     Gaussian\n   </div>\n   <div style=\"margin: 0 8px 8px 0;\">\n     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>\n     Lanczos with window 3\n   </div>\n </div>\n\n ## Speed\n\n Time required to create each of the examples above, tested on an Intel\n i7-4770 CPU with Rust 1.37 in release mode:\n\n <table style=\"width: auto;\">\n   <tr>\n     <th>Nearest</th>\n     <td>31 ms</td>\n   </tr>\n   <tr>\n     <th>Triangle</th>\n     <td>414 ms</td>\n   </tr>\n   <tr>\n     <th>CatmullRom</th>\n     <td>817 ms</td>\n   </tr>\n   <tr>\n     <th>Gaussian</th>\n     <td>1180 ms</td>\n   </tr>\n   <tr>\n     <th>Lanczos3</th>\n     <td>1170 ms</td>\n   </tr>\n </table>\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":59988,"byte_end":59997,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.\n\n For downscaling, this method uses a fast integer algorithm where each source pixel contributes\n to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.\n\n In case the current width is smaller than the new width or similar for the height, another\n strategy is used instead.  For each pixel in the output, a rectangular region of the input is\n determined, just as previously.  But when no input pixel is part of this region, the nearest\n pixels are interpolated instead.\n\n For speed reasons, all interpolation is performed linearly over the colour values.  It will not\n take the pixel colour spaces into account.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":67856,"byte_end":67865,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":70292,"byte_end":70298,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (image: &I, nwidth: u32, nheight: u32, filter: FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":71424,"byte_end":71428,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (image: &I, sigma: f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":72251,"byte_end":72260,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between\n\n See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19266,"byte_end":19270,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":21825,"byte_end":21839,"line_start":105,"line_end":105,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((bottom_width, bottom_height): (u32, u32), (top_width, top_height): (u32, u32), x: u32, y: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.\n\n Given image size of bottom and top image, and a point at which we want to place the top image\n onto the bottom image, how large can we be? Have to wary of the following issues:\n * Top might be larger than bottom\n * Overflows in the computation\n * Coordinates could be completely out of bounds\n\n The main idea is to make use of inequalities provided by the nature of `saturing_add` and\n `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds\n for both images.\n\n We want that all these coordinate accesses are safe:\n 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`\n 2. `top.get_pixel([0..x_range), [0..y_range))`\n\n Proof that the function provides the necessary bounds for width. Note that all unaugmented math\n operations are to be read in standard arithmetic, not integer arithmetic. Since no direct\n integer arithmetic occurs in the implementation, this is unambiguous.\n\n ```text\n Three short notes/lemmata:\n - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`\n - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`\n - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`\n\n 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.\n\n x_range\n  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)\n <= bottom_width.saturating_sub(x)\n\n bottom_width <= x\n <==> bottom_width - x <= 0\n <==> bottom_width.saturating_sub(x) = 0\n  ==> x_range <= 0\n  ==> x_range  = 0\n\n 1.2 If `x < bottom_width` then `x + x_range < bottom_width`\n\n x + x_range\n <= x + bottom_width.saturating_sub(x)\n  = x + (bottom_width - x)\n  = bottom_width\n\n 2. We show that `x_range <= top_width`\n\n x_range\n  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)\n <= top_width.saturating_add(x).saturating_sub(x)\n <= (top_wdith + x).saturating_sub(x)\n  = top_width (due to `top_width >= 0` and `x >= 0`)\n ```\n\n Proof is the same for height.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":22353,"byte_end":22360,"line_start":123,"line_end":123,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":23092,"byte_end":23099,"line_start":146,"line_end":146,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\mod.rs","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":408},{"krate":0,"index":464}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":77319,"byte_end":77325,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" A multi-format image reader.\n\n Wraps an input reader to facilitate automatic detection of an image's format, appropriate\n decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.\n\n ## Usage\n\n Opening a file, deducing the format based on the file path automatically, and trying to decode\n the image contained can be performed by constructing the reader and immediately consuming it.\n\n ```no_run\n # use image::ImageError;\n # use image::io::Reader;\n # fn main() -> Result<(), ImageError> {\n let image = Reader::open(\"path/to/image.png\")?\n     .decode()?;\n # Ok(()) }\n ```\n\n It is also possible to make a guess based on the content. This is especially handy if the\n source is some blob in memory and you have constructed the reader in another way. Here is an\n example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.\n\n```\n # use image::ImageError;\n # use image::io::Reader;\n # fn main() -> Result<(), ImageError> {\n use std::io::Cursor;\n use image::ImageFormat;\n\n let raw_data = b\"P1 2 2\\n\\\n     0 1\\n\\\n     1 0\\n\";\n\n let mut reader = Reader::new(Cursor::new(raw_data))\n     .with_guessed_format()\n     .expect(\"Cursor io never fails\");\n assert_eq!(reader.format(), Some(ImageFormat::PNM));\n\n let image = reader.decode()?;\n # Ok(()) }\n ```\n\n As a final fallback or if only a specific format must be used, the reader always allows manual\n specification of the supposed image format with [`set_format`].\n\n [`set_format`]: #method.set_format\n [`ImageDecoder`]: ../trait.ImageDecoder.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":77825,"byte_end":77828,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn (reader: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.\n\n It is possible to guess the format based on the content of the read object with\n [`guess_format`], or to set the format directly with [`set_format`].\n\n [`guess_format`]: #method.guess_format\n [`set_format`]: method.set_format\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":77998,"byte_end":78009,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn (reader: R, format: ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78203,"byte_end":78209,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn (&self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78344,"byte_end":78354,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn (&mut self, format: ImageFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78689,"byte_end":78701,"line_start":104,"line_end":104,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.\n\n Note that many operations require format information to be present and will return e.g. an\n `ImageError::UnsupportedError` when the image format has not been set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78788,"byte_end":78798,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":79260,"byte_end":79264,"line_start":123,"line_end":123,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn <P> (path: P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.\n\n This will not attempt any io operation on the opened file.\n\n If you want to inspect the content for a better guess on the format, which does not depend\n on file extensions, follow this call with a call to [`guess_format`].\n\n [`guess_format`]: #method.guess_format\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":80896,"byte_end":80915,"line_start":165,"line_end":165,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn (mut self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.\n\n Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current\n format if the guess was successful. If the guess was not unable to determine a format then\n the current format of the reader is unchanged.\n\n Returns an error if the underlying reader fails. The format is unchanged. The error is a\n `std::io::Error` and not `ImageError` since the only error case is an error when the\n underlying reader seeks.\n\n When an error occurs, the reader may not have been properly reset and it is potentially\n hazardous to continue with more io.\n\n ## Usage\n\n This supplements the path based type deduction from [`open`] with content based deduction.\n This is more common in Linux and UNIX operating systems and also helpful if the path can\n not be directly controlled.\n\n ```no_run\n # use image::ImageError;\n # use image::io::Reader;\n # fn main() -> Result<(), ImageError> {\n let image = Reader::open(\"image.unknown\")?\n     .with_guessed_format()?\n     .decode()?;\n # Ok(()) }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":81878,"byte_end":81893,"line_start":191,"line_end":191,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn (mut self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.\n\n Uses the current format to construct the correct reader for the format.\n\n If no format was determined, returns an `ImageError::UnsupportedError`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":82292,"byte_end":82298,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn (mut self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).\n\n Uses the current format to construct the correct reader for the format.\n\n If no format was determined, returns an `ImageError::UnsupportedError`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\free_functions.rs","byte_start":83909,"byte_end":83913,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn <R> (r: R, format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader\n\n Try [`io::Reader`] for more advanced uses.\n\n [`io::Reader`]: io/struct.Reader.html\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\free_functions.rs","byte_start":93568,"byte_end":93580,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn (buffer: &[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block\n\n Makes an educated guess about the image format based on the Magic Bytes at the beginning.\n TGA is not supported by this function.\n This is not to be trusted on the validity of the whole memory block\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":2945},{"krate":0,"index":2953},{"krate":0,"index":2950},{"krate":0,"index":2956},{"krate":0,"index":2976},{"krate":0,"index":2975},{"krate":0,"index":2973},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2963},{"krate":0,"index":2978},{"krate":0,"index":3004},{"krate":0,"index":3003},{"krate":0,"index":3001},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2984},{"krate":0,"index":2982},{"krate":0,"index":481},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":3006},{"krate":0,"index":3015},{"krate":0,"index":3011},{"krate":0,"index":3019},{"krate":0,"index":3028},{"krate":0,"index":3024},{"krate":0,"index":3032},{"krate":0,"index":3054},{"krate":0,"index":3053},{"krate":0,"index":3051},{"krate":0,"index":3047},{"krate":0,"index":3048},{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3041},{"krate":0,"index":3056},{"krate":0,"index":3079},{"krate":0,"index":3078},{"krate":0,"index":3076},{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3067},{"krate":0,"index":550},{"krate":0,"index":563},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":582},{"krate":0,"index":586},{"krate":0,"index":598},{"krate":0,"index":610},{"krate":0,"index":618},{"krate":0,"index":620}],"decl_id":null,"docs":" Image representations for ffi.\n\n # Usage\n\n Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and\n your program creates a thumbnail from it and dumps that image as `png`. This module is designed\n to help you transition from raw memory data to Rust representation.\n\n ```no_run\n use std::ptr;\n use std::slice;\n use image::Rgb;\n use image::flat::{FlatSamples, SampleLayout};\n use image::imageops::thumbnail;\n\n #[no_mangle]\n pub extern \"C\" fn store_rgb8_compressed(\n     data: *const u8, len: usize,\n     layout: *const SampleLayout\n )\n     -> bool\n {\n     let samples = unsafe { slice::from_raw_parts(data, len) };\n     let layout = unsafe { ptr::read(layout) };\n\n     let buffer = FlatSamples {\n         samples,\n         layout,\n         color_hint: None,\n     };\n\n     let view = match buffer.as_view::<Rgb<u8>>() {\n         Err(_) => return false, // Invalid layout.\n         Ok(view) => view,\n     };\n\n     thumbnail(&view, 64, 64)\n         .save(\"output.png\")\n         .map(|_| true)\n         .unwrap_or_else(|_| false)\n }\n ```\n\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2945},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":96572,"byte_end":96583,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2947},{"krate":0,"index":2948},{"krate":0,"index":2949}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.\n\n In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient\n in the layout thereof. In particular, it also allows grouping by color planes instead of by\n pixel, at least for the purpose of a `GenericImageView`.\n\n Note that the strides need not conform to the assumption that constructed indices actually\n refer inside the underlying buffer but return values of library functions will always guarantee\n this. To manually make this check use `check_index_validities` and maybe put that inside an\n assert.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":96661,"byte_end":96668,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2945},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":96752,"byte_end":96758,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2945},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97213,"byte_end":97223,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2945},"children":[],"decl_id":null,"docs":" Supplementary color information.\n\n You may keep this as `None` in most cases. This is NOT checked in `View` or other\n converters. It is intended mainly as a way for types that convert to this buffer type to\n attach their otherwise static color information. A dynamic image representation could\n however use this to resolve representational ambiguities such as the order of RGB channels.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97373,"byte_end":97385,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97300,"byte_end":97310,"line_start":82,"line_end":82,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2957},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97469,"byte_end":97477,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2958},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97563,"byte_end":97577,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2959},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97639,"byte_end":97644,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2960},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97731,"byte_end":97743,"line_start":95,"line_end":95,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2961},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97806,"byte_end":97812,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2962},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":97899,"byte_end":97912,"line_start":101,"line_end":101,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2956},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":98887,"byte_end":98903,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.\n\n The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to\n safely to an `ImageBuffer` with a large enough underlying buffer.\n\n ```\n # use image::flat::{NormalForm, SampleLayout};\n let layout = SampleLayout::row_major_packed(3, 640, 480);\n assert!(layout.is_normal(NormalForm::RowMajorPacked));\n ```\n\n # Panics\n\n On platforms where `usize` has the same size as `u32` this panics when the resulting stride\n in the `height` direction would be larger than `usize::max_value()`. On other platforms\n where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":100154,"byte_end":100173,"line_start":154,"line_end":154,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.\n\n The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly\n useful for conversion but can be used to describe such a buffer without pitfalls.\n\n ```\n # use image::flat::{NormalForm, SampleLayout};\n let layout = SampleLayout::column_major_packed(3, 640, 480);\n assert!(layout.is_normal(NormalForm::ColumnMajorPacked));\n ```\n\n # Panics\n\n On platforms where `usize` has the same size as `u32` this panics when the resulting stride\n in the `width` direction would be larger than `usize::max_value()`. On other platforms\n where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":100789,"byte_end":100800,"line_start":171,"line_end":171,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.\n\n For a row-major layout with grouped samples, this tuple is strictly\n increasing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":101117,"byte_end":101124,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.\n\n The interface is optimized for use with `strides_cwh` instead. The channel extent will be\n before width and height.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":101498,"byte_end":101504,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.\n\n This function should be used whenever working with image coordinates opposed to buffer\n coordinates. The only difference compared to `extents` is the output type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":103657,"byte_end":103667,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n\n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.\n\n # Explanation\n\n Note that there is a difference between `min_length` and the index of the sample\n 'one-past-the-end`. This is due to strides that may be larger than the dimension below.\n\n ## Example with holes\n\n Let's look at an example of a grayscale image with\n * `width_stride = 1`\n * `width = 2`\n * `height_stride = 3`\n * `height = 2`\n\n ```text\n | x x   | x x m | $\n  min_length m ^\n                   ^ one-past-the-end $\n ```\n\n The difference is also extreme for empty images with large strides. The one-past-the-end\n sample index is still as large as the largest of these strides while `min_length = 0`.\n\n ## Example with aliasing\n\n The concept gets even more important when you allow samples to alias each other. Here we\n have the buffer of a small grayscale image where this is the case, this time we will first\n show the buffer and then the individual rows below.\n\n * `width_stride = 1`\n * `width = 3`\n * `height_stride = 2`\n * `height = 2`\n\n ```text\n  1 2 3 4 5 m\n |1 2 3| row one\n     |3 4 5| row two\n            ^ m min_length\n          ^ ??? one-past-the-end\n ```\n\n This time 'one-past-the-end' is not even simply the largest stride times the extent of its\n dimension. That still points inside the image because `height*height_stride = 4` but also\n `index_of(1, 2) = 4`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":103999,"byte_end":104003,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":105113,"byte_end":105132,"line_start":277,"line_end":277,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.\n\n If this is not the case, it would always be safe to allow mutable access to two different\n samples at the same time. Otherwise, this operation would need additional checks. When one\n dimension overflows `usize` with its stride we also consider this aliasing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":106377,"byte_end":106386,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.\n\n Certain conversions have preconditions on the structure of the sample buffer that are not\n captured (by design) by the type system. These are then checked before the conversion. Such\n checks can all be done in constant time and will not inspect the buffer content. You can\n perform these checks yourself when the conversion is not required at this moment but maybe\n still performed later.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":108084,"byte_end":108093,"line_start":362,"line_end":362,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.\n\n An in-bound coordinate does not yet guarantee that the corresponding calculation of a\n buffer index does not overflow. However, if such a buffer large enough to hold all samples\n actually exists in memory, this porperty of course follows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":108367,"byte_end":108372,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.\n\n `None` if the index is outside the bounds or does not fit into a `usize`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":108966,"byte_end":108987,"line_start":382,"line_end":382,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).\n\n The 'check' is for overflow during index calculation, not that it is contained in the\n image. Two samples may return the same index, even when one of them is out of bounds. This\n happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":109918,"byte_end":109933,"line_start":403,"line_end":403,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&self, c: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.\n\n Assumes that the image is backed by some sufficiently large buffer. Then computation can\n not overflow as we could represent the maximum coordinate. Since overflow is defined either\n way, this method can not be unsafe.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":110461,"byte_end":110470,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.\n\n This does not modify the strides, so that the resulting sample buffer may have holes\n created by the shrinking operation. Shrinking could also lead to an non-aliasing image when\n samples had aliased each other before.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":111143,"byte_end":111154,"line_start":441,"line_end":441,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.\n\n For a row-major layout with grouped samples, this tuple is strictly\n increasing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":111436,"byte_end":111443,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.\n\n The interface is optimized for use with `strides_cwh` instead. The channel extent will be\n before width and height.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":111771,"byte_end":111777,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.\n\n This function should be used whenever working with image coordinates opposed to buffer\n coordinates. The only difference compared to `extents` is the output type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":111891,"byte_end":111897,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":112171,"byte_end":112177,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":112456,"byte_end":112462,"line_start":480,"line_end":480,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":113735,"byte_end":113745,"line_start":511,"line_end":511,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&self, channel: u8, x: u32, y: u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.\n\n This more restrictive than the method based on `std::ops::Index` but guarantees to properly\n check all bounds and not panic as long as `Buffer::as_ref` does not do so.\n\n ```\n # use image::{RgbImage};\n let flat = RgbImage::new(480, 640).into_flat_samples();\n\n // Get the blue channel at (10, 10).\n assert!(flat.get_sample(1, 10, 10).is_some());\n\n // There is no alpha channel.\n assert!(flat.get_sample(3, 10, 10).is_none());\n ```\n\n For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating\n bounds checks with `min_length` in a type similar to `View`. Then you may use\n `in_bounds_index` as a small speedup over the index calculation of this method which relies\n on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample\n coordinate is in fact backed by any memory buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":115342,"byte_end":115356,"line_start":544,"line_end":544,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.\n\n This more restrictive than the method based on `std::ops::IndexMut` but guarantees to\n properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.\n Contrary to conversion to `ViewMut`, this does not require that samples are packed since it\n does not need to convert samples to a color representation.\n\n **WARNING**: Note that of course samples may alias, so that the mutable reference returned\n here can in fact modify more than the coordinate in the argument.\n\n ```\n # use image::{RgbImage};\n let mut flat = RgbImage::new(480, 640).into_flat_samples();\n\n // Assign some new color to the blue channel at (10, 10).\n *flat.get_mut_sample(1, 10, 10).unwrap() = 255;\n\n // There is no alpha channel.\n assert!(flat.get_mut_sample(3, 10, 10).is_none());\n ```\n\n For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating\n bounds checks with `min_length` in a type similar to `View`. Then you may use\n `in_bounds_index` as a small speedup over the index calculation of this method which relies\n on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample\n coordinate is in fact backed by any memory buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":116020,"byte_end":116027,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.\n\n This first ensures that all in-bounds coordinates refer to valid indices in the sample\n buffer. It also checks that the specified pixel format expects the same number of channels\n that are present in this buffer. Neither are larger nor a smaller number will be accepted.\n There is no automatic conversion.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":117604,"byte_end":117628,"line_start":596,"line_end":596,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.\n\n This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type\n can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.\n It can not be used as a mutable `GenericImage` but does not need channels to be packed in\n their pixel representation.\n\n This first ensures that all in-bounds coordinates refer to valid indices in the sample\n buffer. It also checks that the specified pixel format expects the same number of channels\n that are present in this buffer. Neither are larger nor a smaller number will be accepted.\n There is no automatic conversion.\n\n **WARNING**: Note that of course samples may alias, so that the mutable reference returned\n for one sample can in fact modify other samples as well. Sometimes exactly this is\n intended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":118991,"byte_end":119002,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.\n\n To succeed, the pixels in this buffer may not alias each other and the samples of each\n pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be\n consistent with the channel count expected by the pixel format.\n\n This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as\n strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This\n provides many more operations, is possibly faster (if not you may want to open an issue) is\n generally polished. You can also try to convert this buffer inline, see\n `ImageBuffer::from_raw`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":119999,"byte_end":120007,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.\n\n The slice is not limited to the region of the image and not all sample indices are valid\n indices into this buffer. See `image_mut_slice` as an alternative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":120318,"byte_end":120330,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.\n\n The slice is not limited to the region of the image and not all sample indices are valid\n indices into this buffer. See `image_mut_slice` as an alternative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":120761,"byte_end":120772,"line_start":676,"line_end":676,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.\n\n This may fail when the coordinates in this image are either out-of-bounds of the underlying\n buffer or can not be represented. Note that the slice may have holes that do not correspond\n to any sample in the image represented by it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":121189,"byte_end":121204,"line_start":691,"line_end":691,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":121858,"byte_end":121873,"line_start":710,"line_end":710,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.\n\n This does **not** convert the sample layout. The buffer needs to be in packed row-major form\n before calling this function. In case of an error, returns the buffer again so that it does\n not release any allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":124709,"byte_end":124719,"line_start":784,"line_end":784,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n\n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.\n\n # Explanation\n\n Note that there is a difference between `min_length` and the index of the sample\n 'one-past-the-end`. This is due to strides that may be larger than the dimension below.\n\n ## Example with holes\n\n Let's look at an example of a grayscale image with\n * `width_stride = 1`\n * `width = 2`\n * `height_stride = 3`\n * `height = 2`\n\n ```text\n | x x   | x x m | $\n  min_length m ^\n                   ^ one-past-the-end $\n ```\n\n The difference is also extreme for empty images with large strides. The one-past-the-end\n sample index is still as large as the largest of these strides while `min_length = 0`.\n\n ## Example with aliasing\n\n The concept gets even more important when you allow samples to alias each other. Here we\n have the buffer of a small grayscale image where this is the case, this time we will first\n show the buffer and then the individual rows below.\n\n * `width_stride = 1`\n * `width = 3`\n * `height_stride = 2`\n * `height = 2`\n\n ```text\n  1 2 3 4 5 m\n |1 2 3| row one\n     |3 4 5| row two\n            ^ m min_length\n          ^ ??? one-past-the-end\n ```\n\n This time 'one-past-the-end' is not even simply the largest stride times the extent of its\n dimension. That still points inside the image because `height*height_stride = 4` but also\n `index_of(1, 2) = 4`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":124856,"byte_end":124860,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":125281,"byte_end":125300,"line_start":798,"line_end":798,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.\n\n If this is not the case, it would always be safe to allow mutable access to two different\n samples at the same time. Otherwise, this operation would need additional checks. When one\n dimension overflows `usize` with its stride we also consider this aliasing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":125881,"byte_end":125890,"line_start":809,"line_end":809,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.\n\n Certain conversions have preconditions on the structure of the sample buffer that are not\n captured (by design) by the type system. These are then checked before the conversion. Such\n checks can all be done in constant time and will not inspect the buffer content. You can\n perform these checks yourself when the conversion is not required at this moment but maybe\n still performed later.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":126315,"byte_end":126324,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.\n\n An in-bound coordinate does not yet guarantee that the corresponding calculation of a\n buffer index does not overflow. However, if such a buffer large enough to hold all samples\n actually exists in memory, this porperty of course follows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":126574,"byte_end":126579,"line_start":825,"line_end":825,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.\n\n `None` if the index is outside the bounds or does not fit into a `usize`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":127058,"byte_end":127079,"line_start":834,"line_end":834,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).\n\n The 'check' is for overflow during index calculation, not that it is contained in the\n image. Two samples may return the same index, even when one of them is out of bounds. This\n happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":127511,"byte_end":127526,"line_start":843,"line_end":843,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&self, channel: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.\n\n Assumes that the image is backed by some sufficiently large buffer. Then computation can\n not overflow as we could represent the maximum coordinate. Since overflow is defined either\n way, this method can not be unsafe.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":127961,"byte_end":127970,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.\n\n This does not modify the strides, so that the resulting sample buffer may have holes\n created by the shrinking operation. Shrinking could also lead to an non-aliasing image when\n samples had aliased each other before.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3006},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":128789,"byte_end":128793,"line_start":872,"line_end":872,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3009},{"krate":0,"index":3010}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.\n\n This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer\n length first and constraining the pixel type.\n\n Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be\n unreliable, i.e. return different buffers at different times. This of course is a non-issue for\n all common collections where the bounds check once must be enough.\n\n # Inner invariants\n\n * For all indices inside bounds, the corresponding index is valid in the buffer\n * `P::channel_count()` agrees with `self.inner.layout.channels`\n\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3019},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":129639,"byte_end":129646,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3022},{"krate":0,"index":3023}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.\n\n While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The\n library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of\n `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to\n construct this with an owning buffer.\n\n # Inner invariants\n\n * For all indices inside bounds, the corresponding index is valid in the buffer\n * There is no aliasing of samples\n * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`\n * `P::channel_count()` agrees with `self.inner.layout.channels`\n\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":130354,"byte_end":130362,"line_start":914,"line_end":914,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" The represented image was too large.\n\n The optional value denotes a possibly accepted maximal bound.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3035},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":130519,"byte_end":130537,"line_start":919,"line_end":919,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.\n\n Has an additional value of the normalized form that would be accepted.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3038},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":131146,"byte_end":131156,"line_start":930,"line_end":930,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3032},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.\n\n In some cases you might be able to fix this by lowering the reported pixel count of the\n buffer without touching the strides.\n\n In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n directly memory unsafe although that will likely alias pixels. One scenario is when you\n want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n care about the value of the alpha channel even though you need `Rgba`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":130219,"byte_end":130224,"line_start":910,"line_end":910,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":3033},{"krate":0,"index":3035},{"krate":0,"index":3038}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.\n\n The biggest use case being `ImageBuffer` which expects closely packed\n samples in a row major matrix representation. But this error type may be\n resused for other import functions. A more versatile user may also try to\n correct the underlying representation depending on the error variant.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3057},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":131655,"byte_end":131664,"line_start":943,"line_end":943,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":3056},"children":[],"decl_id":null,"docs":" No pixel aliases another.\n\n Unaliased also guarantees that all index calculations in the image bounds using\n `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3059},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":131894,"byte_end":131905,"line_start":949,"line_end":949,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":3056},"children":[],"decl_id":null,"docs":" At least pixels are packed.\n\n Images of these types can wrap `[T]`-slices into the standard color types. This is a\n precondition for `GenericImage` which requires by-reference access to pixels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3061},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132189,"byte_end":132200,"line_start":956,"line_end":956,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":3056},"children":[],"decl_id":null,"docs":" All samples are packed.\n\n This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n it is not necessary that the pixel samples themselves are adjacent. An example of this\n behaviour is a planar image layout.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3063},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132410,"byte_end":132424,"line_start":962,"line_end":962,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":3056},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.\n\n In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n in row-major form.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3065},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132640,"byte_end":132657,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":3056},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.\n\n In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n in column-major form.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3056},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":131415,"byte_end":131425,"line_start":938,"line_end":938,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":3057},{"krate":0,"index":3059},{"krate":0,"index":3061},{"krate":0,"index":3063},{"krate":0,"index":3065}],"decl_id":null,"docs":" Different normal forms of buffers.\n\n A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses\n row major form with packed samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132865,"byte_end":132875,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.\n\n Gives up the normalization invariants on the buffer format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":133358,"byte_end":133362,"line_start":988,"line_end":988,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.\n\n There is no mutable counterpart as modifying the buffer format, including strides and\n lengths, could invalidate the accessibility invariants of the `View`. It is not specified\n if the inner buffer is the same as the buffer of the image from which this view was\n created. It might have been truncated as an optimization.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":133641,"byte_end":133648,"line_start":996,"line_end":996,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.\n\n There is no mutable counter part since it is not intended to allow you to reassign the\n buffer or otherwise change its size or properties.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":133967,"byte_end":133977,"line_start":1004,"line_end":1004,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.\n\n This method will return `None` when the sample is out-of-bounds. All errors that could\n occur due to overflow have been eliminated while construction the `View`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":134851,"byte_end":134865,"line_start":1022,"line_end":1022,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.\n\n This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This\n method will return `None` when the sample is out-of-bounds. All errors that could occur due\n to overflow have been eliminated while construction the `View`.\n\n **WARNING**: Note that of course samples may alias, so that the mutable reference returned\n here can in fact modify more than the coordinate in the argument.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":135442,"byte_end":135452,"line_start":1037,"line_end":1037,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n\n See `FlatSamples::min_length`. This method will always succeed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":135786,"byte_end":135797,"line_start":1045,"line_end":1045,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.\n\n While this can not fail–the validity of all coordinates has been validated during the\n conversion from `FlatSamples`–the resulting slice may still contain holes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":136254,"byte_end":136269,"line_start":1054,"line_end":1054,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.\n\n This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While\n this can not fail–the validity of all coordinates has been validated during the conversion\n from `FlatSamples`–the resulting slice may still contain holes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":136792,"byte_end":136801,"line_start":1066,"line_end":1066,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.\n\n The new dimensions will be the minimum of the previous dimensions. Since the set of\n in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.\n Note that you can not change the number of channels as an intrinsic property of `P`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":137786,"byte_end":137797,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.\n\n The resulting image implements `GenericImage` in addition to `GenericImageView`. While this\n has mutable samples, it does not enforce that pixel can not alias and that samples are\n packed enough for a mutable pixel reference. This is slightly cheaper than the chain\n `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.\n\n ```\n # use image::{Rgb, RgbImage};\n let mut buffer = RgbImage::new(480, 640).into_flat_samples();\n let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();\n\n // Inspect some pixels, …\n\n // Doesn't fail because it was originally an `RgbImage`.\n let view_mut = view.try_upgrade().unwrap();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":138438,"byte_end":138448,"line_start":1110,"line_end":1110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.\n\n Gives up the normalization invariants on the buffer format.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":138932,"byte_end":138936,"line_start":1120,"line_end":1120,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.\n\n There is no mutable counterpart as modifying the buffer format, including strides and\n lengths, could invalidate the accessibility invariants of the `View`. It is not specified\n if the inner buffer is the same as the buffer of the image from which this view was\n created. It might have been truncated as an optimization.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":139309,"byte_end":139316,"line_start":1129,"line_end":1129,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.\n\n There is no mutable counter part since it is not intended to allow you to reassign the\n buffer or otherwise change its size or properties. However, its contents can be accessed\n mutable through a slice with `image_mut_slice`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":139558,"byte_end":139568,"line_start":1136,"line_end":1136,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n\n See `FlatSamples::min_length`. This method will always succeed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":139879,"byte_end":139889,"line_start":1144,"line_end":1144,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.\n\n This method will return `None` when the sample is out-of-bounds. All errors that could\n occur due to overflow have been eliminated while construction the `View`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":140514,"byte_end":140528,"line_start":1160,"line_end":1160,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.\n\n This method will return `None` when the sample is out-of-bounds. All errors that could\n occur due to overflow have been eliminated while construction the `View`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":141139,"byte_end":141150,"line_start":1174,"line_end":1174,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.\n\n While this can not fail–the validity of all coordinates has been validated during the\n conversion from `FlatSamples`–the resulting slice may still contain holes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":141349,"byte_end":141364,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":141832,"byte_end":141841,"line_start":1189,"line_end":1189,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.\n\n The new dimensions will be the minimum of the previous dimensions. Since the set of\n in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.\n Note that you can not change the number of channels as an intrinsic property of `P`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\mod.rs","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":815}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images\n\n  A decoder and encoder for BMP (Windows Bitmap) images\n\n  # Related Links\n  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>\n  * <https://en.wikipedia.org/wiki/BMP_file_format>\n\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2188,"byte_end":2211,"line_start":86,"line_end":86,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":167001,"byte_end":167011,"line_start":428,"line_end":428,"column_start":12,"column_end":22},"name":"BMPDecoder","qualname":"::bmp::decoder::BMPDecoder","value":"BMPDecoder {  }","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":169579,"byte_end":169582,"line_start":515,"line_end":515,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<BMPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":180143,"byte_end":180170,"line_start":814,"line_end":814,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BMPDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":180089,"byte_end":180112,"line_start":812,"line_end":812,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":199973,"byte_end":199982,"line_start":1286,"line_end":1286,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\encoder.rs","byte_start":202618,"byte_end":202628,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BMPEncoder {  }","parent":null,"children":[{"krate":0,"index":829}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\encoder.rs","byte_start":202787,"byte_end":202790,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPEncoder>::new","value":"fn (w: &'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\encoder.rs","byte_start":202998,"byte_end":203004,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"encode","qualname":"<BMPEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":3162},{"krate":0,"index":3178},{"krate":0,"index":3177},{"krate":0,"index":3175},{"krate":0,"index":3172},{"krate":0,"index":3173},{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":858},{"krate":0,"index":862},{"krate":0,"index":869},{"krate":0,"index":873},{"krate":0,"index":882},{"krate":0,"index":889},{"krate":0,"index":893},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":938},{"krate":0,"index":942},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression\n\n  DXT is an image format that supports lossy compression\n\n  # Related Links\n  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.\n\n  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds\n","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2225,"byte_end":2248,"line_start":88,"line_end":88,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":214921,"byte_end":214925,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":3162},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":215056,"byte_end":215060,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":3162},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":215191,"byte_end":215195,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":3162},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":214780,"byte_end":214790,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":3163},{"krate":0,"index":3165},{"krate":0,"index":3167}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":215815,"byte_end":215824,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"colortype","qualname":"<DXTVariant>::colortype","value":"fn (self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the colortype that is stored in this DXT variant\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":216035,"byte_end":216045,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"DXTDecoder","qualname":"::dxt::DXTDecoder","value":"DXTDecoder {  }","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":216625,"byte_end":216628,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTDecoder<R>>::new","value":"fn (r: R, width: u32, height: u32, variant: DXTVariant) -> Result<DXTDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":219884,"byte_end":219893,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DXTReader {  }","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":220205,"byte_end":220215,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DXTEncoder {  }","parent":null,"children":[{"krate":0,"index":899}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":220346,"byte_end":220349,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTEncoder<W>>::new","value":"fn (w: W) -> DXTEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":220612,"byte_end":220618,"line_start":204,"line_end":204,"column_start":12,"column_end":18},"name":"encode","qualname":"<DXTEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, variant: DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.colortype()\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":995},{"krate":0,"index":999},{"krate":0,"index":1008},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1021},{"krate":0,"index":1023},{"krate":0,"index":1027},{"krate":0,"index":1031},{"krate":0,"index":1042}],"decl_id":null,"docs":"  Decoding of GIF Images\n\n  GIF (Graphics Interchange Format) is an image format that supports lossless compression.\n\n  # Related Links\n  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification\n\n # Examples\n ```rust,no_run\n use image::gif::{Decoder, Encoder};\n use image::{ImageDecoder, AnimationDecoder};\n use std::fs::File;\n # fn main() -> std::io::Result<()> {\n // Decode a gif into frames\n let file_in = File::open(\"foo.gif\")?;\n let mut decoder = Decoder::new(file_in).unwrap();\n let frames = decoder.into_frames();\n let frames = frames.collect_frames().expect(\"error decoding gif\");\n\n // Encode frames into a gif and save to a file\n let mut file_out = File::open(\"out.gif\")?;\n let mut encoder = Encoder::new(file_out);\n encoder.encode_frames(frames.into_iter());\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2262,"byte_end":2291,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243332,"byte_end":243365,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243831,"byte_end":243838,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::gif::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":986}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243986,"byte_end":243989,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"fn (r: R) -> ImageResult<Decoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":244254,"byte_end":244263,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":252109,"byte_end":252116,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":252266,"byte_end":252269,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"fn (w: W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":252417,"byte_end":252423,"line_start":306,"line_end":306,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"fn (&mut self, frame: &Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":253068,"byte_end":253081,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<Encoder<W>>::encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":253566,"byte_end":253583,"line_start":334,"line_end":334,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<Encoder<W>>::try_encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\mod.rs","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1119}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files\n\n  A decoder and encoder for ICO (Windows Icon) image container files.\n\n  # Related Links\n  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>\n  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2342,"byte_end":2365,"line_start":94,"line_end":94,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":255603,"byte_end":255613,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"ICODecoder","qualname":"::ico::decoder::ICODecoder","value":"ICODecoder {  }","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":256111,"byte_end":256114,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<ICODecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<ICODecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":259704,"byte_end":259713,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\encoder.rs","byte_start":264967,"byte_end":264977,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"ICOEncoder {  }","parent":null,"children":[{"krate":0,"index":1135}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\encoder.rs","byte_start":265109,"byte_end":265112,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ICOEncoder<W>>::new","value":"fn (w: W) -> ICOEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\encoder.rs","byte_start":265410,"byte_end":265416,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"encode","qualname":"<ICOEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\mod.rs","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1193},{"krate":0,"index":1291},{"krate":0,"index":1294}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images\n\n JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.\n This module implements the Baseline JPEG standard.\n\n # Related Links\n * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification\n\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2379,"byte_end":2403,"line_start":96,"line_end":96,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268108,"byte_end":268119,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"JPEGDecoder","qualname":"::jpeg::decoder::JPEGDecoder","value":"JPEGDecoder {  }","parent":null,"children":[{"krate":0,"index":1164},{"krate":0,"index":1165}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268314,"byte_end":268317,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<JPEGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268868,"byte_end":268878,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":279953,"byte_end":279964,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":280320,"byte_end":280323,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"fn (w: &mut W) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":280616,"byte_end":280632,"line_start":298,"line_end":298,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JPEGEncoder>::new_with_quality","value":"fn (w: &mut W, quality: u8) -> JPEGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":282919,"byte_end":282925,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n\n The Image in encoded with subsampling ratio 4:2:2\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1321},{"krate":0,"index":1326},{"krate":0,"index":1329},{"krate":0,"index":1333},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1364}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images\n\n PNG (Portable Network Graphics) is an image format that supports lossless compression.\n\n # Related Links\n * <http://www.w3.org/TR/PNG/> - The PNG Specification\n\n","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2418,"byte_end":2447,"line_start":98,"line_end":98,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":305756,"byte_end":305765,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"PNGReader","qualname":"::png::PNGReader","value":"PNGReader {  }","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":" PNG Reader\n\n This reader will try to read the png one row at a time,\n however for interlaced png files this is not possible and\n these are therefore read at once.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":307768,"byte_end":307778,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"PNGDecoder","qualname":"::png::PNGDecoder","value":"PNGDecoder {  }","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":307955,"byte_end":307958,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGDecoder<R>>::new","value":"fn (r: R) -> ImageResult<PNGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":309139,"byte_end":309149,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":1351}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":309280,"byte_end":309283,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"fn (w: W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":309483,"byte_end":309489,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\mod.rs","parent":null,"children":[{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1378},{"krate":0,"index":1382},{"krate":0,"index":1402},{"krate":0,"index":1551},{"krate":0,"index":1675}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).\n\n The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types\n `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`\n variants for now as alpha color types are unsupported.\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2461,"byte_end":2484,"line_start":100,"line_end":100,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":322990,"byte_end":323000,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"PNMDecoder","qualname":"::pnm::decoder::PNMDecoder","value":"PNMDecoder {  }","parent":null,"children":[{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":323190,"byte_end":323193,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMDecoder<R>>::new","value":"fn (read: R) -> ImageResult<PNMDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":324662,"byte_end":324672,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PNMDecoder<R>>::into_inner","value":"fn (self) -> (R, PNMHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336372,"byte_end":336381,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":338933,"byte_end":338940,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMDecoder<R>>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":359225,"byte_end":359227,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":3227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":359243,"byte_end":359246,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":3227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":359203,"byte_end":359214,"line_start":21,"line_end":21,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":3229},{"krate":0,"index":3232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":359327,"byte_end":359337,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PNMEncoder {  }","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":360711,"byte_end":360714,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMEncoder<W>>::new","value":"fn (writer: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.\n\n The encoded images will have some `pnm` format. If more control over the image type is\n required, use either one of `with_subtype` or `with_header`. For more information on the\n behaviour, see `with_dynamic_header`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":361264,"byte_end":361276,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PNMEncoder<W>>::with_subtype","value":"fn (self, subtype: PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.\n\n The magic number and encoding type will be chosen as provided while the rest of the header\n data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an\n RGB image as Graymap) will result in an error.\n\n This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":361982,"byte_end":361993,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PNMEncoder<W>>::with_header","value":"fn (self, header: PNMHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.\n\n While this option gives the most control over the actual written data, the encoding process\n will error in case the header data and image parameters do not agree. It is the users\n obligation to ensure that the width and height are set accordingly, for example.\n\n Choose this option if you want a lossless decoding/encoding round trip.\n\n This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":362564,"byte_end":362583,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PNMEncoder<W>>::with_dynamic_header","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.\n\n This is the default option upon creation of the encoder. With this, most images should be\n encodable but the specific format chosen is out of the users control. The pnm subtype is\n chosen arbitrarily by the library.\n\n This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":362959,"byte_end":362965,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNMEncoder<W>>::encode","value":"fn <'s, S> (&mut self, image: S, width: u32, height: u32, color: ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.\n\n Some `pnm` subtypes are incompatible with some color options, a chosen header most\n certainly with any deviation from the original decoded image.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":380727,"byte_end":380733,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":3240},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3243},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":380817,"byte_end":380822,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":3240},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3240},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":380647,"byte_end":380661,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3243}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":380975,"byte_end":380981,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381036,"byte_end":381043,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381098,"byte_end":381104,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381151,"byte_end":381163,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":380926,"byte_end":380936,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":3257},{"krate":0,"index":3260},{"krate":0,"index":3263},{"krate":0,"index":3266}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381555,"byte_end":381564,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PNMHeader {  }","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679}],"decl_id":null,"docs":" Stores the complete header data of a file.\n\n Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder\n it is possible to recover the header and construct an encoder. Using the encoder on the just\n loaded image should result in a byte copy of the original file (for single image pnms without\n additional trailing data).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3280},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381893,"byte_end":381905,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3283}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3281},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":381953,"byte_end":381961,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3282},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382021,"byte_end":382027,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3283},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382075,"byte_end":382080,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3289},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382189,"byte_end":382202,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":3290},{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":3293}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382250,"byte_end":382258,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382318,"byte_end":382324,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382372,"byte_end":382377,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3293},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382439,"byte_end":382447,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":3289},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382557,"byte_end":382569,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302},{"krate":0,"index":3303}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3300},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382617,"byte_end":382625,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":3299},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3301},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382685,"byte_end":382691,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":3299},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3302},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382739,"byte_end":382744,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":3299},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382806,"byte_end":382812,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":3299},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3309},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382920,"byte_end":382935,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313},{"krate":0,"index":3314}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3310},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":382979,"byte_end":382985,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":3309},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383033,"byte_end":383038,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":3309},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3312},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383087,"byte_end":383092,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":3309},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3313},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383154,"byte_end":383160,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":3309},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383221,"byte_end":383229,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":3309},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3320},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383432,"byte_end":383445,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383528,"byte_end":383546,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383598,"byte_end":383607,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3326},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383665,"byte_end":383679,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3328},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383727,"byte_end":383730,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383784,"byte_end":383792,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3332},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383849,"byte_end":383855,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":3319},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383359,"byte_end":383376,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":3320},{"krate":0,"index":3322},{"krate":0,"index":3324},{"krate":0,"index":3326},{"krate":0,"index":3328},{"krate":0,"index":3330},{"krate":0,"index":3332}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383976,"byte_end":383990,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (self) -> &'static [u8; 2]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":384569,"byte_end":384584,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":384947,"byte_end":384954,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMHeader>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":385469,"byte_end":385474,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"width","qualname":"<PNMHeader>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":385892,"byte_end":385898,"line_start":183,"line_end":183,"column_start":12,"column_end":18},"name":"height","qualname":"<PNMHeader>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":386356,"byte_end":386370,"line_start":193,"line_end":193,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PNMHeader>::maximal_sample","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":386788,"byte_end":386797,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PNMHeader>::as_bitmap","value":"fn (&self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":387028,"byte_end":387038,"line_start":211,"line_end":211,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PNMHeader>::as_graymap","value":"fn (&self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":387272,"byte_end":387281,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PNMHeader>::as_pixmap","value":"fn (&self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":387514,"byte_end":387526,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PNMHeader>::as_arbitrary","value":"fn (&self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":387766,"byte_end":387771,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"write","qualname":"<PNMHeader>::write","value":"fn (&self, writer: &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1715},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\mod.rs","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717}],"decl_id":null,"docs":" Decoding of TGA Images\n\n # Related Links\n <http://googlesites.inequation.org/tgautilities>\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2498,"byte_end":2521,"line_start":102,"line_end":102,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":396471,"byte_end":396481,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"TGADecoder","qualname":"::tga::decoder::TGADecoder","value":"TGADecoder {  }","parent":null,"children":[{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":396907,"byte_end":396910,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<TGADecoder<R>>::new","value":"fn (r: R) -> ImageResult<TGADecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":408916,"byte_end":408925,"line_start":526,"line_end":526,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1813}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1851},{"krate":0,"index":1855},{"krate":0,"index":1863},{"krate":0,"index":1866}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images\n\n TIFF (Tagged Image File Format) is a versatile image format that supports\n lossless and lossy compression.\n\n # Related Links\n * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification\n","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2535,"byte_end":2559,"line_start":104,"line_end":104,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1834},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":409743,"byte_end":409754,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"TIFFDecoder","qualname":"::tiff::TIFFDecoder","value":"TIFFDecoder {  }","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":409975,"byte_end":409978,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<TIFFDecoder<R>>::new","value":"fn (r: R) -> Result<TIFFDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TIFFDecoder.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1846},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":411359,"byte_end":411369,"line_start":70,"line_end":70,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":412512,"byte_end":412523,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":1865}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":412651,"byte_end":412654,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (w: W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":412894,"byte_end":412900,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image`\n that has dimensions `width` and `height`\n and `ColorType` `c`.\n\n 16-bit colortypes are not yet supported.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\mod.rs","parent":null,"children":[{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1918},{"krate":0,"index":1924}],"decl_id":null,"docs":" Decoding of Webp Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2574,"byte_end":2598,"line_start":106,"line_end":106,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":414062,"byte_end":414073,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"name":"WebpDecoder","qualname":"::webp::decoder::WebpDecoder","value":"WebpDecoder {  }","parent":null,"children":[{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893}],"decl_id":null,"docs":" Webp Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":414285,"byte_end":414288,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<WebpDecoder<R>>::new","value":"fn (r: R) -> ImageResult<WebpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebpDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":416270,"byte_end":416280,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","parent":null,"children":[{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":3354},{"krate":0,"index":3379},{"krate":0,"index":3378},{"krate":0,"index":3376},{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3381},{"krate":0,"index":3403},{"krate":0,"index":3402},{"krate":0,"index":3400},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3405},{"krate":0,"index":3445},{"krate":0,"index":3444},{"krate":0,"index":3442},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1966},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1996},{"krate":0,"index":3447},{"krate":0,"index":3449},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2006},{"krate":0,"index":3451},{"krate":0,"index":3464},{"krate":0,"index":3460},{"krate":0,"index":3459},{"krate":0,"index":3466},{"krate":0,"index":3481},{"krate":0,"index":3479},{"krate":0,"index":3477},{"krate":0,"index":3483},{"krate":0,"index":3496},{"krate":0,"index":3495},{"krate":0,"index":3493},{"krate":0,"index":2014},{"krate":0,"index":2037},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec\n\n This module contains a partial implementation of the\n VP8 video format as defined in RFC-6386.\n\n It decodes Keyframes only sans Loop Filtering.\n VP8 is the underpinning of the Webp image format\n\n # Related Links\n * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide\n * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of\n of the VP8 format\n\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448524,"byte_end":448529,"line_start":789,"line_end":789,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3476}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3467},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448576,"byte_end":448581,"line_start":791,"line_end":791,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3468},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448634,"byte_end":448640,"line_start":794,"line_end":794,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3469},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448692,"byte_end":448696,"line_start":797,"line_end":797,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3470},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448767,"byte_end":448775,"line_start":800,"line_end":800,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3472},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":448871,"byte_end":448882,"line_start":805,"line_end":805,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3473},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":449013,"byte_end":449023,"line_start":810,"line_end":810,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":3466},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":449399,"byte_end":449409,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"VP8Decoder","qualname":"::webp::vp8::VP8Decoder","value":"VP8Decoder {  }","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2025},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"decl_id":null,"docs":" VP8 Decoder\n\n Only decodes keyframes\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":450073,"byte_end":450076,"line_start":873,"line_end":873,"column_start":12,"column_end":15},"name":"new","qualname":"<VP8Decoder<R>>::new","value":"fn (r: R) -> VP8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":469888,"byte_end":469900,"line_start":1486,"line_end":1486,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<VP8Decoder<R>>::decode_frame","value":"fn (&mut self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487162,"byte_end":487168,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2109}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487348,"byte_end":487351,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (iterator: Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487743,"byte_end":487757,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.\n\n Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488046,"byte_end":488051,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":3499},{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3502}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488258,"byte_end":488261,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (buffer: RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488470,"byte_end":488480,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (buffer: RgbaImage, left: u32, top: u32, delay: Ratio<u16>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488697,"byte_end":488702,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&self) -> Ratio<u16>","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488796,"byte_end":488802,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488898,"byte_end":488909,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488998,"byte_end":489002,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":489084,"byte_end":489087,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489707,"byte_end":489712,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::buffer::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2183},{"krate":0,"index":2185},{"krate":0,"index":2188},{"krate":0,"index":2191},{"krate":0,"index":2194},{"krate":0,"index":2197},{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2202}],"decl_id":null,"docs":" A generalized pixel.\n\n A pixel object is usually not used standalone but as a view into an image buffer.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489776,"byte_end":489784,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::buffer::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489859,"byte_end":489872,"line_start":23,"line_end":23,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::buffer::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490015,"byte_end":490028,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::buffer::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489941,"byte_end":490007,"line_start":25,"line_end":25,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490124,"byte_end":490132,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"channels","qualname":"::buffer::Pixel::channels","value":"fn (&self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490220,"byte_end":490232,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::buffer::Pixel::channels_mut","value":"fn (&mut self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490398,"byte_end":490409,"line_start":38,"line_end":38,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::buffer::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490626,"byte_end":490637,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"color_model","qualname":"::buffer::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490554,"byte_end":490618,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490741,"byte_end":490751,"line_start":47,"line_end":47,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::buffer::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490891,"byte_end":490901,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"color_type","qualname":"::buffer::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":490820,"byte_end":490883,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":491139,"byte_end":491148,"line_start":58,"line_end":58,"column_start":8,"column_end":17},"name":"channels4","qualname":"::buffer::Pixel::channels4","value":"fn (&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value\n\n TODO deprecate\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":491451,"byte_end":491464,"line_start":71,"line_end":71,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::buffer::Pixel::from_channels","value":"fn (a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel) -> Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.\n\n TODO deprecate\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":491818,"byte_end":491828,"line_start":82,"line_end":82,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::buffer::Pixel::from_slice","value":"fn (slice: &[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns a view into a slice.\n\n Note: The slice length is not checked on creation. Thus the caller has to ensure\n that the slice is long enough to present panics if the pixel is used later on.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492108,"byte_end":492122,"line_start":88,"line_end":88,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::buffer::Pixel::from_slice_mut","value":"fn (slice: &mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.\n\n Note: The slice length is not checked on creation. Thus the caller has to ensure\n that the slice is long enough to present panics if the pixel is used later on.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492209,"byte_end":492215,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::buffer::Pixel::to_rgb","value":"fn (&self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492311,"byte_end":492318,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::buffer::Pixel::to_rgba","value":"fn (&self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492394,"byte_end":492401,"line_start":97,"line_end":97,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::buffer::Pixel::to_luma","value":"fn (&self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492499,"byte_end":492512,"line_start":100,"line_end":100,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::buffer::Pixel::to_luma_alpha","value":"fn (&self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492588,"byte_end":492594,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::buffer::Pixel::to_bgr","value":"fn (&self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492690,"byte_end":492697,"line_start":106,"line_end":106,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::buffer::Pixel::to_bgra","value":"fn (&self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492804,"byte_end":492807,"line_start":109,"line_end":109,"column_start":8,"column_end":11},"name":"map","qualname":"::buffer::Pixel::map","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":492968,"byte_end":492973,"line_start":114,"line_end":114,"column_start":8,"column_end":13},"name":"apply","qualname":"::buffer::Pixel::apply","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":493198,"byte_end":493212,"line_start":120,"line_end":120,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::buffer::Pixel::map_with_alpha","value":"fn <F, G> (&self, f: F, g: G) -> Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":493518,"byte_end":493534,"line_start":127,"line_end":127,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::buffer::Pixel::apply_with_alpha","value":"fn <F, G> (&mut self, f: F, g: G) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":493763,"byte_end":493780,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::buffer::Pixel::map_without_alpha","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494072,"byte_end":494091,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::buffer::Pixel::apply_without_alpha","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494334,"byte_end":494338,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"map2","qualname":"::buffer::Pixel::map2","value":"fn <F> (&self, other: &Self, f: F) -> Self","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494578,"byte_end":494584,"line_start":159,"line_end":159,"column_start":8,"column_end":14},"name":"apply2","qualname":"::buffer::Pixel::apply2","value":"fn <F> (&mut self, other: &Self, f: F) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494731,"byte_end":494737,"line_start":164,"line_end":164,"column_start":8,"column_end":14},"name":"invert","qualname":"::buffer::Pixel::invert","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494848,"byte_end":494853,"line_start":167,"line_end":167,"column_start":8,"column_end":13},"name":"blend","qualname":"::buffer::Pixel::blend","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":2161},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":494923,"byte_end":494929,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2206}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2222},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495698,"byte_end":495707,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2225}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496531,"byte_end":496535,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":2244}],"decl_id":null,"docs":" Iterate over rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497464,"byte_end":497471,"line_start":294,"line_end":294,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":2263}],"decl_id":null,"docs":" Iterate over mutable rows of an image\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":498431,"byte_end":498446,"line_start":337,"line_end":337,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2296},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499194,"byte_end":499207,"line_start":375,"line_end":375,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500070,"byte_end":500088,"line_start":418,"line_end":418,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2329},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500853,"byte_end":500869,"line_start":456,"line_end":456,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3505},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":501754,"byte_end":501765,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":3508},{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511}],"decl_id":null,"docs":" Generic image buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":502523,"byte_end":502531,"line_start":522,"line_end":522,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)\n\n Returns `None` if the container is not big enough (including when the image dimensions\n necessitate an allocation of more bytes than supported by the container).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":502937,"byte_end":502945,"line_start":536,"line_end":536,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503047,"byte_end":503057,"line_start":541,"line_end":541,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503166,"byte_end":503171,"line_start":546,"line_end":546,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503259,"byte_end":503265,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503379,"byte_end":503385,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&self) -> Pixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503586,"byte_end":503590,"line_start":563,"line_end":563,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&self) -> Rows<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":503933,"byte_end":503949,"line_start":574,"line_end":574,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&self) -> EnumeratePixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":504281,"byte_end":504295,"line_start":586,"line_end":586,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&self) -> EnumerateRows<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":504616,"byte_end":504625,"line_start":599,"line_end":599,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&self, x: u32, y: u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`\n\n # Panics\n\n Panics if `(x, y)` is out of the bounds `(width, height)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":506351,"byte_end":506364,"line_start":640,"line_end":640,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":506978,"byte_end":506995,"line_start":651,"line_end":651,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.\n\n The returned buffer is guaranteed to be well formed in all cases. It is layed out by\n colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All\n strides are in numbers of elements but those are mostly `u8` in which case the strides are\n also byte strides.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2367},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":507441,"byte_end":507456,"line_start":666,"line_end":666,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.\n\n See `flattened` for more details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2371},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":507975,"byte_end":507985,"line_start":685,"line_end":685,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut self) -> PixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2372},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":508208,"byte_end":508216,"line_start":692,"line_end":692,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut self) -> RowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2373},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":508581,"byte_end":508601,"line_start":703,"line_end":703,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut self) -> EnumeratePixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":508975,"byte_end":508993,"line_start":716,"line_end":716,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut self) -> EnumerateRowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":509356,"byte_end":509369,"line_start":730,"line_end":730,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`\n\n # Panics\n\n Panics if `(x, y)` is out of the bounds `(width, height)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":509818,"byte_end":509827,"line_start":742,"line_end":742,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`\n\n # Panics\n\n Panics if `(x, y)` is out of the bounds `(width, height)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":510242,"byte_end":510246,"line_start":756,"line_end":756,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.\n\n The image format is derived from the file extension.\n Currently only jpeg and png files are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":510879,"byte_end":510895,"line_start":781,"line_end":781,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.\n\n See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for\n supported types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":515307,"byte_end":515310,"line_start":944,"line_end":944,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"fn (width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.\n\n # Panics\n\n Panics when the resulting image is larger the the maximum size of a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":515848,"byte_end":515858,"line_start":960,"line_end":960,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"fn (width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel\n\n # Panics\n\n Panics when the resulting image is larger the the maximum size of a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":516373,"byte_end":516380,"line_start":975,"line_end":975,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"fn <F> (width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.\n\n The arguments to the function are the pixel's x and y coordinates.\n\n # Panics\n\n Panics when the resulting image is larger the the maximum size of a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":516791,"byte_end":516799,"line_start":988,"line_end":988,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"fn (width: u32, height: u32, buf: Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517086,"byte_end":517094,"line_start":998,"line_end":998,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"fn (self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517222,"byte_end":517235,"line_start":1004,"line_end":1004,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":2438}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517422,"byte_end":517429,"line_start":1009,"line_end":1009,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer::ConvertBuffer::convert","value":"fn (&self) -> T","parent":{"krate":0,"index":2436},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T\n\n A generic implementation is provided to convert any image buffer to a image buffer\n based on a `Vec<T>`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517697,"byte_end":517711,"line_start":1017,"line_end":1017,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (self, palette: &[(u8, u8, u8)], transparent_idx: Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2449},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":519455,"byte_end":519463,"line_start":1069,"line_end":1069,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2450},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":519552,"byte_end":519561,"line_start":1071,"line_end":1071,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2451},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":519641,"byte_end":519650,"line_start":1073,"line_end":1073,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2452},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":519746,"byte_end":519760,"line_start":1075,"line_end":1075,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523650,"byte_end":523654,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Gray","qualname":"::color::ColorType::Gray","value":"ColorType::Gray(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel is grayscale\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523708,"byte_end":523711,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"RGB","qualname":"::color::ColorType::RGB","value":"ColorType::RGB(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel contains R, G and B channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3523},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523769,"byte_end":523776,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Palette","qualname":"::color::ColorType::Palette","value":"ColorType::Palette(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel is an index into a color palette\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523836,"byte_end":523841,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"GrayA","qualname":"::color::ColorType::GrayA","value":"ColorType::GrayA(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel is grayscale with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3529},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523895,"byte_end":523899,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::ColorType::RGBA","value":"ColorType::RGBA(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel is RGB with an alpha channel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3532},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523953,"byte_end":523956,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"BGR","qualname":"::color::ColorType::BGR","value":"ColorType::BGR(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel contains B, G and R channels\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":524010,"byte_end":524014,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"BGRA","qualname":"::color::ColorType::BGRA","value":"ColorType::BGRA(u8)","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":" Pixel is BGR with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3516},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":523607,"byte_end":523616,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{Gray, RGB, Palette, GrayA, RGBA, BGR, BGRA}","parent":null,"children":[{"krate":0,"index":3517},{"krate":0,"index":3520},{"krate":0,"index":3523},{"krate":0,"index":3526},{"krate":0,"index":3529},{"krate":0,"index":3532},{"krate":0,"index":3535}],"decl_id":null,"docs":" An enumeration over supported color types and their bit depths\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":524128,"byte_end":524142,"line_start":36,"line_end":36,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of this `ColorType`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":524276,"byte_end":524289,"line_start":41,"line_end":41,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529449,"byte_end":529452,"line_start":232,"line_end":232,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529499,"byte_end":529502,"line_start":233,"line_end":233,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3881},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529549,"byte_end":529553,"line_start":234,"line_end":234,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3910},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529605,"byte_end":529609,"line_start":235,"line_end":235,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529674,"byte_end":529678,"line_start":236,"line_end":236,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3968},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529743,"byte_end":529748,"line_start":237,"line_end":237,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525359,"byte_end":525369,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":525370,"byte_end":525392,"line_start":81,"line_end":81,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2471},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529889,"byte_end":529898,"line_start":241,"line_end":241,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":2473}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":529988,"byte_end":529998,"line_start":243,"line_end":243,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut self, &Other) -> ()","parent":{"krate":0,"index":2471},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552234,"byte_end":552244,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4001},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552320,"byte_end":552331,"line_start":40,"line_end":40,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552400,"byte_end":552409,"line_start":43,"line_end":43,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4007},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552483,"byte_end":552493,"line_start":46,"line_end":46,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552557,"byte_end":552566,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4013},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552640,"byte_end":552650,"line_start":52,"line_end":52,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3997},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":552168,"byte_end":552180,"line_start":35,"line_end":35,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8}","parent":null,"children":[{"krate":0,"index":3998},{"krate":0,"index":4001},{"krate":0,"index":4004},{"krate":0,"index":4007},{"krate":0,"index":4010},{"krate":0,"index":4013}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":555431,"byte_end":555440,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":555643,"byte_end":555654,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":555831,"byte_end":555839,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556015,"byte_end":556024,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556201,"byte_end":556210,"line_start":124,"line_end":124,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556386,"byte_end":556394,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556558,"byte_end":556570,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn <'a> (decoder: impl ImageDecoder<'a>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556748,"byte_end":556754,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":556923,"byte_end":556930,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":557099,"byte_end":557105,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":557274,"byte_end":557281,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":557450,"byte_end":557457,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2657},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":557627,"byte_end":557640,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":557932,"byte_end":557940,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"fn (self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":558257,"byte_end":558266,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":558585,"byte_end":558593,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"fn (self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":558910,"byte_end":558919,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"fn (self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":559239,"byte_end":559248,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"fn (self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":559569,"byte_end":559584,"line_start":241,"line_end":241,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"fn (self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.\n\n If the image was already the correct format, it is returned as is.\n Otherwise, a copy is created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":559819,"byte_end":559823,"line_start":249,"line_end":249,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2665},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":560052,"byte_end":560059,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":560274,"byte_end":560285,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":560504,"byte_end":560511,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":560726,"byte_end":560737,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":560957,"byte_end":560965,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":561183,"byte_end":561195,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":561417,"byte_end":561425,"line_start":302,"line_end":302,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":561643,"byte_end":561655,"line_start":310,"line_end":310,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":561882,"byte_end":561890,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":562113,"byte_end":562125,"line_start":326,"line_end":326,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2675},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":562374,"byte_end":562388,"line_start":334,"line_end":334,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":562639,"byte_end":562657,"line_start":342,"line_end":342,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":562889,"byte_end":562899,"line_start":350,"line_end":350,"column_start":12,"column_end":22},"name":"raw_pixels","qualname":"<DynamicImage>::raw_pixels","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":563015,"byte_end":563030,"line_start":355,"line_end":355,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<DynamicImage>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":563178,"byte_end":563183,"line_start":360,"line_end":360,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":563731,"byte_end":563740,"line_start":372,"line_end":372,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":564463,"byte_end":564469,"line_start":385,"line_end":385,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":564833,"byte_end":564839,"line_start":393,"line_end":393,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":565303,"byte_end":565315,"line_start":403,"line_end":403,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":566006,"byte_end":566015,"line_start":420,"line_end":420,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":566623,"byte_end":566638,"line_start":432,"line_end":432,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":567158,"byte_end":567172,"line_start":442,"line_end":442,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":567992,"byte_end":567996,"line_start":465,"line_end":465,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&self, sigma: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":568374,"byte_end":568383,"line_start":474,"line_end":474,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&self, sigma: f32, threshold: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.\n\n See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":568592,"byte_end":568601,"line_start":479,"line_end":479,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&self, kernel: &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":569011,"byte_end":569026,"line_start":490,"line_end":490,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&self, c: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2691},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":569326,"byte_end":569334,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":569682,"byte_end":569691,"line_start":505,"line_end":505,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":569850,"byte_end":569855,"line_start":510,"line_end":510,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":570001,"byte_end":570006,"line_start":515,"line_end":515,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":570165,"byte_end":570173,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":570326,"byte_end":570335,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":570489,"byte_end":570498,"line_start":530,"line_end":530,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":570653,"byte_end":570661,"line_start":535,"line_end":535,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&self, w: &mut W, format: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":573888,"byte_end":573892,"line_start":625,"line_end":625,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&self, path: Q) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.\n\n The image format is derived from the file extension.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":574263,"byte_end":574279,"line_start":639,"line_end":639,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.\n\n See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for\n supported types.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2723},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":580042,"byte_end":580046,"line_start":796,"line_end":796,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (path: P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.\n\n Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's\n content before its path.\n\n [`io::Reader`]: io/struct.Reader.html\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2725},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":580601,"byte_end":580617,"line_start":811,"line_end":811,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (path: P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.\n\n Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's\n content before its path or manually supplying the format.\n\n [`io::Reader`]: io/struct.Reader.html\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2727},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":581192,"byte_end":581203,"line_start":826,"line_end":826,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.\n\n The image format is derived from the file extension. The buffer is assumed to have\n the correct format according to the specified color type.\n This will lead to corrupted files if the buffer contains malformed data. Currently only\n jpeg, png, ico, pnm, bmp and tiff files are supported.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2729},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":581856,"byte_end":581879,"line_start":848,"line_end":848,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType, format: ImageFormat) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.\n\n The buffer is assumed to have the correct format according\n to the specified color type.\n This will lead to corrupted files if the buffer contains\n malformed data. Currently only jpeg, png, ico, bmp and\n tiff files are supported.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":582441,"byte_end":582457,"line_start":871,"line_end":871,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (buffer: &[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice\n\n Makes an educated guess about the image format.\n TGA is not supported by this function.\n\n Try [`io::Reader`] for more advanced uses.\n\n [`io::Reader`]: io/struct.Reader.html\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2732},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":582939,"byte_end":582967,"line_start":886,"line_end":886,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice\n\n This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then\n calls `load` with that reader.\n\n Try [`io::Reader`] for more advanced uses.\n\n [`load`]: fn.load.html\n [`io::Reader`]: io/struct.Reader.html\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":582914,"byte_end":582931,"line_start":885,"line_end":885,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4019},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588381,"byte_end":588392,"line_start":23,"line_end":23,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::image::ImageError::FormatError","value":"ImageError::FormatError(String)","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" The Image is not formatted properly\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4022},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588472,"byte_end":588486,"line_start":26,"line_end":26,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::image::ImageError::DimensionError","value":"ImageError::DimensionError","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" The Image's dimensions are either too small or too large\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4024},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588548,"byte_end":588564,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"name":"UnsupportedError","qualname":"::image::ImageError::UnsupportedError","value":"ImageError::UnsupportedError(String)","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" The Decoder does not support this image format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4027},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588632,"byte_end":588648,"line_start":32,"line_end":32,"column_start":5,"column_end":21},"name":"UnsupportedColor","qualname":"::image::ImageError::UnsupportedColor","value":"ImageError::UnsupportedColor(ColorType)","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" The Decoder does not support this color type\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4030},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588746,"byte_end":588759,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::image::ImageError::NotEnoughData","value":"ImageError::NotEnoughData","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" Not enough data was provided to the Decoder\n to decode the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4032},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588821,"byte_end":588828,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"IoError","qualname":"::image::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" An I/O Error occurred while decoding the image\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4035},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588892,"byte_end":588900,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"ImageEnd","qualname":"::image::ImageError::ImageEnd","value":"ImageError::ImageEnd","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" The end of the image has been reached\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4037},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588974,"byte_end":588992,"line_start":45,"line_end":45,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::image::ImageError::InsufficientMemory","value":"ImageError::InsufficientMemory","parent":{"krate":0,"index":4018},"children":[],"decl_id":null,"docs":" There is not enough memory to complete the given operation\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4018},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":588320,"byte_end":588330,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::image::ImageError","value":"ImageError::{FormatError, DimensionError, UnsupportedError, UnsupportedColor, NotEnoughData, IoError, ImageEnd, InsufficientMemory}","parent":null,"children":[{"krate":0,"index":4019},{"krate":0,"index":4022},{"krate":0,"index":4024},{"krate":0,"index":4027},{"krate":0,"index":4030},{"krate":0,"index":4032},{"krate":0,"index":4035},{"krate":0,"index":4037}],"decl_id":null,"docs":" An enumeration of Image errors\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590605,"byte_end":590616,"line_start":97,"line_end":97,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::image::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4042},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590852,"byte_end":590855,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageFormat::PNG","value":"ImageFormat::PNG","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590894,"byte_end":590898,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageFormat::JPEG","value":"ImageFormat::JPEG","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4046},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590936,"byte_end":590939,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageFormat::GIF","value":"ImageFormat::GIF","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4048},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590978,"byte_end":590982,"line_start":113,"line_end":113,"column_start":5,"column_end":9},"name":"WEBP","qualname":"::image::ImageFormat::WEBP","value":"ImageFormat::WEBP","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4050},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591028,"byte_end":591031,"line_start":116,"line_end":116,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageFormat::PNM","value":"ImageFormat::PNM","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4052},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591070,"byte_end":591074,"line_start":119,"line_end":119,"column_start":5,"column_end":9},"name":"TIFF","qualname":"::image::ImageFormat::TIFF","value":"ImageFormat::TIFF","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4054},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591112,"byte_end":591115,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"TGA","qualname":"::image::ImageFormat::TGA","value":"ImageFormat::TGA","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4056},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591153,"byte_end":591156,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageFormat::BMP","value":"ImageFormat::BMP","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4058},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591194,"byte_end":591197,"line_start":128,"line_end":128,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageFormat::ICO","value":"ImageFormat::ICO","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4060},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591244,"byte_end":591247,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"HDR","qualname":"::image::ImageFormat::HDR","value":"ImageFormat::HDR","parent":{"krate":0,"index":4041},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4041},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590803,"byte_end":590814,"line_start":102,"line_end":102,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{PNG, JPEG, GIF, WEBP, PNM, TIFF, TGA, BMP, ICO, HDR}","parent":null,"children":[{"krate":0,"index":4042},{"krate":0,"index":4044},{"krate":0,"index":4046},{"krate":0,"index":4048},{"krate":0,"index":4050},{"krate":0,"index":4052},{"krate":0,"index":4054},{"krate":0,"index":4056},{"krate":0,"index":4058},{"krate":0,"index":4060}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591354,"byte_end":591363,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn <P> (path: P) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4074},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591814,"byte_end":591817,"line_start":148,"line_end":148,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageOutputFormat::PNG","value":"ImageOutputFormat::PNG","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591749,"byte_end":591778,"line_start":146,"line_end":146,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4076},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591908,"byte_end":591912,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageOutputFormat::JPEG","value":"ImageOutputFormat::JPEG(u8)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591824,"byte_end":591848,"line_start":150,"line_end":150,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4079},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591994,"byte_end":591997,"line_start":156,"line_end":156,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageOutputFormat::PNM","value":"ImageOutputFormat::PNM(PNMSubtype)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591923,"byte_end":591946,"line_start":154,"line_end":154,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4082},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592081,"byte_end":592084,"line_start":160,"line_end":160,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageOutputFormat::GIF","value":"ImageOutputFormat::GIF","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592016,"byte_end":592045,"line_start":158,"line_end":158,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4084},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592150,"byte_end":592153,"line_start":164,"line_end":164,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageOutputFormat::ICO","value":"ImageOutputFormat::ICO","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592091,"byte_end":592114,"line_start":162,"line_end":162,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4086},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592219,"byte_end":592222,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageOutputFormat::BMP","value":"ImageOutputFormat::BMP","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592160,"byte_end":592183,"line_start":166,"line_end":166,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4088},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592474,"byte_end":592485,"line_start":173,"line_end":173,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4073},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591725,"byte_end":591742,"line_start":145,"line_end":145,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{PNG, JPEG, PNM, GIF, ICO, BMP, Unsupported}","parent":null,"children":[{"krate":0,"index":4074},{"krate":0,"index":4076},{"krate":0,"index":4079},{"krate":0,"index":4082},{"krate":0,"index":4084},{"krate":0,"index":4086},{"krate":0,"index":4088}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":599805,"byte_end":599813,"line_start":354,"line_end":354,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":4103},{"krate":0,"index":4104}],"decl_id":null,"docs":" Represents the progress of an image operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":599905,"byte_end":599917,"line_start":360,"line_end":360,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2791}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2782},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":599994,"byte_end":600000,"line_start":362,"line_end":362,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2783},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":600090,"byte_end":600100,"line_start":365,"line_end":365,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&self) -> (u64, u64)","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2784},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":600198,"byte_end":600207,"line_start":368,"line_end":368,"column_start":8,"column_end":17},"name":"colortype","qualname":"::image::ImageDecoder::colortype","value":"fn (&self) -> ColorType","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns the color type of the image e.g. RGB(8) (8bit RGB)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":600500,"byte_end":600511,"line_start":373,"line_end":373,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":600683,"byte_end":600692,"line_start":377,"line_end":377,"column_start":8,"column_end":17},"name":"row_bytes","qualname":"::image::ImageDecoder::row_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns the number of bytes in a single row of the image. All decoders will pad image rows\n to a byte boundary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":600870,"byte_end":600881,"line_start":382,"line_end":382,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":601114,"byte_end":601128,"line_start":388,"line_end":388,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":601230,"byte_end":601240,"line_start":393,"line_end":393,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (self) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":601452,"byte_end":601476,"line_start":399,"line_end":399,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (self, progress_callback: F) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":2780},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":602591,"byte_end":602606,"line_start":436,"line_end":436,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder<'a> + Sized","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2797}],"decl_id":null,"docs":" ImageDecoderExt trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2795},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":602695,"byte_end":602704,"line_start":438,"line_end":438,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2793},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2797},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603015,"byte_end":603038,"line_start":450,"line_end":450,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut self, x: u64, y: u64, width: u64, height: u64, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":2793},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image, periodically reporting progress.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603269,"byte_end":603285,"line_start":462,"line_end":462,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2801}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603357,"byte_end":603368,"line_start":464,"line_end":464,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (self) -> Frames<'a>","parent":{"krate":0,"index":2799},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603433,"byte_end":603439,"line_start":468,"line_end":468,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2808},{"krate":0,"index":2809}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2815},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604072,"byte_end":604088,"line_start":499,"line_end":499,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2816},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604127,"byte_end":604132,"line_start":501,"line_end":501,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604366,"byte_end":604380,"line_start":506,"line_end":506,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604473,"byte_end":604483,"line_start":509,"line_end":509,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2819},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604547,"byte_end":604552,"line_start":512,"line_end":512,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&self) -> u32","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604667,"byte_end":604673,"line_start":518,"line_end":518,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&self) -> u32","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604800,"byte_end":604806,"line_start":524,"line_end":524,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":604923,"byte_end":604932,"line_start":527,"line_end":527,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&self, x: u32, y: u32) -> bool","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":605255,"byte_end":605264,"line_start":539,"line_end":539,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)\n\n # Panics\n\n Panics if `(x, y)` is out of bounds.\n\n TODO: change this signature to &P\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":605451,"byte_end":605467,"line_start":544,"line_end":544,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)\n\n This function can be implemented in a way that ignores bounds checking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":605699,"byte_end":605705,"line_start":551,"line_end":551,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&self) -> Pixels<Self>","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":605975,"byte_end":605980,"line_start":564,"line_end":564,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&self) -> &Self::InnerImageView","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2827},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":606177,"byte_end":606181,"line_start":568,"line_end":568,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2815},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":606380,"byte_end":606392,"line_start":574,"line_end":574,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2837}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":606637,"byte_end":606647,"line_start":578,"line_end":578,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":606837,"byte_end":606850,"line_start":585,"line_end":585,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`\n\n # Panics\n\n Panics if `(x, y)` is out of bounds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":607024,"byte_end":607033,"line_start":592,"line_end":592,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)\n\n # Panics\n\n Panics if `(x, y)` is out of bounds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":607225,"byte_end":607241,"line_start":597,"line_end":597,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)\n\n This function can be implemented in a way that ignores bounds checking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":607508,"byte_end":607519,"line_start":604,"line_end":604,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels\n\n DEPRECATED: This method will be removed. Blend the pixel directly instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":607998,"byte_end":608007,"line_start":616,"line_end":616,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut self, other: &O, x: u32, y: u32) -> bool","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.\n\n The other image is copied with the top-left corner of the\n other image placed at (x, y).\n\n In order to copy only a piece of the other image, use [`GenericImageView::view`].\n\n # Returns\n `true` if the copy was successful, `false` if the image could not\n be copied due to size constraints.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":608639,"byte_end":608648,"line_start":636,"line_end":636,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":608843,"byte_end":608852,"line_start":640,"line_end":640,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2838},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":609343,"byte_end":609351,"line_start":657,"line_end":657,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2843},{"krate":0,"index":2844}],"decl_id":null,"docs":" A View into another image\n\n Instances of this struct can be created using:\n   - [`GenericImage::sub_image`] to create a mutable view,\n   - [`GenericImageView::view`] to create an immutable view,\n   - [`SubImage::new`] to instantiate the struct directly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2851},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":609739,"byte_end":609742,"line_start":673,"line_end":673,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":610031,"byte_end":610044,"line_start":684,"line_end":684,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":610278,"byte_end":610286,"line_start":692,"line_end":692,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619411,"byte_end":619420,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2890},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619942,"byte_end":619953,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2891},{"krate":0,"index":2892}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2891},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619992,"byte_end":619998,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2890},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":620041,"byte_end":620051,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (n: Self::Larger) -> Self","parent":{"krate":0,"index":2890},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":5991,"byte_end":5999,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43312,"byte_end":43319,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43763,"byte_end":43771,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":58705,"byte_end":58717,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":77473,"byte_end":77479,"line_start":67,"line_end":67,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78845,"byte_end":78851,"line_start":114,"line_end":114,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":79616,"byte_end":79622,"line_start":136,"line_end":136,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\free_functions.rs","byte_start":94079,"byte_end":94089,"line_start":296,"line_end":296,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":98074,"byte_end":98086,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":110681,"byte_end":110684,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":110942,"byte_end":110953,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132685,"byte_end":132689,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":138255,"byte_end":138262,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":142638,"byte_end":142649,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":143258,"byte_end":143269,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":143873,"byte_end":143877,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":145124,"byte_end":145131,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":146398,"byte_end":146405,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":147300,"byte_end":147310,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":147702,"byte_end":147712,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":156349,"byte_end":156360,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":164864,"byte_end":164872,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":166330,"byte_end":166339,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":167615,"byte_end":167630,"line_start":461,"line_end":461,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":169486,"byte_end":169496,"line_start":513,"line_end":513,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":200037,"byte_end":200046,"line_start":1287,"line_end":1287,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":200466,"byte_end":200476,"line_start":1301,"line_end":1301,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":201060,"byte_end":201070,"line_start":1325,"line_end":1325,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\encoder.rs","byte_start":202692,"byte_end":202702,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":215205,"byte_end":215215,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":216174,"byte_end":216184,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":217832,"byte_end":217842,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":219015,"byte_end":219025,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":219987,"byte_end":219996,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":220256,"byte_end":220266,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243895,"byte_end":243902,"line_start":53,"line_end":53,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":244318,"byte_end":244327,"line_start":67,"line_end":67,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":244740,"byte_end":244747,"line_start":81,"line_end":81,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":246399,"byte_end":246415,"line_start":135,"line_end":135,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":247024,"byte_end":247040,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":251937,"byte_end":251944,"line_start":285,"line_end":285,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":252207,"byte_end":252214,"line_start":297,"line_end":297,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":254441,"byte_end":254451,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":256018,"byte_end":256028,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":258447,"byte_end":258455,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":259768,"byte_end":259777,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":260197,"byte_end":260207,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\encoder.rs","byte_start":265018,"byte_end":265028,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268220,"byte_end":268231,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268933,"byte_end":268943,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":269356,"byte_end":269367,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":270806,"byte_end":270815,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":271127,"byte_end":271137,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":277189,"byte_end":277198,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":280225,"byte_end":280236,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":305861,"byte_end":305870,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":306598,"byte_end":306607,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":307861,"byte_end":307871,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":308356,"byte_end":308366,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":309190,"byte_end":309200,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":310570,"byte_end":310579,"line_start":175,"line_end":175,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":311672,"byte_end":311682,"line_start":205,"line_end":205,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":318789,"byte_end":318798,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":320059,"byte_end":320068,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":320694,"byte_end":320703,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":323094,"byte_end":323104,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336298,"byte_end":336307,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336436,"byte_end":336445,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336858,"byte_end":336868,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":337330,"byte_end":337340,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1509},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":339008,"byte_end":339017,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":340404,"byte_end":340406,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":341106,"byte_end":341109,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":342368,"byte_end":342374,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":343878,"byte_end":343883,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1542}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":344713,"byte_end":344725,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":344850,"byte_end":344863,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":345243,"byte_end":345255,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1548}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":345631,"byte_end":345646,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":360389,"byte_end":360399,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":367674,"byte_end":367692,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":368825,"byte_end":368840,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":369328,"byte_end":369345,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":372849,"byte_end":372867,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":374998,"byte_end":375011,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":375321,"byte_end":375333,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":376750,"byte_end":376761,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378472,"byte_end":378483,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378602,"byte_end":378613,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378714,"byte_end":378727,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383873,"byte_end":383883,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":384853,"byte_end":384862,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391042,"byte_end":391051,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1708}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391244,"byte_end":391253,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1710}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391447,"byte_end":391456,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391651,"byte_end":391660,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":392564,"byte_end":392573,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":394418,"byte_end":394424,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1761},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":395693,"byte_end":395701,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1769}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":396818,"byte_end":396828,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":408125,"byte_end":408135,"line_start":492,"line_end":492,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":409020,"byte_end":409029,"line_start":530,"line_end":530,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":409888,"byte_end":409899,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":410322,"byte_end":410332,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":410801,"byte_end":410810,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1845}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":411424,"byte_end":411434,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":411854,"byte_end":411865,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":412564,"byte_end":412575,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":414146,"byte_end":414157,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":416335,"byte_end":416345,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":416758,"byte_end":416769,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":445537,"byte_end":445547,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":449949,"byte_end":449959,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2051},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":470952,"byte_end":470960,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2064},{"krate":0,"index":2065}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471577,"byte_end":471585,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2067}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471650,"byte_end":471660,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2069}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471949,"byte_end":471959,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":472026,"byte_end":472035,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2073}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":472572,"byte_end":472581,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487251,"byte_end":487257,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487847,"byte_end":487853,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2116},{"krate":0,"index":2117}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488209,"byte_end":488214,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495055,"byte_end":495061,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495305,"byte_end":495311,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495460,"byte_end":495466,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2220}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495836,"byte_end":495845,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496101,"byte_end":496110,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2235}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496259,"byte_end":496268,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496672,"byte_end":496676,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2248},{"krate":0,"index":2249}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496999,"byte_end":497003,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2254}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497152,"byte_end":497156,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497611,"byte_end":497618,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2267},{"krate":0,"index":2268}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497954,"byte_end":497961,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":498110,"byte_end":498117,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":498613,"byte_end":498628,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2289},{"krate":0,"index":2290}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499031,"byte_end":499046,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499358,"byte_end":499371,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499909,"byte_end":499922,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500258,"byte_end":500276,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500687,"byte_end":500705,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":501023,"byte_end":501039,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2339}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":501586,"byte_end":501602,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2344}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":502104,"byte_end":502115,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":507756,"byte_end":507767,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":509937,"byte_end":509948,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":510558,"byte_end":510569,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2385}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511270,"byte_end":511281,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2390},{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511545,"byte_end":511556,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511822,"byte_end":511833,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2399},{"krate":0,"index":2400}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512104,"byte_end":512115,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512376,"byte_end":512387,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2408}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512746,"byte_end":512757,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":513581,"byte_end":513592,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":515046,"byte_end":515057,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517491,"byte_end":517500,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":518898,"byte_end":518909,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":524029,"byte_end":524038,"line_start":34,"line_end":34,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2466},{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530078,"byte_end":530079,"line_start":247,"line_end":247,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530235,"byte_end":530239,"line_start":255,"line_end":255,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2479}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530618,"byte_end":530622,"line_start":265,"line_end":265,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531004,"byte_end":531008,"line_start":275,"line_end":275,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531386,"byte_end":531390,"line_start":286,"line_end":286,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2488}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531770,"byte_end":531774,"line_start":297,"line_end":297,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2491}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531969,"byte_end":531974,"line_start":305,"line_end":305,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2494}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":532391,"byte_end":532396,"line_start":316,"line_end":316,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":532812,"byte_end":532817,"line_start":327,"line_end":327,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533235,"byte_end":533240,"line_start":338,"line_end":338,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533659,"byte_end":533664,"line_start":349,"line_end":349,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2506}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533923,"byte_end":533927,"line_start":359,"line_end":359,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2509}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534228,"byte_end":534232,"line_start":370,"line_end":370,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2512}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534534,"byte_end":534538,"line_start":381,"line_end":381,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534840,"byte_end":534844,"line_start":393,"line_end":393,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535147,"byte_end":535151,"line_start":406,"line_end":406,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535476,"byte_end":535480,"line_start":420,"line_end":420,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2524}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535782,"byte_end":535786,"line_start":432,"line_end":432,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2527}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536089,"byte_end":536093,"line_start":444,"line_end":444,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2530}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536394,"byte_end":536398,"line_start":455,"line_end":455,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2533}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536699,"byte_end":536703,"line_start":466,"line_end":466,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2536}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537029,"byte_end":537032,"line_start":481,"line_end":481,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537302,"byte_end":537305,"line_start":492,"line_end":492,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2542}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537573,"byte_end":537576,"line_start":502,"line_end":502,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2545}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537841,"byte_end":537844,"line_start":512,"line_end":512,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2548}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538108,"byte_end":538111,"line_start":522,"line_end":522,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538397,"byte_end":538400,"line_start":534,"line_end":534,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538668,"byte_end":538671,"line_start":544,"line_end":544,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2557}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538936,"byte_end":538939,"line_start":555,"line_end":555,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2560}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539209,"byte_end":539212,"line_start":565,"line_end":565,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539476,"byte_end":539479,"line_start":575,"line_end":575,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539855,"byte_end":539860,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2571}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":540865,"byte_end":540869,"line_start":625,"line_end":625,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2574}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":540979,"byte_end":540983,"line_start":631,"line_end":631,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2577}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":543191,"byte_end":543195,"line_start":689,"line_end":689,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545401,"byte_end":545404,"line_start":745,"line_end":745,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2583}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545513,"byte_end":545516,"line_start":751,"line_end":751,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2586}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545735,"byte_end":545740,"line_start":764,"line_end":764,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545913,"byte_end":545917,"line_start":773,"line_end":773,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2594}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546105,"byte_end":546109,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546322,"byte_end":546326,"line_start":795,"line_end":795,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546539,"byte_end":546542,"line_start":806,"line_end":806,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2603}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546804,"byte_end":546807,"line_start":820,"line_end":820,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":555338,"byte_end":555350,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2701},{"krate":0,"index":2703}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":574529,"byte_end":574541,"line_start":650,"line_end":650,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":575061,"byte_end":575073,"line_start":672,"line_end":672,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":589019,"byte_end":589029,"line_start":48,"line_end":48,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2751}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590238,"byte_end":590248,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590448,"byte_end":590458,"line_start":90,"line_end":90,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2755}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591257,"byte_end":591268,"line_start":134,"line_end":134,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592525,"byte_end":592542,"line_start":176,"line_end":176,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2762}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":593677,"byte_end":593692,"line_start":210,"line_end":210,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2770},{"krate":0,"index":2771}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603583,"byte_end":603589,"line_start":476,"line_end":476,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2813},{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":609681,"byte_end":609689,"line_start":671,"line_end":671,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":610826,"byte_end":610834,"line_start":712,"line_end":712,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2861},{"krate":0,"index":2862}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":611655,"byte_end":611663,"line_start":744,"line_end":744,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2038,"byte_end":2042,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":83}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\mod.rs","byte_start":3525,"byte_end":3527,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":84}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\mod.rs","byte_start":3537,"byte_end":3542,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2083,"byte_end":2091,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":125}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\mod.rs","byte_start":19196,"byte_end":19204,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":207}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2117,"byte_end":2119,"line_start":80,"line_end":80,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":365}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2165,"byte_end":2169,"line_start":83,"line_end":83,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":465}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2220,"byte_end":2223,"line_start":87,"line_end":87,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":622}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2257,"byte_end":2260,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":842}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2300,"byte_end":2303,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":954}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2374,"byte_end":2377,"line_start":95,"line_end":95,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1045}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2412,"byte_end":2416,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1146}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2456,"byte_end":2459,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1310}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2493,"byte_end":2496,"line_start":101,"line_end":101,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1367}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2530,"byte_end":2533,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1715}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2568,"byte_end":2572,"line_start":105,"line_end":105,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1818}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src/lib.rs","byte_start":2607,"byte_end":2611,"line_start":107,"line_end":107,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1870}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\mod.rs","byte_start":413642,"byte_end":413645,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1924}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\math\\nq.rs","byte_start":5991,"byte_end":5999,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43312,"byte_end":43319,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2924},"to":{"krate":0,"index":246}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\colorops.rs","byte_start":43763,"byte_end":43771,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":100},"to":{"krate":0,"index":246}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\imageops\\sample.rs","byte_start":58705,"byte_end":58717,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":77473,"byte_end":77479,"line_start":67,"line_end":67,"column_start":15,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":78845,"byte_end":78851,"line_start":114,"line_end":114,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\reader.rs","byte_start":79616,"byte_end":79622,"line_start":136,"line_end":136,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\io\\free_functions.rs","byte_start":94079,"byte_end":94089,"line_start":296,"line_end":296,"column_start":26,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":98074,"byte_end":98086,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":110681,"byte_end":110684,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":110942,"byte_end":110953,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":132685,"byte_end":132689,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":138255,"byte_end":138262,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":142638,"byte_end":142649,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2945},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":143258,"byte_end":143269,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2945},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":143873,"byte_end":143877,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3006},"to":{"krate":0,"index":2815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":145124,"byte_end":145131,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3019},"to":{"krate":0,"index":2815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":146398,"byte_end":146405,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3019},"to":{"krate":0,"index":2828}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":147300,"byte_end":147310,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\flat.rs","byte_start":147702,"byte_end":147712,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":3056},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":156349,"byte_end":156360,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":682},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":164864,"byte_end":164872,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":3138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":166330,"byte_end":166339,"line_start":406,"line_end":406,"column_start":6,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":3148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":167615,"byte_end":167630,"line_start":461,"line_end":461,"column_start":32,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":748},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":169486,"byte_end":169496,"line_start":513,"line_end":513,"column_start":22,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":200037,"byte_end":200046,"line_start":1287,"line_end":1287,"column_start":18,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":793},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":200466,"byte_end":200476,"line_start":1301,"line_end":1301,"column_start":52,"column_end":62},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":715},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\decoder.rs","byte_start":201060,"byte_end":201070,"line_start":1325,"line_end":1325,"column_start":55,"column_end":65},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":715},"to":{"krate":0,"index":2793}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\bmp\\encoder.rs","byte_start":202692,"byte_end":202702,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":215205,"byte_end":215215,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":216174,"byte_end":216184,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":217832,"byte_end":217842,"line_start":113,"line_end":113,"column_start":45,"column_end":55},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":219015,"byte_end":219025,"line_start":152,"line_end":152,"column_start":55,"column_end":65},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":2793}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":219987,"byte_end":219996,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dxt.rs","byte_start":220256,"byte_end":220266,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":243895,"byte_end":243902,"line_start":53,"line_end":53,"column_start":15,"column_end":22},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":984},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":244318,"byte_end":244327,"line_start":67,"line_end":67,"column_start":18,"column_end":27},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":990},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":244740,"byte_end":244747,"line_start":81,"line_end":81,"column_start":45,"column_end":52},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":984},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":246399,"byte_end":246415,"line_start":135,"line_end":135,"column_start":15,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1008},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":247024,"byte_end":247040,"line_start":157,"line_end":157,"column_start":28,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1008},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":251937,"byte_end":251944,"line_start":285,"line_end":285,"column_start":49,"column_end":56},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":984},"to":{"krate":0,"index":2799}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":252207,"byte_end":252214,"line_start":297,"line_end":297,"column_start":16,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\gif.rs","byte_start":254441,"byte_end":254451,"line_start":359,"line_end":359,"column_start":35,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":256018,"byte_end":256028,"line_start":42,"line_end":42,"column_start":22,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":258447,"byte_end":258455,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":259768,"byte_end":259777,"line_start":165,"line_end":165,"column_start":18,"column_end":27},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1102},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\decoder.rs","byte_start":260197,"byte_end":260207,"line_start":179,"line_end":179,"column_start":52,"column_end":62},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1070},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\ico\\encoder.rs","byte_start":265018,"byte_end":265028,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268220,"byte_end":268231,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":268933,"byte_end":268943,"line_start":38,"line_end":38,"column_start":18,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":269356,"byte_end":269367,"line_start":52,"line_end":52,"column_start":45,"column_end":56},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1162},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":270806,"byte_end":270815,"line_start":106,"line_end":106,"column_start":42,"column_end":51},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3516},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\decoder.rs","byte_start":271127,"byte_end":271137,"line_start":117,"line_end":117,"column_start":36,"column_end":46},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":277189,"byte_end":277198,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\jpeg\\encoder.rs","byte_start":280225,"byte_end":280236,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":305861,"byte_end":305870,"line_start":27,"line_end":27,"column_start":15,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":306598,"byte_end":306607,"line_start":51,"line_end":51,"column_start":24,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1321},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":307861,"byte_end":307871,"line_start":97,"line_end":97,"column_start":15,"column_end":25},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":308356,"byte_end":308366,"line_start":111,"line_end":111,"column_start":45,"column_end":55},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1333},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":309190,"byte_end":309200,"line_start":145,"line_end":145,"column_start":16,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":310570,"byte_end":310579,"line_start":175,"line_end":175,"column_start":48,"column_end":57},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3516},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\png.rs","byte_start":311672,"byte_end":311682,"line_start":205,"line_end":205,"column_start":35,"column_end":45},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":318789,"byte_end":318798,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":320059,"byte_end":320068,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1384},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\autobreak.rs","byte_start":320694,"byte_end":320703,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1384},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":323094,"byte_end":323104,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":326551,"byte_end":326558,"line_start":152,"line_end":152,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2925},"to":{"krate":0,"index":1462}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336298,"byte_end":336307,"line_start":409,"line_end":409,"column_start":32,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":2305},"to":{"krate":0,"index":1462}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336436,"byte_end":336445,"line_start":413,"line_end":413,"column_start":18,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":336858,"byte_end":336868,"line_start":427,"line_end":427,"column_start":45,"column_end":55},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1449},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":337330,"byte_end":337340,"line_start":447,"line_end":447,"column_start":15,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":339008,"byte_end":339017,"line_start":489,"line_end":489,"column_start":6,"column_end":15},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":340404,"byte_end":340406,"line_start":532,"line_end":532,"column_start":17,"column_end":19},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":1435}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":341106,"byte_end":341109,"line_start":561,"line_end":561,"column_start":17,"column_end":20},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1441},"to":{"krate":0,"index":1435}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":342368,"byte_end":342374,"line_start":600,"line_end":600,"column_start":17,"column_end":23},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1443},"to":{"krate":0,"index":1435}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":343878,"byte_end":343883,"line_start":650,"line_end":650,"column_start":17,"column_end":22},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1445},"to":{"krate":0,"index":1435}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":344713,"byte_end":344725,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3280},"to":{"krate":0,"index":1447}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":344850,"byte_end":344863,"line_start":686,"line_end":686,"column_start":31,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3289},"to":{"krate":0,"index":1447}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":345243,"byte_end":345255,"line_start":698,"line_end":698,"column_start":31,"column_end":43},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3299},"to":{"krate":0,"index":1447}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\decoder.rs","byte_start":345631,"byte_end":345646,"line_start":710,"line_end":710,"column_start":31,"column_end":46},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3309},"to":{"krate":0,"index":1447}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":360389,"byte_end":360399,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":367674,"byte_end":367692,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":368825,"byte_end":368840,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":369328,"byte_end":369345,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":372849,"byte_end":372867,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":374998,"byte_end":375011,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":375321,"byte_end":375333,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":376750,"byte_end":376761,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378472,"byte_end":378483,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3227},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378602,"byte_end":378613,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3227},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\encoder.rs","byte_start":378714,"byte_end":378727,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":383873,"byte_end":383883,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":384853,"byte_end":384862,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391042,"byte_end":391051,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1677},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391244,"byte_end":391253,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1677},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391447,"byte_end":391456,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1677},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\pnm\\header.rs","byte_start":391651,"byte_end":391660,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1677},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":392564,"byte_end":392573,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":394418,"byte_end":394424,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":3339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":395693,"byte_end":395701,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":396818,"byte_end":396828,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":408125,"byte_end":408135,"line_start":492,"line_end":492,"column_start":52,"column_end":62},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1770},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tga\\decoder.rs","byte_start":409020,"byte_end":409029,"line_start":530,"line_end":530,"column_start":31,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1810},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":409888,"byte_end":409899,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":410322,"byte_end":410332,"line_start":45,"line_end":45,"column_start":32,"column_end":42},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":410801,"byte_end":410810,"line_start":56,"line_end":56,"column_start":32,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3516},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":411424,"byte_end":411434,"line_start":71,"line_end":71,"column_start":18,"column_end":28},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1846},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":411854,"byte_end":411865,"line_start":85,"line_end":85,"column_start":52,"column_end":63},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1834},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\tiff.rs","byte_start":412564,"byte_end":412575,"line_start":113,"line_end":113,"column_start":23,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1863},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":414146,"byte_end":414157,"line_start":24,"line_end":24,"column_start":15,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":416335,"byte_end":416345,"line_start":104,"line_end":104,"column_start":18,"column_end":28},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1901},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\decoder.rs","byte_start":416758,"byte_end":416769,"line_start":118,"line_end":118,"column_start":45,"column_end":56},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1889},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":445537,"byte_end":445547,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":449949,"byte_end":449959,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":470952,"byte_end":470960,"line_start":1521,"line_end":1521,"column_start":6,"column_end":14},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471577,"byte_end":471585,"line_start":1544,"line_end":1544,"column_start":18,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3354},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471650,"byte_end":471660,"line_start":1550,"line_end":1550,"column_start":6,"column_end":16},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":471949,"byte_end":471959,"line_start":1562,"line_end":1562,"column_start":18,"column_end":28},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3381},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":472026,"byte_end":472035,"line_start":1568,"line_end":1568,"column_start":6,"column_end":15},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\webp\\vp8.rs","byte_start":472572,"byte_end":472581,"line_start":1586,"line_end":1586,"column_start":18,"column_end":27},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3405},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487251,"byte_end":487257,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":487847,"byte_end":487853,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2107},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\animation.rs","byte_start":488209,"byte_end":488214,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489714,"byte_end":489718,"line_start":18,"line_end":18,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":2161}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":489721,"byte_end":489726,"line_start":18,"line_end":18,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":2161}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495055,"byte_end":495061,"line_start":178,"line_end":178,"column_start":38,"column_end":44},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495305,"byte_end":495311,"line_start":190,"line_end":190,"column_start":47,"column_end":53},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495460,"byte_end":495466,"line_start":199,"line_end":199,"column_start":49,"column_end":55},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":495836,"byte_end":495845,"line_start":217,"line_end":217,"column_start":38,"column_end":47},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2222},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496101,"byte_end":496110,"line_start":229,"line_end":229,"column_start":47,"column_end":56},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2222},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496259,"byte_end":496268,"line_start":238,"line_end":238,"column_start":49,"column_end":58},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2222},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496672,"byte_end":496676,"line_start":258,"line_end":258,"column_start":38,"column_end":42},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2241},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":496999,"byte_end":497003,"line_start":272,"line_end":272,"column_start":47,"column_end":51},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2241},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497152,"byte_end":497156,"line_start":281,"line_end":281,"column_start":49,"column_end":53},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2241},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497611,"byte_end":497618,"line_start":301,"line_end":301,"column_start":38,"column_end":45},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2260},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":497954,"byte_end":497961,"line_start":315,"line_end":315,"column_start":47,"column_end":54},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2260},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":498110,"byte_end":498117,"line_start":324,"line_end":324,"column_start":49,"column_end":56},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2260},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":498613,"byte_end":498628,"line_start":347,"line_end":347,"column_start":38,"column_end":53},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2279},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499031,"byte_end":499046,"line_start":365,"line_end":365,"column_start":47,"column_end":62},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2279},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499358,"byte_end":499371,"line_start":384,"line_end":384,"column_start":38,"column_end":51},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2296},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":499909,"byte_end":499922,"line_start":408,"line_end":408,"column_start":47,"column_end":60},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2296},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500258,"byte_end":500276,"line_start":428,"line_end":428,"column_start":38,"column_end":56},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2312},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":500687,"byte_end":500705,"line_start":446,"line_end":446,"column_start":47,"column_end":65},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2312},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":501023,"byte_end":501039,"line_start":465,"line_end":465,"column_start":38,"column_end":54},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":501586,"byte_end":501602,"line_start":489,"line_end":489,"column_start":47,"column_end":63},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2329},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":502104,"byte_end":502115,"line_start":511,"line_end":511,"column_start":20,"column_end":31},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":507756,"byte_end":507767,"line_start":678,"line_end":678,"column_start":20,"column_end":31},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":509937,"byte_end":509948,"line_start":747,"line_end":747,"column_start":20,"column_end":31},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":510558,"byte_end":510569,"line_start":771,"line_end":771,"column_start":20,"column_end":31},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511270,"byte_end":511281,"line_start":797,"line_end":797,"column_start":30,"column_end":41},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3505},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511545,"byte_end":511556,"line_start":810,"line_end":810,"column_start":33,"column_end":44},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3505},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":511822,"byte_end":511833,"line_start":821,"line_end":821,"column_start":42,"column_end":53},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3505},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512104,"byte_end":512115,"line_start":834,"line_end":834,"column_start":45,"column_end":56},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3505},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512376,"byte_end":512387,"line_start":845,"line_end":845,"column_start":30,"column_end":41},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3505},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":512746,"byte_end":512757,"line_start":860,"line_end":860,"column_start":41,"column_end":52},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3505},"to":{"krate":0,"index":2815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":513581,"byte_end":513592,"line_start":893,"line_end":893,"column_start":37,"column_end":48},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3505},"to":{"krate":0,"index":2828}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":515046,"byte_end":515057,"line_start":935,"line_end":935,"column_start":26,"column_end":37},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":517491,"byte_end":517500,"line_start":1013,"line_end":1013,"column_start":6,"column_end":15},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\buffer.rs","byte_start":518898,"byte_end":518909,"line_start":1051,"line_end":1051,"column_start":67,"column_end":78},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3505},"to":{"krate":0,"index":2436}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":524029,"byte_end":524038,"line_start":34,"line_end":34,"column_start":6,"column_end":15},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530078,"byte_end":530079,"line_start":247,"line_end":247,"column_start":32,"column_end":33},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2475},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530235,"byte_end":530239,"line_start":255,"line_end":255,"column_start":53,"column_end":57},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":530618,"byte_end":530622,"line_start":265,"line_end":265,"column_start":53,"column_end":57},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531004,"byte_end":531008,"line_start":275,"line_end":275,"column_start":52,"column_end":56},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531386,"byte_end":531390,"line_start":286,"line_end":286,"column_start":52,"column_end":56},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531770,"byte_end":531774,"line_start":297,"line_end":297,"column_start":54,"column_end":58},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":531969,"byte_end":531974,"line_start":305,"line_end":305,"column_start":53,"column_end":58},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":532391,"byte_end":532396,"line_start":316,"line_end":316,"column_start":53,"column_end":58},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":532812,"byte_end":532817,"line_start":327,"line_end":327,"column_start":52,"column_end":57},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533235,"byte_end":533240,"line_start":338,"line_end":338,"column_start":52,"column_end":57},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533659,"byte_end":533664,"line_start":349,"line_end":349,"column_start":53,"column_end":58},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":533923,"byte_end":533927,"line_start":359,"line_end":359,"column_start":52,"column_end":56},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534228,"byte_end":534232,"line_start":370,"line_end":370,"column_start":52,"column_end":56},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534534,"byte_end":534538,"line_start":381,"line_end":381,"column_start":53,"column_end":57},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":534840,"byte_end":534844,"line_start":393,"line_end":393,"column_start":54,"column_end":58},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535147,"byte_end":535151,"line_start":406,"line_end":406,"column_start":53,"column_end":57},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535476,"byte_end":535480,"line_start":420,"line_end":420,"column_start":52,"column_end":56},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":535782,"byte_end":535786,"line_start":432,"line_end":432,"column_start":52,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536089,"byte_end":536093,"line_start":444,"line_end":444,"column_start":53,"column_end":57},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536394,"byte_end":536398,"line_start":455,"line_end":455,"column_start":54,"column_end":58},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":536699,"byte_end":536703,"line_start":466,"line_end":466,"column_start":53,"column_end":57},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537029,"byte_end":537032,"line_start":481,"line_end":481,"column_start":53,"column_end":56},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537302,"byte_end":537305,"line_start":492,"line_end":492,"column_start":53,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537573,"byte_end":537576,"line_start":502,"line_end":502,"column_start":52,"column_end":55},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":537841,"byte_end":537844,"line_start":512,"line_end":512,"column_start":54,"column_end":57},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538108,"byte_end":538111,"line_start":522,"line_end":522,"column_start":53,"column_end":56},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538397,"byte_end":538400,"line_start":534,"line_end":534,"column_start":53,"column_end":56},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538668,"byte_end":538671,"line_start":544,"line_end":544,"column_start":52,"column_end":55},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":538936,"byte_end":538939,"line_start":555,"line_end":555,"column_start":53,"column_end":56},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539209,"byte_end":539212,"line_start":565,"line_end":565,"column_start":54,"column_end":57},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539476,"byte_end":539479,"line_start":575,"line_end":575,"column_start":53,"column_end":56},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2471}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":539855,"byte_end":539860,"line_start":592,"line_end":592,"column_start":30,"column_end":35},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":540865,"byte_end":540869,"line_start":625,"line_end":625,"column_start":30,"column_end":34},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":540979,"byte_end":540983,"line_start":631,"line_end":631,"column_start":30,"column_end":34},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":543191,"byte_end":543195,"line_start":689,"line_end":689,"column_start":30,"column_end":34},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545401,"byte_end":545404,"line_start":745,"line_end":745,"column_start":30,"column_end":33},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545513,"byte_end":545516,"line_start":751,"line_end":751,"column_start":30,"column_end":33},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2567}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545735,"byte_end":545740,"line_start":764,"line_end":764,"column_start":31,"column_end":36},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3968},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":545913,"byte_end":545917,"line_start":773,"line_end":773,"column_start":31,"column_end":35},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3881},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546105,"byte_end":546109,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3910},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546322,"byte_end":546326,"line_start":795,"line_end":795,"column_start":31,"column_end":35},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3939},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546539,"byte_end":546542,"line_start":806,"line_end":806,"column_start":31,"column_end":34},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3823},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\color.rs","byte_start":546804,"byte_end":546807,"line_start":820,"line_end":820,"column_start":31,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3852},"to":{"krate":0,"index":2587}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":555338,"byte_end":555350,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":574529,"byte_end":574541,"line_start":650,"line_end":650,"column_start":27,"column_end":39},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3997},"to":{"krate":0,"index":2815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\dynimage.rs","byte_start":575061,"byte_end":575073,"line_start":672,"line_end":672,"column_start":23,"column_end":35},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3997},"to":{"krate":0,"index":2828}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":589019,"byte_end":589029,"line_start":48,"line_end":48,"column_start":23,"column_end":33},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590238,"byte_end":590248,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4018},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":590448,"byte_end":590458,"line_start":90,"line_end":90,"column_start":26,"column_end":36},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4018},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":591257,"byte_end":591268,"line_start":134,"line_end":134,"column_start":6,"column_end":17},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":592525,"byte_end":592542,"line_start":176,"line_end":176,"column_start":28,"column_end":45},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4073},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":593677,"byte_end":593692,"line_start":210,"line_end":210,"column_start":6,"column_end":21},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":599923,"byte_end":599928,"line_start":360,"line_end":360,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":2780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":602612,"byte_end":602624,"line_start":436,"line_end":436,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2780},"to":{"krate":0,"index":2793}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":602631,"byte_end":602636,"line_start":436,"line_end":436,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":2793}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":603583,"byte_end":603589,"line_start":476,"line_end":476,"column_start":44,"column_end":50},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2802},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":606394,"byte_end":606410,"line_start":574,"line_end":574,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2815},"to":{"krate":0,"index":2828}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":609681,"byte_end":609689,"line_start":671,"line_end":671,"column_start":9,"column_end":17},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":610826,"byte_end":610834,"line_start":712,"line_end":712,"column_start":30,"column_end":38},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2838},"to":{"krate":0,"index":2815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\image.rs","byte_start":611655,"byte_end":611663,"line_start":744,"line_end":744,"column_start":26,"column_end":34},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2838},"to":{"krate":0,"index":2828}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619422,"byte_end":619426,"line_start":9,"line_end":9,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619429,"byte_end":619436,"line_start":9,"line_end":9,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":17,"index":170},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619439,"byte_end":619442,"line_start":9,"line_end":9,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":17,"index":564},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619445,"byte_end":619455,"line_start":9,"line_end":9,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2077},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619464,"byte_end":619469,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619472,"byte_end":619479,"line_start":9,"line_end":9,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":17,"index":87},"to":{"krate":0,"index":2877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619955,"byte_end":619960,"line_start":26,"line_end":26,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":2890}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619963,"byte_end":619970,"line_start":26,"line_end":26,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":17,"index":87},"to":{"krate":0,"index":2890}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.22.4\\./src\\traits.rs","byte_start":619973,"byte_end":619980,"line_start":26,"line_end":26,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":17,"index":170},"to":{"krate":0,"index":2890}}]}