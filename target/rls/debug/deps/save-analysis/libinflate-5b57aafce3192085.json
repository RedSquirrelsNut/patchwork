{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","inflate","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=5b57aafce3192085","-C","extra-filename=-5b57aafce3192085","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","adler32=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libadler32-0e7d7819f92c0c27.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libinflate-5b57aafce3192085.rmeta"},"prelude":{"crate_id":{"name":"inflate","disambiguator":[6088455039282492040,13490784073788723862]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","num":14,"id":{"name":"adler32","disambiguator":[5470020609090045846,14440380773254217963]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":432,"byte_end":42253,"line_start":10,"line_end":1039,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":2877,"byte_end":2890,"line_start":77,"line_end":77,"column_start":24,"column_end":37},"alias_span":null,"name":"InflateWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":2927,"byte_end":2940,"line_start":80,"line_end":80,"column_start":23,"column_end":36},"alias_span":null,"name":"inflate_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":2942,"byte_end":2960,"line_start":80,"line_end":80,"column_start":38,"column_end":56},"alias_span":null,"name":"inflate_bytes_zlib","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":2962,"byte_end":2992,"line_start":80,"line_end":80,"column_start":58,"column_end":88},"alias_span":null,"name":"inflate_bytes_zlib_no_checksum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":3031,"byte_end":3045,"line_start":83,"line_end":83,"column_start":24,"column_end":38},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":3047,"byte_end":3064,"line_start":83,"line_end":83,"column_start":40,"column_end":57},"alias_span":null,"name":"DeflateDecoderBuf","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":432,"byte_end":42253,"line_start":10,"line_end":1039,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":60},{"krate":0,"index":64},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":277},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":152},{"krate":0,"index":159},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":175},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":242}],"decl_id":null,"docs":" A [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html) decoder written in rust.\n\n This library provides functionality to decompress data compressed with the DEFLATE algorithm,\n both with and without a [zlib](https://tools.ietf.org/html/rfc1950) header/trailer.\n\n # Examples\n The easiest way to get `std::Vec<u8>` containing the decompressed bytes is to use either\n `inflate::inflate_bytes` or `inflate::inflate_bytes_zlib` (depending on whether\n the encoded data has zlib headers and trailers or not). The following example\n decodes the DEFLATE encoded string \"Hello, world\" and prints it:\n\n ```rust\n use inflate::inflate_bytes;\n use std::str::from_utf8;\n\n let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];\n let decoded = inflate_bytes(&encoded).unwrap();\n println!(\"{}\", from_utf8(&decoded).unwrap()); // prints \"Hello, world\"\n ```\n\n If you need more flexibility, then the library also provides an implementation\n of `std::io::Writer` in `inflate::writer`. Below is an example using an\n `inflate::writer::InflateWriter` to decode the DEFLATE encoded string \"Hello, world\":\n\n ```rust\n use inflate::InflateWriter;\n use std::io::Write;\n use std::str::from_utf8;\n\n let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];\n let mut decoder = InflateWriter::new(Vec::new());\n decoder.write(&encoded).unwrap();\n let decoded = decoder.finish().unwrap();\n println!(\"{}\", from_utf8(&decoded).unwrap()); // prints \"Hello, world\"\n ```\n\n Finally, if you need even more flexibility, or if you only want to depend on\n `core`, you can use the `inflate::InflateStream` API. The below example\n decodes an array of DEFLATE encoded bytes:\n\n ```rust\n use inflate::InflateStream;\n\n let data = [0x73, 0x49, 0x4d, 0xcb, 0x49, 0x2c, 0x49, 0x55, 0x00, 0x11, 0x00];\n let mut inflater = InflateStream::new();\n let mut out = Vec::<u8>::new();\n let mut n = 0;\n while n < data.len() {\n     let res = inflater.update(&data[n..]);\n     if let Ok((num_bytes_read, result)) = res {\n         n += num_bytes_read;\n         out.extend(result.iter().cloned());\n     } else {\n         res.unwrap();\n     }\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45001,"byte_end":45014,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"InflateWriter","qualname":"::writer::InflateWriter","value":"InflateWriter {  }","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" A DEFLATE decoder.\n\n A struct implementing the `std::io::Write` trait that decompresses DEFLATE\n encoded data into the given writer `w`.\n\n # Example\n\n ```\n use inflate::InflateWriter;\n use std::io::Write;\n\n let encoded = [243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];\n let mut decoder = InflateWriter::new(Vec::new());\n decoder.write(&encoded).unwrap();\n let decoded = decoder.finish().unwrap();\n println!(\"{}\", std::str::from_utf8(&decoded).unwrap()); // prints \"Hello, world\"\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45118,"byte_end":45121,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateWriter<W>>::new","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45236,"byte_end":45245,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateWriter<W>>::from_zlib","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45366,"byte_end":45372,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"finish","qualname":"<InflateWriter<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\utils.rs","byte_start":47955,"byte_end":47968,"line_start":34,"line_end":34,"column_start":8,"column_end":21},"name":"inflate_bytes","qualname":"::utils::inflate_bytes","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed data.\n\n Returns a `Vec` with the decompressed data or an error message.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\utils.rs","byte_start":48230,"byte_end":48248,"line_start":41,"line_end":41,"column_start":8,"column_end":26},"name":"inflate_bytes_zlib","qualname":"::utils::inflate_bytes_zlib","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.\n\n Returns a `Vec` with the decompressed data or an error message.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\utils.rs","byte_start":48569,"byte_end":48599,"line_start":49,"line_end":49,"column_start":8,"column_end":38},"name":"inflate_bytes_zlib_no_checksum","qualname":"::utils::inflate_bytes_zlib_no_checksum","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data,\n without calculating and validating the checksum.\n\n Returns a `Vec` with the decompressed data or an error message.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":51033,"byte_end":51050,"line_start":32,"line_end":32,"column_start":12,"column_end":29},"name":"DeflateDecoderBuf","qualname":"::reader::DeflateDecoderBuf","value":"DeflateDecoderBuf {  }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.\n\n This structure implements a `Read` interface and takes a stream\n of compressed data that implements the `BufRead` trait as input,\n providing the decompressed data when read from.\n\n # Example\n ```\n use std::io::Read;\n use inflate::DeflateDecoderBuf;\n\n const TEST_STRING: &'static str = \"Hello, world\";\n let encoded = vec![243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];\n let mut decoder = DeflateDecoderBuf::new(&encoded[..]);\n let mut output = Vec::new();\n let status = decoder.read_to_end(&mut output);\n # let _ = status;\n assert_eq!(String::from_utf8(output).unwrap(), TEST_STRING);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":51571,"byte_end":51574,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoderBuf<R>>::new","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":51920,"byte_end":51929,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoderBuf<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":52338,"byte_end":52359,"line_start":70,"line_end":70,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoderBuf<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":52906,"byte_end":52911,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoderBuf<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.\n\n Note that this function doesn't ensure that all data has been output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":52885,"byte_end":52894,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53202,"byte_end":53212,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoderBuf<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.\n\n Note that this function doesn't ensure that all data has been output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53181,"byte_end":53190,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53358,"byte_end":53365,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoderBuf<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53337,"byte_end":53346,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53638,"byte_end":53645,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoderBuf<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying `BufRead` instance.\n\n Note that mutation of the reader may cause surprising results if the decoder is going to\n keep being used.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53617,"byte_end":53626,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53879,"byte_end":53889,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoderBuf<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Drops the decoder and return the inner `BufRead` instance.\n\n Note that this function doesn't ensure that all data has been output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":53858,"byte_end":53867,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54032,"byte_end":54040,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoderBuf<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54011,"byte_end":54020,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54179,"byte_end":54188,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoderBuf<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54158,"byte_end":54167,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54414,"byte_end":54430,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoderBuf<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.\n\n Will return 0 for cases where the checksum is not validated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54393,"byte_end":54402,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58150,"byte_end":58164,"line_start":233,"line_end":233,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::reader::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":105}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.\n\n This structure implements a `Read` interface and takes a stream of compressed data that\n implements the `Read` trait as input,\n provoding the decompressed data when read from.\n # Example\n ```\n use std::io::Read;\n use inflate::DeflateDecoder;\n const TEST_STRING: &'static str = \"Hello, world\";\n let encoded = vec![243, 72, 205, 201, 201, 215, 81, 40, 207, 47, 202, 73, 1, 0];\n let mut decoder = DeflateDecoder::new(&encoded[..]);\n let mut output = Vec::new();\n let status = decoder.read_to_end(&mut output);\n # let _ = status;\n assert_eq!(String::from_utf8(output).unwrap(), TEST_STRING);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58403,"byte_end":58406,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58648,"byte_end":58657,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoder<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58962,"byte_end":58983,"line_start":255,"line_end":255,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoder<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59393,"byte_end":59398,"line_start":266,"line_end":266,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.\n\n Note that this function doesn't ensure that all data has been output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59372,"byte_end":59381,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59566,"byte_end":59573,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59545,"byte_end":59554,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59852,"byte_end":59859,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n\n Note that mutation of the reader may cause surprising results if the decoder is going to\n keep being used.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":59831,"byte_end":59840,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60022,"byte_end":60032,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60001,"byte_end":60010,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60310,"byte_end":60320,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.\n\n Note that this function doesn't ensure that all data has been output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60289,"byte_end":60298,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60463,"byte_end":60471,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60442,"byte_end":60451,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60616,"byte_end":60625,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60595,"byte_end":60604,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60857,"byte_end":60873,"line_start":317,"line_end":317,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoder<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.\n\n Will return 0 for cases where the checksum is not validated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60836,"byte_end":60845,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":19690,"byte_end":19703,"line_start":553,"line_end":553,"column_start":12,"column_end":25},"name":"InflateStream","qualname":"::InflateStream","value":"InflateStream {  }","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":19972,"byte_end":19975,"line_start":565,"line_end":565,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateStream>::new","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding raw deflate encoded data.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":19874,"byte_end":19893,"line_start":563,"line_end":563,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":20301,"byte_end":20310,"line_start":572,"line_end":572,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateStream>::from_zlib","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":20689,"byte_end":20710,"line_start":580,"line_end":580,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<InflateStream>::from_zlib_no_checksum","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer\n\n This version creates a decoder that does not checksum the data to validate it with the\n checksum provided with the zlib wrapper.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":20845,"byte_end":20850,"line_start":584,"line_end":584,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateStream>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":21038,"byte_end":21051,"line_start":591,"line_end":591,"column_start":12,"column_end":25},"name":"reset_to_zlib","qualname":"<InflateStream>::reset_to_zlib","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":40949,"byte_end":40955,"line_start":1003,"line_end":1003,"column_start":12,"column_end":18},"name":"update","qualname":"<InflateStream>::update","value":"fn <'a> (&'a mut self, mut data: &[u8]) -> Result<(usize, &'a [u8]), String>","parent":null,"children":[],"decl_id":null,"docs":" Try to uncompress/decode the data in `data`.\n\n On success, returns how many bytes of the input data was decompressed, and a reference to\n the buffer containing the decompressed data.\n\n This function may not uncompress all the provided data in one call, so it has to be called\n repeatedly with the data that hasn't been decompressed yet as an input until the number of\n bytes decoded returned is 0. (See the [top level crate documentation](index.html)\n for an example.)\n\n # Errors\n If invalid input data is encountered, a string describing what went wrong is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":42175,"byte_end":42191,"line_start":1036,"line_end":1036,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<InflateStream>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.\n\n Will return 0 for cases where the checksum is not validated.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\checksum.rs","byte_start":42813,"byte_end":42821,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45088,"byte_end":45101,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45715,"byte_end":45728,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":51461,"byte_end":51478,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":52634,"byte_end":52651,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54527,"byte_end":54544,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58296,"byte_end":58310,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60108,"byte_end":60122,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60960,"byte_end":60974,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":7029,"byte_end":7038,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":11052,"byte_end":11068,"line_start":323,"line_end":323,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":14184,"byte_end":14196,"line_start":413,"line_end":413,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":19854,"byte_end":19867,"line_start":562,"line_end":562,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":263},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\checksum.rs","byte_start":42813,"byte_end":42821,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45088,"byte_end":45101,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\writer.rs","byte_start":45715,"byte_end":45728,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":36},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":51461,"byte_end":51478,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":52634,"byte_end":52651,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":54527,"byte_end":54544,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":78},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":58296,"byte_end":58310,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60108,"byte_end":60122,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\reader.rs","byte_start":60960,"byte_end":60974,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":103},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":7029,"byte_end":7038,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":11052,"byte_end":11068,"line_start":323,"line_end":323,"column_start":6,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":14184,"byte_end":14196,"line_start":413,"line_end":413,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.4.5\\src\\lib.rs","byte_start":19854,"byte_end":19867,"line_start":562,"line_end":562,"column_start":6,"column_end":19},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":235},"to":{"krate":4294967295,"index":4294967295}}]}