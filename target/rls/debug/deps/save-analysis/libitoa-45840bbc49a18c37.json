{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","itoa","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=45840bbc49a18c37","-C","extra-filename=-45840bbc49a18c37","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libitoa-45840bbc49a18c37.rmeta"},"prelude":{"crate_id":{"name":"itoa","disambiguator":[151015904095626109,16266779570160131846]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":0,"byte_end":11363,"line_start":1,"line_end":345,"column_start":1,"column_end":62}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":0,"byte_end":11363,"line_start":1,"line_end":345,"column_start":1,"column_end":62},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":10},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":44},{"krate":0,"index":73},{"krate":0,"index":77},{"krate":0,"index":48},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":52},{"krate":0,"index":83},{"krate":0,"index":87},{"krate":0,"index":56},{"krate":0,"index":88},{"krate":0,"index":92},{"krate":0,"index":60},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":64},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":98},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":102},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":116},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":120},{"krate":0,"index":39}],"decl_id":null,"docs":" This crate provides fast functions for printing integer primitives to an\n [`io::Write`] or a [`fmt::Write`]. The implementation comes straight from\n [libcore] but avoids the performance penalty of going through\n [`fmt::Formatter`].\n\n See also [`dtoa`] for printing floating point primitives.\n\n [`io::Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n [`fmt::Write`]: https://doc.rust-lang.org/core/fmt/trait.Write.html\n [libcore]: https://github.com/rust-lang/rust/blob/b8214dc6c6fc20d0a660fb5700dca9ebf51ebe89/src/libcore/fmt/num.rs#L201-L254\n [`fmt::Formatter`]: https://doc.rust-lang.org/std/fmt/struct.Formatter.html\n [`dtoa`]: https://github.com/dtolnay/dtoa\n\n <br>\n\n # Performance (lower is better)\n\n ![performance](https://raw.githubusercontent.com/dtolnay/itoa/master/performance.png)\n\n <br>\n\n # Examples\n\n ```edition2018\n use std::{fmt, io};\n\n fn demo_itoa_write() -> io::Result<()> {\n     // Write to a vector or other io::Write.\n     let mut buf = Vec::new();\n     itoa::write(&mut buf, 128u64)?;\n     println!(\"{:?}\", buf);\n\n     // Write to a stack buffer.\n     let mut bytes = [0u8; 20];\n     let n = itoa::write(&mut bytes[..], 128u64)?;\n     println!(\"{:?}\", &bytes[..n]);\n\n     Ok(())\n }\n\n fn demo_itoa_fmt() -> fmt::Result {\n     // Write to a string.\n     let mut s = String::new();\n     itoa::fmt(&mut s, 128u64)?;\n     println!(\"{}\", s);\n\n     Ok(())\n }\n ```\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":1626,"byte_end":1632,"line_start":52,"line_end":52,"column_start":35,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2364,"byte_end":2367,"line_start":82,"line_end":82,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt","value":"fn <W, V> (mut wr: W, value: V) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write integer to an `fmt::Write`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2347,"byte_end":2356,"line_start":81,"line_end":81,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2732,"byte_end":2738,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":41}],"decl_id":null,"docs":" A safe API for formatting integers to text.\n\n # Example\n\n ```\n let mut buffer = itoa::Buffer::new();\n let printed = buffer.format(1234);\n assert_eq!(printed, \"1234\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3143,"byte_end":3146,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer>::new","value":"fn () -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" This is a cheap operation; you don't need to worry about reusing buffers\n for efficiency.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3097,"byte_end":3106,"line_start":118,"line_end":118,"column_start":5,"column_end":14}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3111,"byte_end":3131,"line_start":119,"line_end":119,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3379,"byte_end":3385,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"format","qualname":"<Buffer>::format","value":"fn <I> (&mut self, i: I) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Print an integer into this buffer and return a reference to its string representation\n within the buffer.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3552,"byte_end":3558,"line_start":135,"line_end":135,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3728,"byte_end":3735,"line_start":141,"line_end":141,"column_start":11,"column_end":18},"name":"Integer","qualname":"::Integer","value":"Integer: private::Sealed","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" An integer that can be formatted by `itoa::write` and `itoa::fmt`.\n\n This trait is sealed and cannot be implemented for types outside of itoa.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3804,"byte_end":3809,"line_start":144,"line_end":144,"column_start":8,"column_end":13},"name":"write","qualname":"::Integer::write","value":"fn (self, buf: &mut Buffer) -> &str","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2792,"byte_end":2798,"line_start":101,"line_end":101,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2890,"byte_end":2896,"line_start":108,"line_end":108,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2979,"byte_end":2985,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2792,"byte_end":2798,"line_start":101,"line_end":101,"column_start":18,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":40},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2890,"byte_end":2896,"line_start":108,"line_end":108,"column_start":16,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":2979,"byte_end":2985,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itoa-0.4.5\\src\\lib.rs","byte_start":3746,"byte_end":3752,"line_start":141,"line_end":141,"column_start":29,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":22},"to":{"krate":0,"index":23}}]}