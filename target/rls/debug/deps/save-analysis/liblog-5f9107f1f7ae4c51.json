{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","log","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=5f9107f1f7ae4c51","-C","extra-filename=-5f9107f1f7ae4c51","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","cfg_if=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcfg_if-2fc5ec101de62cb7.rmeta","--cap-lints","allow","--cfg","atomic_cas","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblog-5f9107f1f7ae4c51.rmeta"},"prelude":{"crate_id":{"name":"log","disambiguator":[5486777101571208631,4905110777597554504]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","num":4,"id":{"name":"cfg_if","disambiguator":[17449466799846026439,9910330128128269589]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":467,"byte_end":50964,"line_start":11,"line_end":1668,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":467,"byte_end":50964,"line_start":11,"line_end":1668,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":172},{"krate":0,"index":192},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":187},{"krate":0,"index":184},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":48},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":193},{"krate":0,"index":214},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":209},{"krate":0,"index":206},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":215},{"krate":0,"index":254},{"krate":0,"index":251},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":237},{"krate":0,"index":230},{"krate":0,"index":226},{"krate":0,"index":223},{"krate":0,"index":105},{"krate":0,"index":256},{"krate":0,"index":266},{"krate":0,"index":263},{"krate":0,"index":108},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":122},{"krate":0,"index":275},{"krate":0,"index":311},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":297},{"krate":0,"index":286},{"krate":0,"index":282},{"krate":0,"index":279},{"krate":0,"index":135},{"krate":0,"index":314},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":331},{"krate":0,"index":324},{"krate":0,"index":320},{"krate":0,"index":317},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":163},{"krate":0,"index":350},{"krate":0,"index":357},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":359}],"decl_id":null,"docs":" A lightweight logging facade.\n\n The `log` crate provides a single logging API that abstracts over the\n actual logging implementation. Libraries can use the logging API provided\n by this crate, and the consumer of those libraries can choose the logging\n implementation that is most suitable for its use case.\n\n If no logging implementation is selected, the facade falls back to a \"noop\"\n implementation that ignores all log messages. The overhead in this case\n is very small - just an integer load, comparison and jump.\n\n A log request consists of a _target_, a _level_, and a _body_. A target is a\n string which defaults to the module path of the location of the log request,\n though that default may be overridden. Logger implementations typically use\n the target to filter requests based on some user configuration.\n\n # Use\n\n The basic use of the log crate is through the five logging macros: [`error!`],\n [`warn!`], [`info!`], [`debug!`] and [`trace!`]\n where `error!` represents the highest-priority log messages\n and `trace!` the lowest. The log messages are filtered by configuring\n the log level to exclude messages with a lower priority.\n Each of these macros accept format strings similarly to [`println!`].\n\n\n [`error!`]: ./macro.error.html\n [`warn!`]: ./macro.warn.html\n [`info!`]: ./macro.info.html\n [`debug!`]: ./macro.debug.html\n [`trace!`]: ./macro.trace.html\n [`println!`]: https://doc.rust-lang.org/stable/std/macro.println.html\n\n ## In libraries\n\n Libraries should link only to the `log` crate, and use the provided\n macros to log whatever information will be useful to downstream consumers.\n\n ### Examples\n\n ```edition2018\n # #[derive(Debug)] pub struct Yak(String);\n # impl Yak { fn shave(&mut self, _: u32) {} }\n # fn find_a_razor() -> Result<u32, u32> { Ok(1) }\n use log::{info, warn};\n\n pub fn shave_the_yak(yak: &mut Yak) {\n     info!(target: \"yak_events\", \"Commencing yak shaving for {:?}\", yak);\n\n     loop {\n         match find_a_razor() {\n             Ok(razor) => {\n                 info!(\"Razor located: {}\", razor);\n                 yak.shave(razor);\n                 break;\n             }\n             Err(err) => {\n                 warn!(\"Unable to locate a razor: {}, retrying\", err);\n             }\n         }\n     }\n }\n # fn main() {}\n ```\n\n ## In executables\n\n Executables should choose a logging implementation and initialize it early in the\n runtime of the program. Logging implementations will typically include a\n function to do this. Any log messages generated before\n the implementation is initialized will be ignored.\n\n The executable itself may use the `log` crate to log as well.\n\n ### Warning\n\n The logging system may only be initialized once.\n\n # Available logging implementations\n\n In order to produce log output executables have to use\n a logger implementation compatible with the facade.\n There are many available implementations to choose from,\n here are some of the most popular ones:\n\n * Simple minimal loggers:\n     * [env_logger]\n     * [simple_logger]\n     * [simplelog]\n     * [pretty_env_logger]\n     * [stderrlog]\n     * [flexi_logger]\n * Complex configurable frameworks:\n     * [log4rs]\n     * [fern]\n * Adaptors for other facilities:\n     * [syslog]\n     * [slog-stdlog]\n\n # Implementing a Logger\n\n Loggers implement the [`Log`] trait. Here's a very basic example that simply\n logs all messages at the [`Error`][level_link], [`Warn`][level_link] or\n [`Info`][level_link] levels to stdout:\n\n ```edition2018\n use log::{Record, Level, Metadata};\n\n struct SimpleLogger;\n\n impl log::Log for SimpleLogger {\n     fn enabled(&self, metadata: &Metadata) -> bool {\n         metadata.level() <= Level::Info\n     }\n\n     fn log(&self, record: &Record) {\n         if self.enabled(record.metadata()) {\n             println!(\"{} - {}\", record.level(), record.args());\n         }\n     }\n\n     fn flush(&self) {}\n }\n\n # fn main() {}\n ```\n\n Loggers are installed by calling the [`set_logger`] function. The maximum\n log level also needs to be adjusted via the [`set_max_level`] function. The\n logging facade uses this as an optimization to improve performance of log\n messages at levels that are disabled. It's important to set it, as it\n defaults to [`Off`][filter_link], so no log messages will ever be captured!\n In the case of our example logger, we'll want to set the maximum log level\n to [`Info`][filter_link], since we ignore any [`Debug`][level_link] or\n [`Trace`][level_link] level log messages. A logging implementation should\n provide a function that wraps a call to [`set_logger`] and\n [`set_max_level`], handling initialization of the logger:\n\n ```edition2018\n # use log::{Level, Metadata};\n # struct SimpleLogger;\n # impl log::Log for SimpleLogger {\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn log(&self, _: &log::Record) {}\n #   fn flush(&self) {}\n # }\n # fn main() {}\n use log::{SetLoggerError, LevelFilter};\n\n static LOGGER: SimpleLogger = SimpleLogger;\n\n pub fn init() -> Result<(), SetLoggerError> {\n     log::set_logger(&LOGGER)\n         .map(|()| log::set_max_level(LevelFilter::Info))\n }\n ```\n\n Implementations that adjust their configurations at runtime should take care\n to adjust the maximum log level as well.\n\n # Use with `std`\n\n `set_logger` requires you to provide a `&'static Log`, which can be hard to\n obtain if your logger depends on some runtime configuration. The\n `set_boxed_logger` function is available with the `std` Cargo feature. It is\n identical to `set_logger` except that it takes a `Box<Log>` rather than a\n `&'static Log`:\n\n ```edition2018\n # use log::{Level, LevelFilter, Log, SetLoggerError, Metadata};\n # struct SimpleLogger;\n # impl log::Log for SimpleLogger {\n #   fn enabled(&self, _: &Metadata) -> bool { false }\n #   fn log(&self, _: &log::Record) {}\n #   fn flush(&self) {}\n # }\n # fn main() {}\n # #[cfg(feature = \"std\")]\n pub fn init() -> Result<(), SetLoggerError> {\n     log::set_boxed_logger(Box::new(SimpleLogger))\n         .map(|()| log::set_max_level(LevelFilter::Info))\n }\n ```\n\n # Compile time filters\n\n Log levels can be statically disabled at compile time via Cargo features. Log invocations at\n disabled levels will be skipped and will not even be present in the resulting binary unless the\n log level is specified dynamically. This level is configured separately for release and debug\n builds. The features are:\n\n * `max_level_off`\n * `max_level_error`\n * `max_level_warn`\n * `max_level_info`\n * `max_level_debug`\n * `max_level_trace`\n * `release_max_level_off`\n * `release_max_level_error`\n * `release_max_level_warn`\n * `release_max_level_info`\n * `release_max_level_debug`\n * `release_max_level_trace`\n\n These features control the value of the `STATIC_MAX_LEVEL` constant. The logging macros check\n this value before logging a message. By default, no levels are disabled.\n\n Libraries should avoid using the max level features because they're global and can't be changed\n once they're set.\n\n For example, a crate can disable trace level logs in debug builds and trace, debug, and info\n level logs in release builds with the following configuration:\n\n ```toml\n [dependencies]\n log = { version = \"0.4\", features = [\"max_level_debug\", \"release_max_level_warn\"] }\n ```\n # Crate Feature Flags\n\n The following crate feature flags are avaliable in addition to the filters. They are\n configured in your `Cargo.toml`.\n\n * `std` allows use of `std` crate instead of the default `core`. Enables using `std::error` and\n `set_boxed_logger` functionality.\n * `serde` enables support for serialization and deserialization of `Level` and `LevelFilter`.\n\n ```toml\n [dependencies]\n log = { version = \"0.4\", features = [\"std\", \"serde\"] }\n ```\n\n # Version compatibility\n\n The 0.3 and 0.4 versions of the `log` crate are almost entirely compatible. Log messages\n made using `log` 0.3 will forward transparently to a logger implementation using `log` 0.4. Log\n messages made using `log` 0.4 will forward to a logger implementation using `log` 0.3, but the\n module path and file name information associated with the message will unfortunately be lost.\n\n [`Log`]: trait.Log.html\n [level_link]: enum.Level.html\n [filter_link]: enum.LevelFilter.html\n [`set_logger`]: fn.set_logger.html\n [`set_max_level`]: fn.set_max_level.html\n [`try_set_logger_raw`]: fn.try_set_logger_raw.html\n [`shutdown_logger_raw`]: fn.shutdown_logger_raw.html\n [env_logger]: https://docs.rs/env_logger/*/env_logger/\n [simple_logger]: https://github.com/borntyping/rust-simple_logger\n [simplelog]: https://github.com/drakulix/simplelog.rs\n [pretty_env_logger]: https://docs.rs/pretty_env_logger/*/pretty_env_logger/\n [stderrlog]: https://docs.rs/stderrlog/*/stderrlog/\n [flexi_logger]: https://docs.rs/flexi_logger/*/flexi_logger/\n [syslog]: https://docs.rs/syslog/*/syslog/\n [slog-stdlog]: https://docs.rs/slog-stdlog/*/slog_stdlog/\n [log4rs]: https://docs.rs/log4rs/*/log4rs/\n [fern]: https://docs.rs/fern/*/fern/\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":10338,"byte_end":10360,"line_start":272,"line_end":272,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":10361,"byte_end":10400,"line_start":273,"line_end":273,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":10451,"byte_end":10457,"line_start":274,"line_end":274,"column_start":51,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":12801,"byte_end":12806,"line_start":343,"line_end":343,"column_start":5,"column_end":10},"name":"Error","qualname":"::Level::Error","value":"Level::Error","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" The \"error\" level.\n\n Designates very serious errors.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":12962,"byte_end":12966,"line_start":347,"line_end":347,"column_start":5,"column_end":9},"name":"Warn","qualname":"::Level::Warn","value":"Level::Warn","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" The \"warn\" level.\n\n Designates hazardous situations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13045,"byte_end":13049,"line_start":351,"line_end":351,"column_start":5,"column_end":9},"name":"Info","qualname":"::Level::Info","value":"Level::Info","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" The \"info\" level.\n\n Designates useful information.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13137,"byte_end":13142,"line_start":355,"line_end":355,"column_start":5,"column_end":10},"name":"Debug","qualname":"::Level::Debug","value":"Level::Debug","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" The \"debug\" level.\n\n Designates lower priority information.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13259,"byte_end":13264,"line_start":359,"line_end":359,"column_start":5,"column_end":10},"name":"Trace","qualname":"::Level::Trace","value":"Level::Trace","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" The \"trace\" level.\n\n Designates very low priority, often extremely verbose, information.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":12714,"byte_end":12719,"line_start":339,"line_end":339,"column_start":10,"column_end":15},"name":"Level","qualname":"::Level","value":"Level::{Error, Warn, Info, Debug, Trace}","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"decl_id":null,"docs":" An enum representing the available verbosity levels of the logger.\n\n Typical usage includes: checking if a certain `Level` is enabled with\n [`log_enabled!`](macro.log_enabled.html), specifying the `Level` of\n [`log!`](macro.log.html), and comparing a `Level` directly to a\n [`LevelFilter`](enum.LevelFilter.html).\n","sig":null,"attributes":[{"value":"repr(usize)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":12657,"byte_end":12671,"line_start":337,"line_end":337,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16564,"byte_end":16567,"line_start":506,"line_end":506,"column_start":12,"column_end":15},"name":"max","qualname":"<Level>::max","value":"fn () -> Level","parent":null,"children":[],"decl_id":null,"docs":" Returns the most verbose logging level.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16543,"byte_end":16552,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16696,"byte_end":16711,"line_start":512,"line_end":512,"column_start":12,"column_end":27},"name":"to_level_filter","qualname":"<Level>::to_level_filter","value":"fn (&self) -> LevelFilter","parent":null,"children":[],"decl_id":null,"docs":" Converts the `Level` to the equivalent `LevelFilter`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16675,"byte_end":16684,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17281,"byte_end":17284,"line_start":529,"line_end":529,"column_start":5,"column_end":8},"name":"Off","qualname":"::LevelFilter::Off","value":"LevelFilter::Off","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" A level lower than all log levels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17336,"byte_end":17341,"line_start":531,"line_end":531,"column_start":5,"column_end":10},"name":"Error","qualname":"::LevelFilter::Error","value":"LevelFilter::Error","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Corresponds to the `Error` log level.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17392,"byte_end":17396,"line_start":533,"line_end":533,"column_start":5,"column_end":9},"name":"Warn","qualname":"::LevelFilter::Warn","value":"LevelFilter::Warn","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Corresponds to the `Warn` log level.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17447,"byte_end":17451,"line_start":535,"line_end":535,"column_start":5,"column_end":9},"name":"Info","qualname":"::LevelFilter::Info","value":"LevelFilter::Info","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Corresponds to the `Info` log level.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17503,"byte_end":17508,"line_start":537,"line_end":537,"column_start":5,"column_end":10},"name":"Debug","qualname":"::LevelFilter::Debug","value":"LevelFilter::Debug","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Corresponds to the `Debug` log level.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17560,"byte_end":17565,"line_start":539,"line_end":539,"column_start":5,"column_end":10},"name":"Trace","qualname":"::LevelFilter::Trace","value":"LevelFilter::Trace","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" Corresponds to the `Trace` log level.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17220,"byte_end":17231,"line_start":527,"line_end":527,"column_start":10,"column_end":21},"name":"LevelFilter","qualname":"::LevelFilter","value":"LevelFilter::{Off, Error, Warn, Info, Debug, Trace}","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"decl_id":null,"docs":" An enum representing the available verbosity level filters of the logger.\n\n A `LevelFilter` may be compared directly to a [`Level`]. Use this type\n to get and set the maximum log level with [`max_level()`] and [`set_max_level`].\n\n [`Level`]: enum.Level.html\n [`max_level()`]: fn.max_level.html\n [`set_max_level`]: fn.set_max_level.html\n","sig":null,"attributes":[{"value":"repr(usize)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17163,"byte_end":17177,"line_start":525,"line_end":525,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20367,"byte_end":20370,"line_start":659,"line_end":659,"column_start":12,"column_end":15},"name":"max","qualname":"<LevelFilter>::max","value":"fn () -> LevelFilter","parent":null,"children":[],"decl_id":null,"docs":" Returns the most verbose logging level filter.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20346,"byte_end":20355,"line_start":658,"line_end":658,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20564,"byte_end":20572,"line_start":667,"line_end":667,"column_start":12,"column_end":20},"name":"to_level","qualname":"<LevelFilter>::to_level","value":"fn (&self) -> Option<Level>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` to the equivalent `Level`.\n\n Returns `None` if `self` is `LevelFilter::Off`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20543,"byte_end":20552,"line_start":666,"line_end":666,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":22488,"byte_end":22494,"line_start":734,"line_end":734,"column_start":12,"column_end":18},"name":"Record","qualname":"::Record","value":"Record {  }","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" The \"payload\" of a log message.\n\n # Use\n\n `Record` structures are passed as parameters to the [`log`][method.log]\n method of the [`Log`] trait. Logger implementors manipulate these\n structures in order to display log messages. `Record`s are automatically\n created by the [`log!`] macro and so are not seen by log users.\n\n Note that the [`level()`] and [`target()`] accessors are equivalent to\n `self.metadata().level()` and `self.metadata().target()` respectively.\n These methods are provided as a convenience for users of this structure.\n\n # Example\n\n The following example shows a simple logger that displays the level,\n module path, and message of any `Record` that is passed to it.\n\n ```edition2018\n struct SimpleLogger;\n\n impl log::Log for SimpleLogger {\n    fn enabled(&self, metadata: &log::Metadata) -> bool {\n        true\n    }\n\n    fn log(&self, record: &log::Record) {\n        if !self.enabled(record.metadata()) {\n            return;\n        }\n\n        println!(\"{}:{} -- {}\",\n                 record.level(),\n                 record.target(),\n                 record.args());\n    }\n    fn flush(&self) {}\n }\n ```\n\n [method.log]: trait.Log.html#tymethod.log\n [`Log`]: trait.Log.html\n [`log!`]: macro.log.html\n [`level()`]: struct.Record.html#method.level\n [`target()`]: struct.Record.html#method.target\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23309,"byte_end":23316,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"builder","qualname":"<Record>::builder","value":"fn () -> RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new builder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23288,"byte_end":23297,"line_start":763,"line_end":763,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23429,"byte_end":23433,"line_start":770,"line_end":770,"column_start":12,"column_end":16},"name":"args","qualname":"<Record>::args","value":"fn (&self) -> &fmt::Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":" The message body.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23408,"byte_end":23417,"line_start":769,"line_end":769,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23559,"byte_end":23567,"line_start":776,"line_end":776,"column_start":12,"column_end":20},"name":"metadata","qualname":"<Record>::metadata","value":"fn (&self) -> &Metadata<'a>","parent":null,"children":[],"decl_id":null,"docs":" Metadata about the log directive.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23538,"byte_end":23547,"line_start":775,"line_end":775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23693,"byte_end":23698,"line_start":782,"line_end":782,"column_start":12,"column_end":17},"name":"level","qualname":"<Record>::level","value":"fn (&self) -> Level","parent":null,"children":[],"decl_id":null,"docs":" The verbosity level of the message.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23672,"byte_end":23681,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23828,"byte_end":23834,"line_start":788,"line_end":788,"column_start":12,"column_end":18},"name":"target","qualname":"<Record>::target","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" The name of the target of the directive.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23807,"byte_end":23816,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23958,"byte_end":23969,"line_start":794,"line_end":794,"column_start":12,"column_end":23},"name":"module_path","qualname":"<Record>::module_path","value":"fn (&self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" The module path of the message.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23937,"byte_end":23946,"line_start":793,"line_end":793,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24141,"byte_end":24159,"line_start":800,"line_end":800,"column_start":12,"column_end":30},"name":"module_path_static","qualname":"<Record>::module_path_static","value":"fn (&self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" The module path of the message, if it is a `'static` string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24120,"byte_end":24129,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24395,"byte_end":24399,"line_start":809,"line_end":809,"column_start":12,"column_end":16},"name":"file","qualname":"<Record>::file","value":"fn (&self) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" The source file containing the message.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24374,"byte_end":24383,"line_start":808,"line_end":808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24564,"byte_end":24575,"line_start":815,"line_end":815,"column_start":12,"column_end":23},"name":"file_static","qualname":"<Record>::file_static","value":"fn (&self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" The module path of the message, if it is a `'static` string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24543,"byte_end":24552,"line_start":814,"line_end":814,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24797,"byte_end":24801,"line_start":824,"line_end":824,"column_start":12,"column_end":16},"name":"line","qualname":"<Record>::line","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" The line containing the message.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":24776,"byte_end":24785,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":27013,"byte_end":27026,"line_start":896,"line_end":896,"column_start":12,"column_end":25},"name":"RecordBuilder","qualname":"::RecordBuilder","value":"RecordBuilder {  }","parent":null,"children":[{"krate":0,"index":271}],"decl_id":null,"docs":" Builder for [`Record`](struct.Record.html).\n\n Typically should only be used by log library creators or for testing and \"shim loggers\".\n The `RecordBuilder` can set the different parameters of `Record` object, and returns\n the created object when `build` is called.\n\n # Examples\n\n\n ```edition2018\n use log::{Level, Record};\n\n let record = Record::builder()\n                 .args(format_args!(\"Error!\"))\n                 .level(Level::Error)\n                 .target(\"myApp\")\n                 .file(Some(\"server.rs\"))\n                 .line(Some(144))\n                 .module_path(Some(\"server\"))\n                 .build();\n ```\n\n Alternatively, use [`MetadataBuilder`](struct.MetadataBuilder.html):\n\n ```edition2018\n use log::{Record, Level, MetadataBuilder};\n\n let error_metadata = MetadataBuilder::new()\n                         .target(\"myApp\")\n                         .level(Level::Error)\n                         .build();\n\n let record = Record::builder()\n                 .metadata(error_metadata)\n                 .args(format_args!(\"Error!\"))\n                 .line(Some(433))\n                 .file(Some(\"app.rs\"))\n                 .module_path(Some(\"server\"))\n                 .build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":27550,"byte_end":27553,"line_start":914,"line_end":914,"column_start":12,"column_end":15},"name":"new","qualname":"<RecordBuilder>::new","value":"fn () -> RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct new `RecordBuilder`.\n\n The default options are:\n\n - `args`: [`format_args!(\"\")`]\n - `metadata`: [`Metadata::builder().build()`]\n - `module_path`: `None`\n - `file`: `None`\n - `line`: `None`\n\n [`format_args!(\"\")`]: https://doc.rust-lang.org/std/macro.format_args.html\n [`Metadata::builder().build()`]: struct.MetadataBuilder.html#method.build\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":27529,"byte_end":27538,"line_start":913,"line_end":913,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28373,"byte_end":28377,"line_start":941,"line_end":941,"column_start":12,"column_end":16},"name":"args","qualname":"<RecordBuilder>::args","value":"fn (&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`args`](struct.Record.html#method.args).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28352,"byte_end":28361,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28668,"byte_end":28676,"line_start":948,"line_end":948,"column_start":12,"column_end":20},"name":"metadata","qualname":"<RecordBuilder>::metadata","value":"fn (&mut self, metadata: Metadata<'a>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`metadata`](struct.Record.html#method.metadata). Construct a `Metadata` object with [`MetadataBuilder`](struct.MetadataBuilder.html).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28647,"byte_end":28656,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28894,"byte_end":28899,"line_start":955,"line_end":955,"column_start":12,"column_end":17},"name":"level","qualname":"<RecordBuilder>::level","value":"fn (&mut self, level: Level) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`Metadata::level`](struct.Metadata.html#method.level).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":28873,"byte_end":28882,"line_start":954,"line_end":954,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29111,"byte_end":29117,"line_start":962,"line_end":962,"column_start":12,"column_end":18},"name":"target","qualname":"<RecordBuilder>::target","value":"fn (&mut self, target: &'a str) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`Metadata::target`](struct.Metadata.html#method.target)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29090,"byte_end":29099,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29332,"byte_end":29343,"line_start":969,"line_end":969,"column_start":12,"column_end":23},"name":"module_path","qualname":"<RecordBuilder>::module_path","value":"fn (&mut self, path: Option<&'a str>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`module_path`](struct.Record.html#method.module_path)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29311,"byte_end":29320,"line_start":968,"line_end":968,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29610,"byte_end":29628,"line_start":976,"line_end":976,"column_start":12,"column_end":30},"name":"module_path_static","qualname":"<RecordBuilder>::module_path_static","value":"fn (&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`module_path`](struct.Record.html#method.module_path) to a `'static` string\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29589,"byte_end":29598,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29862,"byte_end":29866,"line_start":983,"line_end":983,"column_start":12,"column_end":16},"name":"file","qualname":"<RecordBuilder>::file","value":"fn (&mut self, file: Option<&'a str>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`file`](struct.Record.html#method.file)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":29841,"byte_end":29850,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30113,"byte_end":30124,"line_start":990,"line_end":990,"column_start":12,"column_end":23},"name":"file_static","qualname":"<RecordBuilder>::file_static","value":"fn (&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`file`](struct.Record.html#method.file) to a `'static` string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30092,"byte_end":30101,"line_start":989,"line_end":989,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30351,"byte_end":30355,"line_start":997,"line_end":997,"column_start":12,"column_end":16},"name":"line","qualname":"<RecordBuilder>::line","value":"fn (&mut self, line: Option<u32>) -> &mut RecordBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set [`line`](struct.Record.html#method.line)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30330,"byte_end":30339,"line_start":996,"line_end":996,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30807,"byte_end":30812,"line_start":1012,"line_end":1012,"column_start":12,"column_end":17},"name":"build","qualname":"<RecordBuilder>::build","value":"fn (&self) -> Record<'a>","parent":null,"children":[],"decl_id":null,"docs":" Invoke the builder and return a `Record`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":30786,"byte_end":30795,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":31883,"byte_end":31891,"line_start":1056,"line_end":1056,"column_start":12,"column_end":20},"name":"Metadata","qualname":"::Metadata","value":"Metadata {  }","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"decl_id":null,"docs":" Metadata about a log message.\n\n # Use\n\n `Metadata` structs are created when users of the library use\n logging macros.\n\n They are consumed by implementations of the `Log` trait in the\n `enabled` method.\n\n `Record`s use `Metadata` to determine the log message's severity\n and target.\n\n Users should use the `log_enabled!` macro in their code to avoid\n constructing expensive log messages.\n\n # Examples\n\n ```edition2018\n use log::{Record, Level, Metadata};\n\n struct MyLogger;\n\n impl log::Log for MyLogger {\n     fn enabled(&self, metadata: &Metadata) -> bool {\n         metadata.level() <= Level::Info\n     }\n\n     fn log(&self, record: &Record) {\n         if self.enabled(record.metadata()) {\n             println!(\"{} - {}\", record.level(), record.args());\n         }\n     }\n     fn flush(&self) {}\n }\n\n # fn main(){}\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32020,"byte_end":32027,"line_start":1064,"line_end":1064,"column_start":12,"column_end":19},"name":"builder","qualname":"<Metadata>::builder","value":"fn () -> MetadataBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new builder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":31999,"byte_end":32008,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32162,"byte_end":32167,"line_start":1070,"line_end":1070,"column_start":12,"column_end":17},"name":"level","qualname":"<Metadata>::level","value":"fn (&self) -> Level","parent":null,"children":[],"decl_id":null,"docs":" The verbosity level of the message.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32141,"byte_end":32150,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32286,"byte_end":32292,"line_start":1076,"line_end":1076,"column_start":12,"column_end":18},"name":"target","qualname":"<Metadata>::target","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" The name of the target of the directive.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32265,"byte_end":32274,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":32974,"byte_end":32989,"line_start":1098,"line_end":1098,"column_start":12,"column_end":27},"name":"MetadataBuilder","qualname":"::MetadataBuilder","value":"MetadataBuilder {  }","parent":null,"children":[{"krate":0,"index":316}],"decl_id":null,"docs":" Builder for [`Metadata`](struct.Metadata.html).\n\n Typically should only be used by log library creators or for testing and \"shim loggers\".\n The `MetadataBuilder` can set the different parameters of a `Metadata` object, and returns\n the created object when `build` is called.\n\n # Example\n\n ```edition2018\n let target = \"myApp\";\n use log::{Level, MetadataBuilder};\n let metadata = MetadataBuilder::new()\n                     .level(Level::Debug)\n                     .target(target)\n                     .build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33233,"byte_end":33236,"line_start":1110,"line_end":1110,"column_start":12,"column_end":15},"name":"new","qualname":"<MetadataBuilder>::new","value":"fn () -> MetadataBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `MetadataBuilder`.\n\n The default options are:\n\n - `level`: `Level::Info`\n - `target`: `\"\"`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33212,"byte_end":33221,"line_start":1109,"line_end":1109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33509,"byte_end":33514,"line_start":1121,"line_end":1121,"column_start":12,"column_end":17},"name":"level","qualname":"<MetadataBuilder>::level","value":"fn (&mut self, arg: Level) -> &mut MetadataBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Setter for [`level`](struct.Metadata.html#method.level).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33488,"byte_end":33497,"line_start":1120,"line_end":1120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33715,"byte_end":33721,"line_start":1128,"line_end":1128,"column_start":12,"column_end":18},"name":"target","qualname":"<MetadataBuilder>::target","value":"fn (&mut self, target: &'a str) -> &mut MetadataBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Setter for [`target`](struct.Metadata.html#method.target).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33694,"byte_end":33703,"line_start":1127,"line_end":1127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33901,"byte_end":33906,"line_start":1135,"line_end":1135,"column_start":12,"column_end":17},"name":"build","qualname":"<MetadataBuilder>::build","value":"fn (&self) -> Metadata<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Metadata` object.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33880,"byte_end":33889,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34044,"byte_end":34047,"line_start":1141,"line_end":1141,"column_start":11,"column_end":14},"name":"Log","qualname":"::Log","value":"Log: Sync + Send","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" A trait encapsulating the operations required of a logger.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34347,"byte_end":34354,"line_start":1148,"line_end":1148,"column_start":8,"column_end":15},"name":"enabled","qualname":"::Log::enabled","value":"fn (&self, metadata: &Metadata) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Determines if a log message with the specified metadata would be\n logged.\n\n This is used by the `log_enabled!` macro to allow callers to avoid\n expensive computation of log message arguments if the message would be\n discarded anyway.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34603,"byte_end":34606,"line_start":1155,"line_end":1155,"column_start":8,"column_end":11},"name":"log","qualname":"::Log::log","value":"fn (&self, record: &Record) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Logs the `Record`.\n\n Note that `enabled` is *not* necessarily called before this method.\n Implementations of `log` should perform all necessary filtering\n internally.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34678,"byte_end":34683,"line_start":1158,"line_end":1158,"column_start":8,"column_end":13},"name":"flush","qualname":"::Log::flush","value":"fn (&self) -> ()","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Flushes any buffered records.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":35054,"byte_end":35067,"line_start":1177,"line_end":1177,"column_start":8,"column_end":21},"name":"set_max_level","qualname":"::set_max_level","value":"fn (level: LevelFilter) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the global maximum log level.\n\n Generally, this should only be called by the active logging implementation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":35037,"byte_end":35046,"line_start":1176,"line_end":1176,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":35694,"byte_end":35703,"line_start":1195,"line_end":1195,"column_start":8,"column_end":17},"name":"max_level","qualname":"::max_level","value":"fn () -> LevelFilter","parent":null,"children":[],"decl_id":null,"docs":" Returns the current maximum log level.\n\n The [`log!`], [`error!`], [`warn!`], [`info!`], [`debug!`], and [`trace!`] macros check\n this value and discard any message logged at a higher level. The maximum\n log level is set by the [`set_max_level`] function.\n\n [`log!`]: macro.log.html\n [`error!`]: macro.error.html\n [`warn!`]: macro.warn.html\n [`info!`]: macro.info.html\n [`debug!`]: macro.debug.html\n [`trace!`]: macro.trace.html\n [`set_max_level`]: fn.set_max_level.html\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":35669,"byte_end":35686,"line_start":1194,"line_end":1194,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":37972,"byte_end":37982,"line_start":1271,"line_end":1271,"column_start":8,"column_end":18},"name":"set_logger","qualname":"::set_logger","value":"fn (logger: &'static Log) -> Result<(), SetLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" Sets the global logger to a `&'static Log`.\n\n This function may only be called once in the lifetime of a program. Any log\n events that occur before the call to `set_logger` completes will be ignored.\n\n This function does not typically need to be called manually. Logger\n implementations should provide an initialization method that installs the\n logger internally.\n\n # Availability\n\n This method is available even when the `std` feature is disabled. However,\n it is currently unavailable on `thumbv6` targets, which lack support for\n some atomic operations which are used by this function. Even on those\n targets, [`set_logger_racy`] will be available.\n\n # Errors\n\n An error is returned if a logger has already been set.\n\n # Examples\n\n ```edition2018\n use log::{error, info, warn, Record, Level, Metadata, LevelFilter};\n\n static MY_LOGGER: MyLogger = MyLogger;\n\n struct MyLogger;\n\n impl log::Log for MyLogger {\n     fn enabled(&self, metadata: &Metadata) -> bool {\n         metadata.level() <= Level::Info\n     }\n\n     fn log(&self, record: &Record) {\n         if self.enabled(record.metadata()) {\n             println!(\"{} - {}\", record.level(), record.args());\n         }\n     }\n     fn flush(&self) {}\n }\n\n # fn main(){\n log::set_logger(&MY_LOGGER).unwrap();\n log::set_max_level(LevelFilter::Info);\n\n info!(\"hello log\");\n warn!(\"warning\");\n error!(\"oops\");\n # }\n ```\n\n [`set_logger_racy`]: fn.set_logger_racy.html\n","sig":null,"attributes":[{"value":"cfg(atomic_cas)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":37946,"byte_end":37964,"line_start":1270,"line_end":1270,"column_start":1,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":39406,"byte_end":39421,"line_start":1315,"line_end":1315,"column_start":15,"column_end":30},"name":"set_logger_racy","qualname":"::set_logger_racy","value":"fn (logger: &'static Log) -> Result<(), SetLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" A thread-unsafe version of [`set_logger`].\n\n This function is available on all platforms, even those that do not have\n support for atomics that is needed by [`set_logger`].\n\n In almost all cases, [`set_logger`] should be preferred.\n\n # Safety\n\n This function is only safe to call when no other logger initialization\n function is called while this function still executes.\n\n This can be upheld by (for example) making sure that **there are no other\n threads**, and (on embedded) that **interrupts are disabled**.\n\n It is safe to use other logging functions while this function runs\n (including all logging macros).\n\n [`set_logger`]: fn.set_logger.html\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40122,"byte_end":40136,"line_start":1335,"line_end":1335,"column_start":12,"column_end":26},"name":"SetLoggerError","qualname":"::SetLoggerError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type returned by [`set_logger`] if [`set_logger`] has already been called.\n\n [`set_logger`]: fn.set_logger.html\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40055,"byte_end":40093,"line_start":1333,"line_end":1333,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40734,"byte_end":40749,"line_start":1356,"line_end":1356,"column_start":12,"column_end":27},"name":"ParseLevelError","qualname":"::ParseLevelError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type returned by [`from_str`] when the string doesn't match any of the log levels.\n\n [`from_str`]: https://doc.rust-lang.org/std/str/trait.FromStr.html#tymethod.from_str\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40656,"byte_end":40694,"line_start":1354,"line_end":1354,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":41209,"byte_end":41215,"line_start":1375,"line_end":1375,"column_start":8,"column_end":14},"name":"logger","qualname":"::logger","value":"fn () -> &'static Log","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the logger.\n\n If a logger has not been set, a no-op implementation is returned.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":41539,"byte_end":41556,"line_start":1388,"line_end":1388,"column_start":8,"column_end":25},"name":"__private_api_log","qualname":"::__private_api_log","value":"fn (args: fmt::Arguments, level: Level, &(target, module_path, file, line): &(&str, &'static str, &'static str, u32)) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":42075,"byte_end":42096,"line_start":1407,"line_end":1407,"column_start":8,"column_end":29},"name":"__private_api_enabled","qualname":"::__private_api_enabled","value":"fn (level: Level, target: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":42605,"byte_end":42621,"line_start":1420,"line_end":1420,"column_start":11,"column_end":27},"name":"STATIC_MAX_LEVEL","qualname":"::STATIC_MAX_LEVEL","value":"LevelFilter","parent":null,"children":[],"decl_id":null,"docs":" The statically resolved maximum log level.\n\n See the crate level documentation for information on how to configure this.\n\n This value is checked by the log macros, but not by the `Log`ger returned by\n the [`logger`] function. Code that manually calls functions on that value\n should compare the level against this value.\n\n [`logger`]: fn.logger.html\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13284,"byte_end":13289,"line_start":362,"line_end":362,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13379,"byte_end":13384,"line_start":369,"line_end":369,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13526,"byte_end":13531,"line_start":376,"line_end":376,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13667,"byte_end":13672,"line_start":383,"line_end":383,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":14249,"byte_end":14254,"line_start":410,"line_end":410,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":14866,"byte_end":14871,"line_start":437,"line_end":437,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":15599,"byte_end":15604,"line_start":470,"line_end":470,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16063,"byte_end":16068,"line_start":486,"line_end":486,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16195,"byte_end":16200,"line_start":492,"line_end":492,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17639,"byte_end":17650,"line_start":544,"line_end":544,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17746,"byte_end":17757,"line_start":551,"line_end":551,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17899,"byte_end":17910,"line_start":558,"line_end":558,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":18021,"byte_end":18032,"line_start":565,"line_end":565,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":18633,"byte_end":18644,"line_start":592,"line_end":592,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19226,"byte_end":19237,"line_start":619,"line_end":619,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19387,"byte_end":19398,"line_start":626,"line_end":626,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19771,"byte_end":19782,"line_start":639,"line_end":639,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19909,"byte_end":19920,"line_start":645,"line_end":645,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20805,"byte_end":20819,"line_start":678,"line_end":678,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23240,"byte_end":23246,"line_start":761,"line_end":761,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":27069,"byte_end":27082,"line_start":900,"line_end":900,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":31949,"byte_end":31957,"line_start":1061,"line_end":1061,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33036,"byte_end":33051,"line_start":1102,"line_end":1102,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34776,"byte_end":34785,"line_start":1164,"line_end":1164,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40165,"byte_end":40179,"line_start":1337,"line_end":1337,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40778,"byte_end":40793,"line_start":1358,"line_end":1358,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13284,"byte_end":13289,"line_start":362,"line_end":362,"column_start":16,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13379,"byte_end":13384,"line_start":369,"line_end":369,"column_start":20,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13526,"byte_end":13531,"line_start":376,"line_end":376,"column_start":33,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":13667,"byte_end":13672,"line_start":383,"line_end":383,"column_start":21,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":14249,"byte_end":14254,"line_start":410,"line_end":410,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":14866,"byte_end":14871,"line_start":437,"line_end":437,"column_start":14,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":15599,"byte_end":15604,"line_start":470,"line_end":470,"column_start":18,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16063,"byte_end":16068,"line_start":486,"line_end":486,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":172},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":16195,"byte_end":16200,"line_start":492,"line_end":492,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17639,"byte_end":17650,"line_start":544,"line_end":544,"column_start":16,"column_end":27},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17746,"byte_end":17757,"line_start":551,"line_end":551,"column_start":20,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":17899,"byte_end":17910,"line_start":558,"line_end":558,"column_start":27,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":18021,"byte_end":18032,"line_start":565,"line_end":565,"column_start":21,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":18633,"byte_end":18644,"line_start":592,"line_end":592,"column_start":28,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19226,"byte_end":19237,"line_start":619,"line_end":619,"column_start":14,"column_end":25},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19387,"byte_end":19398,"line_start":626,"line_end":626,"column_start":18,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19771,"byte_end":19782,"line_start":639,"line_end":639,"column_start":23,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":193},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":19909,"byte_end":19920,"line_start":645,"line_end":645,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":20805,"byte_end":20819,"line_start":678,"line_end":678,"column_start":10,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":23240,"byte_end":23246,"line_start":761,"line_end":761,"column_start":10,"column_end":16},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":27069,"byte_end":27082,"line_start":900,"line_end":900,"column_start":10,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":31949,"byte_end":31957,"line_start":1061,"line_end":1061,"column_start":10,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":33036,"byte_end":33051,"line_start":1102,"line_end":1102,"column_start":10,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34049,"byte_end":34053,"line_start":1141,"line_end":1141,"column_start":16,"column_end":20},"kind":"SuperTrait","from":{"krate":1,"index":1545},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34056,"byte_end":34060,"line_start":1141,"line_end":1141,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1533},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":34776,"byte_end":34785,"line_start":1164,"line_end":1164,"column_start":14,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":150},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40165,"byte_end":40179,"line_start":1337,"line_end":1337,"column_start":23,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":345},"to":{"krate":1,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\log-0.4.8\\src\\lib.rs","byte_start":40778,"byte_end":40793,"line_start":1358,"line_end":1358,"column_start":23,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":7648}}]}