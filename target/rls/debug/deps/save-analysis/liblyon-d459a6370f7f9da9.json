{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","lyon","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=d459a6370f7f9da9","-C","extra-filename=-d459a6370f7f9da9","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","lyon_algorithms=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblyon_algorithms-ec307837fc502e0b.rmeta","--extern","lyon_tessellation=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblyon_tessellation-2cf8ea4a1489bfb0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblyon-d459a6370f7f9da9.rmeta"},"prelude":{"crate_id":{"name":"lyon","disambiguator":[2744628983998582431,14695677922948676284]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":14,"id":{"name":"lyon_tessellation","disambiguator":[16927292829540289716,6731632816487224875]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":15,"id":{"name":"lyon_path","disambiguator":[14521207248195005301,162724875684881191]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":16,"id":{"name":"lyon_geom","disambiguator":[15123603427974237702,3747293651749214319]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":17,"id":{"name":"arrayvec","disambiguator":[6543394233664560307,17017585260114543812]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":18,"id":{"name":"nodrop","disambiguator":[7097596393523900264,609746783444761983]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":19,"id":{"name":"euclid","disambiguator":[9525940361148060044,17885180548363695299]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":20,"id":{"name":"euclid_macros","disambiguator":[150743972626710930,4136147709705277968]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":21,"id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":22,"id":{"name":"sid","disambiguator":[7163981330326782570,14415787358602885422]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":23,"id":{"name":"num_traits","disambiguator":[6959461680647196380,5219630384215551167]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","num":24,"id":{"name":"lyon_algorithms","disambiguator":[16372705018460717159,10355087572174144479]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":0,"byte_end":8324,"line_start":1,"line_end":194,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":7996,"byte_end":8013,"line_start":186,"line_end":186,"column_start":9,"column_end":26},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8017,"byte_end":8029,"line_start":186,"line_end":186,"column_start":30,"column_end":42},"name":"tessellation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8039,"byte_end":8054,"line_start":187,"line_end":187,"column_start":9,"column_end":24},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8058,"byte_end":8068,"line_start":187,"line_end":187,"column_start":28,"column_end":38},"name":"algorithms","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8092,"byte_end":8096,"line_start":188,"line_end":188,"column_start":23,"column_end":27},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8100,"byte_end":8104,"line_start":188,"line_end":188,"column_start":31,"column_end":35},"name":"path","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8128,"byte_end":8132,"line_start":189,"line_end":189,"column_start":23,"column_end":27},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8136,"byte_end":8140,"line_start":189,"line_end":189,"column_start":31,"column_end":35},"name":"geom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":912},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":8319,"byte_end":8323,"line_start":194,"line_end":194,"column_start":15,"column_end":19},"alias_span":null,"name":"math","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":0,"byte_end":8324,"line_start":1,"line_end":194,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9}],"decl_id":null,"docs":" GPU-based 2D graphics rendering tools in Rust using path tessellation.\n\n ![logo](https://nical.github.io/lyon-doc/lyon-logo.svg)\n\n [![crate](http://meritbadge.herokuapp.com/lyon)](https://crates.io/crates/lyon)\n [![ci](https://img.shields.io/travis/nical/lyon/master.svg)](https://travis-ci.org/nical/lyon)\n\n # Crates\n\n This meta-crate (`lyon`) reexports the following sub-crates for convenience:\n\n * [![crate](http://meritbadge.herokuapp.com/lyon_tessellation)](https://crates.io/crates/lyon_tessellation)\n   [![doc](https://docs.rs/lyon_tessellation/badge.svg)](https://docs.rs/lyon_tessellation) -\n   **lyon_tessellation** - Path tessellation routines.\n * [![crate](http://meritbadge.herokuapp.com/lyon_path)](https://crates.io/crates/lyon_path)\n   [![doc](https://docs.rs/lyon_path/badge.svg)](https://docs.rs/lyon_path) -\n   **lyon_path** - Tools to build and iterate over paths.\n * [![crate](http://meritbadge.herokuapp.com/lyon_algorithms)](https://crates.io/crates/lyon_algorithms)\n   [![doc](https://docs.rs/lyon_algorithms/badge.svg)](https://docs.rs/lyon_algorithms) -\n   **lyon_algorithms** - Various 2d path related algorithms.\n * [![crate](http://meritbadge.herokuapp.com/lyon_geom)](https://crates.io/crates/lyon_geom)\n   [![doc](https://docs.rs/lyon_geom/badge.svg)](https://docs.rs/lyon_geom) -\n   **lyon_geom** - 2d utilities for cubic and quadratic bézier curves, arcs and more.\n * [![crate](http://meritbadge.herokuapp.com/lyon_svg)](https://crates.io/crates/lyon_svg)\n   [![doc](https://docs.rs/lyon_svg/badge.svg)](https://docs.rs/lyon_svg) -\n   **lyon_svg** - Create paths using SVG's path syntax.\n * [![crate](http://meritbadge.herokuapp.com/lyon_extra)](https://crates.io/crates/lyon_extra)\n   [![doc](https://docs.rs/lyon_extra/badge.svg)](https://docs.rs/lyon_extra) -\n   **lyon_extra** - Additional testing and debugging tools.\n * [![crate](http://meritbadge.herokuapp.com/lyon_tess2)](https://crates.io/crates/lyon_tess2)\n   [![doc](https://docs.rs/lyon_tess2/badge.svg)](https://docs.rs/lyon_tess2) -\n   **lyon_tess2** - Alternative fill tessellation implementation using [libtess2](https://github.com/memononen/libtess2).\n\n Each `lyon_<name>` crate is reexported as a `<name>` module in `lyon`. For example:\n\n ```ignore\n extern crate lyon_tessellation;\n use lyon_tessellation::FillTessellator;\n ```\n\n Is equivalent to:\n\n ```ignore\n extern crate lyon;\n use lyon::tessellation::FillTessellator;\n ```\n\n # Feature flags\n\n serialization using serde can be enabled on each crate using the\n `serialization` feature flag (disabled by default).\n\n When using the main crate `lyon`, the `lyon_svg`, `lyon_tess2` and\n `lyon_extra` dependencies are disabled by default. They can be added\n with the feature flags `svg`, `tess2` and `extra`.\n\n # Additional documentation and links\n\n * [very basic gfx-rs example](https://github.com/nical/lyon/tree/master/examples/gfx_basic).\n * [advanced gfx-rs example](https://github.com/nical/lyon/tree/master/examples/gfx_advanced).\n * There is some useful documentation on the project's [wiki](https://github.com/nical/lyon/wiki).\n * The source code is available on the project's [git repository](https://github.com/nical/lyon).\n * Interested in contributing? Pull requests are welcome. If you would like to help but don't know\n   what to do specifically, have a look at the [github issues](https://github.com/nical/lyon/issues),\n   some of which are tagged as [easy](https://github.com/nical/lyon/issues?q=is%3Aissue+is%3Aopen+label%3Aeasy).\n\n # Examples\n\n ## Tessellating a rounded rectangle\n\n The `lyon_tessellation` crate provides a collection of tessellation routines\n for common shapes such as rectangles and circles. Let's have a look at how\n to obtain the fill tessellation a rectangle with rounded corners:\n\n ```\n use lyon::math::rect;\n use lyon::tessellation::{VertexBuffers, FillOptions, FillVertex};\n use lyon::tessellation::basic_shapes::*;\n use lyon::tessellation::geometry_builder::simple_builder;\n\n fn main() {\n     let mut geometry: VertexBuffers<FillVertex, u16> = VertexBuffers::new();\n\n     let options = FillOptions::tolerance(0.1);\n\n     fill_rounded_rectangle(\n         &rect(0.0, 0.0, 100.0, 50.0),\n         &BorderRadii {\n             top_left: 10.0,\n             top_right: 5.0,\n             bottom_left: 20.0,\n             bottom_right: 25.0,\n         },\n         &options,\n         &mut simple_builder(&mut geometry),\n     );\n\n     // The tessellated geometry is ready to be uploaded to the GPU.\n     println!(\" -- {} vertices {} indices\",\n         geometry.vertices.len(),\n         geometry.indices.len()\n     );\n }\n\n ```\n\n ## Building and tessellating an arbitrary path\n\n ```\n extern crate lyon;\n use lyon::math::point;\n use lyon::path::Path;\n use lyon::path::builder::*;\n use lyon::tessellation::*;\n\n fn main() {\n     // Build a Path.\n     let mut builder = Path::builder();\n     builder.move_to(point(0.0, 0.0));\n     builder.line_to(point(1.0, 0.0));\n     builder.quadratic_bezier_to(point(2.0, 0.0), point(2.0, 1.0));\n     builder.cubic_bezier_to(point(1.0, 1.0), point(0.0, 1.0), point(0.0, 0.0));\n     builder.close();\n     let path = builder.build();\n\n     // Let's use our own custom vertex type instead of the default one.\n     #[derive(Copy, Clone, Debug)]\n     struct MyVertex { position: [f32; 2], normal: [f32; 2] };\n\n     // Will contain the result of the tessellation.\n     let mut geometry: VertexBuffers<MyVertex, u16> = VertexBuffers::new();\n\n     let mut tessellator = FillTessellator::new();\n\n     {\n         // Compute the tessellation.\n         tessellator.tessellate_path(\n             &path,\n             &FillOptions::default(),\n             &mut BuffersBuilder::new(&mut geometry, |vertex : FillVertex| {\n                 MyVertex {\n                     position: vertex.position.to_array(),\n                     normal: vertex.normal.to_array(),\n                 }\n             }),\n         ).unwrap();\n     }\n\n     // The tessellated geometry is ready to be uploaded to the GPU.\n     println!(\" -- {} vertices {} indices\",\n         geometry.vertices.len(),\n         geometry.indices.len()\n     );\n }\n ```\n\n ## What is the tolerance variable in these examples?\n\n The tessellator operates on flattened paths (that only contains line segments)\n so we have to approximate the curves segments with sequences of line segments.\n To do so we pick a tolerance threshold which is the maximum distance allowed\n between the curve and its approximation.\n The documentation of the [lyon_geom](https://docs.rs/lyon_geom) crate provides\n more detailed explanations about this tolerance parameter.\n\n ## Rendering the tessellated geometry\n\n Lyon does not provide with any GPU abstraction or rendering backend (for now).\n It is up to the user of this crate to decide whether to use OpenGL, vulkan, gfx-rs,\n glium, or any low level graphics API and how to render it.\n The [basic](https://github.com/nical/lyon/tree/master/examples/gfx_basic) and\n [advanced](https://github.com/nical/lyon/tree/master/examples/gfx_advanced) gfx-rs\n examples can be used to get an idea of how to render the geometry (in this case\n using gfx-rs).\n\n","sig":null,"attributes":[{"value":"deny(bare_trait_objects)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lyon-0.13.5\\src/lib.rs","byte_start":74,"byte_end":102,"line_start":2,"line_end":2,"column_start":1,"column_end":29}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}