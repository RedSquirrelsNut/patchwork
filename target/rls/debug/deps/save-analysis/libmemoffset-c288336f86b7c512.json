{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","memoffset","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=c288336f86b7c512","-C","extra-filename=-c288336f86b7c512","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","memoffset_maybe_uninit","--cfg","memoffset_doctests","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libmemoffset-c288336f86b7c512.rmeta"},"prelude":{"crate_id":{"name":"memoffset","disambiguator":[16489986462602757596,1492316565336062603]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","byte_start":1111,"byte_end":2635,"line_start":21,"line_end":80,"column_start":1,"column_end":13}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":1102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","byte_start":2541,"byte_end":2544,"line_start":72,"line_end":72,"column_start":15,"column_end":18},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":1225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","byte_start":2576,"byte_end":2579,"line_start":75,"line_end":75,"column_start":15,"column_end":18},"alias_span":null,"name":"ptr","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","byte_start":1111,"byte_end":2635,"line_start":21,"line_end":80,"column_start":1,"column_end":13},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10}],"decl_id":null,"docs":" A crate used for calculating offsets of struct members and their spans.\n\n This functionality currently can not be used in compile time code such as `const` or `const fn` definitions.\n\n ## Examples\n ```\n #[macro_use]\n extern crate memoffset;\n\n #[repr(C, packed)]\n struct HelpMeIAmTrappedInAStructFactory {\n     help_me_before_they_: [u8; 15],\n     a: u32\n }\n\n fn main() {\n     assert_eq!(offset_of!(HelpMeIAmTrappedInAStructFactory, a), 15);\n     assert_eq!(span_of!(HelpMeIAmTrappedInAStructFactory, a), 15..19);\n     assert_eq!(span_of!(HelpMeIAmTrappedInAStructFactory, help_me_before_they_ .. a), 0..15);\n }\n ```\n\n This functionality can be useful, for example, for checksum calculations:\n\n ```ignore\n #[repr(C, packed)]\n struct Message {\n     header: MessageHeader,\n     fragment_index: u32,\n     fragment_count: u32,\n     payload: [u8; 1024],\n     checksum: u16\n }\n\n let checksum_range = &raw[span_of!(Message, header..checksum)];\n let checksum = crc16(checksum_range);\n ```\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\memoffset-0.5.3\\src\\lib.rs","byte_start":2204,"byte_end":2214,"line_start":59,"line_end":59,"column_start":1,"column_end":11}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}