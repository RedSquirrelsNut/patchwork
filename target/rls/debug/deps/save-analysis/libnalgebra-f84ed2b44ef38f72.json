{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","nalgebra","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"matrixmultiply\"","--cfg","feature=\"mint\"","--cfg","feature=\"rand_distr\"","--cfg","feature=\"std\"","-C","metadata=f84ed2b44ef38f72","-C","extra-filename=-f84ed2b44ef38f72","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","alga=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libalga-566aeb88f080ae3a.rmeta","--extern","approx=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libapprox-fcc8137a9062fedc.rmeta","--extern","generic_array=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libgeneric_array-fcbebcecad6307f9.rmeta","--extern","matrixmultiply=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libmatrixmultiply-455abe97f1a598e5.rmeta","--extern","mint=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libmint-dfb83d170328332a.rmeta","--extern","num_complex=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_complex-c567149d97eb4c47.rmeta","--extern","num_rational=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_rational-217fde7fdb02c161.rmeta","--extern","num_traits=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_traits-06e054c4c95d48c0.rmeta","--extern","rand=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand-cc693640ecde827f.rmeta","--extern","rand_distr=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_distr-53e4791cf19cff94.rmeta","--extern","typenum=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libtypenum-2b62f88af3d35d4c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnalgebra-f84ed2b44ef38f72.rmeta"},"prelude":{"crate_id":{"name":"nalgebra","disambiguator":[11699261964835491060,14146665074139438732]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":14,"id":{"name":"mint","disambiguator":[16016546320826219160,4412486244430327654]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":15,"id":{"name":"approx","disambiguator":[8203426696814416008,11700430433253579810]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":16,"id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":17,"id":{"name":"generic_array","disambiguator":[18023000605358026641,11151959693814071701]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":18,"id":{"name":"typenum","disambiguator":[5806260238053524433,8448313915306359665]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":19,"id":{"name":"matrixmultiply","disambiguator":[15200233628962781980,3207925793241972478]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":20,"id":{"name":"rawpointer","disambiguator":[8840432607330281005,18290075967513503684]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":21,"id":{"name":"num_complex","disambiguator":[5262289262877511432,13900178487251520355]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":22,"id":{"name":"num_rational","disambiguator":[15863994761067920867,5154642504162158822]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":23,"id":{"name":"num_integer","disambiguator":[3873470759457277054,11692439525196161537]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":24,"id":{"name":"rand","disambiguator":[8438396397274912183,3892782495060900242]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":25,"id":{"name":"rand_core","disambiguator":[17016881835859474259,11394802712639798332]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":26,"id":{"name":"getrandom","disambiguator":[41322740403071273,6117145283354986736]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":27,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":28,"id":{"name":"rand_chacha","disambiguator":[9783816951699179602,17772320859214680796]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":29,"id":{"name":"c2_chacha","disambiguator":[13937665862365590726,1406290536078948306]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":30,"id":{"name":"ppv_lite86","disambiguator":[7143213747247628097,14013417676120819252]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":31,"id":{"name":"rand_distr","disambiguator":[2147741424370936477,17765735736464903689]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","num":32,"id":{"name":"alga","disambiguator":[16037863431148245680,3323900524414736076]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":0,"byte_end":20130,"line_start":1,"line_end":730,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"VectorSum, Vector, SquareMatrix, RowVector, Matrix, MatrixSum","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Scalar","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Unit","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Norm","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"DefaultAllocator","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"DimName, DimSub, DimDiff, Dim, Dynamic, U1","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"DMatrix, Vector2, MatrixMN, Matrix2, Vector4, Vector1, MatrixN, Matrix4, Vector3, Matrix2x3, VectorN, RowVectorN, Matrix3","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"MatrixSliceMutMN, VectorSliceN, MatrixSliceMN, DVectorSlice","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"ArrayStorage","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"MatrixSlice, SliceStorageMut, SliceStorage, MatrixSliceMut","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20793,"byte_end":20794,"line_start":38,"line_end":38,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"VecStorage","parent":{"krate":0,"index":14}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Point","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Point2, Point3","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Rotation","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Rotation2, Rotation3","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Quaternion, UnitQuaternion","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"UnitComplex","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Translation","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Translation2, Translation3","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Isometry","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"IsometryMatrix3","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Similarity","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Transform, TProjective, SubTCategoryOf, SuperTCategoryOf, TGeneral, TCategoryMul, TAffine, TCategory","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Projective3","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":485983,"byte_end":485984,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Reflection","parent":{"krate":0,"index":3787}},{"kind":"Use","ref_id":{"krate":0,"index":6912},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":486454,"byte_end":486467,"line_start":95,"line_end":95,"column_start":29,"column_end":42},"alias_span":null,"name":"Orthographic3","value":"","parent":{"krate":0,"index":3787}},{"kind":"Use","ref_id":{"krate":0,"index":6986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":486496,"byte_end":486508,"line_start":96,"line_end":96,"column_start":28,"column_end":40},"alias_span":null,"name":"Perspective3","value":"","parent":{"krate":0,"index":3787}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"Bidiagonal","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"Hessenberg","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"LU","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"PermutationSequence","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"SymmetricTridiagonal","parent":{"krate":0,"index":7051}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988333,"byte_end":988334,"line_start":26,"line_end":26,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":7051}},{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4652,"byte_end":4656,"line_start":148,"line_end":148,"column_start":9,"column_end":13},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4660,"byte_end":4664,"line_start":148,"line_end":148,"column_start":17,"column_end":21},"name":"core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4687,"byte_end":4688,"line_start":149,"line_end":149,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"storage, Scalar, DefaultAllocator, U1, Vector, allocator, constraint, dimension, Norm, VectorSliceN, RowVectorN, Matrix, Dim, VectorN","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4687,"byte_end":4688,"line_start":149,"line_end":149,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4687,"byte_end":4688,"line_start":149,"line_end":149,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":1292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5175,"byte_end":5177,"line_start":165,"line_end":165,"column_start":25,"column_end":27},"alias_span":null,"name":"Id","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":501},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5179,"byte_end":5188,"line_start":165,"line_end":165,"column_start":29,"column_end":38},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5190,"byte_end":5202,"line_start":165,"line_end":165,"column_start":40,"column_end":52},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":734},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5249,"byte_end":5253,"line_start":167,"line_end":167,"column_start":24,"column_end":28},"alias_span":null,"name":"Real","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":471},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5276,"byte_end":5283,"line_start":168,"line_end":168,"column_start":22,"column_end":29},"alias_span":null,"name":"Complex","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":0,"byte_end":20130,"line_start":1,"line_end":730,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":3787},{"krate":0,"index":7051},{"krate":0,"index":7906},{"krate":0,"index":7907},{"krate":0,"index":7908},{"krate":0,"index":7909},{"krate":0,"index":7910},{"krate":0,"index":7914},{"krate":0,"index":7924},{"krate":0,"index":7925},{"krate":0,"index":7930},{"krate":0,"index":7931},{"krate":0,"index":7935},{"krate":0,"index":7936},{"krate":0,"index":7937},{"krate":0,"index":7938},{"krate":0,"index":7940},{"krate":0,"index":7942},{"krate":0,"index":7944},{"krate":0,"index":7946},{"krate":0,"index":7948},{"krate":0,"index":7950},{"krate":0,"index":7952},{"krate":0,"index":7954},{"krate":0,"index":7956},{"krate":0,"index":7958},{"krate":0,"index":7960},{"krate":0,"index":7962},{"krate":0,"index":7964},{"krate":0,"index":7966},{"krate":0,"index":7968},{"krate":0,"index":7970},{"krate":0,"index":7972},{"krate":0,"index":7975},{"krate":0,"index":7978},{"krate":0,"index":7981},{"krate":0,"index":7984},{"krate":0,"index":7986},{"krate":0,"index":7988},{"krate":0,"index":7990},{"krate":0,"index":7992},{"krate":0,"index":7994},{"krate":0,"index":7996},{"krate":0,"index":7998},{"krate":0,"index":8000},{"krate":0,"index":8002},{"krate":0,"index":8004},{"krate":0,"index":8006},{"krate":0,"index":8008},{"krate":0,"index":8010},{"krate":0,"index":8013},{"krate":0,"index":8016},{"krate":0,"index":8019},{"krate":0,"index":8022},{"krate":0,"index":8025},{"krate":0,"index":8028}],"decl_id":null,"docs":"# nalgebra\n\n**nalgebra** is a linear algebra library written for Rust targeting:\n\n* General-purpose linear algebra (still lacks a lot of features…)\n* Real-time computer graphics.\n* Real-time computer physics.\n\n## Using **nalgebra**\nYou will need the last stable build of the [rust compiler](https://www.rust-lang.org)\nand the official package manager: [cargo](https://github.com/rust-lang/cargo).\n\nSimply add the following to your `Cargo.toml` file:\n\n```.ignore\n[dependencies]\nnalgebra = \"0.18\"\n```\n\n\nMost useful functionalities of **nalgebra** are grouped in the root module `nalgebra::`.\n\nHowever, the recommended way to use **nalgebra** is to import types and traits\nexplicitly, and call free-functions using the `na::` prefix:\n\n```.rust\n#[macro_use]\nextern crate approx; // For the macro relative_eq!\nextern crate nalgebra as na;\nuse na::{Vector3, Rotation3};\n\nfn main() {\n    let axis  = Vector3::x_axis();\n    let angle = 1.57;\n    let b     = Rotation3::from_axis_angle(&axis, angle);\n\n    relative_eq!(b.axis().unwrap(), axis);\n    relative_eq!(b.angle(), angle);\n}\n```\n\n\n## Features\n**nalgebra** is meant to be a general-purpose, low-dimensional, linear algebra library, with\nan optimized set of tools for computer graphics and physics. Those features include:\n\n* A single parametrizable type `Matrix` for vectors, (square or rectangular) matrices, and slices\n  with dimensions known either at compile-time (using type-level integers) or at runtime.\n* Matrices and vectors with compile-time sizes are statically allocated while dynamic ones are\n  allocated on the heap.\n* Convenient aliases for low-dimensional matrices and vectors: `Vector1` to `Vector6` and\n  `Matrix1x1` to `Matrix6x6`, including rectangular matrices like `Matrix2x5`.\n* Points sizes known at compile time, and convenience aliases:: `Point1` to `Point6`.\n* Translation (seen as a transformation that composes by multiplication): `Translation2`,\n  `Translation3`.\n* Rotation matrices: `Rotation2`, `Rotation3`.\n* Quaternions: `Quaternion`, `UnitQuaternion` (for 3D rotation).\n* Unit complex numbers can be used for 2D rotation: `UnitComplex`.\n* Algebraic entities with a norm equal to one: `Unit<T>`, e.g., `Unit<Vector3<f32>>`.\n* Isometries (translation ⨯ rotation): `Isometry2`, `Isometry3`\n* Similarity transformations (translation ⨯ rotation ⨯ uniform scale): `Similarity2`, `Similarity3`.\n* Affine transformations stored as an homogeneous matrix: `Affine2`, `Affine3`.\n* Projective (i.e. invertible) transformations stored as an homogeneous matrix: `Projective2`,\n  `Projective3`.\n* General transformations that does not have to be invertible, stored as an homogeneous matrix:\n  `Transform2`, `Transform3`.\n* 3D projections for computer graphics: `Perspective3`, `Orthographic3`.\n* Matrix factorizations: `Cholesky`, `QR`, `LU`, `FullPivLU`, `SVD`, `Schur`, `Hessenberg`, `SymmetricEigen`.\n* Insertion and removal of rows of columns of a matrix.\n* Implements traits from the [alga](https://crates.io/crates/alga) crate for\n  generic programming.\n","sig":null,"attributes":[{"value":"deny(non_camel_case_types)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3094,"byte_end":3124,"line_start":79,"line_end":79,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3125,"byte_end":3148,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3149,"byte_end":3181,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"deny(unused_qualifications)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3182,"byte_end":3213,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"deny(unused_results)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3214,"byte_end":3238,"line_start":83,"line_end":83,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":3239,"byte_end":3261,"line_start":84,"line_end":84,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"base","qualname":"::base","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":69},{"krate":0,"index":319},{"krate":0,"index":363},{"krate":0,"index":383},{"krate":0,"index":466},{"krate":0,"index":587},{"krate":0,"index":718},{"krate":0,"index":1002},{"krate":0,"index":1070},{"krate":0,"index":1201},{"krate":0,"index":1812},{"krate":0,"index":1910},{"krate":0,"index":1950},{"krate":0,"index":2075},{"krate":0,"index":2123},{"krate":0,"index":2259},{"krate":0,"index":2415},{"krate":0,"index":2566},{"krate":0,"index":2994},{"krate":0,"index":3132},{"krate":0,"index":3236},{"krate":0,"index":3393},{"krate":0,"index":3493},{"krate":0,"index":3533},{"krate":0,"index":3542},{"krate":0,"index":3555},{"krate":0,"index":3598},{"krate":0,"index":3653},{"krate":0,"index":3765},{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3778},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3781},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3785},{"krate":0,"index":3786}],"decl_id":null,"docs":" [Reexported at the root of this crate.] Data structures for vector and matrix computations.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocator","qualname":"::base::allocator","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":36},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":65}],"decl_id":null,"docs":" Abstract definition of a matrix data storage allocator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":21859,"byte_end":21868,"line_start":19,"line_end":19,"column_start":11,"column_end":20},"name":"Allocator","qualname":"::base::allocator::Allocator","value":"Allocator<N: Scalar, R: Dim, C: Dim = U1>: Any + Sized","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"decl_id":null,"docs":" A matrix allocator of a memory buffer that may contain `R::to_usize() * C::to_usize()`\n elements of type `N`.\n\n An allocator is said to be:\n   − static:  if `R` and `C` both implement `DimName`.\n   − dynamic: if either one (or both) of `R` or `C` is equal to `Dynamic`.\n\n Every allocator must be both static and dynamic. Though not all implementations may share the\n same `Buffer` type.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":21984,"byte_end":21990,"line_start":21,"line_end":21,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::base::allocator::Allocator::Buffer","value":"type Buffer: ContiguousStorageMut<N, R, C> + Clone;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The type of buffer this allocator can instanciate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":22149,"byte_end":22171,"line_start":24,"line_end":24,"column_start":15,"column_end":37},"name":"allocate_uninitialized","qualname":"::base::allocator::Allocator::allocate_uninitialized","value":"fn (nrows: R, ncols: C) -> Self::Buffer","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Allocates a buffer with the given number of rows and columns without initializing its content.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":22296,"byte_end":22318,"line_start":27,"line_end":27,"column_start":8,"column_end":30},"name":"allocate_from_iterator","qualname":"::base::allocator::Allocator::allocate_from_iterator","value":"fn <I> (nrows: R, ncols: C, iter: I) -> Self::Buffer","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Allocates a buffer initialized with the content of the given iterator.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":22594,"byte_end":22605,"line_start":36,"line_end":36,"column_start":11,"column_end":22},"name":"Reallocator","qualname":"::base::allocator::Reallocator","value":"Reallocator<N: Scalar, RFrom: Dim, CFrom: Dim, RTo: Dim, CTo: Dim>: Allocator<N, RFrom, CFrom> + Allocator<N, RTo, CTo>","parent":null,"children":[{"krate":0,"index":42}],"decl_id":null,"docs":" A matrix reallocator. Changes the size of the memory buffer that initially contains (RFrom ×\n CFrom) elements to a smaller or larger size (RTo, CTo).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23215,"byte_end":23230,"line_start":46,"line_end":46,"column_start":15,"column_end":30},"name":"reallocate_copy","qualname":"::base::allocator::Reallocator::reallocate_copy","value":"fn (nrows: RTo, ncols: CTo, buf: <Self as Allocator<N, RFrom, CFrom>>::Buffer) -> <Self as Allocator<N, RTo, CTo>>::Buffer","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reallocates a buffer of shape `(RTo, CTo)`, possibly reusing a previously allocated buffer\n `buf`. Data stored by `buf` are linearly copied to the output:\n\n * The copy is performed as if both were just arrays (without a matrix structure).\n * If `buf` is larger than the output size, then extra elements of `buf` are truncated.\n * If `buf` is smaller than the output size, then extra elements of the output are left\n uninitialized.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23477,"byte_end":23487,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"SameShapeR","qualname":"::base::allocator::SameShapeR","value":"<ShapeConstraint as SameNumberOfRows<R1, R2>>::Representative","parent":null,"children":[],"decl_id":null,"docs":" The number of rows of the result of a componentwise operation on two matrices.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23657,"byte_end":23667,"line_start":57,"line_end":57,"column_start":10,"column_end":20},"name":"SameShapeC","qualname":"::base::allocator::SameShapeC","value":"<ShapeConstraint as SameNumberOfColumns<C1, C2>>::Representative","parent":null,"children":[],"decl_id":null,"docs":" The number of columns of the result of a componentwise operation on two matrices.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23855,"byte_end":23873,"line_start":61,"line_end":61,"column_start":11,"column_end":29},"name":"SameShapeAllocator","qualname":"::base::allocator::SameShapeAllocator","value":"SameShapeAllocator<N, R1, C1, R2, C2>: Allocator<N, R1, C1> + Allocator<N, SameShapeR<R1, R2>, SameShapeC<C1, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Restricts the given number of rows and columns to be respectively the same.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24545,"byte_end":24569,"line_start":86,"line_end":86,"column_start":11,"column_end":35},"name":"SameShapeVectorAllocator","qualname":"::base::allocator::SameShapeVectorAllocator","value":"SameShapeVectorAllocator<N, R1, R2>: Allocator<N, R1> + Allocator<N, SameShapeR<R1, R2>> +\nSameShapeAllocator<N, R1, U1, R2, U1>","parent":null,"children":[],"decl_id":null,"docs":" Restricts the given number of rows to be equal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26182,"byte_end":26188,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"icamax","qualname":"<Vector<N, D, S>>::icamax","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the vector component with the largest complex or real absolute value.\n\n # Examples:\n\n ```\n # extern crate num_complex;\n # extern crate nalgebra;\n # use num_complex::Complex;\n # use nalgebra::Vector3;\n let vec = Vector3::new(Complex::new(11.0, 3.0), Complex::new(-15.0, 0.0), Complex::new(13.0, 5.0));\n assert_eq!(vec.icamax(), 2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26161,"byte_end":26170,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26981,"byte_end":26987,"line_start":62,"line_end":62,"column_start":12,"column_end":18},"name":"argmax","qualname":"<Vector<N, D, S>>::argmax","value":"fn (&self) -> (usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Computes the index and value of the vector component with the largest value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.argmax(), (2, 13));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26960,"byte_end":26969,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":27688,"byte_end":27692,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"imax","qualname":"<Vector<N, D, S>>::imax","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the vector component with the largest value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.imax(), 2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":27667,"byte_end":27676,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":28025,"byte_end":28030,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"iamax","qualname":"<Vector<N, D, S>>::iamax","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the vector component with the largest absolute value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.iamax(), 1);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":28004,"byte_end":28013,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":28770,"byte_end":28776,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"argmin","qualname":"<Vector<N, D, S>>::argmin","value":"fn (&self) -> (usize, N)","parent":null,"children":[],"decl_id":null,"docs":" Computes the index and value of the vector component with the smallest value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.argmin(), (1, -15));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":28749,"byte_end":28758,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":29478,"byte_end":29482,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"imin","qualname":"<Vector<N, D, S>>::imin","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the vector component with the smallest value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.imin(), 1);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":29457,"byte_end":29466,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":29816,"byte_end":29821,"line_start":175,"line_end":175,"column_start":12,"column_end":17},"name":"iamin","qualname":"<Vector<N, D, S>>::iamin","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the vector component with the smallest absolute value.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let vec = Vector3::new(11, -15, 13);\n assert_eq!(vec.iamin(), 0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":29795,"byte_end":29804,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":31006,"byte_end":31017,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"icamax_full","qualname":"<Matrix<N, R, C, S>>::icamax_full","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the matrix component with the largest absolute value.\n\n # Examples:\n\n ```\n # extern crate num_complex;\n # extern crate nalgebra;\n # use num_complex::Complex;\n # use nalgebra::Matrix2x3;\n let mat = Matrix2x3::new(Complex::new(11.0, 1.0), Complex::new(-12.0, 2.0), Complex::new(13.0, 3.0),\n                          Complex::new(21.0, 43.0), Complex::new(22.0, 5.0), Complex::new(-23.0, 0.0));\n assert_eq!(mat.icamax_full(), (1, 0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":30985,"byte_end":30994,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":31989,"byte_end":31999,"line_start":245,"line_end":245,"column_start":12,"column_end":22},"name":"iamax_full","qualname":"<Matrix<N, R, C, S>>::iamax_full","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Computes the index of the matrix component with the largest absolute value.\n\n # Examples:\n\n ```\n # use nalgebra::Matrix2x3;\n let mat = Matrix2x3::new(11, -12, 13,\n                          21, 22, -23);\n assert_eq!(mat.iamax_full(), (1, 2));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":31968,"byte_end":31977,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":37714,"byte_end":37717,"line_start":393,"line_end":393,"column_start":12,"column_end":15},"name":"dot","qualname":"<Matrix<N, R, C, S>>::dot","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> N","parent":null,"children":[],"decl_id":null,"docs":" The dot product between two vectors or matrices (seen as vectors).\n\n This is equal to `self.transpose() * rhs`. For the sesquilinear complex dot product, use\n `self.dotc(rhs)`.\n\n Note that this is **not** the matrix multiplication as in, e.g., numpy. For matrix\n multiplication, use one of: `.gemm`, `.mul_to`, `.mul`, the `*` operator.\n\n # Examples:\n\n ```\n # use nalgebra::{Vector3, Matrix2x3};\n let vec1 = Vector3::new(1.0, 2.0, 3.0);\n let vec2 = Vector3::new(0.1, 0.2, 0.3);\n assert_eq!(vec1.dot(&vec2), 1.4);\n\n let mat1 = Matrix2x3::new(1.0, 2.0, 3.0,\n                           4.0, 5.0, 6.0);\n let mat2 = Matrix2x3::new(0.1, 0.2, 0.3,\n                           0.4, 0.5, 0.6);\n assert_eq!(mat1.dot(&mat2), 9.1);\n ```\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":37693,"byte_end":37702,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":38832,"byte_end":38836,"line_start":421,"line_end":421,"column_start":12,"column_end":16},"name":"dotc","qualname":"<Matrix<N, R, C, S>>::dotc","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> N","parent":null,"children":[],"decl_id":null,"docs":" The conjugate-linear dot product between two vectors or matrices (seen as vectors).\n\n This is equal to `self.adjoint() * rhs`.\n For real vectors, this is identical to `self.dot(&rhs)`.\n Note that this is **not** the matrix multiplication as in, e.g., numpy. For matrix\n multiplication, use one of: `.gemm`, `.mul_to`, `.mul`, the `*` operator.\n\n # Examples:\n\n ```\n # use nalgebra::{Vector2, Complex};\n let vec1 = Vector2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0));\n let vec2 = Vector2::new(Complex::new(0.4, 0.3), Complex::new(0.2, 0.1));\n assert_eq!(vec1.dotc(&vec2), Complex::new(2.0, -1.0));\n\n // Note that for complex vectors, we generally have:\n // vec1.dotc(&vec2) != vec2.dot(&vec2)\n assert_ne!(vec1.dotc(&vec2), vec1.dot(&vec2));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":38811,"byte_end":38820,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":39748,"byte_end":39754,"line_start":448,"line_end":448,"column_start":12,"column_end":18},"name":"tr_dot","qualname":"<Matrix<N, R, C, S>>::tr_dot","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> N","parent":null,"children":[],"decl_id":null,"docs":" The dot product between the transpose of `self` and `rhs`.\n\n # Examples:\n\n ```\n # use nalgebra::{Vector3, RowVector3, Matrix2x3, Matrix3x2};\n let vec1 = Vector3::new(1.0, 2.0, 3.0);\n let vec2 = RowVector3::new(0.1, 0.2, 0.3);\n assert_eq!(vec1.tr_dot(&vec2), 1.4);\n\n let mat1 = Matrix2x3::new(1.0, 2.0, 3.0,\n                           4.0, 5.0, 6.0);\n let mat2 = Matrix3x2::new(0.1, 0.4,\n                           0.2, 0.5,\n                           0.3, 0.6);\n assert_eq!(mat1.tr_dot(&mat2), 9.1);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":39727,"byte_end":39736,"line_start":447,"line_end":447,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":41466,"byte_end":41470,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"axpy","qualname":"<Vector<N, D, S>>::axpy","value":"fn <D2, SB> (&mut self, a: N, x: &Vector<N, D2, SB>, b: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = a * x + b * self`.\n\n If `b` is zero, `self` is never read from.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let mut vec1 = Vector3::new(1.0, 2.0, 3.0);\n let vec2 = Vector3::new(0.1, 0.2, 0.3);\n vec1.axpy(10.0, &vec2, 5.0);\n assert_eq!(vec1, Vector3::new(6.0, 12.0, 18.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":41445,"byte_end":41454,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":42622,"byte_end":42626,"line_start":546,"line_end":546,"column_start":12,"column_end":16},"name":"gemv","qualname":"<Vector<N, D, S>>::gemv","value":"fn <R2, C2, D3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a * x + beta * self`, where `a` is a matrix, `x` a vector, and\n `alpha, beta` two scalars.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2};\n let mut vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector2::new(0.1, 0.2);\n let mat = Matrix2::new(1.0, 2.0,\n                        3.0, 4.0);\n vec1.gemv(10.0, &mat, &vec2, 5.0);\n assert_eq!(vec1, Vector2::new(10.0, 21.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":42601,"byte_end":42610,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":45714,"byte_end":45723,"line_start":648,"line_end":648,"column_start":12,"column_end":21},"name":"gemv_symm","qualname":"<Vector<N, D, S>>::gemv_symm","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, a: &SquareMatrix<N, D2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a * x + beta * self`, where `a` is a **symmetric** matrix, `x` a\n vector, and `alpha, beta` two scalars. DEPRECATED: use `sygemv` instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":45600,"byte_end":45609,"line_start":646,"line_end":646,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This is renamed `sygemv` to match the original BLAS terminology.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":45614,"byte_end":45702,"line_start":647,"line_end":647,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":47312,"byte_end":47318,"line_start":692,"line_end":692,"column_start":12,"column_end":18},"name":"sygemv","qualname":"<Vector<N, D, S>>::sygemv","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, a: &SquareMatrix<N, D2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a * x + beta * self`, where `a` is a **symmetric** matrix, `x` a\n vector, and `alpha, beta` two scalars.\n\n For hermitian matrices, use `.hegemv` instead.\n If `beta` is zero, `self` is never read. If `self` is read, only its lower-triangular part\n (including the diagonal) is actually read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2};\n let mat = Matrix2::new(1.0, 2.0,\n                        2.0, 4.0);\n let mut vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector2::new(0.1, 0.2);\n vec1.sygemv(10.0, &mat, &vec2, 5.0);\n assert_eq!(vec1, Vector2::new(10.0, 20.0));\n\n\n // The matrix upper-triangular elements can be garbage because it is never\n // read by this method. Therefore, it is not necessary for the caller to\n // fill the matrix struct upper-triangle.\n let mat = Matrix2::new(1.0, 9999999.9999999,\n                        2.0, 4.0);\n let mut vec1 = Vector2::new(1.0, 2.0);\n vec1.sygemv(10.0, &mat, &vec2, 5.0);\n assert_eq!(vec1, Vector2::new(10.0, 20.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":47291,"byte_end":47300,"line_start":691,"line_end":691,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":49404,"byte_end":49410,"line_start":737,"line_end":737,"column_start":12,"column_end":18},"name":"hegemv","qualname":"<Vector<N, D, S>>::hegemv","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, a: &SquareMatrix<N, D2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a * x + beta * self`, where `a` is an **hermitian** matrix, `x` a\n vector, and `alpha, beta` two scalars.\n\n If `beta` is zero, `self` is never read. If `self` is read, only its lower-triangular part\n (including the diagonal) is actually read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2, Complex};\n let mat = Matrix2::new(Complex::new(1.0, 0.0), Complex::new(2.0, -0.1),\n                        Complex::new(2.0, 1.0), Complex::new(4.0, 0.0));\n let mut vec1 = Vector2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0));\n let vec2 = Vector2::new(Complex::new(0.1, 0.2), Complex::new(0.3, 0.4));\n vec1.sygemv(Complex::new(10.0, 20.0), &mat, &vec2, Complex::new(5.0, 15.0));\n assert_eq!(vec1, Vector2::new(Complex::new(-48.0, 44.0), Complex::new(-75.0, 110.0)));\n\n\n // The matrix upper-triangular elements can be garbage because it is never\n // read by this method. Therefore, it is not necessary for the caller to\n // fill the matrix struct upper-triangle.\n\n let mat = Matrix2::new(Complex::new(1.0, 0.0), Complex::new(99999999.9, 999999999.9),\n                        Complex::new(2.0, 1.0), Complex::new(4.0, 0.0));\n let mut vec1 = Vector2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0));\n let vec2 = Vector2::new(Complex::new(0.1, 0.2), Complex::new(0.3, 0.4));\n vec1.sygemv(Complex::new(10.0, 20.0), &mat, &vec2, Complex::new(5.0, 15.0));\n assert_eq!(vec1, Vector2::new(Complex::new(-48.0, 44.0), Complex::new(-75.0, 110.0)));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":49383,"byte_end":49392,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":51599,"byte_end":51606,"line_start":813,"line_end":813,"column_start":12,"column_end":19},"name":"gemv_tr","qualname":"<Vector<N, D, S>>::gemv_tr","value":"fn <R2, C2, D3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a.transpose() * x + beta * self`, where `a` is a matrix, `x` a vector, and\n `alpha, beta` two scalars.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2};\n let mat = Matrix2::new(1.0, 3.0,\n                        2.0, 4.0);\n let mut vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector2::new(0.1, 0.2);\n let expected = mat.transpose() * vec2 * 10.0 + vec1 * 5.0;\n\n vec1.gemv_tr(10.0, &mat, &vec2, 5.0);\n assert_eq!(vec1, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":51578,"byte_end":51587,"line_start":812,"line_end":812,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":52949,"byte_end":52956,"line_start":848,"line_end":848,"column_start":12,"column_end":19},"name":"gemv_ad","qualname":"<Vector<N, D, S>>::gemv_ad","value":"fn <R2, C2, D3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, x: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a.adjoint() * x + beta * self`, where `a` is a matrix, `x` a vector, and\n `alpha, beta` two scalars.\n\n For real matrices, this is the same as `.gemv_tr`.\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2, Complex};\n let mat = Matrix2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0),\n                        Complex::new(5.0, 6.0), Complex::new(7.0, 8.0));\n let mut vec1 = Vector2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0));\n let vec2 = Vector2::new(Complex::new(0.1, 0.2), Complex::new(0.3, 0.4));\n let expected = mat.adjoint() * vec2 * Complex::new(10.0, 20.0) + vec1 * Complex::new(5.0, 15.0);\n\n vec1.gemv_ad(Complex::new(10.0, 20.0), &mat, &vec2, Complex::new(5.0, 15.0));\n assert_eq!(vec1, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":52928,"byte_end":52937,"line_start":847,"line_end":847,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":54824,"byte_end":54827,"line_start":914,"line_end":914,"column_start":12,"column_end":15},"name":"ger","qualname":"<Matrix<N, R1, C1, S>>::ger","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, x: &Vector<N, D2, SB>, y: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * x * y.transpose() + beta * self`.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2x3, Vector2, Vector3};\n let mut mat = Matrix2x3::repeat(4.0);\n let vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector3::new(0.1, 0.2, 0.3);\n let expected = vec1 * vec2.transpose() * 10.0 + mat * 5.0;\n\n mat.ger(10.0, &vec1, &vec2, 5.0);\n assert_eq!(mat, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":54803,"byte_end":54812,"line_start":913,"line_end":913,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":55965,"byte_end":55969,"line_start":947,"line_end":947,"column_start":12,"column_end":16},"name":"gerc","qualname":"<Matrix<N, R1, C1, S>>::gerc","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, x: &Vector<N, D2, SB>, y: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * x * y.adjoint() + beta * self`.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix2x3, Vector2, Vector3, Complex};\n let mut mat = Matrix2x3::repeat(Complex::new(4.0, 5.0));\n let vec1 = Vector2::new(Complex::new(1.0, 2.0), Complex::new(3.0, 4.0));\n let vec2 = Vector3::new(Complex::new(0.6, 0.5), Complex::new(0.4, 0.5), Complex::new(0.2, 0.1));\n let expected = vec1 * vec2.adjoint() * Complex::new(10.0, 20.0) + mat * Complex::new(5.0, 15.0);\n\n mat.gerc(Complex::new(10.0, 20.0), &vec1, &vec2, Complex::new(5.0, 15.0));\n assert_eq!(mat, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":55944,"byte_end":55953,"line_start":946,"line_end":946,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":57170,"byte_end":57174,"line_start":984,"line_end":984,"column_start":12,"column_end":16},"name":"gemm","qualname":"<Matrix<N, R1, C1, S>>::gemm","value":"fn <R2, C2, R3, C3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, b: &Matrix<N, R3, C3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a * b + beta * self`, where `a, b, self` are matrices.\n `alpha` and `beta` are scalar.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix2x3, Matrix3x4, Matrix2x4};\n let mut mat1 = Matrix2x4::identity();\n let mat2 = Matrix2x3::new(1.0, 2.0, 3.0,\n                           4.0, 5.0, 6.0);\n let mat3 = Matrix3x4::new(0.1, 0.2, 0.3, 0.4,\n                           0.5, 0.6, 0.7, 0.8,\n                           0.9, 1.0, 1.1, 1.2);\n let expected = mat2 * mat3 * 10.0 + mat1 * 5.0;\n\n mat1.gemm(10.0, &mat2, &mat3, 5.0);\n assert_relative_eq!(mat1, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":57149,"byte_end":57158,"line_start":983,"line_end":983,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":63172,"byte_end":63179,"line_start":1134,"line_end":1134,"column_start":12,"column_end":19},"name":"gemm_tr","qualname":"<Matrix<N, R1, C1, S>>::gemm_tr","value":"fn <R2, C2, R3, C3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, b: &Matrix<N, R3, C3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a.transpose() * b + beta * self`, where `a, b, self` are matrices.\n `alpha` and `beta` are scalar.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3x2, Matrix3x4, Matrix2x4};\n let mut mat1 = Matrix2x4::identity();\n let mat2 = Matrix3x2::new(1.0, 4.0,\n                           2.0, 5.0,\n                           3.0, 6.0);\n let mat3 = Matrix3x4::new(0.1, 0.2, 0.3, 0.4,\n                           0.5, 0.6, 0.7, 0.8,\n                           0.9, 1.0, 1.1, 1.2);\n let expected = mat2.transpose() * mat3 * 10.0 + mat1 * 5.0;\n\n mat1.gemm_tr(10.0, &mat2, &mat3, 5.0);\n assert_eq!(mat1, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":63151,"byte_end":63160,"line_start":1133,"line_end":1133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":65458,"byte_end":65465,"line_start":1192,"line_end":1192,"column_start":12,"column_end":19},"name":"gemm_ad","qualname":"<Matrix<N, R1, C1, S>>::gemm_ad","value":"fn <R2, C2, R3, C3, SB, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, b: &Matrix<N, R3, C3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * a.adjoint() * b + beta * self`, where `a, b, self` are matrices.\n `alpha` and `beta` are scalar.\n\n If `beta` is zero, `self` is never read.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3x2, Matrix3x4, Matrix2x4, Complex};\n let mut mat1 = Matrix2x4::identity();\n let mat2 = Matrix3x2::new(Complex::new(1.0, 4.0), Complex::new(7.0, 8.0),\n                           Complex::new(2.0, 5.0), Complex::new(9.0, 10.0),\n                           Complex::new(3.0, 6.0), Complex::new(11.0, 12.0));\n let mat3 = Matrix3x4::new(Complex::new(0.1, 1.3), Complex::new(0.2, 1.4), Complex::new(0.3, 1.5), Complex::new(0.4, 1.6),\n                           Complex::new(0.5, 1.7), Complex::new(0.6, 1.8), Complex::new(0.7, 1.9), Complex::new(0.8, 2.0),\n                           Complex::new(0.9, 2.1), Complex::new(1.0, 2.2), Complex::new(1.1, 2.3), Complex::new(1.2, 2.4));\n let expected = mat2.adjoint() * mat3 * Complex::new(10.0, 20.0) + mat1 * Complex::new(5.0, 15.0);\n\n mat1.gemm_ad(Complex::new(10.0, 20.0), &mat2, &mat3, Complex::new(5.0, 15.0));\n assert_eq!(mat1, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":65437,"byte_end":65446,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":68564,"byte_end":68572,"line_start":1287,"line_end":1287,"column_start":12,"column_end":20},"name":"ger_symm","qualname":"<Matrix<N, R1, C1, S>>::ger_symm","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, x: &Vector<N, D2, SB>, y: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * x * y.transpose() + beta * self`, where `self` is a **symmetric**\n matrix.\n\n If `beta` is zero, `self` is never read. The result is symmetric. Only the lower-triangular\n (including the diagonal) part of `self` is read/written.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2};\n let mut mat = Matrix2::identity();\n let vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector2::new(0.1, 0.2);\n let expected = vec1 * vec2.transpose() * 10.0 + mat * 5.0;\n mat.m12 = 99999.99999; // This component is on the upper-triangular part and will not be read/written.\n\n mat.ger_symm(10.0, &vec1, &vec2, 5.0);\n assert_eq!(mat.lower_triangle(), expected.lower_triangle());\n assert_eq!(mat.m12, 99999.99999); // This was untouched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":68451,"byte_end":68460,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This is renamed `syger` to match the original BLAS terminology.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":68465,"byte_end":68552,"line_start":1286,"line_end":1286,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":69868,"byte_end":69873,"line_start":1323,"line_end":1323,"column_start":12,"column_end":17},"name":"syger","qualname":"<Matrix<N, R1, C1, S>>::syger","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, x: &Vector<N, D2, SB>, y: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * x * y.transpose() + beta * self`, where `self` is a **symmetric**\n matrix.\n\n For hermitian complex matrices, use `.hegerc` instead.\n If `beta` is zero, `self` is never read. The result is symmetric. Only the lower-triangular\n (including the diagonal) part of `self` is read/written.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2};\n let mut mat = Matrix2::identity();\n let vec1 = Vector2::new(1.0, 2.0);\n let vec2 = Vector2::new(0.1, 0.2);\n let expected = vec1 * vec2.transpose() * 10.0 + mat * 5.0;\n mat.m12 = 99999.99999; // This component is on the upper-triangular part and will not be read/written.\n\n mat.syger(10.0, &vec1, &vec2, 5.0);\n assert_eq!(mat.lower_triangle(), expected.lower_triangle());\n assert_eq!(mat.m12, 99999.99999); // This was untouched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":69847,"byte_end":69856,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":71331,"byte_end":71337,"line_start":1358,"line_end":1358,"column_start":12,"column_end":18},"name":"hegerc","qualname":"<Matrix<N, R1, C1, S>>::hegerc","value":"fn <D2, D3, SB, SC> (&mut self, alpha: N, x: &Vector<N, D2, SB>, y: &Vector<N, D3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes `self = alpha * x * y.adjoint() + beta * self`, where `self` is an **hermitian**\n matrix.\n\n If `beta` is zero, `self` is never read. The result is symmetric. Only the lower-triangular\n (including the diagonal) part of `self` is read/written.\n\n # Examples:\n\n ```\n # use nalgebra::{Matrix2, Vector2, Complex};\n let mut mat = Matrix2::identity();\n let vec1 = Vector2::new(Complex::new(1.0, 3.0), Complex::new(2.0, 4.0));\n let vec2 = Vector2::new(Complex::new(0.2, 0.4), Complex::new(0.1, 0.3));\n let expected = vec1 * vec2.adjoint() * Complex::new(10.0, 20.0) + mat * Complex::new(5.0, 15.0);\n mat.m12 = Complex::new(99999.99999, 88888.88888); // This component is on the upper-triangular part and will not be read/written.\n\n mat.hegerc(Complex::new(10.0, 20.0), &vec1, &vec2, Complex::new(5.0, 15.0));\n assert_eq!(mat.lower_triangle(), expected.lower_triangle());\n assert_eq!(mat.m12, Complex::new(99999.99999, 88888.88888)); // This was untouched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":71310,"byte_end":71319,"line_start":1357,"line_end":1357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":73250,"byte_end":73276,"line_start":1403,"line_end":1403,"column_start":12,"column_end":38},"name":"quadform_tr_with_workspace","qualname":"<SquareMatrix<N, D1, S>>::quadform_tr_with_workspace","value":"fn <D2, S2, R3, C3, S3, D4, S4> (&mut self, work: &mut Vector<N, D2, S2>, alpha: N, lhs: &Matrix<N, R3, C3, S3>, mid: &SquareMatrix<N, D4, S4>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the quadratic form `self = alpha * lhs * mid * lhs.transpose() + beta * self`.\n\n This uses the provided workspace `work` to avoid allocations for intermediate results.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{DMatrix, DVector};\n // Note that all those would also work with statically-sized matrices.\n // We use DMatrix/DVector since that's the only case where pre-allocating the\n // workspace is actually useful (assuming the same workspace is re-used for\n // several computations) because it avoids repeated dynamic allocations.\n let mut mat = DMatrix::identity(2, 2);\n let lhs = DMatrix::from_row_slice(2, 3, &[1.0, 2.0, 3.0,\n                                           4.0, 5.0, 6.0]);\n let mid = DMatrix::from_row_slice(3, 3, &[0.1, 0.2, 0.3,\n                                           0.5, 0.6, 0.7,\n                                           0.9, 1.0, 1.1]);\n // The random shows that values on the workspace do not\n // matter as they will be overwritten.\n let mut workspace = DVector::new_random(2);\n let expected = &lhs * &mid * lhs.transpose() * 10.0 + &mat * 5.0;\n\n mat.quadform_tr_with_workspace(&mut workspace, 10.0, &lhs, &mid, 5.0);\n assert_relative_eq!(mat, expected);\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":75005,"byte_end":75016,"line_start":1450,"line_end":1450,"column_start":12,"column_end":23},"name":"quadform_tr","qualname":"<SquareMatrix<N, D1, S>>::quadform_tr","value":"fn <R3, C3, S3, D4, S4> (&mut self, alpha: N, lhs: &Matrix<N, R3, C3, S3>, mid: &SquareMatrix<N, D4, S4>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the quadratic form `self = alpha * lhs * mid * lhs.transpose() + beta * self`.\n\n This allocates a workspace vector of dimension D1 for intermediate results.\n If `D1` is a type-level integer, then the allocation is performed on the stack.\n Use `.quadform_tr_with_workspace(...)` instead to avoid allocations.\n\n # Examples:\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix2, Matrix3, Matrix2x3, Vector2};\n let mut mat = Matrix2::identity();\n let lhs = Matrix2x3::new(1.0, 2.0, 3.0,\n                          4.0, 5.0, 6.0);\n let mid = Matrix3::new(0.1, 0.2, 0.3,\n                        0.5, 0.6, 0.7,\n                        0.9, 1.0, 1.1);\n let expected = lhs * mid * lhs.transpose() * 10.0 + mat * 5.0;\n\n mat.quadform_tr(10.0, &lhs, &mid, 5.0);\n assert_relative_eq!(mat, expected);\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":77031,"byte_end":77054,"line_start":1494,"line_end":1494,"column_start":12,"column_end":35},"name":"quadform_with_workspace","qualname":"<SquareMatrix<N, D1, S>>::quadform_with_workspace","value":"fn <D2, S2, D3, S3, R4, C4, S4> (&mut self, work: &mut Vector<N, D2, S2>, alpha: N, mid: &SquareMatrix<N, D3, S3>, rhs: &Matrix<N, R4, C4, S4>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the quadratic form `self = alpha * rhs.transpose() * mid * rhs + beta * self`.\n\n This uses the provided workspace `work` to avoid allocations for intermediate results.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{DMatrix, DVector};\n // Note that all those would also work with statically-sized matrices.\n // We use DMatrix/DVector since that's the only case where pre-allocating the\n // workspace is actually useful (assuming the same workspace is re-used for\n // several computations) because it avoids repeated dynamic allocations.\n let mut mat = DMatrix::identity(2, 2);\n let rhs = DMatrix::from_row_slice(3, 2, &[1.0, 2.0,\n                                           3.0, 4.0,\n                                           5.0, 6.0]);\n let mid = DMatrix::from_row_slice(3, 3, &[0.1, 0.2, 0.3,\n                                           0.5, 0.6, 0.7,\n                                           0.9, 1.0, 1.1]);\n // The random shows that values on the workspace do not\n // matter as they will be overwritten.\n let mut workspace = DVector::new_random(3);\n let expected = rhs.transpose() * &mid * &rhs * 10.0 + &mat * 5.0;\n\n mat.quadform_with_workspace(&mut workspace, 10.0, &mid, &rhs, 5.0);\n assert_relative_eq!(mat, expected);\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":78815,"byte_end":78823,"line_start":1541,"line_end":1541,"column_start":12,"column_end":20},"name":"quadform","qualname":"<SquareMatrix<N, D1, S>>::quadform","value":"fn <D2, S2, R3, C3, S3> (&mut self, alpha: N, mid: &SquareMatrix<N, D2, S2>, rhs: &Matrix<N, R3, C3, S3>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the quadratic form `self = alpha * rhs.transpose() * mid * rhs + beta * self`.\n\n This allocates a workspace vector of dimension D2 for intermediate results.\n If `D2` is a type-level integer, then the allocation is performed on the stack.\n Use `.quadform_with_workspace(...)` instead to avoid allocations.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix2, Matrix3x2, Matrix3};\n let mut mat = Matrix2::identity();\n let rhs = Matrix3x2::new(1.0, 2.0,\n                          3.0, 4.0,\n                          5.0, 6.0);\n let mid = Matrix3::new(0.1, 0.2, 0.3,\n                        0.5, 0.6, 0.7,\n                        0.9, 1.0, 1.1);\n let expected = rhs.transpose() * mid * rhs * 10.0 + mat * 5.0;\n\n mat.quadform(10.0, &mid, &rhs, 5.0);\n assert_relative_eq!(mat, expected);\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constraint","qualname":"::base::constraint","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":331},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":8031},{"krate":0,"index":8035},{"krate":0,"index":8038},{"krate":0,"index":8041},{"krate":0,"index":8044},{"krate":0,"index":8048},{"krate":0,"index":8051},{"krate":0,"index":8054},{"krate":0,"index":350},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360}],"decl_id":null,"docs":" Compatibility constraints between matrix shapes, e.g., for addition or multiplication.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79634,"byte_end":79649,"line_start":6,"line_end":6,"column_start":12,"column_end":27},"name":"ShapeConstraint","qualname":"::base::constraint::ShapeConstraint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type used in `where` clauses for enforcing constraints.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79710,"byte_end":79725,"line_start":9,"line_end":9,"column_start":11,"column_end":26},"name":"AreMultipliable","qualname":"::base::constraint::AreMultipliable","value":"AreMultipliable<R1: Dim, C1: Dim, R2: Dim, C2: Dim>: DimEq<C1, R2>","parent":null,"children":[],"decl_id":null,"docs":" Constraints `C1` and `R2` to be equivalent.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79973,"byte_end":79978,"line_start":15,"line_end":15,"column_start":11,"column_end":16},"name":"DimEq","qualname":"::base::constraint::DimEq","value":"DimEq<D1: Dim, D2: Dim>","parent":null,"children":[{"krate":0,"index":339}],"decl_id":null,"docs":" Constraints `D1` and `D2` to be equivalent.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80127,"byte_end":80141,"line_start":18,"line_end":18,"column_start":10,"column_end":24},"name":"Representative","qualname":"::base::constraint::DimEq::Representative","value":"type Representative: Dim;","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level\n constant.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8031},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81374,"byte_end":81390,"line_start":61,"line_end":61,"column_start":5,"column_end":21},"name":"SameNumberOfRows","qualname":"::base::constraint::SameNumberOfRows","value":"SameNumberOfRows<D1: Dim, D2: Dim>: DimEq<D1, D2> + DimEq<D2, D1>","parent":null,"children":[{"krate":0,"index":8034}],"decl_id":null,"docs":"Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of rows of a matrix.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81524,"byte_end":81543,"line_start":65,"line_end":65,"column_start":5,"column_end":24},"name":"SameNumberOfColumns","qualname":"::base::constraint::SameNumberOfColumns","value":"SameNumberOfColumns<D1: Dim, D2: Dim>: DimEq<D1, D2> + DimEq<D2, D1>","parent":null,"children":[{"krate":0,"index":8047}],"decl_id":null,"docs":"Constraints `D1` and `D2` to be equivalent. They are both assumed to be the number of columns of a matrix.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81689,"byte_end":81702,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SameDimension","qualname":"::base::constraint::SameDimension","value":"SameDimension<D1: Dim, D2: Dim>: SameNumberOfRows<D1, D2> + SameNumberOfColumns<D1, D2>","parent":null,"children":[{"krate":0,"index":353}],"decl_id":null,"docs":" Constraints D1 and D2 to be equivalent, where they both designate dimensions of algebraic\n entities (e.g. square matrices).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81911,"byte_end":81925,"line_start":75,"line_end":75,"column_start":10,"column_end":24},"name":"Representative","qualname":"::base::constraint::SameDimension::Representative","value":"type Representative: Dim;","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" This is either equal to `D1` or `D2`, always choosing the one (if any) which is a type-level\n constant.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"coordinates","qualname":"::base::coordinates","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":8057},{"krate":0,"index":8078},{"krate":0,"index":8080},{"krate":0,"index":8072},{"krate":0,"index":8074},{"krate":0,"index":8069},{"krate":0,"index":8065},{"krate":0,"index":8062},{"krate":0,"index":8060},{"krate":0,"index":8083},{"krate":0,"index":8105},{"krate":0,"index":8107},{"krate":0,"index":8099},{"krate":0,"index":8101},{"krate":0,"index":8096},{"krate":0,"index":8092},{"krate":0,"index":8089},{"krate":0,"index":8087},{"krate":0,"index":8110},{"krate":0,"index":8133},{"krate":0,"index":8135},{"krate":0,"index":8127},{"krate":0,"index":8129},{"krate":0,"index":8124},{"krate":0,"index":8120},{"krate":0,"index":8117},{"krate":0,"index":8115},{"krate":0,"index":8138},{"krate":0,"index":8162},{"krate":0,"index":8164},{"krate":0,"index":8156},{"krate":0,"index":8158},{"krate":0,"index":8153},{"krate":0,"index":8149},{"krate":0,"index":8146},{"krate":0,"index":8144},{"krate":0,"index":8167},{"krate":0,"index":8192},{"krate":0,"index":8194},{"krate":0,"index":8186},{"krate":0,"index":8188},{"krate":0,"index":8183},{"krate":0,"index":8179},{"krate":0,"index":8176},{"krate":0,"index":8174},{"krate":0,"index":8197},{"krate":0,"index":8223},{"krate":0,"index":8225},{"krate":0,"index":8217},{"krate":0,"index":8219},{"krate":0,"index":8214},{"krate":0,"index":8210},{"krate":0,"index":8207},{"krate":0,"index":8205},{"krate":0,"index":8228},{"krate":0,"index":8252},{"krate":0,"index":8254},{"krate":0,"index":8246},{"krate":0,"index":8248},{"krate":0,"index":8243},{"krate":0,"index":8239},{"krate":0,"index":8236},{"krate":0,"index":8234},{"krate":0,"index":8257},{"krate":0,"index":8281},{"krate":0,"index":8283},{"krate":0,"index":8275},{"krate":0,"index":8277},{"krate":0,"index":8272},{"krate":0,"index":8268},{"krate":0,"index":8265},{"krate":0,"index":8263},{"krate":0,"index":8286},{"krate":0,"index":8312},{"krate":0,"index":8314},{"krate":0,"index":8306},{"krate":0,"index":8308},{"krate":0,"index":8303},{"krate":0,"index":8299},{"krate":0,"index":8296},{"krate":0,"index":8294},{"krate":0,"index":8317},{"krate":0,"index":8345},{"krate":0,"index":8347},{"krate":0,"index":8339},{"krate":0,"index":8341},{"krate":0,"index":8336},{"krate":0,"index":8332},{"krate":0,"index":8329},{"krate":0,"index":8327},{"krate":0,"index":8350},{"krate":0,"index":8380},{"krate":0,"index":8382},{"krate":0,"index":8374},{"krate":0,"index":8376},{"krate":0,"index":8371},{"krate":0,"index":8367},{"krate":0,"index":8364},{"krate":0,"index":8362},{"krate":0,"index":8385},{"krate":0,"index":8417},{"krate":0,"index":8419},{"krate":0,"index":8411},{"krate":0,"index":8413},{"krate":0,"index":8408},{"krate":0,"index":8404},{"krate":0,"index":8401},{"krate":0,"index":8399},{"krate":0,"index":8422},{"krate":0,"index":8448},{"krate":0,"index":8450},{"krate":0,"index":8442},{"krate":0,"index":8444},{"krate":0,"index":8439},{"krate":0,"index":8435},{"krate":0,"index":8432},{"krate":0,"index":8430},{"krate":0,"index":8453},{"krate":0,"index":8482},{"krate":0,"index":8484},{"krate":0,"index":8476},{"krate":0,"index":8478},{"krate":0,"index":8473},{"krate":0,"index":8469},{"krate":0,"index":8466},{"krate":0,"index":8464},{"krate":0,"index":8487},{"krate":0,"index":8519},{"krate":0,"index":8521},{"krate":0,"index":8513},{"krate":0,"index":8515},{"krate":0,"index":8510},{"krate":0,"index":8506},{"krate":0,"index":8503},{"krate":0,"index":8501},{"krate":0,"index":8524},{"krate":0,"index":8559},{"krate":0,"index":8561},{"krate":0,"index":8553},{"krate":0,"index":8555},{"krate":0,"index":8550},{"krate":0,"index":8546},{"krate":0,"index":8543},{"krate":0,"index":8541},{"krate":0,"index":8564},{"krate":0,"index":8602},{"krate":0,"index":8604},{"krate":0,"index":8596},{"krate":0,"index":8598},{"krate":0,"index":8593},{"krate":0,"index":8589},{"krate":0,"index":8586},{"krate":0,"index":8584},{"krate":0,"index":8607},{"krate":0,"index":8635},{"krate":0,"index":8637},{"krate":0,"index":8629},{"krate":0,"index":8631},{"krate":0,"index":8626},{"krate":0,"index":8622},{"krate":0,"index":8619},{"krate":0,"index":8617},{"krate":0,"index":8640},{"krate":0,"index":8672},{"krate":0,"index":8674},{"krate":0,"index":8666},{"krate":0,"index":8668},{"krate":0,"index":8663},{"krate":0,"index":8659},{"krate":0,"index":8656},{"krate":0,"index":8654},{"krate":0,"index":8677},{"krate":0,"index":8713},{"krate":0,"index":8715},{"krate":0,"index":8707},{"krate":0,"index":8709},{"krate":0,"index":8704},{"krate":0,"index":8700},{"krate":0,"index":8697},{"krate":0,"index":8695},{"krate":0,"index":8718},{"krate":0,"index":8758},{"krate":0,"index":8760},{"krate":0,"index":8752},{"krate":0,"index":8754},{"krate":0,"index":8749},{"krate":0,"index":8745},{"krate":0,"index":8742},{"krate":0,"index":8740},{"krate":0,"index":8763},{"krate":0,"index":8807},{"krate":0,"index":8809},{"krate":0,"index":8801},{"krate":0,"index":8803},{"krate":0,"index":8798},{"krate":0,"index":8794},{"krate":0,"index":8791},{"krate":0,"index":8789},{"krate":0,"index":8812},{"krate":0,"index":8842},{"krate":0,"index":8844},{"krate":0,"index":8836},{"krate":0,"index":8838},{"krate":0,"index":8833},{"krate":0,"index":8829},{"krate":0,"index":8826},{"krate":0,"index":8824},{"krate":0,"index":8847},{"krate":0,"index":8882},{"krate":0,"index":8884},{"krate":0,"index":8876},{"krate":0,"index":8878},{"krate":0,"index":8873},{"krate":0,"index":8869},{"krate":0,"index":8866},{"krate":0,"index":8864},{"krate":0,"index":8887},{"krate":0,"index":8927},{"krate":0,"index":8929},{"krate":0,"index":8921},{"krate":0,"index":8923},{"krate":0,"index":8918},{"krate":0,"index":8914},{"krate":0,"index":8911},{"krate":0,"index":8909},{"krate":0,"index":8932},{"krate":0,"index":8977},{"krate":0,"index":8979},{"krate":0,"index":8971},{"krate":0,"index":8973},{"krate":0,"index":8968},{"krate":0,"index":8964},{"krate":0,"index":8961},{"krate":0,"index":8959},{"krate":0,"index":8982},{"krate":0,"index":9032},{"krate":0,"index":9034},{"krate":0,"index":9026},{"krate":0,"index":9028},{"krate":0,"index":9023},{"krate":0,"index":9019},{"krate":0,"index":9016},{"krate":0,"index":9014},{"krate":0,"index":9037},{"krate":0,"index":9069},{"krate":0,"index":9071},{"krate":0,"index":9063},{"krate":0,"index":9065},{"krate":0,"index":9060},{"krate":0,"index":9056},{"krate":0,"index":9053},{"krate":0,"index":9051},{"krate":0,"index":9074},{"krate":0,"index":9112},{"krate":0,"index":9114},{"krate":0,"index":9106},{"krate":0,"index":9108},{"krate":0,"index":9103},{"krate":0,"index":9099},{"krate":0,"index":9096},{"krate":0,"index":9094},{"krate":0,"index":9117},{"krate":0,"index":9161},{"krate":0,"index":9163},{"krate":0,"index":9155},{"krate":0,"index":9157},{"krate":0,"index":9152},{"krate":0,"index":9148},{"krate":0,"index":9145},{"krate":0,"index":9143},{"krate":0,"index":9166},{"krate":0,"index":9216},{"krate":0,"index":9218},{"krate":0,"index":9210},{"krate":0,"index":9212},{"krate":0,"index":9207},{"krate":0,"index":9203},{"krate":0,"index":9200},{"krate":0,"index":9198},{"krate":0,"index":9221},{"krate":0,"index":9277},{"krate":0,"index":9279},{"krate":0,"index":9271},{"krate":0,"index":9273},{"krate":0,"index":9268},{"krate":0,"index":9264},{"krate":0,"index":9261},{"krate":0,"index":9259},{"krate":0,"index":9282},{"krate":0,"index":9287},{"krate":0,"index":9291},{"krate":0,"index":9296},{"krate":0,"index":9300},{"krate":0,"index":9305},{"krate":0,"index":9309},{"krate":0,"index":9314},{"krate":0,"index":9318},{"krate":0,"index":9323},{"krate":0,"index":9327},{"krate":0,"index":9332},{"krate":0,"index":9336},{"krate":0,"index":9341},{"krate":0,"index":9345},{"krate":0,"index":9350},{"krate":0,"index":9354},{"krate":0,"index":9359},{"krate":0,"index":9363},{"krate":0,"index":9368},{"krate":0,"index":9372},{"krate":0,"index":9377},{"krate":0,"index":9381},{"krate":0,"index":9386},{"krate":0,"index":9390},{"krate":0,"index":9395},{"krate":0,"index":9399},{"krate":0,"index":9404},{"krate":0,"index":9408},{"krate":0,"index":9413},{"krate":0,"index":9417},{"krate":0,"index":9422},{"krate":0,"index":9426},{"krate":0,"index":9431},{"krate":0,"index":9435},{"krate":0,"index":9440},{"krate":0,"index":9444},{"krate":0,"index":9449},{"krate":0,"index":9453},{"krate":0,"index":9458},{"krate":0,"index":9462},{"krate":0,"index":9467},{"krate":0,"index":9471},{"krate":0,"index":9476},{"krate":0,"index":9480},{"krate":0,"index":9485},{"krate":0,"index":9489},{"krate":0,"index":9494},{"krate":0,"index":9498},{"krate":0,"index":9503},{"krate":0,"index":9507},{"krate":0,"index":9512},{"krate":0,"index":9516},{"krate":0,"index":9521},{"krate":0,"index":9525},{"krate":0,"index":9530},{"krate":0,"index":9534},{"krate":0,"index":9539},{"krate":0,"index":9543},{"krate":0,"index":9548},{"krate":0,"index":9552},{"krate":0,"index":9557},{"krate":0,"index":9561},{"krate":0,"index":9566},{"krate":0,"index":9570},{"krate":0,"index":9575},{"krate":0,"index":9579},{"krate":0,"index":9584},{"krate":0,"index":9588},{"krate":0,"index":9593},{"krate":0,"index":9597},{"krate":0,"index":9602}],"decl_id":null,"docs":" Structures to which matrices and vector can be auto-dereferenced (through `Deref`) to access\n components using their names. For example, if `v` is a 3D vector, one can write `v.z` instead\n of `v[2]`.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82216,"byte_end":82239,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8057},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83926,"byte_end":83927,"line_start":60,"line_end":60,"column_start":14,"column_end":15},"name":"X","qualname":"::base::coordinates::X","value":"X { x }","parent":null,"children":[{"krate":0,"index":8059}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8059},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83929,"byte_end":83930,"line_start":60,"line_end":60,"column_start":17,"column_end":18},"name":"x","qualname":"::base::coordinates::X::x","value":"N","parent":{"krate":0,"index":8057},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8083},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83946,"byte_end":83948,"line_start":61,"line_end":61,"column_start":14,"column_end":16},"name":"XY","qualname":"::base::coordinates::XY","value":"XY { x, y }","parent":null,"children":[{"krate":0,"index":8085},{"krate":0,"index":8086}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8085},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83950,"byte_end":83951,"line_start":61,"line_end":61,"column_start":18,"column_end":19},"name":"x","qualname":"::base::coordinates::XY::x","value":"N","parent":{"krate":0,"index":8083},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8086},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83953,"byte_end":83954,"line_start":61,"line_end":61,"column_start":21,"column_end":22},"name":"y","qualname":"::base::coordinates::XY::y","value":"N","parent":{"krate":0,"index":8083},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83970,"byte_end":83973,"line_start":62,"line_end":62,"column_start":14,"column_end":17},"name":"XYZ","qualname":"::base::coordinates::XYZ","value":"XYZ { x, y, z }","parent":null,"children":[{"krate":0,"index":8112},{"krate":0,"index":8113},{"krate":0,"index":8114}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83975,"byte_end":83976,"line_start":62,"line_end":62,"column_start":19,"column_end":20},"name":"x","qualname":"::base::coordinates::XYZ::x","value":"N","parent":{"krate":0,"index":8110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83978,"byte_end":83979,"line_start":62,"line_end":62,"column_start":22,"column_end":23},"name":"y","qualname":"::base::coordinates::XYZ::y","value":"N","parent":{"krate":0,"index":8110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83981,"byte_end":83982,"line_start":62,"line_end":62,"column_start":25,"column_end":26},"name":"z","qualname":"::base::coordinates::XYZ::z","value":"N","parent":{"krate":0,"index":8110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":83998,"byte_end":84002,"line_start":63,"line_end":63,"column_start":14,"column_end":18},"name":"XYZW","qualname":"::base::coordinates::XYZW","value":"XYZW { x, y, z, w }","parent":null,"children":[{"krate":0,"index":8140},{"krate":0,"index":8141},{"krate":0,"index":8142},{"krate":0,"index":8143}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84004,"byte_end":84005,"line_start":63,"line_end":63,"column_start":20,"column_end":21},"name":"x","qualname":"::base::coordinates::XYZW::x","value":"N","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84007,"byte_end":84008,"line_start":63,"line_end":63,"column_start":23,"column_end":24},"name":"y","qualname":"::base::coordinates::XYZW::y","value":"N","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84010,"byte_end":84011,"line_start":63,"line_end":63,"column_start":26,"column_end":27},"name":"z","qualname":"::base::coordinates::XYZW::z","value":"N","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8143},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84013,"byte_end":84014,"line_start":63,"line_end":63,"column_start":29,"column_end":30},"name":"w","qualname":"::base::coordinates::XYZW::w","value":"N","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84030,"byte_end":84035,"line_start":64,"line_end":64,"column_start":14,"column_end":19},"name":"XYZWA","qualname":"::base::coordinates::XYZWA","value":"XYZWA { x, y, z, w, a }","parent":null,"children":[{"krate":0,"index":8169},{"krate":0,"index":8170},{"krate":0,"index":8171},{"krate":0,"index":8172},{"krate":0,"index":8173}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84037,"byte_end":84038,"line_start":64,"line_end":64,"column_start":21,"column_end":22},"name":"x","qualname":"::base::coordinates::XYZWA::x","value":"N","parent":{"krate":0,"index":8167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84040,"byte_end":84041,"line_start":64,"line_end":64,"column_start":24,"column_end":25},"name":"y","qualname":"::base::coordinates::XYZWA::y","value":"N","parent":{"krate":0,"index":8167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84043,"byte_end":84044,"line_start":64,"line_end":64,"column_start":27,"column_end":28},"name":"z","qualname":"::base::coordinates::XYZWA::z","value":"N","parent":{"krate":0,"index":8167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84046,"byte_end":84047,"line_start":64,"line_end":64,"column_start":30,"column_end":31},"name":"w","qualname":"::base::coordinates::XYZWA::w","value":"N","parent":{"krate":0,"index":8167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84049,"byte_end":84050,"line_start":64,"line_end":64,"column_start":33,"column_end":34},"name":"a","qualname":"::base::coordinates::XYZWA::a","value":"N","parent":{"krate":0,"index":8167},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84066,"byte_end":84072,"line_start":65,"line_end":65,"column_start":14,"column_end":20},"name":"XYZWAB","qualname":"::base::coordinates::XYZWAB","value":"XYZWAB { x, y, z, w, a, b }","parent":null,"children":[{"krate":0,"index":8199},{"krate":0,"index":8200},{"krate":0,"index":8201},{"krate":0,"index":8202},{"krate":0,"index":8203},{"krate":0,"index":8204}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84074,"byte_end":84075,"line_start":65,"line_end":65,"column_start":22,"column_end":23},"name":"x","qualname":"::base::coordinates::XYZWAB::x","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84077,"byte_end":84078,"line_start":65,"line_end":65,"column_start":25,"column_end":26},"name":"y","qualname":"::base::coordinates::XYZWAB::y","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84080,"byte_end":84081,"line_start":65,"line_end":65,"column_start":28,"column_end":29},"name":"z","qualname":"::base::coordinates::XYZWAB::z","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84083,"byte_end":84084,"line_start":65,"line_end":65,"column_start":31,"column_end":32},"name":"w","qualname":"::base::coordinates::XYZWAB::w","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84086,"byte_end":84087,"line_start":65,"line_end":65,"column_start":34,"column_end":35},"name":"a","qualname":"::base::coordinates::XYZWAB::a","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84089,"byte_end":84090,"line_start":65,"line_end":65,"column_start":37,"column_end":38},"name":"b","qualname":"::base::coordinates::XYZWAB::b","value":"N","parent":{"krate":0,"index":8197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84106,"byte_end":84110,"line_start":66,"line_end":66,"column_start":14,"column_end":18},"name":"IJKW","qualname":"::base::coordinates::IJKW","value":"IJKW { i, j, k, w }","parent":null,"children":[{"krate":0,"index":8230},{"krate":0,"index":8231},{"krate":0,"index":8232},{"krate":0,"index":8233}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84112,"byte_end":84113,"line_start":66,"line_end":66,"column_start":20,"column_end":21},"name":"i","qualname":"::base::coordinates::IJKW::i","value":"N","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84115,"byte_end":84116,"line_start":66,"line_end":66,"column_start":23,"column_end":24},"name":"j","qualname":"::base::coordinates::IJKW::j","value":"N","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84118,"byte_end":84119,"line_start":66,"line_end":66,"column_start":26,"column_end":27},"name":"k","qualname":"::base::coordinates::IJKW::k","value":"N","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84121,"byte_end":84122,"line_start":66,"line_end":66,"column_start":29,"column_end":30},"name":"w","qualname":"::base::coordinates::IJKW::w","value":"N","parent":{"krate":0,"index":8228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84183,"byte_end":84187,"line_start":71,"line_end":71,"column_start":14,"column_end":18},"name":"M2x2","qualname":"::base::coordinates::M2x2","value":"M2x2 { m11, m21, m12, m22 }","parent":null,"children":[{"krate":0,"index":8259},{"krate":0,"index":8260},{"krate":0,"index":8261},{"krate":0,"index":8262}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8259},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84189,"byte_end":84192,"line_start":71,"line_end":71,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M2x2::m11","value":"N","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84194,"byte_end":84197,"line_start":71,"line_end":71,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M2x2::m21","value":"N","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84218,"byte_end":84221,"line_start":72,"line_end":72,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M2x2::m12","value":"N","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84223,"byte_end":84226,"line_start":72,"line_end":72,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M2x2::m22","value":"N","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8286},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84242,"byte_end":84246,"line_start":73,"line_end":73,"column_start":14,"column_end":18},"name":"M2x3","qualname":"::base::coordinates::M2x3","value":"M2x3 { m11, m21, m12, m22, m13, m23 }","parent":null,"children":[{"krate":0,"index":8288},{"krate":0,"index":8289},{"krate":0,"index":8290},{"krate":0,"index":8291},{"krate":0,"index":8292},{"krate":0,"index":8293}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8288},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84248,"byte_end":84251,"line_start":73,"line_end":73,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M2x3::m11","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8289},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84253,"byte_end":84256,"line_start":73,"line_end":73,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M2x3::m21","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84277,"byte_end":84280,"line_start":74,"line_end":74,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M2x3::m12","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84282,"byte_end":84285,"line_start":74,"line_end":74,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M2x3::m22","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84306,"byte_end":84309,"line_start":75,"line_end":75,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M2x3::m13","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8293},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84311,"byte_end":84314,"line_start":75,"line_end":75,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M2x3::m23","value":"N","parent":{"krate":0,"index":8286},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84330,"byte_end":84334,"line_start":76,"line_end":76,"column_start":14,"column_end":18},"name":"M2x4","qualname":"::base::coordinates::M2x4","value":"M2x4 { m11, m21, m12, m22, m13, m23, m14, m24 }","parent":null,"children":[{"krate":0,"index":8319},{"krate":0,"index":8320},{"krate":0,"index":8321},{"krate":0,"index":8322},{"krate":0,"index":8323},{"krate":0,"index":8324},{"krate":0,"index":8325},{"krate":0,"index":8326}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84336,"byte_end":84339,"line_start":76,"line_end":76,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M2x4::m11","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8320},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84341,"byte_end":84344,"line_start":76,"line_end":76,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M2x4::m21","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8321},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84365,"byte_end":84368,"line_start":77,"line_end":77,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M2x4::m12","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84370,"byte_end":84373,"line_start":77,"line_end":77,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M2x4::m22","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8323},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84394,"byte_end":84397,"line_start":78,"line_end":78,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M2x4::m13","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84399,"byte_end":84402,"line_start":78,"line_end":78,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M2x4::m23","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8325},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84423,"byte_end":84426,"line_start":79,"line_end":79,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M2x4::m14","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8326},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84428,"byte_end":84431,"line_start":79,"line_end":79,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M2x4::m24","value":"N","parent":{"krate":0,"index":8317},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84447,"byte_end":84451,"line_start":80,"line_end":80,"column_start":14,"column_end":18},"name":"M2x5","qualname":"::base::coordinates::M2x5","value":"M2x5 { m11, m21, m12, m22, m13, m23, m14, m24, m15, m25 }","parent":null,"children":[{"krate":0,"index":8352},{"krate":0,"index":8353},{"krate":0,"index":8354},{"krate":0,"index":8355},{"krate":0,"index":8356},{"krate":0,"index":8357},{"krate":0,"index":8358},{"krate":0,"index":8359},{"krate":0,"index":8360},{"krate":0,"index":8361}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84453,"byte_end":84456,"line_start":80,"line_end":80,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M2x5::m11","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84458,"byte_end":84461,"line_start":80,"line_end":80,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M2x5::m21","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84482,"byte_end":84485,"line_start":81,"line_end":81,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M2x5::m12","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8355},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84487,"byte_end":84490,"line_start":81,"line_end":81,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M2x5::m22","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84511,"byte_end":84514,"line_start":82,"line_end":82,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M2x5::m13","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84516,"byte_end":84519,"line_start":82,"line_end":82,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M2x5::m23","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8358},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84540,"byte_end":84543,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M2x5::m14","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8359},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84545,"byte_end":84548,"line_start":83,"line_end":83,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M2x5::m24","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84569,"byte_end":84572,"line_start":84,"line_end":84,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M2x5::m15","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84574,"byte_end":84577,"line_start":84,"line_end":84,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M2x5::m25","value":"N","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8385},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84593,"byte_end":84597,"line_start":85,"line_end":85,"column_start":14,"column_end":18},"name":"M2x6","qualname":"::base::coordinates::M2x6","value":"M2x6 { m11, m21, m12, m22, m13, m23, m14, m24, m15, m25, m16, m26 }","parent":null,"children":[{"krate":0,"index":8387},{"krate":0,"index":8388},{"krate":0,"index":8389},{"krate":0,"index":8390},{"krate":0,"index":8391},{"krate":0,"index":8392},{"krate":0,"index":8393},{"krate":0,"index":8394},{"krate":0,"index":8395},{"krate":0,"index":8396},{"krate":0,"index":8397},{"krate":0,"index":8398}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8387},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84599,"byte_end":84602,"line_start":85,"line_end":85,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M2x6::m11","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8388},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84604,"byte_end":84607,"line_start":85,"line_end":85,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M2x6::m21","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8389},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84628,"byte_end":84631,"line_start":86,"line_end":86,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M2x6::m12","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8390},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84633,"byte_end":84636,"line_start":86,"line_end":86,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M2x6::m22","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8391},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84657,"byte_end":84660,"line_start":87,"line_end":87,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M2x6::m13","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8392},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84662,"byte_end":84665,"line_start":87,"line_end":87,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M2x6::m23","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8393},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84686,"byte_end":84689,"line_start":88,"line_end":88,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M2x6::m14","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8394},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84691,"byte_end":84694,"line_start":88,"line_end":88,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M2x6::m24","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8395},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84715,"byte_end":84718,"line_start":89,"line_end":89,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M2x6::m15","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8396},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84720,"byte_end":84723,"line_start":89,"line_end":89,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M2x6::m25","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84744,"byte_end":84747,"line_start":90,"line_end":90,"column_start":20,"column_end":23},"name":"m16","qualname":"::base::coordinates::M2x6::m16","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8398},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84749,"byte_end":84752,"line_start":90,"line_end":90,"column_start":25,"column_end":28},"name":"m26","qualname":"::base::coordinates::M2x6::m26","value":"N","parent":{"krate":0,"index":8385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8422},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84813,"byte_end":84817,"line_start":95,"line_end":95,"column_start":14,"column_end":18},"name":"M3x2","qualname":"::base::coordinates::M3x2","value":"M3x2 { m11, m21, m31, m12, m22, m32 }","parent":null,"children":[{"krate":0,"index":8424},{"krate":0,"index":8425},{"krate":0,"index":8426},{"krate":0,"index":8427},{"krate":0,"index":8428},{"krate":0,"index":8429}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8424},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84819,"byte_end":84822,"line_start":95,"line_end":95,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M3x2::m11","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8425},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84824,"byte_end":84827,"line_start":95,"line_end":95,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M3x2::m21","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8426},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84829,"byte_end":84832,"line_start":95,"line_end":95,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M3x2::m31","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8427},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84853,"byte_end":84856,"line_start":96,"line_end":96,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M3x2::m12","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8428},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84858,"byte_end":84861,"line_start":96,"line_end":96,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M3x2::m22","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8429},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84863,"byte_end":84866,"line_start":96,"line_end":96,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M3x2::m32","value":"N","parent":{"krate":0,"index":8422},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8453},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84882,"byte_end":84886,"line_start":97,"line_end":97,"column_start":14,"column_end":18},"name":"M3x3","qualname":"::base::coordinates::M3x3","value":"M3x3 { m11, m21, m31, m12, m22, m32, m13, m23, m33 }","parent":null,"children":[{"krate":0,"index":8455},{"krate":0,"index":8456},{"krate":0,"index":8457},{"krate":0,"index":8458},{"krate":0,"index":8459},{"krate":0,"index":8460},{"krate":0,"index":8461},{"krate":0,"index":8462},{"krate":0,"index":8463}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8455},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84888,"byte_end":84891,"line_start":97,"line_end":97,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M3x3::m11","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8456},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84893,"byte_end":84896,"line_start":97,"line_end":97,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M3x3::m21","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8457},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84898,"byte_end":84901,"line_start":97,"line_end":97,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M3x3::m31","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8458},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84922,"byte_end":84925,"line_start":98,"line_end":98,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M3x3::m12","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8459},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84927,"byte_end":84930,"line_start":98,"line_end":98,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M3x3::m22","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8460},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84932,"byte_end":84935,"line_start":98,"line_end":98,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M3x3::m32","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8461},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84956,"byte_end":84959,"line_start":99,"line_end":99,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M3x3::m13","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8462},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84961,"byte_end":84964,"line_start":99,"line_end":99,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M3x3::m23","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8463},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84966,"byte_end":84969,"line_start":99,"line_end":99,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M3x3::m33","value":"N","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8487},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84985,"byte_end":84989,"line_start":100,"line_end":100,"column_start":14,"column_end":18},"name":"M3x4","qualname":"::base::coordinates::M3x4","value":"M3x4 { m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34 }","parent":null,"children":[{"krate":0,"index":8489},{"krate":0,"index":8490},{"krate":0,"index":8491},{"krate":0,"index":8492},{"krate":0,"index":8493},{"krate":0,"index":8494},{"krate":0,"index":8495},{"krate":0,"index":8496},{"krate":0,"index":8497},{"krate":0,"index":8498},{"krate":0,"index":8499},{"krate":0,"index":8500}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8489},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84991,"byte_end":84994,"line_start":100,"line_end":100,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M3x4::m11","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8490},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":84996,"byte_end":84999,"line_start":100,"line_end":100,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M3x4::m21","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8491},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85001,"byte_end":85004,"line_start":100,"line_end":100,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M3x4::m31","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8492},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85025,"byte_end":85028,"line_start":101,"line_end":101,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M3x4::m12","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8493},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85030,"byte_end":85033,"line_start":101,"line_end":101,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M3x4::m22","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8494},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85035,"byte_end":85038,"line_start":101,"line_end":101,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M3x4::m32","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85059,"byte_end":85062,"line_start":102,"line_end":102,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M3x4::m13","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8496},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85064,"byte_end":85067,"line_start":102,"line_end":102,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M3x4::m23","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8497},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85069,"byte_end":85072,"line_start":102,"line_end":102,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M3x4::m33","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85093,"byte_end":85096,"line_start":103,"line_end":103,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M3x4::m14","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8499},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85098,"byte_end":85101,"line_start":103,"line_end":103,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M3x4::m24","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8500},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85103,"byte_end":85106,"line_start":103,"line_end":103,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M3x4::m34","value":"N","parent":{"krate":0,"index":8487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85122,"byte_end":85126,"line_start":104,"line_end":104,"column_start":14,"column_end":18},"name":"M3x5","qualname":"::base::coordinates::M3x5","value":"M3x5 { m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34, m15, m25, m35 }","parent":null,"children":[{"krate":0,"index":8526},{"krate":0,"index":8527},{"krate":0,"index":8528},{"krate":0,"index":8529},{"krate":0,"index":8530},{"krate":0,"index":8531},{"krate":0,"index":8532},{"krate":0,"index":8533},{"krate":0,"index":8534},{"krate":0,"index":8535},{"krate":0,"index":8536},{"krate":0,"index":8537},{"krate":0,"index":8538},{"krate":0,"index":8539},{"krate":0,"index":8540}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85128,"byte_end":85131,"line_start":104,"line_end":104,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M3x5::m11","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8527},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85133,"byte_end":85136,"line_start":104,"line_end":104,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M3x5::m21","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85138,"byte_end":85141,"line_start":104,"line_end":104,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M3x5::m31","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8529},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85162,"byte_end":85165,"line_start":105,"line_end":105,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M3x5::m12","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8530},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85167,"byte_end":85170,"line_start":105,"line_end":105,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M3x5::m22","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8531},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85172,"byte_end":85175,"line_start":105,"line_end":105,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M3x5::m32","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8532},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85196,"byte_end":85199,"line_start":106,"line_end":106,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M3x5::m13","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8533},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85201,"byte_end":85204,"line_start":106,"line_end":106,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M3x5::m23","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8534},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85206,"byte_end":85209,"line_start":106,"line_end":106,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M3x5::m33","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85230,"byte_end":85233,"line_start":107,"line_end":107,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M3x5::m14","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8536},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85235,"byte_end":85238,"line_start":107,"line_end":107,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M3x5::m24","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8537},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85240,"byte_end":85243,"line_start":107,"line_end":107,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M3x5::m34","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85264,"byte_end":85267,"line_start":108,"line_end":108,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M3x5::m15","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8539},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85269,"byte_end":85272,"line_start":108,"line_end":108,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M3x5::m25","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8540},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85274,"byte_end":85277,"line_start":108,"line_end":108,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M3x5::m35","value":"N","parent":{"krate":0,"index":8524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8564},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85293,"byte_end":85297,"line_start":109,"line_end":109,"column_start":14,"column_end":18},"name":"M3x6","qualname":"::base::coordinates::M3x6","value":"M3x6 { m11, m21, m31, m12, m22, m32, m13, m23, m33, m14, m24, m34, m15, m25, m35, m16, m26, m36 }","parent":null,"children":[{"krate":0,"index":8566},{"krate":0,"index":8567},{"krate":0,"index":8568},{"krate":0,"index":8569},{"krate":0,"index":8570},{"krate":0,"index":8571},{"krate":0,"index":8572},{"krate":0,"index":8573},{"krate":0,"index":8574},{"krate":0,"index":8575},{"krate":0,"index":8576},{"krate":0,"index":8577},{"krate":0,"index":8578},{"krate":0,"index":8579},{"krate":0,"index":8580},{"krate":0,"index":8581},{"krate":0,"index":8582},{"krate":0,"index":8583}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8566},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85299,"byte_end":85302,"line_start":109,"line_end":109,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M3x6::m11","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8567},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85304,"byte_end":85307,"line_start":109,"line_end":109,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M3x6::m21","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8568},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85309,"byte_end":85312,"line_start":109,"line_end":109,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M3x6::m31","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8569},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85333,"byte_end":85336,"line_start":110,"line_end":110,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M3x6::m12","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85338,"byte_end":85341,"line_start":110,"line_end":110,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M3x6::m22","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85343,"byte_end":85346,"line_start":110,"line_end":110,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M3x6::m32","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85367,"byte_end":85370,"line_start":111,"line_end":111,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M3x6::m13","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8573},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85372,"byte_end":85375,"line_start":111,"line_end":111,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M3x6::m23","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8574},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85377,"byte_end":85380,"line_start":111,"line_end":111,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M3x6::m33","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8575},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85401,"byte_end":85404,"line_start":112,"line_end":112,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M3x6::m14","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8576},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85406,"byte_end":85409,"line_start":112,"line_end":112,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M3x6::m24","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8577},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85411,"byte_end":85414,"line_start":112,"line_end":112,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M3x6::m34","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8578},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85435,"byte_end":85438,"line_start":113,"line_end":113,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M3x6::m15","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8579},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85440,"byte_end":85443,"line_start":113,"line_end":113,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M3x6::m25","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8580},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85445,"byte_end":85448,"line_start":113,"line_end":113,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M3x6::m35","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8581},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85469,"byte_end":85472,"line_start":114,"line_end":114,"column_start":20,"column_end":23},"name":"m16","qualname":"::base::coordinates::M3x6::m16","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8582},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85474,"byte_end":85477,"line_start":114,"line_end":114,"column_start":25,"column_end":28},"name":"m26","qualname":"::base::coordinates::M3x6::m26","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8583},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85479,"byte_end":85482,"line_start":114,"line_end":114,"column_start":30,"column_end":33},"name":"m36","qualname":"::base::coordinates::M3x6::m36","value":"N","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8607},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85543,"byte_end":85547,"line_start":119,"line_end":119,"column_start":14,"column_end":18},"name":"M4x2","qualname":"::base::coordinates::M4x2","value":"M4x2 { m11, m21, m31, m41, m12, m22, m32, m42 }","parent":null,"children":[{"krate":0,"index":8609},{"krate":0,"index":8610},{"krate":0,"index":8611},{"krate":0,"index":8612},{"krate":0,"index":8613},{"krate":0,"index":8614},{"krate":0,"index":8615},{"krate":0,"index":8616}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8609},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85549,"byte_end":85552,"line_start":119,"line_end":119,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M4x2::m11","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8610},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85554,"byte_end":85557,"line_start":119,"line_end":119,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M4x2::m21","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8611},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85559,"byte_end":85562,"line_start":119,"line_end":119,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M4x2::m31","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8612},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85564,"byte_end":85567,"line_start":119,"line_end":119,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M4x2::m41","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85588,"byte_end":85591,"line_start":120,"line_end":120,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M4x2::m12","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8614},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85593,"byte_end":85596,"line_start":120,"line_end":120,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M4x2::m22","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8615},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85598,"byte_end":85601,"line_start":120,"line_end":120,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M4x2::m32","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8616},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85603,"byte_end":85606,"line_start":120,"line_end":120,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M4x2::m42","value":"N","parent":{"krate":0,"index":8607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85622,"byte_end":85626,"line_start":121,"line_end":121,"column_start":14,"column_end":18},"name":"M4x3","qualname":"::base::coordinates::M4x3","value":"M4x3 { m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43 }","parent":null,"children":[{"krate":0,"index":8642},{"krate":0,"index":8643},{"krate":0,"index":8644},{"krate":0,"index":8645},{"krate":0,"index":8646},{"krate":0,"index":8647},{"krate":0,"index":8648},{"krate":0,"index":8649},{"krate":0,"index":8650},{"krate":0,"index":8651},{"krate":0,"index":8652},{"krate":0,"index":8653}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8642},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85628,"byte_end":85631,"line_start":121,"line_end":121,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M4x3::m11","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85633,"byte_end":85636,"line_start":121,"line_end":121,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M4x3::m21","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85638,"byte_end":85641,"line_start":121,"line_end":121,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M4x3::m31","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85643,"byte_end":85646,"line_start":121,"line_end":121,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M4x3::m41","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85667,"byte_end":85670,"line_start":122,"line_end":122,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M4x3::m12","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85672,"byte_end":85675,"line_start":122,"line_end":122,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M4x3::m22","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8648},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85677,"byte_end":85680,"line_start":122,"line_end":122,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M4x3::m32","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8649},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85682,"byte_end":85685,"line_start":122,"line_end":122,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M4x3::m42","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8650},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85706,"byte_end":85709,"line_start":123,"line_end":123,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M4x3::m13","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8651},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85711,"byte_end":85714,"line_start":123,"line_end":123,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M4x3::m23","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8652},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85716,"byte_end":85719,"line_start":123,"line_end":123,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M4x3::m33","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8653},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85721,"byte_end":85724,"line_start":123,"line_end":123,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M4x3::m43","value":"N","parent":{"krate":0,"index":8640},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85740,"byte_end":85744,"line_start":124,"line_end":124,"column_start":14,"column_end":18},"name":"M4x4","qualname":"::base::coordinates::M4x4","value":"M4x4 { m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44 }","parent":null,"children":[{"krate":0,"index":8679},{"krate":0,"index":8680},{"krate":0,"index":8681},{"krate":0,"index":8682},{"krate":0,"index":8683},{"krate":0,"index":8684},{"krate":0,"index":8685},{"krate":0,"index":8686},{"krate":0,"index":8687},{"krate":0,"index":8688},{"krate":0,"index":8689},{"krate":0,"index":8690},{"krate":0,"index":8691},{"krate":0,"index":8692},{"krate":0,"index":8693},{"krate":0,"index":8694}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8679},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85746,"byte_end":85749,"line_start":124,"line_end":124,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M4x4::m11","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85751,"byte_end":85754,"line_start":124,"line_end":124,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M4x4::m21","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85756,"byte_end":85759,"line_start":124,"line_end":124,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M4x4::m31","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85761,"byte_end":85764,"line_start":124,"line_end":124,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M4x4::m41","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8683},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85785,"byte_end":85788,"line_start":125,"line_end":125,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M4x4::m12","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85790,"byte_end":85793,"line_start":125,"line_end":125,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M4x4::m22","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8685},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85795,"byte_end":85798,"line_start":125,"line_end":125,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M4x4::m32","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85800,"byte_end":85803,"line_start":125,"line_end":125,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M4x4::m42","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85824,"byte_end":85827,"line_start":126,"line_end":126,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M4x4::m13","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85829,"byte_end":85832,"line_start":126,"line_end":126,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M4x4::m23","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85834,"byte_end":85837,"line_start":126,"line_end":126,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M4x4::m33","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85839,"byte_end":85842,"line_start":126,"line_end":126,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M4x4::m43","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8691},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85863,"byte_end":85866,"line_start":127,"line_end":127,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M4x4::m14","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8692},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85868,"byte_end":85871,"line_start":127,"line_end":127,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M4x4::m24","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8693},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85873,"byte_end":85876,"line_start":127,"line_end":127,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M4x4::m34","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8694},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85878,"byte_end":85881,"line_start":127,"line_end":127,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M4x4::m44","value":"N","parent":{"krate":0,"index":8677},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8718},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85897,"byte_end":85901,"line_start":128,"line_end":128,"column_start":14,"column_end":18},"name":"M4x5","qualname":"::base::coordinates::M4x5","value":"M4x5 { m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44, m15, m25, m35, m45 }","parent":null,"children":[{"krate":0,"index":8720},{"krate":0,"index":8721},{"krate":0,"index":8722},{"krate":0,"index":8723},{"krate":0,"index":8724},{"krate":0,"index":8725},{"krate":0,"index":8726},{"krate":0,"index":8727},{"krate":0,"index":8728},{"krate":0,"index":8729},{"krate":0,"index":8730},{"krate":0,"index":8731},{"krate":0,"index":8732},{"krate":0,"index":8733},{"krate":0,"index":8734},{"krate":0,"index":8735},{"krate":0,"index":8736},{"krate":0,"index":8737},{"krate":0,"index":8738},{"krate":0,"index":8739}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8720},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85903,"byte_end":85906,"line_start":128,"line_end":128,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M4x5::m11","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8721},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85908,"byte_end":85911,"line_start":128,"line_end":128,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M4x5::m21","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8722},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85913,"byte_end":85916,"line_start":128,"line_end":128,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M4x5::m31","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8723},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85918,"byte_end":85921,"line_start":128,"line_end":128,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M4x5::m41","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8724},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85942,"byte_end":85945,"line_start":129,"line_end":129,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M4x5::m12","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8725},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85947,"byte_end":85950,"line_start":129,"line_end":129,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M4x5::m22","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8726},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85952,"byte_end":85955,"line_start":129,"line_end":129,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M4x5::m32","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8727},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85957,"byte_end":85960,"line_start":129,"line_end":129,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M4x5::m42","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8728},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85981,"byte_end":85984,"line_start":130,"line_end":130,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M4x5::m13","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8729},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85986,"byte_end":85989,"line_start":130,"line_end":130,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M4x5::m23","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8730},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85991,"byte_end":85994,"line_start":130,"line_end":130,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M4x5::m33","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":85996,"byte_end":85999,"line_start":130,"line_end":130,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M4x5::m43","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8732},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86020,"byte_end":86023,"line_start":131,"line_end":131,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M4x5::m14","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8733},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86025,"byte_end":86028,"line_start":131,"line_end":131,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M4x5::m24","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8734},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86030,"byte_end":86033,"line_start":131,"line_end":131,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M4x5::m34","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8735},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86035,"byte_end":86038,"line_start":131,"line_end":131,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M4x5::m44","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8736},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86059,"byte_end":86062,"line_start":132,"line_end":132,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M4x5::m15","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8737},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86064,"byte_end":86067,"line_start":132,"line_end":132,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M4x5::m25","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8738},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86069,"byte_end":86072,"line_start":132,"line_end":132,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M4x5::m35","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8739},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86074,"byte_end":86077,"line_start":132,"line_end":132,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M4x5::m45","value":"N","parent":{"krate":0,"index":8718},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8763},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86093,"byte_end":86097,"line_start":133,"line_end":133,"column_start":14,"column_end":18},"name":"M4x6","qualname":"::base::coordinates::M4x6","value":"M4x6 { m11, m21, m31, m41, m12, m22, m32, m42, m13, m23, m33, m43, m14, m24, m34, m44, m15, m25, m35, m45, m16, m26, m36, m46 }","parent":null,"children":[{"krate":0,"index":8765},{"krate":0,"index":8766},{"krate":0,"index":8767},{"krate":0,"index":8768},{"krate":0,"index":8769},{"krate":0,"index":8770},{"krate":0,"index":8771},{"krate":0,"index":8772},{"krate":0,"index":8773},{"krate":0,"index":8774},{"krate":0,"index":8775},{"krate":0,"index":8776},{"krate":0,"index":8777},{"krate":0,"index":8778},{"krate":0,"index":8779},{"krate":0,"index":8780},{"krate":0,"index":8781},{"krate":0,"index":8782},{"krate":0,"index":8783},{"krate":0,"index":8784},{"krate":0,"index":8785},{"krate":0,"index":8786},{"krate":0,"index":8787},{"krate":0,"index":8788}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8765},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86099,"byte_end":86102,"line_start":133,"line_end":133,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M4x6::m11","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86104,"byte_end":86107,"line_start":133,"line_end":133,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M4x6::m21","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8767},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86109,"byte_end":86112,"line_start":133,"line_end":133,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M4x6::m31","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8768},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86114,"byte_end":86117,"line_start":133,"line_end":133,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M4x6::m41","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8769},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86138,"byte_end":86141,"line_start":134,"line_end":134,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M4x6::m12","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86143,"byte_end":86146,"line_start":134,"line_end":134,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M4x6::m22","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8771},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86148,"byte_end":86151,"line_start":134,"line_end":134,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M4x6::m32","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8772},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86153,"byte_end":86156,"line_start":134,"line_end":134,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M4x6::m42","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8773},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86177,"byte_end":86180,"line_start":135,"line_end":135,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M4x6::m13","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8774},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86182,"byte_end":86185,"line_start":135,"line_end":135,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M4x6::m23","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8775},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86187,"byte_end":86190,"line_start":135,"line_end":135,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M4x6::m33","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8776},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86192,"byte_end":86195,"line_start":135,"line_end":135,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M4x6::m43","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8777},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86216,"byte_end":86219,"line_start":136,"line_end":136,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M4x6::m14","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8778},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86221,"byte_end":86224,"line_start":136,"line_end":136,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M4x6::m24","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8779},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86226,"byte_end":86229,"line_start":136,"line_end":136,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M4x6::m34","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86231,"byte_end":86234,"line_start":136,"line_end":136,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M4x6::m44","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8781},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86255,"byte_end":86258,"line_start":137,"line_end":137,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M4x6::m15","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8782},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86260,"byte_end":86263,"line_start":137,"line_end":137,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M4x6::m25","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8783},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86265,"byte_end":86268,"line_start":137,"line_end":137,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M4x6::m35","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8784},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86270,"byte_end":86273,"line_start":137,"line_end":137,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M4x6::m45","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8785},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86294,"byte_end":86297,"line_start":138,"line_end":138,"column_start":20,"column_end":23},"name":"m16","qualname":"::base::coordinates::M4x6::m16","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8786},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86299,"byte_end":86302,"line_start":138,"line_end":138,"column_start":25,"column_end":28},"name":"m26","qualname":"::base::coordinates::M4x6::m26","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8787},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86304,"byte_end":86307,"line_start":138,"line_end":138,"column_start":30,"column_end":33},"name":"m36","qualname":"::base::coordinates::M4x6::m36","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8788},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86309,"byte_end":86312,"line_start":138,"line_end":138,"column_start":35,"column_end":38},"name":"m46","qualname":"::base::coordinates::M4x6::m46","value":"N","parent":{"krate":0,"index":8763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86373,"byte_end":86377,"line_start":143,"line_end":143,"column_start":14,"column_end":18},"name":"M5x2","qualname":"::base::coordinates::M5x2","value":"M5x2 { m11, m21, m31, m41, m51, m12, m22, m32, m42, m52 }","parent":null,"children":[{"krate":0,"index":8814},{"krate":0,"index":8815},{"krate":0,"index":8816},{"krate":0,"index":8817},{"krate":0,"index":8818},{"krate":0,"index":8819},{"krate":0,"index":8820},{"krate":0,"index":8821},{"krate":0,"index":8822},{"krate":0,"index":8823}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8814},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86379,"byte_end":86382,"line_start":143,"line_end":143,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M5x2::m11","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8815},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86384,"byte_end":86387,"line_start":143,"line_end":143,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M5x2::m21","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8816},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86389,"byte_end":86392,"line_start":143,"line_end":143,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M5x2::m31","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8817},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86394,"byte_end":86397,"line_start":143,"line_end":143,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M5x2::m41","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86399,"byte_end":86402,"line_start":143,"line_end":143,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M5x2::m51","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8819},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86423,"byte_end":86426,"line_start":144,"line_end":144,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M5x2::m12","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86428,"byte_end":86431,"line_start":144,"line_end":144,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M5x2::m22","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8821},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86433,"byte_end":86436,"line_start":144,"line_end":144,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M5x2::m32","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8822},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86438,"byte_end":86441,"line_start":144,"line_end":144,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M5x2::m42","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86443,"byte_end":86446,"line_start":144,"line_end":144,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M5x2::m52","value":"N","parent":{"krate":0,"index":8812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8847},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86462,"byte_end":86466,"line_start":145,"line_end":145,"column_start":14,"column_end":18},"name":"M5x3","qualname":"::base::coordinates::M5x3","value":"M5x3 { m11, m21, m31, m41, m51, m12, m22, m32, m42, m52, m13, m23, m33, m43, m53 }","parent":null,"children":[{"krate":0,"index":8849},{"krate":0,"index":8850},{"krate":0,"index":8851},{"krate":0,"index":8852},{"krate":0,"index":8853},{"krate":0,"index":8854},{"krate":0,"index":8855},{"krate":0,"index":8856},{"krate":0,"index":8857},{"krate":0,"index":8858},{"krate":0,"index":8859},{"krate":0,"index":8860},{"krate":0,"index":8861},{"krate":0,"index":8862},{"krate":0,"index":8863}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8849},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86468,"byte_end":86471,"line_start":145,"line_end":145,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M5x3::m11","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86473,"byte_end":86476,"line_start":145,"line_end":145,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M5x3::m21","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8851},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86478,"byte_end":86481,"line_start":145,"line_end":145,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M5x3::m31","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86483,"byte_end":86486,"line_start":145,"line_end":145,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M5x3::m41","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8853},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86488,"byte_end":86491,"line_start":145,"line_end":145,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M5x3::m51","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8854},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86512,"byte_end":86515,"line_start":146,"line_end":146,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M5x3::m12","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8855},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86517,"byte_end":86520,"line_start":146,"line_end":146,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M5x3::m22","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8856},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86522,"byte_end":86525,"line_start":146,"line_end":146,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M5x3::m32","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8857},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86527,"byte_end":86530,"line_start":146,"line_end":146,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M5x3::m42","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8858},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86532,"byte_end":86535,"line_start":146,"line_end":146,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M5x3::m52","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8859},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86556,"byte_end":86559,"line_start":147,"line_end":147,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M5x3::m13","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8860},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86561,"byte_end":86564,"line_start":147,"line_end":147,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M5x3::m23","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86566,"byte_end":86569,"line_start":147,"line_end":147,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M5x3::m33","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8862},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86571,"byte_end":86574,"line_start":147,"line_end":147,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M5x3::m43","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86576,"byte_end":86579,"line_start":147,"line_end":147,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M5x3::m53","value":"N","parent":{"krate":0,"index":8847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8887},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86595,"byte_end":86599,"line_start":148,"line_end":148,"column_start":14,"column_end":18},"name":"M5x4","qualname":"::base::coordinates::M5x4","value":"M5x4 { m11, m21, m31, m41, m51, m12, m22, m32, m42, m52, m13, m23, m33, m43, m53, m14, m24, m34, m44, m54 }","parent":null,"children":[{"krate":0,"index":8889},{"krate":0,"index":8890},{"krate":0,"index":8891},{"krate":0,"index":8892},{"krate":0,"index":8893},{"krate":0,"index":8894},{"krate":0,"index":8895},{"krate":0,"index":8896},{"krate":0,"index":8897},{"krate":0,"index":8898},{"krate":0,"index":8899},{"krate":0,"index":8900},{"krate":0,"index":8901},{"krate":0,"index":8902},{"krate":0,"index":8903},{"krate":0,"index":8904},{"krate":0,"index":8905},{"krate":0,"index":8906},{"krate":0,"index":8907},{"krate":0,"index":8908}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86601,"byte_end":86604,"line_start":148,"line_end":148,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M5x4::m11","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8890},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86606,"byte_end":86609,"line_start":148,"line_end":148,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M5x4::m21","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8891},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86611,"byte_end":86614,"line_start":148,"line_end":148,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M5x4::m31","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8892},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86616,"byte_end":86619,"line_start":148,"line_end":148,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M5x4::m41","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8893},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86621,"byte_end":86624,"line_start":148,"line_end":148,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M5x4::m51","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8894},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86645,"byte_end":86648,"line_start":149,"line_end":149,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M5x4::m12","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8895},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86650,"byte_end":86653,"line_start":149,"line_end":149,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M5x4::m22","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86655,"byte_end":86658,"line_start":149,"line_end":149,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M5x4::m32","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8897},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86660,"byte_end":86663,"line_start":149,"line_end":149,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M5x4::m42","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8898},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86665,"byte_end":86668,"line_start":149,"line_end":149,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M5x4::m52","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8899},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86689,"byte_end":86692,"line_start":150,"line_end":150,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M5x4::m13","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8900},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86694,"byte_end":86697,"line_start":150,"line_end":150,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M5x4::m23","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8901},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86699,"byte_end":86702,"line_start":150,"line_end":150,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M5x4::m33","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8902},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86704,"byte_end":86707,"line_start":150,"line_end":150,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M5x4::m43","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8903},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86709,"byte_end":86712,"line_start":150,"line_end":150,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M5x4::m53","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8904},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86733,"byte_end":86736,"line_start":151,"line_end":151,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M5x4::m14","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8905},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86738,"byte_end":86741,"line_start":151,"line_end":151,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M5x4::m24","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8906},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86743,"byte_end":86746,"line_start":151,"line_end":151,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M5x4::m34","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8907},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86748,"byte_end":86751,"line_start":151,"line_end":151,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M5x4::m44","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8908},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86753,"byte_end":86756,"line_start":151,"line_end":151,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M5x4::m54","value":"N","parent":{"krate":0,"index":8887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86772,"byte_end":86776,"line_start":152,"line_end":152,"column_start":14,"column_end":18},"name":"M5x5","qualname":"::base::coordinates::M5x5","value":"M5x5 { m11, m21, m31, m41, m51, m12, m22, m32, m42, m52, m13, m23, m33, m43, m53, m14, m24, m34, m44, m54, m15, m25, m35, m45, m55 }","parent":null,"children":[{"krate":0,"index":8934},{"krate":0,"index":8935},{"krate":0,"index":8936},{"krate":0,"index":8937},{"krate":0,"index":8938},{"krate":0,"index":8939},{"krate":0,"index":8940},{"krate":0,"index":8941},{"krate":0,"index":8942},{"krate":0,"index":8943},{"krate":0,"index":8944},{"krate":0,"index":8945},{"krate":0,"index":8946},{"krate":0,"index":8947},{"krate":0,"index":8948},{"krate":0,"index":8949},{"krate":0,"index":8950},{"krate":0,"index":8951},{"krate":0,"index":8952},{"krate":0,"index":8953},{"krate":0,"index":8954},{"krate":0,"index":8955},{"krate":0,"index":8956},{"krate":0,"index":8957},{"krate":0,"index":8958}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86778,"byte_end":86781,"line_start":152,"line_end":152,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M5x5::m11","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86783,"byte_end":86786,"line_start":152,"line_end":152,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M5x5::m21","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86788,"byte_end":86791,"line_start":152,"line_end":152,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M5x5::m31","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86793,"byte_end":86796,"line_start":152,"line_end":152,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M5x5::m41","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86798,"byte_end":86801,"line_start":152,"line_end":152,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M5x5::m51","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86822,"byte_end":86825,"line_start":153,"line_end":153,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M5x5::m12","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8940},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86827,"byte_end":86830,"line_start":153,"line_end":153,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M5x5::m22","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86832,"byte_end":86835,"line_start":153,"line_end":153,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M5x5::m32","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8942},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86837,"byte_end":86840,"line_start":153,"line_end":153,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M5x5::m42","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8943},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86842,"byte_end":86845,"line_start":153,"line_end":153,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M5x5::m52","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8944},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86866,"byte_end":86869,"line_start":154,"line_end":154,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M5x5::m13","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8945},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86871,"byte_end":86874,"line_start":154,"line_end":154,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M5x5::m23","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8946},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86876,"byte_end":86879,"line_start":154,"line_end":154,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M5x5::m33","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8947},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86881,"byte_end":86884,"line_start":154,"line_end":154,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M5x5::m43","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86886,"byte_end":86889,"line_start":154,"line_end":154,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M5x5::m53","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8949},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86910,"byte_end":86913,"line_start":155,"line_end":155,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M5x5::m14","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86915,"byte_end":86918,"line_start":155,"line_end":155,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M5x5::m24","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8951},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86920,"byte_end":86923,"line_start":155,"line_end":155,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M5x5::m34","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8952},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86925,"byte_end":86928,"line_start":155,"line_end":155,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M5x5::m44","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8953},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86930,"byte_end":86933,"line_start":155,"line_end":155,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M5x5::m54","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86954,"byte_end":86957,"line_start":156,"line_end":156,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M5x5::m15","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8955},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86959,"byte_end":86962,"line_start":156,"line_end":156,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M5x5::m25","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8956},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86964,"byte_end":86967,"line_start":156,"line_end":156,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M5x5::m35","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8957},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86969,"byte_end":86972,"line_start":156,"line_end":156,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M5x5::m45","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8958},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86974,"byte_end":86977,"line_start":156,"line_end":156,"column_start":40,"column_end":43},"name":"m55","qualname":"::base::coordinates::M5x5::m55","value":"N","parent":{"krate":0,"index":8932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8982},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86993,"byte_end":86997,"line_start":157,"line_end":157,"column_start":14,"column_end":18},"name":"M5x6","qualname":"::base::coordinates::M5x6","value":"M5x6 { m11, m21, m31, m41, m51, m12, m22, m32, m42, m52, m13, m23, m33, m43, m53, m14, m24, m34, m44, m54, m15, m25, m35, m45, m55, m16, m26, m36, m46, m56 }","parent":null,"children":[{"krate":0,"index":8984},{"krate":0,"index":8985},{"krate":0,"index":8986},{"krate":0,"index":8987},{"krate":0,"index":8988},{"krate":0,"index":8989},{"krate":0,"index":8990},{"krate":0,"index":8991},{"krate":0,"index":8992},{"krate":0,"index":8993},{"krate":0,"index":8994},{"krate":0,"index":8995},{"krate":0,"index":8996},{"krate":0,"index":8997},{"krate":0,"index":8998},{"krate":0,"index":8999},{"krate":0,"index":9000},{"krate":0,"index":9001},{"krate":0,"index":9002},{"krate":0,"index":9003},{"krate":0,"index":9004},{"krate":0,"index":9005},{"krate":0,"index":9006},{"krate":0,"index":9007},{"krate":0,"index":9008},{"krate":0,"index":9009},{"krate":0,"index":9010},{"krate":0,"index":9011},{"krate":0,"index":9012},{"krate":0,"index":9013}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8984},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":86999,"byte_end":87002,"line_start":157,"line_end":157,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M5x6::m11","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8985},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87004,"byte_end":87007,"line_start":157,"line_end":157,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M5x6::m21","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87009,"byte_end":87012,"line_start":157,"line_end":157,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M5x6::m31","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8987},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87014,"byte_end":87017,"line_start":157,"line_end":157,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M5x6::m41","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8988},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87019,"byte_end":87022,"line_start":157,"line_end":157,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M5x6::m51","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8989},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87043,"byte_end":87046,"line_start":158,"line_end":158,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M5x6::m12","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8990},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87048,"byte_end":87051,"line_start":158,"line_end":158,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M5x6::m22","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8991},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87053,"byte_end":87056,"line_start":158,"line_end":158,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M5x6::m32","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8992},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87058,"byte_end":87061,"line_start":158,"line_end":158,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M5x6::m42","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8993},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87063,"byte_end":87066,"line_start":158,"line_end":158,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M5x6::m52","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8994},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87087,"byte_end":87090,"line_start":159,"line_end":159,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M5x6::m13","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8995},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87092,"byte_end":87095,"line_start":159,"line_end":159,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M5x6::m23","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8996},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87097,"byte_end":87100,"line_start":159,"line_end":159,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M5x6::m33","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8997},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87102,"byte_end":87105,"line_start":159,"line_end":159,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M5x6::m43","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87107,"byte_end":87110,"line_start":159,"line_end":159,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M5x6::m53","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8999},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87131,"byte_end":87134,"line_start":160,"line_end":160,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M5x6::m14","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9000},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87136,"byte_end":87139,"line_start":160,"line_end":160,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M5x6::m24","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9001},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87141,"byte_end":87144,"line_start":160,"line_end":160,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M5x6::m34","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87146,"byte_end":87149,"line_start":160,"line_end":160,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M5x6::m44","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9003},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87151,"byte_end":87154,"line_start":160,"line_end":160,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M5x6::m54","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87175,"byte_end":87178,"line_start":161,"line_end":161,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M5x6::m15","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9005},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87180,"byte_end":87183,"line_start":161,"line_end":161,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M5x6::m25","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9006},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87185,"byte_end":87188,"line_start":161,"line_end":161,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M5x6::m35","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9007},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87190,"byte_end":87193,"line_start":161,"line_end":161,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M5x6::m45","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9008},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87195,"byte_end":87198,"line_start":161,"line_end":161,"column_start":40,"column_end":43},"name":"m55","qualname":"::base::coordinates::M5x6::m55","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9009},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87219,"byte_end":87222,"line_start":162,"line_end":162,"column_start":20,"column_end":23},"name":"m16","qualname":"::base::coordinates::M5x6::m16","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87224,"byte_end":87227,"line_start":162,"line_end":162,"column_start":25,"column_end":28},"name":"m26","qualname":"::base::coordinates::M5x6::m26","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9011},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87229,"byte_end":87232,"line_start":162,"line_end":162,"column_start":30,"column_end":33},"name":"m36","qualname":"::base::coordinates::M5x6::m36","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9012},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87234,"byte_end":87237,"line_start":162,"line_end":162,"column_start":35,"column_end":38},"name":"m46","qualname":"::base::coordinates::M5x6::m46","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9013},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87239,"byte_end":87242,"line_start":162,"line_end":162,"column_start":40,"column_end":43},"name":"m56","qualname":"::base::coordinates::M5x6::m56","value":"N","parent":{"krate":0,"index":8982},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9037},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87304,"byte_end":87308,"line_start":168,"line_end":168,"column_start":14,"column_end":18},"name":"M6x2","qualname":"::base::coordinates::M6x2","value":"M6x2 { m11, m21, m31, m41, m51, m61, m12, m22, m32, m42, m52, m62 }","parent":null,"children":[{"krate":0,"index":9039},{"krate":0,"index":9040},{"krate":0,"index":9041},{"krate":0,"index":9042},{"krate":0,"index":9043},{"krate":0,"index":9044},{"krate":0,"index":9045},{"krate":0,"index":9046},{"krate":0,"index":9047},{"krate":0,"index":9048},{"krate":0,"index":9049},{"krate":0,"index":9050}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9039},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87310,"byte_end":87313,"line_start":168,"line_end":168,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M6x2::m11","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9040},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87315,"byte_end":87318,"line_start":168,"line_end":168,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M6x2::m21","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9041},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87320,"byte_end":87323,"line_start":168,"line_end":168,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M6x2::m31","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9042},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87325,"byte_end":87328,"line_start":168,"line_end":168,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M6x2::m41","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9043},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87330,"byte_end":87333,"line_start":168,"line_end":168,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M6x2::m51","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87335,"byte_end":87338,"line_start":168,"line_end":168,"column_start":45,"column_end":48},"name":"m61","qualname":"::base::coordinates::M6x2::m61","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9045},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87359,"byte_end":87362,"line_start":169,"line_end":169,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M6x2::m12","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9046},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87364,"byte_end":87367,"line_start":169,"line_end":169,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M6x2::m22","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9047},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87369,"byte_end":87372,"line_start":169,"line_end":169,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M6x2::m32","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9048},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87374,"byte_end":87377,"line_start":169,"line_end":169,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M6x2::m42","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9049},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87379,"byte_end":87382,"line_start":169,"line_end":169,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M6x2::m52","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9050},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87384,"byte_end":87387,"line_start":169,"line_end":169,"column_start":45,"column_end":48},"name":"m62","qualname":"::base::coordinates::M6x2::m62","value":"N","parent":{"krate":0,"index":9037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9074},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87403,"byte_end":87407,"line_start":170,"line_end":170,"column_start":14,"column_end":18},"name":"M6x3","qualname":"::base::coordinates::M6x3","value":"M6x3 { m11, m21, m31, m41, m51, m61, m12, m22, m32, m42, m52, m62, m13, m23, m33, m43, m53, m63 }","parent":null,"children":[{"krate":0,"index":9076},{"krate":0,"index":9077},{"krate":0,"index":9078},{"krate":0,"index":9079},{"krate":0,"index":9080},{"krate":0,"index":9081},{"krate":0,"index":9082},{"krate":0,"index":9083},{"krate":0,"index":9084},{"krate":0,"index":9085},{"krate":0,"index":9086},{"krate":0,"index":9087},{"krate":0,"index":9088},{"krate":0,"index":9089},{"krate":0,"index":9090},{"krate":0,"index":9091},{"krate":0,"index":9092},{"krate":0,"index":9093}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9076},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87409,"byte_end":87412,"line_start":170,"line_end":170,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M6x3::m11","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9077},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87414,"byte_end":87417,"line_start":170,"line_end":170,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M6x3::m21","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9078},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87419,"byte_end":87422,"line_start":170,"line_end":170,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M6x3::m31","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9079},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87424,"byte_end":87427,"line_start":170,"line_end":170,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M6x3::m41","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9080},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87429,"byte_end":87432,"line_start":170,"line_end":170,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M6x3::m51","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9081},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87434,"byte_end":87437,"line_start":170,"line_end":170,"column_start":45,"column_end":48},"name":"m61","qualname":"::base::coordinates::M6x3::m61","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9082},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87458,"byte_end":87461,"line_start":171,"line_end":171,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M6x3::m12","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9083},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87463,"byte_end":87466,"line_start":171,"line_end":171,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M6x3::m22","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9084},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87468,"byte_end":87471,"line_start":171,"line_end":171,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M6x3::m32","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9085},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87473,"byte_end":87476,"line_start":171,"line_end":171,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M6x3::m42","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9086},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87478,"byte_end":87481,"line_start":171,"line_end":171,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M6x3::m52","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9087},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87483,"byte_end":87486,"line_start":171,"line_end":171,"column_start":45,"column_end":48},"name":"m62","qualname":"::base::coordinates::M6x3::m62","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9088},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87507,"byte_end":87510,"line_start":172,"line_end":172,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M6x3::m13","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9089},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87512,"byte_end":87515,"line_start":172,"line_end":172,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M6x3::m23","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9090},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87517,"byte_end":87520,"line_start":172,"line_end":172,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M6x3::m33","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9091},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87522,"byte_end":87525,"line_start":172,"line_end":172,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M6x3::m43","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9092},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87527,"byte_end":87530,"line_start":172,"line_end":172,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M6x3::m53","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9093},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87532,"byte_end":87535,"line_start":172,"line_end":172,"column_start":45,"column_end":48},"name":"m63","qualname":"::base::coordinates::M6x3::m63","value":"N","parent":{"krate":0,"index":9074},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87551,"byte_end":87555,"line_start":173,"line_end":173,"column_start":14,"column_end":18},"name":"M6x4","qualname":"::base::coordinates::M6x4","value":"M6x4 { m11, m21, m31, m41, m51, m61, m12, m22, m32, m42, m52, m62, m13, m23, m33, m43, m53, m63, m14, m24, m34, m44, m54, m64 }","parent":null,"children":[{"krate":0,"index":9119},{"krate":0,"index":9120},{"krate":0,"index":9121},{"krate":0,"index":9122},{"krate":0,"index":9123},{"krate":0,"index":9124},{"krate":0,"index":9125},{"krate":0,"index":9126},{"krate":0,"index":9127},{"krate":0,"index":9128},{"krate":0,"index":9129},{"krate":0,"index":9130},{"krate":0,"index":9131},{"krate":0,"index":9132},{"krate":0,"index":9133},{"krate":0,"index":9134},{"krate":0,"index":9135},{"krate":0,"index":9136},{"krate":0,"index":9137},{"krate":0,"index":9138},{"krate":0,"index":9139},{"krate":0,"index":9140},{"krate":0,"index":9141},{"krate":0,"index":9142}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87557,"byte_end":87560,"line_start":173,"line_end":173,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M6x4::m11","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87562,"byte_end":87565,"line_start":173,"line_end":173,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M6x4::m21","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87567,"byte_end":87570,"line_start":173,"line_end":173,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M6x4::m31","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87572,"byte_end":87575,"line_start":173,"line_end":173,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M6x4::m41","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87577,"byte_end":87580,"line_start":173,"line_end":173,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M6x4::m51","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87582,"byte_end":87585,"line_start":173,"line_end":173,"column_start":45,"column_end":48},"name":"m61","qualname":"::base::coordinates::M6x4::m61","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87606,"byte_end":87609,"line_start":174,"line_end":174,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M6x4::m12","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9126},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87611,"byte_end":87614,"line_start":174,"line_end":174,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M6x4::m22","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87616,"byte_end":87619,"line_start":174,"line_end":174,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M6x4::m32","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87621,"byte_end":87624,"line_start":174,"line_end":174,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M6x4::m42","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87626,"byte_end":87629,"line_start":174,"line_end":174,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M6x4::m52","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87631,"byte_end":87634,"line_start":174,"line_end":174,"column_start":45,"column_end":48},"name":"m62","qualname":"::base::coordinates::M6x4::m62","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87655,"byte_end":87658,"line_start":175,"line_end":175,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M6x4::m13","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9132},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87660,"byte_end":87663,"line_start":175,"line_end":175,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M6x4::m23","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87665,"byte_end":87668,"line_start":175,"line_end":175,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M6x4::m33","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9134},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87670,"byte_end":87673,"line_start":175,"line_end":175,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M6x4::m43","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87675,"byte_end":87678,"line_start":175,"line_end":175,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M6x4::m53","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9136},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87680,"byte_end":87683,"line_start":175,"line_end":175,"column_start":45,"column_end":48},"name":"m63","qualname":"::base::coordinates::M6x4::m63","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87704,"byte_end":87707,"line_start":176,"line_end":176,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M6x4::m14","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87709,"byte_end":87712,"line_start":176,"line_end":176,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M6x4::m24","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87714,"byte_end":87717,"line_start":176,"line_end":176,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M6x4::m34","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87719,"byte_end":87722,"line_start":176,"line_end":176,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M6x4::m44","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87724,"byte_end":87727,"line_start":176,"line_end":176,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M6x4::m54","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87729,"byte_end":87732,"line_start":176,"line_end":176,"column_start":45,"column_end":48},"name":"m64","qualname":"::base::coordinates::M6x4::m64","value":"N","parent":{"krate":0,"index":9117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87748,"byte_end":87752,"line_start":177,"line_end":177,"column_start":14,"column_end":18},"name":"M6x5","qualname":"::base::coordinates::M6x5","value":"M6x5 { m11, m21, m31, m41, m51, m61, m12, m22, m32, m42, m52, m62, m13, m23, m33, m43, m53, m63, m14, m24, m34, m44, m54, m64, m15, m25, m35, m45, m55, m65 }","parent":null,"children":[{"krate":0,"index":9168},{"krate":0,"index":9169},{"krate":0,"index":9170},{"krate":0,"index":9171},{"krate":0,"index":9172},{"krate":0,"index":9173},{"krate":0,"index":9174},{"krate":0,"index":9175},{"krate":0,"index":9176},{"krate":0,"index":9177},{"krate":0,"index":9178},{"krate":0,"index":9179},{"krate":0,"index":9180},{"krate":0,"index":9181},{"krate":0,"index":9182},{"krate":0,"index":9183},{"krate":0,"index":9184},{"krate":0,"index":9185},{"krate":0,"index":9186},{"krate":0,"index":9187},{"krate":0,"index":9188},{"krate":0,"index":9189},{"krate":0,"index":9190},{"krate":0,"index":9191},{"krate":0,"index":9192},{"krate":0,"index":9193},{"krate":0,"index":9194},{"krate":0,"index":9195},{"krate":0,"index":9196},{"krate":0,"index":9197}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87754,"byte_end":87757,"line_start":177,"line_end":177,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M6x5::m11","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87759,"byte_end":87762,"line_start":177,"line_end":177,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M6x5::m21","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87764,"byte_end":87767,"line_start":177,"line_end":177,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M6x5::m31","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87769,"byte_end":87772,"line_start":177,"line_end":177,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M6x5::m41","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87774,"byte_end":87777,"line_start":177,"line_end":177,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M6x5::m51","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87779,"byte_end":87782,"line_start":177,"line_end":177,"column_start":45,"column_end":48},"name":"m61","qualname":"::base::coordinates::M6x5::m61","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87803,"byte_end":87806,"line_start":178,"line_end":178,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M6x5::m12","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9175},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87808,"byte_end":87811,"line_start":178,"line_end":178,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M6x5::m22","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87813,"byte_end":87816,"line_start":178,"line_end":178,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M6x5::m32","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87818,"byte_end":87821,"line_start":178,"line_end":178,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M6x5::m42","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87823,"byte_end":87826,"line_start":178,"line_end":178,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M6x5::m52","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87828,"byte_end":87831,"line_start":178,"line_end":178,"column_start":45,"column_end":48},"name":"m62","qualname":"::base::coordinates::M6x5::m62","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87852,"byte_end":87855,"line_start":179,"line_end":179,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M6x5::m13","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87857,"byte_end":87860,"line_start":179,"line_end":179,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M6x5::m23","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87862,"byte_end":87865,"line_start":179,"line_end":179,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M6x5::m33","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87867,"byte_end":87870,"line_start":179,"line_end":179,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M6x5::m43","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9184},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87872,"byte_end":87875,"line_start":179,"line_end":179,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M6x5::m53","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87877,"byte_end":87880,"line_start":179,"line_end":179,"column_start":45,"column_end":48},"name":"m63","qualname":"::base::coordinates::M6x5::m63","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87901,"byte_end":87904,"line_start":180,"line_end":180,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M6x5::m14","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9187},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87906,"byte_end":87909,"line_start":180,"line_end":180,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M6x5::m24","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87911,"byte_end":87914,"line_start":180,"line_end":180,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M6x5::m34","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87916,"byte_end":87919,"line_start":180,"line_end":180,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M6x5::m44","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9190},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87921,"byte_end":87924,"line_start":180,"line_end":180,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M6x5::m54","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87926,"byte_end":87929,"line_start":180,"line_end":180,"column_start":45,"column_end":48},"name":"m64","qualname":"::base::coordinates::M6x5::m64","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87950,"byte_end":87953,"line_start":181,"line_end":181,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M6x5::m15","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87955,"byte_end":87958,"line_start":181,"line_end":181,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M6x5::m25","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87960,"byte_end":87963,"line_start":181,"line_end":181,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M6x5::m35","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87965,"byte_end":87968,"line_start":181,"line_end":181,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M6x5::m45","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87970,"byte_end":87973,"line_start":181,"line_end":181,"column_start":40,"column_end":43},"name":"m55","qualname":"::base::coordinates::M6x5::m55","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87975,"byte_end":87978,"line_start":181,"line_end":181,"column_start":45,"column_end":48},"name":"m65","qualname":"::base::coordinates::M6x5::m65","value":"N","parent":{"krate":0,"index":9166},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9221},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":87994,"byte_end":87998,"line_start":182,"line_end":182,"column_start":14,"column_end":18},"name":"M6x6","qualname":"::base::coordinates::M6x6","value":"M6x6 { m11, m21, m31, m41, m51, m61, m12, m22, m32, m42, m52, m62, m13, m23, m33, m43, m53, m63, m14, m24, m34, m44, m54, m64, m15, m25, m35, m45, m55, m65, m16, m26, m36, m46, m56, m66 }","parent":null,"children":[{"krate":0,"index":9223},{"krate":0,"index":9224},{"krate":0,"index":9225},{"krate":0,"index":9226},{"krate":0,"index":9227},{"krate":0,"index":9228},{"krate":0,"index":9229},{"krate":0,"index":9230},{"krate":0,"index":9231},{"krate":0,"index":9232},{"krate":0,"index":9233},{"krate":0,"index":9234},{"krate":0,"index":9235},{"krate":0,"index":9236},{"krate":0,"index":9237},{"krate":0,"index":9238},{"krate":0,"index":9239},{"krate":0,"index":9240},{"krate":0,"index":9241},{"krate":0,"index":9242},{"krate":0,"index":9243},{"krate":0,"index":9244},{"krate":0,"index":9245},{"krate":0,"index":9246},{"krate":0,"index":9247},{"krate":0,"index":9248},{"krate":0,"index":9249},{"krate":0,"index":9250},{"krate":0,"index":9251},{"krate":0,"index":9252},{"krate":0,"index":9253},{"krate":0,"index":9254},{"krate":0,"index":9255},{"krate":0,"index":9256},{"krate":0,"index":9257},{"krate":0,"index":9258}],"decl_id":null,"docs":" Data structure used to provide access to matrix and vector coordinates with the dot\n notation, e.g., `v.x` is the same as `v[0]` for a vector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":82977,"byte_end":82987,"line_start":24,"line_end":24,"column_start":9,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":9223},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88000,"byte_end":88003,"line_start":182,"line_end":182,"column_start":20,"column_end":23},"name":"m11","qualname":"::base::coordinates::M6x6::m11","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88005,"byte_end":88008,"line_start":182,"line_end":182,"column_start":25,"column_end":28},"name":"m21","qualname":"::base::coordinates::M6x6::m21","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88010,"byte_end":88013,"line_start":182,"line_end":182,"column_start":30,"column_end":33},"name":"m31","qualname":"::base::coordinates::M6x6::m31","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88015,"byte_end":88018,"line_start":182,"line_end":182,"column_start":35,"column_end":38},"name":"m41","qualname":"::base::coordinates::M6x6::m41","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88020,"byte_end":88023,"line_start":182,"line_end":182,"column_start":40,"column_end":43},"name":"m51","qualname":"::base::coordinates::M6x6::m51","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88025,"byte_end":88028,"line_start":182,"line_end":182,"column_start":45,"column_end":48},"name":"m61","qualname":"::base::coordinates::M6x6::m61","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88049,"byte_end":88052,"line_start":183,"line_end":183,"column_start":20,"column_end":23},"name":"m12","qualname":"::base::coordinates::M6x6::m12","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88054,"byte_end":88057,"line_start":183,"line_end":183,"column_start":25,"column_end":28},"name":"m22","qualname":"::base::coordinates::M6x6::m22","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88059,"byte_end":88062,"line_start":183,"line_end":183,"column_start":30,"column_end":33},"name":"m32","qualname":"::base::coordinates::M6x6::m32","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88064,"byte_end":88067,"line_start":183,"line_end":183,"column_start":35,"column_end":38},"name":"m42","qualname":"::base::coordinates::M6x6::m42","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88069,"byte_end":88072,"line_start":183,"line_end":183,"column_start":40,"column_end":43},"name":"m52","qualname":"::base::coordinates::M6x6::m52","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9234},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88074,"byte_end":88077,"line_start":183,"line_end":183,"column_start":45,"column_end":48},"name":"m62","qualname":"::base::coordinates::M6x6::m62","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9235},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88098,"byte_end":88101,"line_start":184,"line_end":184,"column_start":20,"column_end":23},"name":"m13","qualname":"::base::coordinates::M6x6::m13","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9236},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88103,"byte_end":88106,"line_start":184,"line_end":184,"column_start":25,"column_end":28},"name":"m23","qualname":"::base::coordinates::M6x6::m23","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88108,"byte_end":88111,"line_start":184,"line_end":184,"column_start":30,"column_end":33},"name":"m33","qualname":"::base::coordinates::M6x6::m33","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9238},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88113,"byte_end":88116,"line_start":184,"line_end":184,"column_start":35,"column_end":38},"name":"m43","qualname":"::base::coordinates::M6x6::m43","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9239},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88118,"byte_end":88121,"line_start":184,"line_end":184,"column_start":40,"column_end":43},"name":"m53","qualname":"::base::coordinates::M6x6::m53","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9240},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88123,"byte_end":88126,"line_start":184,"line_end":184,"column_start":45,"column_end":48},"name":"m63","qualname":"::base::coordinates::M6x6::m63","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88147,"byte_end":88150,"line_start":185,"line_end":185,"column_start":20,"column_end":23},"name":"m14","qualname":"::base::coordinates::M6x6::m14","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9242},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88152,"byte_end":88155,"line_start":185,"line_end":185,"column_start":25,"column_end":28},"name":"m24","qualname":"::base::coordinates::M6x6::m24","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9243},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88157,"byte_end":88160,"line_start":185,"line_end":185,"column_start":30,"column_end":33},"name":"m34","qualname":"::base::coordinates::M6x6::m34","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88162,"byte_end":88165,"line_start":185,"line_end":185,"column_start":35,"column_end":38},"name":"m44","qualname":"::base::coordinates::M6x6::m44","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9245},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88167,"byte_end":88170,"line_start":185,"line_end":185,"column_start":40,"column_end":43},"name":"m54","qualname":"::base::coordinates::M6x6::m54","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88172,"byte_end":88175,"line_start":185,"line_end":185,"column_start":45,"column_end":48},"name":"m64","qualname":"::base::coordinates::M6x6::m64","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88196,"byte_end":88199,"line_start":186,"line_end":186,"column_start":20,"column_end":23},"name":"m15","qualname":"::base::coordinates::M6x6::m15","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9248},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88201,"byte_end":88204,"line_start":186,"line_end":186,"column_start":25,"column_end":28},"name":"m25","qualname":"::base::coordinates::M6x6::m25","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9249},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88206,"byte_end":88209,"line_start":186,"line_end":186,"column_start":30,"column_end":33},"name":"m35","qualname":"::base::coordinates::M6x6::m35","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88211,"byte_end":88214,"line_start":186,"line_end":186,"column_start":35,"column_end":38},"name":"m45","qualname":"::base::coordinates::M6x6::m45","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88216,"byte_end":88219,"line_start":186,"line_end":186,"column_start":40,"column_end":43},"name":"m55","qualname":"::base::coordinates::M6x6::m55","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88221,"byte_end":88224,"line_start":186,"line_end":186,"column_start":45,"column_end":48},"name":"m65","qualname":"::base::coordinates::M6x6::m65","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88245,"byte_end":88248,"line_start":187,"line_end":187,"column_start":20,"column_end":23},"name":"m16","qualname":"::base::coordinates::M6x6::m16","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88250,"byte_end":88253,"line_start":187,"line_end":187,"column_start":25,"column_end":28},"name":"m26","qualname":"::base::coordinates::M6x6::m26","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88255,"byte_end":88258,"line_start":187,"line_end":187,"column_start":30,"column_end":33},"name":"m36","qualname":"::base::coordinates::M6x6::m36","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88260,"byte_end":88263,"line_start":187,"line_end":187,"column_start":35,"column_end":38},"name":"m46","qualname":"::base::coordinates::M6x6::m46","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88265,"byte_end":88268,"line_start":187,"line_end":187,"column_start":40,"column_end":43},"name":"m56","qualname":"::base::coordinates::M6x6::m56","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\coordinates.rs","byte_start":88270,"byte_end":88273,"line_start":187,"line_end":187,"column_start":45,"column_end":48},"name":"m66","qualname":"::base::coordinates::M6x6::m66","value":"N","parent":{"krate":0,"index":9221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"default_allocator","qualname":"::base::default_allocator","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":413},{"krate":0,"index":420},{"krate":0,"index":427},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":451},{"krate":0,"index":456},{"krate":0,"index":461}],"decl_id":null,"docs":" The default matrix data storage allocator.\n\n This will use stack-allocated buffers for matrices with dimensions known at compile-time, and\n heap-allocated buffers for matrices with at least one dimension unknown at compile-time.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":90293,"byte_end":90309,"line_start":34,"line_end":34,"column_start":12,"column_end":28},"name":"DefaultAllocator","qualname":"::base::default_allocator::DefaultAllocator","value":"","parent":null,"children":[],"decl_id":null,"docs":" An allocator based on `GenericArray` and `VecStorage` for statically-sized and dynamically-sized\n matrices respectively.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dimension","qualname":"::base::dimension","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":9606},{"krate":0,"index":9618},{"krate":0,"index":9617},{"krate":0,"index":9614},{"krate":0,"index":9615},{"krate":0,"index":9610},{"krate":0,"index":9611},{"krate":0,"index":9608},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":9620},{"krate":0,"index":9623},{"krate":0,"index":9627},{"krate":0,"index":9632},{"krate":0,"index":9636},{"krate":0,"index":9640},{"krate":0,"index":9643},{"krate":0,"index":9647},{"krate":0,"index":9652},{"krate":0,"index":9655},{"krate":0,"index":9659},{"krate":0,"index":9664},{"krate":0,"index":9668},{"krate":0,"index":9672},{"krate":0,"index":9675},{"krate":0,"index":9679},{"krate":0,"index":9684},{"krate":0,"index":9687},{"krate":0,"index":9691},{"krate":0,"index":9696},{"krate":0,"index":9700},{"krate":0,"index":9704},{"krate":0,"index":9707},{"krate":0,"index":9711},{"krate":0,"index":9716},{"krate":0,"index":9719},{"krate":0,"index":9723},{"krate":0,"index":9728},{"krate":0,"index":9732},{"krate":0,"index":9736},{"krate":0,"index":9739},{"krate":0,"index":9743},{"krate":0,"index":9748},{"krate":0,"index":9751},{"krate":0,"index":9755},{"krate":0,"index":9760},{"krate":0,"index":9764},{"krate":0,"index":9768},{"krate":0,"index":9771},{"krate":0,"index":9775},{"krate":0,"index":9780},{"krate":0,"index":9783},{"krate":0,"index":9787},{"krate":0,"index":9792},{"krate":0,"index":9796},{"krate":0,"index":9800},{"krate":0,"index":9803},{"krate":0,"index":9807},{"krate":0,"index":515},{"krate":0,"index":519},{"krate":0,"index":9812},{"krate":0,"index":9826},{"krate":0,"index":9825},{"krate":0,"index":9823},{"krate":0,"index":9820},{"krate":0,"index":9817},{"krate":0,"index":9818},{"krate":0,"index":9814},{"krate":0,"index":9815},{"krate":0,"index":521},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":11098},{"krate":0,"index":11112},{"krate":0,"index":11111},{"krate":0,"index":11109},{"krate":0,"index":11106},{"krate":0,"index":11103},{"krate":0,"index":11104},{"krate":0,"index":11100},{"krate":0,"index":11101},{"krate":0,"index":9828},{"krate":0,"index":9832},{"krate":0,"index":9835},{"krate":0,"index":9837},{"krate":0,"index":11114},{"krate":0,"index":11128},{"krate":0,"index":11127},{"krate":0,"index":11125},{"krate":0,"index":11122},{"krate":0,"index":11119},{"krate":0,"index":11120},{"krate":0,"index":11116},{"krate":0,"index":11117},{"krate":0,"index":9838},{"krate":0,"index":9842},{"krate":0,"index":9845},{"krate":0,"index":9847},{"krate":0,"index":11130},{"krate":0,"index":11144},{"krate":0,"index":11143},{"krate":0,"index":11141},{"krate":0,"index":11138},{"krate":0,"index":11135},{"krate":0,"index":11136},{"krate":0,"index":11132},{"krate":0,"index":11133},{"krate":0,"index":9848},{"krate":0,"index":9852},{"krate":0,"index":9855},{"krate":0,"index":9857},{"krate":0,"index":11146},{"krate":0,"index":11160},{"krate":0,"index":11159},{"krate":0,"index":11157},{"krate":0,"index":11154},{"krate":0,"index":11151},{"krate":0,"index":11152},{"krate":0,"index":11148},{"krate":0,"index":11149},{"krate":0,"index":9858},{"krate":0,"index":9862},{"krate":0,"index":9865},{"krate":0,"index":9867},{"krate":0,"index":11162},{"krate":0,"index":11176},{"krate":0,"index":11175},{"krate":0,"index":11173},{"krate":0,"index":11170},{"krate":0,"index":11167},{"krate":0,"index":11168},{"krate":0,"index":11164},{"krate":0,"index":11165},{"krate":0,"index":9868},{"krate":0,"index":9872},{"krate":0,"index":9875},{"krate":0,"index":9877},{"krate":0,"index":11178},{"krate":0,"index":11192},{"krate":0,"index":11191},{"krate":0,"index":11189},{"krate":0,"index":11186},{"krate":0,"index":11183},{"krate":0,"index":11184},{"krate":0,"index":11180},{"krate":0,"index":11181},{"krate":0,"index":9878},{"krate":0,"index":9882},{"krate":0,"index":9885},{"krate":0,"index":9887},{"krate":0,"index":11194},{"krate":0,"index":11208},{"krate":0,"index":11207},{"krate":0,"index":11205},{"krate":0,"index":11202},{"krate":0,"index":11199},{"krate":0,"index":11200},{"krate":0,"index":11196},{"krate":0,"index":11197},{"krate":0,"index":9888},{"krate":0,"index":9892},{"krate":0,"index":9895},{"krate":0,"index":9897},{"krate":0,"index":11210},{"krate":0,"index":11224},{"krate":0,"index":11223},{"krate":0,"index":11221},{"krate":0,"index":11218},{"krate":0,"index":11215},{"krate":0,"index":11216},{"krate":0,"index":11212},{"krate":0,"index":11213},{"krate":0,"index":9898},{"krate":0,"index":9902},{"krate":0,"index":9905},{"krate":0,"index":9907},{"krate":0,"index":11226},{"krate":0,"index":11240},{"krate":0,"index":11239},{"krate":0,"index":11237},{"krate":0,"index":11234},{"krate":0,"index":11231},{"krate":0,"index":11232},{"krate":0,"index":11228},{"krate":0,"index":11229},{"krate":0,"index":9908},{"krate":0,"index":9912},{"krate":0,"index":9915},{"krate":0,"index":9917},{"krate":0,"index":11242},{"krate":0,"index":11256},{"krate":0,"index":11255},{"krate":0,"index":11253},{"krate":0,"index":11250},{"krate":0,"index":11247},{"krate":0,"index":11248},{"krate":0,"index":11244},{"krate":0,"index":11245},{"krate":0,"index":9918},{"krate":0,"index":9922},{"krate":0,"index":9925},{"krate":0,"index":9927},{"krate":0,"index":11258},{"krate":0,"index":11272},{"krate":0,"index":11271},{"krate":0,"index":11269},{"krate":0,"index":11266},{"krate":0,"index":11263},{"krate":0,"index":11264},{"krate":0,"index":11260},{"krate":0,"index":11261},{"krate":0,"index":9928},{"krate":0,"index":9932},{"krate":0,"index":9935},{"krate":0,"index":9937},{"krate":0,"index":11274},{"krate":0,"index":11288},{"krate":0,"index":11287},{"krate":0,"index":11285},{"krate":0,"index":11282},{"krate":0,"index":11279},{"krate":0,"index":11280},{"krate":0,"index":11276},{"krate":0,"index":11277},{"krate":0,"index":9938},{"krate":0,"index":9942},{"krate":0,"index":9945},{"krate":0,"index":9947},{"krate":0,"index":11290},{"krate":0,"index":11304},{"krate":0,"index":11303},{"krate":0,"index":11301},{"krate":0,"index":11298},{"krate":0,"index":11295},{"krate":0,"index":11296},{"krate":0,"index":11292},{"krate":0,"index":11293},{"krate":0,"index":9948},{"krate":0,"index":9952},{"krate":0,"index":9955},{"krate":0,"index":9957},{"krate":0,"index":11306},{"krate":0,"index":11320},{"krate":0,"index":11319},{"krate":0,"index":11317},{"krate":0,"index":11314},{"krate":0,"index":11311},{"krate":0,"index":11312},{"krate":0,"index":11308},{"krate":0,"index":11309},{"krate":0,"index":9958},{"krate":0,"index":9962},{"krate":0,"index":9965},{"krate":0,"index":9967},{"krate":0,"index":11322},{"krate":0,"index":11336},{"krate":0,"index":11335},{"krate":0,"index":11333},{"krate":0,"index":11330},{"krate":0,"index":11327},{"krate":0,"index":11328},{"krate":0,"index":11324},{"krate":0,"index":11325},{"krate":0,"index":9968},{"krate":0,"index":9972},{"krate":0,"index":9975},{"krate":0,"index":9977},{"krate":0,"index":11338},{"krate":0,"index":11352},{"krate":0,"index":11351},{"krate":0,"index":11349},{"krate":0,"index":11346},{"krate":0,"index":11343},{"krate":0,"index":11344},{"krate":0,"index":11340},{"krate":0,"index":11341},{"krate":0,"index":9978},{"krate":0,"index":9982},{"krate":0,"index":9985},{"krate":0,"index":9987},{"krate":0,"index":11354},{"krate":0,"index":11368},{"krate":0,"index":11367},{"krate":0,"index":11365},{"krate":0,"index":11362},{"krate":0,"index":11359},{"krate":0,"index":11360},{"krate":0,"index":11356},{"krate":0,"index":11357},{"krate":0,"index":9988},{"krate":0,"index":9992},{"krate":0,"index":9995},{"krate":0,"index":9997},{"krate":0,"index":11370},{"krate":0,"index":11384},{"krate":0,"index":11383},{"krate":0,"index":11381},{"krate":0,"index":11378},{"krate":0,"index":11375},{"krate":0,"index":11376},{"krate":0,"index":11372},{"krate":0,"index":11373},{"krate":0,"index":9998},{"krate":0,"index":10002},{"krate":0,"index":10005},{"krate":0,"index":10007},{"krate":0,"index":11386},{"krate":0,"index":11400},{"krate":0,"index":11399},{"krate":0,"index":11397},{"krate":0,"index":11394},{"krate":0,"index":11391},{"krate":0,"index":11392},{"krate":0,"index":11388},{"krate":0,"index":11389},{"krate":0,"index":10008},{"krate":0,"index":10012},{"krate":0,"index":10015},{"krate":0,"index":10017},{"krate":0,"index":11402},{"krate":0,"index":11416},{"krate":0,"index":11415},{"krate":0,"index":11413},{"krate":0,"index":11410},{"krate":0,"index":11407},{"krate":0,"index":11408},{"krate":0,"index":11404},{"krate":0,"index":11405},{"krate":0,"index":10018},{"krate":0,"index":10022},{"krate":0,"index":10025},{"krate":0,"index":10027},{"krate":0,"index":11418},{"krate":0,"index":11432},{"krate":0,"index":11431},{"krate":0,"index":11429},{"krate":0,"index":11426},{"krate":0,"index":11423},{"krate":0,"index":11424},{"krate":0,"index":11420},{"krate":0,"index":11421},{"krate":0,"index":10028},{"krate":0,"index":10032},{"krate":0,"index":10035},{"krate":0,"index":10037},{"krate":0,"index":11434},{"krate":0,"index":11448},{"krate":0,"index":11447},{"krate":0,"index":11445},{"krate":0,"index":11442},{"krate":0,"index":11439},{"krate":0,"index":11440},{"krate":0,"index":11436},{"krate":0,"index":11437},{"krate":0,"index":10038},{"krate":0,"index":10042},{"krate":0,"index":10045},{"krate":0,"index":10047},{"krate":0,"index":11450},{"krate":0,"index":11464},{"krate":0,"index":11463},{"krate":0,"index":11461},{"krate":0,"index":11458},{"krate":0,"index":11455},{"krate":0,"index":11456},{"krate":0,"index":11452},{"krate":0,"index":11453},{"krate":0,"index":10048},{"krate":0,"index":10052},{"krate":0,"index":10055},{"krate":0,"index":10057},{"krate":0,"index":11466},{"krate":0,"index":11480},{"krate":0,"index":11479},{"krate":0,"index":11477},{"krate":0,"index":11474},{"krate":0,"index":11471},{"krate":0,"index":11472},{"krate":0,"index":11468},{"krate":0,"index":11469},{"krate":0,"index":10058},{"krate":0,"index":10062},{"krate":0,"index":10065},{"krate":0,"index":10067},{"krate":0,"index":11482},{"krate":0,"index":11496},{"krate":0,"index":11495},{"krate":0,"index":11493},{"krate":0,"index":11490},{"krate":0,"index":11487},{"krate":0,"index":11488},{"krate":0,"index":11484},{"krate":0,"index":11485},{"krate":0,"index":10068},{"krate":0,"index":10072},{"krate":0,"index":10075},{"krate":0,"index":10077},{"krate":0,"index":11498},{"krate":0,"index":11512},{"krate":0,"index":11511},{"krate":0,"index":11509},{"krate":0,"index":11506},{"krate":0,"index":11503},{"krate":0,"index":11504},{"krate":0,"index":11500},{"krate":0,"index":11501},{"krate":0,"index":10078},{"krate":0,"index":10082},{"krate":0,"index":10085},{"krate":0,"index":10087},{"krate":0,"index":11514},{"krate":0,"index":11528},{"krate":0,"index":11527},{"krate":0,"index":11525},{"krate":0,"index":11522},{"krate":0,"index":11519},{"krate":0,"index":11520},{"krate":0,"index":11516},{"krate":0,"index":11517},{"krate":0,"index":10088},{"krate":0,"index":10092},{"krate":0,"index":10095},{"krate":0,"index":10097},{"krate":0,"index":11530},{"krate":0,"index":11544},{"krate":0,"index":11543},{"krate":0,"index":11541},{"krate":0,"index":11538},{"krate":0,"index":11535},{"krate":0,"index":11536},{"krate":0,"index":11532},{"krate":0,"index":11533},{"krate":0,"index":10098},{"krate":0,"index":10102},{"krate":0,"index":10105},{"krate":0,"index":10107},{"krate":0,"index":11546},{"krate":0,"index":11560},{"krate":0,"index":11559},{"krate":0,"index":11557},{"krate":0,"index":11554},{"krate":0,"index":11551},{"krate":0,"index":11552},{"krate":0,"index":11548},{"krate":0,"index":11549},{"krate":0,"index":10108},{"krate":0,"index":10112},{"krate":0,"index":10115},{"krate":0,"index":10117},{"krate":0,"index":11562},{"krate":0,"index":11576},{"krate":0,"index":11575},{"krate":0,"index":11573},{"krate":0,"index":11570},{"krate":0,"index":11567},{"krate":0,"index":11568},{"krate":0,"index":11564},{"krate":0,"index":11565},{"krate":0,"index":10118},{"krate":0,"index":10122},{"krate":0,"index":10125},{"krate":0,"index":10127},{"krate":0,"index":11578},{"krate":0,"index":11592},{"krate":0,"index":11591},{"krate":0,"index":11589},{"krate":0,"index":11586},{"krate":0,"index":11583},{"krate":0,"index":11584},{"krate":0,"index":11580},{"krate":0,"index":11581},{"krate":0,"index":10128},{"krate":0,"index":10132},{"krate":0,"index":10135},{"krate":0,"index":10137},{"krate":0,"index":11594},{"krate":0,"index":11608},{"krate":0,"index":11607},{"krate":0,"index":11605},{"krate":0,"index":11602},{"krate":0,"index":11599},{"krate":0,"index":11600},{"krate":0,"index":11596},{"krate":0,"index":11597},{"krate":0,"index":10138},{"krate":0,"index":10142},{"krate":0,"index":10145},{"krate":0,"index":10147},{"krate":0,"index":11610},{"krate":0,"index":11624},{"krate":0,"index":11623},{"krate":0,"index":11621},{"krate":0,"index":11618},{"krate":0,"index":11615},{"krate":0,"index":11616},{"krate":0,"index":11612},{"krate":0,"index":11613},{"krate":0,"index":10148},{"krate":0,"index":10152},{"krate":0,"index":10155},{"krate":0,"index":10157},{"krate":0,"index":11626},{"krate":0,"index":11640},{"krate":0,"index":11639},{"krate":0,"index":11637},{"krate":0,"index":11634},{"krate":0,"index":11631},{"krate":0,"index":11632},{"krate":0,"index":11628},{"krate":0,"index":11629},{"krate":0,"index":10158},{"krate":0,"index":10162},{"krate":0,"index":10165},{"krate":0,"index":10167},{"krate":0,"index":11642},{"krate":0,"index":11656},{"krate":0,"index":11655},{"krate":0,"index":11653},{"krate":0,"index":11650},{"krate":0,"index":11647},{"krate":0,"index":11648},{"krate":0,"index":11644},{"krate":0,"index":11645},{"krate":0,"index":10168},{"krate":0,"index":10172},{"krate":0,"index":10175},{"krate":0,"index":10177},{"krate":0,"index":11658},{"krate":0,"index":11672},{"krate":0,"index":11671},{"krate":0,"index":11669},{"krate":0,"index":11666},{"krate":0,"index":11663},{"krate":0,"index":11664},{"krate":0,"index":11660},{"krate":0,"index":11661},{"krate":0,"index":10178},{"krate":0,"index":10182},{"krate":0,"index":10185},{"krate":0,"index":10187},{"krate":0,"index":11674},{"krate":0,"index":11688},{"krate":0,"index":11687},{"krate":0,"index":11685},{"krate":0,"index":11682},{"krate":0,"index":11679},{"krate":0,"index":11680},{"krate":0,"index":11676},{"krate":0,"index":11677},{"krate":0,"index":10188},{"krate":0,"index":10192},{"krate":0,"index":10195},{"krate":0,"index":10197},{"krate":0,"index":11690},{"krate":0,"index":11704},{"krate":0,"index":11703},{"krate":0,"index":11701},{"krate":0,"index":11698},{"krate":0,"index":11695},{"krate":0,"index":11696},{"krate":0,"index":11692},{"krate":0,"index":11693},{"krate":0,"index":10198},{"krate":0,"index":10202},{"krate":0,"index":10205},{"krate":0,"index":10207},{"krate":0,"index":11706},{"krate":0,"index":11720},{"krate":0,"index":11719},{"krate":0,"index":11717},{"krate":0,"index":11714},{"krate":0,"index":11711},{"krate":0,"index":11712},{"krate":0,"index":11708},{"krate":0,"index":11709},{"krate":0,"index":10208},{"krate":0,"index":10212},{"krate":0,"index":10215},{"krate":0,"index":10217},{"krate":0,"index":11722},{"krate":0,"index":11736},{"krate":0,"index":11735},{"krate":0,"index":11733},{"krate":0,"index":11730},{"krate":0,"index":11727},{"krate":0,"index":11728},{"krate":0,"index":11724},{"krate":0,"index":11725},{"krate":0,"index":10218},{"krate":0,"index":10222},{"krate":0,"index":10225},{"krate":0,"index":10227},{"krate":0,"index":11738},{"krate":0,"index":11752},{"krate":0,"index":11751},{"krate":0,"index":11749},{"krate":0,"index":11746},{"krate":0,"index":11743},{"krate":0,"index":11744},{"krate":0,"index":11740},{"krate":0,"index":11741},{"krate":0,"index":10228},{"krate":0,"index":10232},{"krate":0,"index":10235},{"krate":0,"index":10237},{"krate":0,"index":11754},{"krate":0,"index":11768},{"krate":0,"index":11767},{"krate":0,"index":11765},{"krate":0,"index":11762},{"krate":0,"index":11759},{"krate":0,"index":11760},{"krate":0,"index":11756},{"krate":0,"index":11757},{"krate":0,"index":10238},{"krate":0,"index":10242},{"krate":0,"index":10245},{"krate":0,"index":10247},{"krate":0,"index":11770},{"krate":0,"index":11784},{"krate":0,"index":11783},{"krate":0,"index":11781},{"krate":0,"index":11778},{"krate":0,"index":11775},{"krate":0,"index":11776},{"krate":0,"index":11772},{"krate":0,"index":11773},{"krate":0,"index":10248},{"krate":0,"index":10252},{"krate":0,"index":10255},{"krate":0,"index":10257},{"krate":0,"index":11786},{"krate":0,"index":11800},{"krate":0,"index":11799},{"krate":0,"index":11797},{"krate":0,"index":11794},{"krate":0,"index":11791},{"krate":0,"index":11792},{"krate":0,"index":11788},{"krate":0,"index":11789},{"krate":0,"index":10258},{"krate":0,"index":10262},{"krate":0,"index":10265},{"krate":0,"index":10267},{"krate":0,"index":11802},{"krate":0,"index":11816},{"krate":0,"index":11815},{"krate":0,"index":11813},{"krate":0,"index":11810},{"krate":0,"index":11807},{"krate":0,"index":11808},{"krate":0,"index":11804},{"krate":0,"index":11805},{"krate":0,"index":10268},{"krate":0,"index":10272},{"krate":0,"index":10275},{"krate":0,"index":10277},{"krate":0,"index":11818},{"krate":0,"index":11832},{"krate":0,"index":11831},{"krate":0,"index":11829},{"krate":0,"index":11826},{"krate":0,"index":11823},{"krate":0,"index":11824},{"krate":0,"index":11820},{"krate":0,"index":11821},{"krate":0,"index":10278},{"krate":0,"index":10282},{"krate":0,"index":10285},{"krate":0,"index":10287},{"krate":0,"index":11834},{"krate":0,"index":11848},{"krate":0,"index":11847},{"krate":0,"index":11845},{"krate":0,"index":11842},{"krate":0,"index":11839},{"krate":0,"index":11840},{"krate":0,"index":11836},{"krate":0,"index":11837},{"krate":0,"index":10288},{"krate":0,"index":10292},{"krate":0,"index":10295},{"krate":0,"index":10297},{"krate":0,"index":11850},{"krate":0,"index":11864},{"krate":0,"index":11863},{"krate":0,"index":11861},{"krate":0,"index":11858},{"krate":0,"index":11855},{"krate":0,"index":11856},{"krate":0,"index":11852},{"krate":0,"index":11853},{"krate":0,"index":10298},{"krate":0,"index":10302},{"krate":0,"index":10305},{"krate":0,"index":10307},{"krate":0,"index":11866},{"krate":0,"index":11880},{"krate":0,"index":11879},{"krate":0,"index":11877},{"krate":0,"index":11874},{"krate":0,"index":11871},{"krate":0,"index":11872},{"krate":0,"index":11868},{"krate":0,"index":11869},{"krate":0,"index":10308},{"krate":0,"index":10312},{"krate":0,"index":10315},{"krate":0,"index":10317},{"krate":0,"index":11882},{"krate":0,"index":11896},{"krate":0,"index":11895},{"krate":0,"index":11893},{"krate":0,"index":11890},{"krate":0,"index":11887},{"krate":0,"index":11888},{"krate":0,"index":11884},{"krate":0,"index":11885},{"krate":0,"index":10318},{"krate":0,"index":10322},{"krate":0,"index":10325},{"krate":0,"index":10327},{"krate":0,"index":11898},{"krate":0,"index":11912},{"krate":0,"index":11911},{"krate":0,"index":11909},{"krate":0,"index":11906},{"krate":0,"index":11903},{"krate":0,"index":11904},{"krate":0,"index":11900},{"krate":0,"index":11901},{"krate":0,"index":10328},{"krate":0,"index":10332},{"krate":0,"index":10335},{"krate":0,"index":10337},{"krate":0,"index":11914},{"krate":0,"index":11928},{"krate":0,"index":11927},{"krate":0,"index":11925},{"krate":0,"index":11922},{"krate":0,"index":11919},{"krate":0,"index":11920},{"krate":0,"index":11916},{"krate":0,"index":11917},{"krate":0,"index":10338},{"krate":0,"index":10342},{"krate":0,"index":10345},{"krate":0,"index":10347},{"krate":0,"index":11930},{"krate":0,"index":11944},{"krate":0,"index":11943},{"krate":0,"index":11941},{"krate":0,"index":11938},{"krate":0,"index":11935},{"krate":0,"index":11936},{"krate":0,"index":11932},{"krate":0,"index":11933},{"krate":0,"index":10348},{"krate":0,"index":10352},{"krate":0,"index":10355},{"krate":0,"index":10357},{"krate":0,"index":11946},{"krate":0,"index":11960},{"krate":0,"index":11959},{"krate":0,"index":11957},{"krate":0,"index":11954},{"krate":0,"index":11951},{"krate":0,"index":11952},{"krate":0,"index":11948},{"krate":0,"index":11949},{"krate":0,"index":10358},{"krate":0,"index":10362},{"krate":0,"index":10365},{"krate":0,"index":10367},{"krate":0,"index":11962},{"krate":0,"index":11976},{"krate":0,"index":11975},{"krate":0,"index":11973},{"krate":0,"index":11970},{"krate":0,"index":11967},{"krate":0,"index":11968},{"krate":0,"index":11964},{"krate":0,"index":11965},{"krate":0,"index":10368},{"krate":0,"index":10372},{"krate":0,"index":10375},{"krate":0,"index":10377},{"krate":0,"index":11978},{"krate":0,"index":11992},{"krate":0,"index":11991},{"krate":0,"index":11989},{"krate":0,"index":11986},{"krate":0,"index":11983},{"krate":0,"index":11984},{"krate":0,"index":11980},{"krate":0,"index":11981},{"krate":0,"index":10378},{"krate":0,"index":10382},{"krate":0,"index":10385},{"krate":0,"index":10387},{"krate":0,"index":11994},{"krate":0,"index":12008},{"krate":0,"index":12007},{"krate":0,"index":12005},{"krate":0,"index":12002},{"krate":0,"index":11999},{"krate":0,"index":12000},{"krate":0,"index":11996},{"krate":0,"index":11997},{"krate":0,"index":10388},{"krate":0,"index":10392},{"krate":0,"index":10395},{"krate":0,"index":10397},{"krate":0,"index":12010},{"krate":0,"index":12024},{"krate":0,"index":12023},{"krate":0,"index":12021},{"krate":0,"index":12018},{"krate":0,"index":12015},{"krate":0,"index":12016},{"krate":0,"index":12012},{"krate":0,"index":12013},{"krate":0,"index":10398},{"krate":0,"index":10402},{"krate":0,"index":10405},{"krate":0,"index":10407},{"krate":0,"index":12026},{"krate":0,"index":12040},{"krate":0,"index":12039},{"krate":0,"index":12037},{"krate":0,"index":12034},{"krate":0,"index":12031},{"krate":0,"index":12032},{"krate":0,"index":12028},{"krate":0,"index":12029},{"krate":0,"index":10408},{"krate":0,"index":10412},{"krate":0,"index":10415},{"krate":0,"index":10417},{"krate":0,"index":12042},{"krate":0,"index":12056},{"krate":0,"index":12055},{"krate":0,"index":12053},{"krate":0,"index":12050},{"krate":0,"index":12047},{"krate":0,"index":12048},{"krate":0,"index":12044},{"krate":0,"index":12045},{"krate":0,"index":10418},{"krate":0,"index":10422},{"krate":0,"index":10425},{"krate":0,"index":10427},{"krate":0,"index":12058},{"krate":0,"index":12072},{"krate":0,"index":12071},{"krate":0,"index":12069},{"krate":0,"index":12066},{"krate":0,"index":12063},{"krate":0,"index":12064},{"krate":0,"index":12060},{"krate":0,"index":12061},{"krate":0,"index":10428},{"krate":0,"index":10432},{"krate":0,"index":10435},{"krate":0,"index":10437},{"krate":0,"index":12074},{"krate":0,"index":12088},{"krate":0,"index":12087},{"krate":0,"index":12085},{"krate":0,"index":12082},{"krate":0,"index":12079},{"krate":0,"index":12080},{"krate":0,"index":12076},{"krate":0,"index":12077},{"krate":0,"index":10438},{"krate":0,"index":10442},{"krate":0,"index":10445},{"krate":0,"index":10447},{"krate":0,"index":12090},{"krate":0,"index":12104},{"krate":0,"index":12103},{"krate":0,"index":12101},{"krate":0,"index":12098},{"krate":0,"index":12095},{"krate":0,"index":12096},{"krate":0,"index":12092},{"krate":0,"index":12093},{"krate":0,"index":10448},{"krate":0,"index":10452},{"krate":0,"index":10455},{"krate":0,"index":10457},{"krate":0,"index":12106},{"krate":0,"index":12120},{"krate":0,"index":12119},{"krate":0,"index":12117},{"krate":0,"index":12114},{"krate":0,"index":12111},{"krate":0,"index":12112},{"krate":0,"index":12108},{"krate":0,"index":12109},{"krate":0,"index":10458},{"krate":0,"index":10462},{"krate":0,"index":10465},{"krate":0,"index":10467},{"krate":0,"index":12122},{"krate":0,"index":12136},{"krate":0,"index":12135},{"krate":0,"index":12133},{"krate":0,"index":12130},{"krate":0,"index":12127},{"krate":0,"index":12128},{"krate":0,"index":12124},{"krate":0,"index":12125},{"krate":0,"index":10468},{"krate":0,"index":10472},{"krate":0,"index":10475},{"krate":0,"index":10477},{"krate":0,"index":12138},{"krate":0,"index":12152},{"krate":0,"index":12151},{"krate":0,"index":12149},{"krate":0,"index":12146},{"krate":0,"index":12143},{"krate":0,"index":12144},{"krate":0,"index":12140},{"krate":0,"index":12141},{"krate":0,"index":10478},{"krate":0,"index":10482},{"krate":0,"index":10485},{"krate":0,"index":10487},{"krate":0,"index":12154},{"krate":0,"index":12168},{"krate":0,"index":12167},{"krate":0,"index":12165},{"krate":0,"index":12162},{"krate":0,"index":12159},{"krate":0,"index":12160},{"krate":0,"index":12156},{"krate":0,"index":12157},{"krate":0,"index":10488},{"krate":0,"index":10492},{"krate":0,"index":10495},{"krate":0,"index":10497},{"krate":0,"index":12170},{"krate":0,"index":12184},{"krate":0,"index":12183},{"krate":0,"index":12181},{"krate":0,"index":12178},{"krate":0,"index":12175},{"krate":0,"index":12176},{"krate":0,"index":12172},{"krate":0,"index":12173},{"krate":0,"index":10498},{"krate":0,"index":10502},{"krate":0,"index":10505},{"krate":0,"index":10507},{"krate":0,"index":12186},{"krate":0,"index":12200},{"krate":0,"index":12199},{"krate":0,"index":12197},{"krate":0,"index":12194},{"krate":0,"index":12191},{"krate":0,"index":12192},{"krate":0,"index":12188},{"krate":0,"index":12189},{"krate":0,"index":10508},{"krate":0,"index":10512},{"krate":0,"index":10515},{"krate":0,"index":10517},{"krate":0,"index":12202},{"krate":0,"index":12216},{"krate":0,"index":12215},{"krate":0,"index":12213},{"krate":0,"index":12210},{"krate":0,"index":12207},{"krate":0,"index":12208},{"krate":0,"index":12204},{"krate":0,"index":12205},{"krate":0,"index":10518},{"krate":0,"index":10522},{"krate":0,"index":10525},{"krate":0,"index":10527},{"krate":0,"index":12218},{"krate":0,"index":12232},{"krate":0,"index":12231},{"krate":0,"index":12229},{"krate":0,"index":12226},{"krate":0,"index":12223},{"krate":0,"index":12224},{"krate":0,"index":12220},{"krate":0,"index":12221},{"krate":0,"index":10528},{"krate":0,"index":10532},{"krate":0,"index":10535},{"krate":0,"index":10537},{"krate":0,"index":12234},{"krate":0,"index":12248},{"krate":0,"index":12247},{"krate":0,"index":12245},{"krate":0,"index":12242},{"krate":0,"index":12239},{"krate":0,"index":12240},{"krate":0,"index":12236},{"krate":0,"index":12237},{"krate":0,"index":10538},{"krate":0,"index":10542},{"krate":0,"index":10545},{"krate":0,"index":10547},{"krate":0,"index":12250},{"krate":0,"index":12264},{"krate":0,"index":12263},{"krate":0,"index":12261},{"krate":0,"index":12258},{"krate":0,"index":12255},{"krate":0,"index":12256},{"krate":0,"index":12252},{"krate":0,"index":12253},{"krate":0,"index":10548},{"krate":0,"index":10552},{"krate":0,"index":10555},{"krate":0,"index":10557},{"krate":0,"index":12266},{"krate":0,"index":12280},{"krate":0,"index":12279},{"krate":0,"index":12277},{"krate":0,"index":12274},{"krate":0,"index":12271},{"krate":0,"index":12272},{"krate":0,"index":12268},{"krate":0,"index":12269},{"krate":0,"index":10558},{"krate":0,"index":10562},{"krate":0,"index":10565},{"krate":0,"index":10567},{"krate":0,"index":12282},{"krate":0,"index":12296},{"krate":0,"index":12295},{"krate":0,"index":12293},{"krate":0,"index":12290},{"krate":0,"index":12287},{"krate":0,"index":12288},{"krate":0,"index":12284},{"krate":0,"index":12285},{"krate":0,"index":10568},{"krate":0,"index":10572},{"krate":0,"index":10575},{"krate":0,"index":10577},{"krate":0,"index":12298},{"krate":0,"index":12312},{"krate":0,"index":12311},{"krate":0,"index":12309},{"krate":0,"index":12306},{"krate":0,"index":12303},{"krate":0,"index":12304},{"krate":0,"index":12300},{"krate":0,"index":12301},{"krate":0,"index":10578},{"krate":0,"index":10582},{"krate":0,"index":10585},{"krate":0,"index":10587},{"krate":0,"index":12314},{"krate":0,"index":12328},{"krate":0,"index":12327},{"krate":0,"index":12325},{"krate":0,"index":12322},{"krate":0,"index":12319},{"krate":0,"index":12320},{"krate":0,"index":12316},{"krate":0,"index":12317},{"krate":0,"index":10588},{"krate":0,"index":10592},{"krate":0,"index":10595},{"krate":0,"index":10597},{"krate":0,"index":12330},{"krate":0,"index":12344},{"krate":0,"index":12343},{"krate":0,"index":12341},{"krate":0,"index":12338},{"krate":0,"index":12335},{"krate":0,"index":12336},{"krate":0,"index":12332},{"krate":0,"index":12333},{"krate":0,"index":10598},{"krate":0,"index":10602},{"krate":0,"index":10605},{"krate":0,"index":10607},{"krate":0,"index":12346},{"krate":0,"index":12360},{"krate":0,"index":12359},{"krate":0,"index":12357},{"krate":0,"index":12354},{"krate":0,"index":12351},{"krate":0,"index":12352},{"krate":0,"index":12348},{"krate":0,"index":12349},{"krate":0,"index":10608},{"krate":0,"index":10612},{"krate":0,"index":10615},{"krate":0,"index":10617},{"krate":0,"index":12362},{"krate":0,"index":12376},{"krate":0,"index":12375},{"krate":0,"index":12373},{"krate":0,"index":12370},{"krate":0,"index":12367},{"krate":0,"index":12368},{"krate":0,"index":12364},{"krate":0,"index":12365},{"krate":0,"index":10618},{"krate":0,"index":10622},{"krate":0,"index":10625},{"krate":0,"index":10627},{"krate":0,"index":12378},{"krate":0,"index":12392},{"krate":0,"index":12391},{"krate":0,"index":12389},{"krate":0,"index":12386},{"krate":0,"index":12383},{"krate":0,"index":12384},{"krate":0,"index":12380},{"krate":0,"index":12381},{"krate":0,"index":10628},{"krate":0,"index":10632},{"krate":0,"index":10635},{"krate":0,"index":10637},{"krate":0,"index":12394},{"krate":0,"index":12408},{"krate":0,"index":12407},{"krate":0,"index":12405},{"krate":0,"index":12402},{"krate":0,"index":12399},{"krate":0,"index":12400},{"krate":0,"index":12396},{"krate":0,"index":12397},{"krate":0,"index":10638},{"krate":0,"index":10642},{"krate":0,"index":10645},{"krate":0,"index":10647},{"krate":0,"index":12410},{"krate":0,"index":12424},{"krate":0,"index":12423},{"krate":0,"index":12421},{"krate":0,"index":12418},{"krate":0,"index":12415},{"krate":0,"index":12416},{"krate":0,"index":12412},{"krate":0,"index":12413},{"krate":0,"index":10648},{"krate":0,"index":10652},{"krate":0,"index":10655},{"krate":0,"index":10657},{"krate":0,"index":12426},{"krate":0,"index":12440},{"krate":0,"index":12439},{"krate":0,"index":12437},{"krate":0,"index":12434},{"krate":0,"index":12431},{"krate":0,"index":12432},{"krate":0,"index":12428},{"krate":0,"index":12429},{"krate":0,"index":10658},{"krate":0,"index":10662},{"krate":0,"index":10665},{"krate":0,"index":10667},{"krate":0,"index":12442},{"krate":0,"index":12456},{"krate":0,"index":12455},{"krate":0,"index":12453},{"krate":0,"index":12450},{"krate":0,"index":12447},{"krate":0,"index":12448},{"krate":0,"index":12444},{"krate":0,"index":12445},{"krate":0,"index":10668},{"krate":0,"index":10672},{"krate":0,"index":10675},{"krate":0,"index":10677},{"krate":0,"index":12458},{"krate":0,"index":12472},{"krate":0,"index":12471},{"krate":0,"index":12469},{"krate":0,"index":12466},{"krate":0,"index":12463},{"krate":0,"index":12464},{"krate":0,"index":12460},{"krate":0,"index":12461},{"krate":0,"index":10678},{"krate":0,"index":10682},{"krate":0,"index":10685},{"krate":0,"index":10687},{"krate":0,"index":12474},{"krate":0,"index":12488},{"krate":0,"index":12487},{"krate":0,"index":12485},{"krate":0,"index":12482},{"krate":0,"index":12479},{"krate":0,"index":12480},{"krate":0,"index":12476},{"krate":0,"index":12477},{"krate":0,"index":10688},{"krate":0,"index":10692},{"krate":0,"index":10695},{"krate":0,"index":10697},{"krate":0,"index":12490},{"krate":0,"index":12504},{"krate":0,"index":12503},{"krate":0,"index":12501},{"krate":0,"index":12498},{"krate":0,"index":12495},{"krate":0,"index":12496},{"krate":0,"index":12492},{"krate":0,"index":12493},{"krate":0,"index":10698},{"krate":0,"index":10702},{"krate":0,"index":10705},{"krate":0,"index":10707},{"krate":0,"index":12506},{"krate":0,"index":12520},{"krate":0,"index":12519},{"krate":0,"index":12517},{"krate":0,"index":12514},{"krate":0,"index":12511},{"krate":0,"index":12512},{"krate":0,"index":12508},{"krate":0,"index":12509},{"krate":0,"index":10708},{"krate":0,"index":10712},{"krate":0,"index":10715},{"krate":0,"index":10717},{"krate":0,"index":12522},{"krate":0,"index":12536},{"krate":0,"index":12535},{"krate":0,"index":12533},{"krate":0,"index":12530},{"krate":0,"index":12527},{"krate":0,"index":12528},{"krate":0,"index":12524},{"krate":0,"index":12525},{"krate":0,"index":10718},{"krate":0,"index":10722},{"krate":0,"index":10725},{"krate":0,"index":10727},{"krate":0,"index":12538},{"krate":0,"index":12552},{"krate":0,"index":12551},{"krate":0,"index":12549},{"krate":0,"index":12546},{"krate":0,"index":12543},{"krate":0,"index":12544},{"krate":0,"index":12540},{"krate":0,"index":12541},{"krate":0,"index":10728},{"krate":0,"index":10732},{"krate":0,"index":10735},{"krate":0,"index":10737},{"krate":0,"index":12554},{"krate":0,"index":12568},{"krate":0,"index":12567},{"krate":0,"index":12565},{"krate":0,"index":12562},{"krate":0,"index":12559},{"krate":0,"index":12560},{"krate":0,"index":12556},{"krate":0,"index":12557},{"krate":0,"index":10738},{"krate":0,"index":10742},{"krate":0,"index":10745},{"krate":0,"index":10747},{"krate":0,"index":12570},{"krate":0,"index":12584},{"krate":0,"index":12583},{"krate":0,"index":12581},{"krate":0,"index":12578},{"krate":0,"index":12575},{"krate":0,"index":12576},{"krate":0,"index":12572},{"krate":0,"index":12573},{"krate":0,"index":10748},{"krate":0,"index":10752},{"krate":0,"index":10755},{"krate":0,"index":10757},{"krate":0,"index":12586},{"krate":0,"index":12600},{"krate":0,"index":12599},{"krate":0,"index":12597},{"krate":0,"index":12594},{"krate":0,"index":12591},{"krate":0,"index":12592},{"krate":0,"index":12588},{"krate":0,"index":12589},{"krate":0,"index":10758},{"krate":0,"index":10762},{"krate":0,"index":10765},{"krate":0,"index":10767},{"krate":0,"index":12602},{"krate":0,"index":12616},{"krate":0,"index":12615},{"krate":0,"index":12613},{"krate":0,"index":12610},{"krate":0,"index":12607},{"krate":0,"index":12608},{"krate":0,"index":12604},{"krate":0,"index":12605},{"krate":0,"index":10768},{"krate":0,"index":10772},{"krate":0,"index":10775},{"krate":0,"index":10777},{"krate":0,"index":12618},{"krate":0,"index":12632},{"krate":0,"index":12631},{"krate":0,"index":12629},{"krate":0,"index":12626},{"krate":0,"index":12623},{"krate":0,"index":12624},{"krate":0,"index":12620},{"krate":0,"index":12621},{"krate":0,"index":10778},{"krate":0,"index":10782},{"krate":0,"index":10785},{"krate":0,"index":10787},{"krate":0,"index":12634},{"krate":0,"index":12648},{"krate":0,"index":12647},{"krate":0,"index":12645},{"krate":0,"index":12642},{"krate":0,"index":12639},{"krate":0,"index":12640},{"krate":0,"index":12636},{"krate":0,"index":12637},{"krate":0,"index":10788},{"krate":0,"index":10792},{"krate":0,"index":10795},{"krate":0,"index":10797},{"krate":0,"index":12650},{"krate":0,"index":12664},{"krate":0,"index":12663},{"krate":0,"index":12661},{"krate":0,"index":12658},{"krate":0,"index":12655},{"krate":0,"index":12656},{"krate":0,"index":12652},{"krate":0,"index":12653},{"krate":0,"index":10798},{"krate":0,"index":10802},{"krate":0,"index":10805},{"krate":0,"index":10807},{"krate":0,"index":12666},{"krate":0,"index":12680},{"krate":0,"index":12679},{"krate":0,"index":12677},{"krate":0,"index":12674},{"krate":0,"index":12671},{"krate":0,"index":12672},{"krate":0,"index":12668},{"krate":0,"index":12669},{"krate":0,"index":10808},{"krate":0,"index":10812},{"krate":0,"index":10815},{"krate":0,"index":10817},{"krate":0,"index":12682},{"krate":0,"index":12696},{"krate":0,"index":12695},{"krate":0,"index":12693},{"krate":0,"index":12690},{"krate":0,"index":12687},{"krate":0,"index":12688},{"krate":0,"index":12684},{"krate":0,"index":12685},{"krate":0,"index":10818},{"krate":0,"index":10822},{"krate":0,"index":10825},{"krate":0,"index":10827},{"krate":0,"index":12698},{"krate":0,"index":12712},{"krate":0,"index":12711},{"krate":0,"index":12709},{"krate":0,"index":12706},{"krate":0,"index":12703},{"krate":0,"index":12704},{"krate":0,"index":12700},{"krate":0,"index":12701},{"krate":0,"index":10828},{"krate":0,"index":10832},{"krate":0,"index":10835},{"krate":0,"index":10837},{"krate":0,"index":12714},{"krate":0,"index":12728},{"krate":0,"index":12727},{"krate":0,"index":12725},{"krate":0,"index":12722},{"krate":0,"index":12719},{"krate":0,"index":12720},{"krate":0,"index":12716},{"krate":0,"index":12717},{"krate":0,"index":10838},{"krate":0,"index":10842},{"krate":0,"index":10845},{"krate":0,"index":10847},{"krate":0,"index":12730},{"krate":0,"index":12744},{"krate":0,"index":12743},{"krate":0,"index":12741},{"krate":0,"index":12738},{"krate":0,"index":12735},{"krate":0,"index":12736},{"krate":0,"index":12732},{"krate":0,"index":12733},{"krate":0,"index":10848},{"krate":0,"index":10852},{"krate":0,"index":10855},{"krate":0,"index":10857},{"krate":0,"index":12746},{"krate":0,"index":12760},{"krate":0,"index":12759},{"krate":0,"index":12757},{"krate":0,"index":12754},{"krate":0,"index":12751},{"krate":0,"index":12752},{"krate":0,"index":12748},{"krate":0,"index":12749},{"krate":0,"index":10858},{"krate":0,"index":10862},{"krate":0,"index":10865},{"krate":0,"index":10867},{"krate":0,"index":12762},{"krate":0,"index":12776},{"krate":0,"index":12775},{"krate":0,"index":12773},{"krate":0,"index":12770},{"krate":0,"index":12767},{"krate":0,"index":12768},{"krate":0,"index":12764},{"krate":0,"index":12765},{"krate":0,"index":10868},{"krate":0,"index":10872},{"krate":0,"index":10875},{"krate":0,"index":10877},{"krate":0,"index":12778},{"krate":0,"index":12792},{"krate":0,"index":12791},{"krate":0,"index":12789},{"krate":0,"index":12786},{"krate":0,"index":12783},{"krate":0,"index":12784},{"krate":0,"index":12780},{"krate":0,"index":12781},{"krate":0,"index":10878},{"krate":0,"index":10882},{"krate":0,"index":10885},{"krate":0,"index":10887},{"krate":0,"index":12794},{"krate":0,"index":12808},{"krate":0,"index":12807},{"krate":0,"index":12805},{"krate":0,"index":12802},{"krate":0,"index":12799},{"krate":0,"index":12800},{"krate":0,"index":12796},{"krate":0,"index":12797},{"krate":0,"index":10888},{"krate":0,"index":10892},{"krate":0,"index":10895},{"krate":0,"index":10897},{"krate":0,"index":12810},{"krate":0,"index":12824},{"krate":0,"index":12823},{"krate":0,"index":12821},{"krate":0,"index":12818},{"krate":0,"index":12815},{"krate":0,"index":12816},{"krate":0,"index":12812},{"krate":0,"index":12813},{"krate":0,"index":10898},{"krate":0,"index":10902},{"krate":0,"index":10905},{"krate":0,"index":10907},{"krate":0,"index":12826},{"krate":0,"index":12840},{"krate":0,"index":12839},{"krate":0,"index":12837},{"krate":0,"index":12834},{"krate":0,"index":12831},{"krate":0,"index":12832},{"krate":0,"index":12828},{"krate":0,"index":12829},{"krate":0,"index":10908},{"krate":0,"index":10912},{"krate":0,"index":10915},{"krate":0,"index":10917},{"krate":0,"index":12842},{"krate":0,"index":12856},{"krate":0,"index":12855},{"krate":0,"index":12853},{"krate":0,"index":12850},{"krate":0,"index":12847},{"krate":0,"index":12848},{"krate":0,"index":12844},{"krate":0,"index":12845},{"krate":0,"index":10918},{"krate":0,"index":10922},{"krate":0,"index":10925},{"krate":0,"index":10927},{"krate":0,"index":12858},{"krate":0,"index":12872},{"krate":0,"index":12871},{"krate":0,"index":12869},{"krate":0,"index":12866},{"krate":0,"index":12863},{"krate":0,"index":12864},{"krate":0,"index":12860},{"krate":0,"index":12861},{"krate":0,"index":10928},{"krate":0,"index":10932},{"krate":0,"index":10935},{"krate":0,"index":10937},{"krate":0,"index":12874},{"krate":0,"index":12888},{"krate":0,"index":12887},{"krate":0,"index":12885},{"krate":0,"index":12882},{"krate":0,"index":12879},{"krate":0,"index":12880},{"krate":0,"index":12876},{"krate":0,"index":12877},{"krate":0,"index":10938},{"krate":0,"index":10942},{"krate":0,"index":10945},{"krate":0,"index":10947},{"krate":0,"index":12890},{"krate":0,"index":12904},{"krate":0,"index":12903},{"krate":0,"index":12901},{"krate":0,"index":12898},{"krate":0,"index":12895},{"krate":0,"index":12896},{"krate":0,"index":12892},{"krate":0,"index":12893},{"krate":0,"index":10948},{"krate":0,"index":10952},{"krate":0,"index":10955},{"krate":0,"index":10957},{"krate":0,"index":12906},{"krate":0,"index":12920},{"krate":0,"index":12919},{"krate":0,"index":12917},{"krate":0,"index":12914},{"krate":0,"index":12911},{"krate":0,"index":12912},{"krate":0,"index":12908},{"krate":0,"index":12909},{"krate":0,"index":10958},{"krate":0,"index":10962},{"krate":0,"index":10965},{"krate":0,"index":10967},{"krate":0,"index":12922},{"krate":0,"index":12936},{"krate":0,"index":12935},{"krate":0,"index":12933},{"krate":0,"index":12930},{"krate":0,"index":12927},{"krate":0,"index":12928},{"krate":0,"index":12924},{"krate":0,"index":12925},{"krate":0,"index":10968},{"krate":0,"index":10972},{"krate":0,"index":10975},{"krate":0,"index":10977},{"krate":0,"index":12938},{"krate":0,"index":12952},{"krate":0,"index":12951},{"krate":0,"index":12949},{"krate":0,"index":12946},{"krate":0,"index":12943},{"krate":0,"index":12944},{"krate":0,"index":12940},{"krate":0,"index":12941},{"krate":0,"index":10978},{"krate":0,"index":10982},{"krate":0,"index":10985},{"krate":0,"index":10987},{"krate":0,"index":12954},{"krate":0,"index":12968},{"krate":0,"index":12967},{"krate":0,"index":12965},{"krate":0,"index":12962},{"krate":0,"index":12959},{"krate":0,"index":12960},{"krate":0,"index":12956},{"krate":0,"index":12957},{"krate":0,"index":10988},{"krate":0,"index":10992},{"krate":0,"index":10995},{"krate":0,"index":10997},{"krate":0,"index":12970},{"krate":0,"index":12984},{"krate":0,"index":12983},{"krate":0,"index":12981},{"krate":0,"index":12978},{"krate":0,"index":12975},{"krate":0,"index":12976},{"krate":0,"index":12972},{"krate":0,"index":12973},{"krate":0,"index":10998},{"krate":0,"index":11002},{"krate":0,"index":11005},{"krate":0,"index":11007},{"krate":0,"index":12986},{"krate":0,"index":13000},{"krate":0,"index":12999},{"krate":0,"index":12997},{"krate":0,"index":12994},{"krate":0,"index":12991},{"krate":0,"index":12992},{"krate":0,"index":12988},{"krate":0,"index":12989},{"krate":0,"index":11008},{"krate":0,"index":11012},{"krate":0,"index":11015},{"krate":0,"index":11017},{"krate":0,"index":13002},{"krate":0,"index":13016},{"krate":0,"index":13015},{"krate":0,"index":13013},{"krate":0,"index":13010},{"krate":0,"index":13007},{"krate":0,"index":13008},{"krate":0,"index":13004},{"krate":0,"index":13005},{"krate":0,"index":11018},{"krate":0,"index":11022},{"krate":0,"index":11025},{"krate":0,"index":11027},{"krate":0,"index":13018},{"krate":0,"index":13032},{"krate":0,"index":13031},{"krate":0,"index":13029},{"krate":0,"index":13026},{"krate":0,"index":13023},{"krate":0,"index":13024},{"krate":0,"index":13020},{"krate":0,"index":13021},{"krate":0,"index":11028},{"krate":0,"index":11032},{"krate":0,"index":11035},{"krate":0,"index":11037},{"krate":0,"index":13034},{"krate":0,"index":13048},{"krate":0,"index":13047},{"krate":0,"index":13045},{"krate":0,"index":13042},{"krate":0,"index":13039},{"krate":0,"index":13040},{"krate":0,"index":13036},{"krate":0,"index":13037},{"krate":0,"index":11038},{"krate":0,"index":11042},{"krate":0,"index":11045},{"krate":0,"index":11047},{"krate":0,"index":13050},{"krate":0,"index":13064},{"krate":0,"index":13063},{"krate":0,"index":13061},{"krate":0,"index":13058},{"krate":0,"index":13055},{"krate":0,"index":13056},{"krate":0,"index":13052},{"krate":0,"index":13053},{"krate":0,"index":11048},{"krate":0,"index":11052},{"krate":0,"index":11055},{"krate":0,"index":11057},{"krate":0,"index":13066},{"krate":0,"index":13080},{"krate":0,"index":13079},{"krate":0,"index":13077},{"krate":0,"index":13074},{"krate":0,"index":13071},{"krate":0,"index":13072},{"krate":0,"index":13068},{"krate":0,"index":13069},{"krate":0,"index":11058},{"krate":0,"index":11062},{"krate":0,"index":11065},{"krate":0,"index":11067},{"krate":0,"index":13082},{"krate":0,"index":13096},{"krate":0,"index":13095},{"krate":0,"index":13093},{"krate":0,"index":13090},{"krate":0,"index":13087},{"krate":0,"index":13088},{"krate":0,"index":13084},{"krate":0,"index":13085},{"krate":0,"index":11068},{"krate":0,"index":11072},{"krate":0,"index":11075},{"krate":0,"index":11077},{"krate":0,"index":13098},{"krate":0,"index":13112},{"krate":0,"index":13111},{"krate":0,"index":13109},{"krate":0,"index":13106},{"krate":0,"index":13103},{"krate":0,"index":13104},{"krate":0,"index":13100},{"krate":0,"index":13101},{"krate":0,"index":11078},{"krate":0,"index":11082},{"krate":0,"index":11085},{"krate":0,"index":11087},{"krate":0,"index":13114},{"krate":0,"index":13128},{"krate":0,"index":13127},{"krate":0,"index":13125},{"krate":0,"index":13122},{"krate":0,"index":13119},{"krate":0,"index":13120},{"krate":0,"index":13116},{"krate":0,"index":13117},{"krate":0,"index":11088},{"krate":0,"index":11092},{"krate":0,"index":11095},{"krate":0,"index":11097},{"krate":0,"index":531},{"krate":0,"index":540},{"krate":0,"index":551},{"krate":0,"index":561},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":579},{"krate":0,"index":584}],"decl_id":null,"docs":" Traits and tags for identifying the dimension of all algebraic entities.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":97588,"byte_end":97611,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9606},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98108,"byte_end":98115,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Dynamic","qualname":"::base::dimension::Dynamic","value":"Dynamic {  }","parent":null,"children":[{"krate":0,"index":9607}],"decl_id":null,"docs":" Dim of dynamically-sized algebraic entities.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98220,"byte_end":98223,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Dynamic>::new","value":"fn (value: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A dynamic size equal to `value`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98199,"byte_end":98208,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98798,"byte_end":98807,"line_start":47,"line_end":47,"column_start":11,"column_end":20},"name":"IsDynamic","qualname":"::base::dimension::IsDynamic","value":"IsDynamic","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by `Dynamic`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98901,"byte_end":98915,"line_start":49,"line_end":49,"column_start":11,"column_end":25},"name":"IsNotStaticOne","qualname":"::base::dimension::IsNotStaticOne","value":"IsNotStaticOne","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by `Dynamic` and type-level integers different from `U1`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99159,"byte_end":99162,"line_start":56,"line_end":56,"column_start":11,"column_end":14},"name":"Dim","qualname":"::base::dimension::Dim","value":"Dim: Any + Debug + Copy + PartialEq + Send + Sync","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503}],"decl_id":null,"docs":" Trait implemented by any type that can be used as a dimension. This includes type-level\n integers and `Dynamic` (for dimensions not known at compile-time).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99240,"byte_end":99242,"line_start":58,"line_end":58,"column_start":8,"column_end":10},"name":"is","qualname":"::base::dimension::Dim::is","value":"fn <D> () -> bool","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99215,"byte_end":99232,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99444,"byte_end":99456,"line_start":64,"line_end":64,"column_start":8,"column_end":20},"name":"try_to_usize","qualname":"::base::dimension::Dim::try_to_usize","value":"fn () -> Option<usize>","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Gets the compile-time value of `Self`. Returns `None` if it is not known, i.e., if `Self =\n Dynamic`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99614,"byte_end":99619,"line_start":68,"line_end":68,"column_start":8,"column_end":13},"name":"value","qualname":"::base::dimension::Dim::value","value":"fn (&self) -> usize","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Gets the run-time value of `self`. For type-level integers, this is the same as\n `Self::try_to_usize().unwrap()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99798,"byte_end":99808,"line_start":72,"line_end":72,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::base::dimension::Dim::from_usize","value":"fn (dim: usize) -> Self","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Builds an instance of `Self` from a run-time value. Panics if `Self` is a type-level\n integer and `dim != Self::try_to_usize().unwrap()`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102363,"byte_end":102369,"line_start":180,"line_end":180,"column_start":45,"column_end":51},"name":"DimSum","qualname":"::base::dimension::DimSum","value":"<D1 as DimAdd<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9623},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102323,"byte_end":102329,"line_start":180,"line_end":180,"column_start":5,"column_end":11},"name":"DimAdd","qualname":"::base::dimension::DimAdd","value":"DimAdd<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9625},{"krate":0,"index":9626}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102348,"byte_end":102351,"line_start":180,"line_end":180,"column_start":30,"column_end":33},"name":"add","qualname":"::base::dimension::DimAdd::add","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9623},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102375,"byte_end":102385,"line_start":180,"line_end":180,"column_start":57,"column_end":67},"name":"DimNameSum","qualname":"::base::dimension::DimNameSum","value":"<D1 as DimNameAdd<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102331,"byte_end":102341,"line_start":180,"line_end":180,"column_start":13,"column_end":23},"name":"DimNameAdd","qualname":"::base::dimension::DimNameAdd","value":"DimNameAdd<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9645},{"krate":0,"index":9646}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102348,"byte_end":102351,"line_start":180,"line_end":180,"column_start":30,"column_end":33},"name":"add","qualname":"::base::dimension::DimNameAdd::add","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9643},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9652},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102440,"byte_end":102447,"line_start":181,"line_end":181,"column_start":45,"column_end":52},"name":"DimProd","qualname":"::base::dimension::DimProd","value":"<D1 as DimMul<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9655},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102400,"byte_end":102406,"line_start":181,"line_end":181,"column_start":5,"column_end":11},"name":"DimMul","qualname":"::base::dimension::DimMul","value":"DimMul<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9657},{"krate":0,"index":9658}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9658},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102425,"byte_end":102428,"line_start":181,"line_end":181,"column_start":30,"column_end":33},"name":"mul","qualname":"::base::dimension::DimMul::mul","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9655},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9672},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102452,"byte_end":102463,"line_start":181,"line_end":181,"column_start":57,"column_end":68},"name":"DimNameProd","qualname":"::base::dimension::DimNameProd","value":"<D1 as DimNameMul<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9675},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102408,"byte_end":102418,"line_start":181,"line_end":181,"column_start":13,"column_end":23},"name":"DimNameMul","qualname":"::base::dimension::DimNameMul","value":"DimNameMul<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9677},{"krate":0,"index":9678}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9678},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102425,"byte_end":102428,"line_start":181,"line_end":181,"column_start":30,"column_end":33},"name":"mul","qualname":"::base::dimension::DimNameMul::mul","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9675},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102518,"byte_end":102525,"line_start":182,"line_end":182,"column_start":45,"column_end":52},"name":"DimDiff","qualname":"::base::dimension::DimDiff","value":"<D1 as DimSub<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102478,"byte_end":102484,"line_start":182,"line_end":182,"column_start":5,"column_end":11},"name":"DimSub","qualname":"::base::dimension::DimSub","value":"DimSub<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9689},{"krate":0,"index":9690}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102503,"byte_end":102506,"line_start":182,"line_end":182,"column_start":30,"column_end":33},"name":"sub","qualname":"::base::dimension::DimSub::sub","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9687},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9704},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102530,"byte_end":102541,"line_start":182,"line_end":182,"column_start":57,"column_end":68},"name":"DimNameDiff","qualname":"::base::dimension::DimNameDiff","value":"<D1 as DimNameSub<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9707},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102486,"byte_end":102496,"line_start":182,"line_end":182,"column_start":13,"column_end":23},"name":"DimNameSub","qualname":"::base::dimension::DimNameSub","value":"DimNameSub<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9709},{"krate":0,"index":9710}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9710},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102503,"byte_end":102506,"line_start":182,"line_end":182,"column_start":30,"column_end":33},"name":"sub","qualname":"::base::dimension::DimNameSub::sub","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9707},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102596,"byte_end":102603,"line_start":183,"line_end":183,"column_start":45,"column_end":52},"name":"DimQuot","qualname":"::base::dimension::DimQuot","value":"<D1 as DimDiv<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9719},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102556,"byte_end":102562,"line_start":183,"line_end":183,"column_start":5,"column_end":11},"name":"DimDiv","qualname":"::base::dimension::DimDiv","value":"DimDiv<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9721},{"krate":0,"index":9722}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9722},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102581,"byte_end":102584,"line_start":183,"line_end":183,"column_start":30,"column_end":33},"name":"div","qualname":"::base::dimension::DimDiv::div","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9719},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9736},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102608,"byte_end":102619,"line_start":183,"line_end":183,"column_start":57,"column_end":68},"name":"DimNameQuot","qualname":"::base::dimension::DimNameQuot","value":"<D1 as DimNameDiv<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9739},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102564,"byte_end":102574,"line_start":183,"line_end":183,"column_start":13,"column_end":23},"name":"DimNameDiv","qualname":"::base::dimension::DimNameDiv","value":"DimNameDiv<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9741},{"krate":0,"index":9742}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102581,"byte_end":102584,"line_start":183,"line_end":183,"column_start":30,"column_end":33},"name":"div","qualname":"::base::dimension::DimNameDiv::div","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9739},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9748},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102674,"byte_end":102684,"line_start":184,"line_end":184,"column_start":45,"column_end":55},"name":"DimMinimum","qualname":"::base::dimension::DimMinimum","value":"<D1 as DimMin<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9751},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102634,"byte_end":102640,"line_start":184,"line_end":184,"column_start":5,"column_end":11},"name":"DimMin","qualname":"::base::dimension::DimMin","value":"DimMin<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9753},{"krate":0,"index":9754}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9754},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102659,"byte_end":102662,"line_start":184,"line_end":184,"column_start":30,"column_end":33},"name":"min","qualname":"::base::dimension::DimMin::min","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9768},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102686,"byte_end":102700,"line_start":184,"line_end":184,"column_start":57,"column_end":71},"name":"DimNameMinimum","qualname":"::base::dimension::DimNameMinimum","value":"<D1 as DimNameMin<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9771},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102642,"byte_end":102652,"line_start":184,"line_end":184,"column_start":13,"column_end":23},"name":"DimNameMin","qualname":"::base::dimension::DimNameMin","value":"DimNameMin<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9773},{"krate":0,"index":9774}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9774},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102659,"byte_end":102662,"line_start":184,"line_end":184,"column_start":30,"column_end":33},"name":"min","qualname":"::base::dimension::DimNameMin::min","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102755,"byte_end":102765,"line_start":185,"line_end":185,"column_start":45,"column_end":55},"name":"DimMaximum","qualname":"::base::dimension::DimMaximum","value":"<D1 as DimMax<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9783},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102715,"byte_end":102721,"line_start":185,"line_end":185,"column_start":5,"column_end":11},"name":"DimMax","qualname":"::base::dimension::DimMax","value":"DimMax<D: Dim>: Dim","parent":null,"children":[{"krate":0,"index":9785},{"krate":0,"index":9786}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9786},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102740,"byte_end":102743,"line_start":185,"line_end":185,"column_start":30,"column_end":33},"name":"max","qualname":"::base::dimension::DimMax::max","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":9800},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102767,"byte_end":102781,"line_start":185,"line_end":185,"column_start":57,"column_end":71},"name":"DimNameMaximum","qualname":"::base::dimension::DimNameMaximum","value":"<D1 as DimNameMax<D2>>::Output","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9803},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102723,"byte_end":102733,"line_start":185,"line_end":185,"column_start":13,"column_end":23},"name":"DimNameMax","qualname":"::base::dimension::DimNameMax","value":"DimNameMax<D: DimName>: DimName","parent":null,"children":[{"krate":0,"index":9805},{"krate":0,"index":9806}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9806},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102740,"byte_end":102743,"line_start":185,"line_end":185,"column_start":30,"column_end":33},"name":"max","qualname":"::base::dimension::DimNameMax::max","value":"fn (self, other: D) -> Self::Output","parent":{"krate":0,"index":9803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102864,"byte_end":102871,"line_start":189,"line_end":189,"column_start":11,"column_end":18},"name":"DimName","qualname":"::base::dimension::DimName","value":"DimName: Dim","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"decl_id":null,"docs":" Trait implemented exclusively by type-level integers.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102888,"byte_end":102893,"line_start":190,"line_end":190,"column_start":10,"column_end":15},"name":"Value","qualname":"::base::dimension::DimName::Value","value":"type Value: NamedDim<Name = Self>;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103004,"byte_end":103008,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"name","qualname":"::base::dimension::DimName::name","value":"fn () -> Self","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" The name of this dimension, i.e., the singleton `Self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102987,"byte_end":102996,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103128,"byte_end":103131,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"dim","qualname":"::base::dimension::DimName::dim","value":"fn () -> usize","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" The value of this dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103111,"byte_end":103120,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103196,"byte_end":103204,"line_start":204,"line_end":204,"column_start":11,"column_end":19},"name":"NamedDim","qualname":"::base::dimension::NamedDim","value":"NamedDim: Sized + Any + Unsigned","parent":null,"children":[{"krate":0,"index":520}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103240,"byte_end":103244,"line_start":205,"line_end":205,"column_start":10,"column_end":14},"name":"Name","qualname":"::base::dimension::NamedDim::Name","value":"type Name: DimName<Value = Self>;","parent":{"krate":0,"index":519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103455,"byte_end":103457,"line_start":211,"line_end":211,"column_start":12,"column_end":14},"name":"U1","qualname":"::base::dimension::U1","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension with a value of `1`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11098},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105017,"byte_end":105019,"line_start":288,"line_end":288,"column_start":5,"column_end":7},"name":"U0","qualname":"::base::dimension::U0","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105029,"byte_end":105031,"line_start":288,"line_end":288,"column_start":17,"column_end":19},"name":"U2","qualname":"::base::dimension::U2","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105033,"byte_end":105035,"line_start":288,"line_end":288,"column_start":21,"column_end":23},"name":"U3","qualname":"::base::dimension::U3","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105037,"byte_end":105039,"line_start":288,"line_end":288,"column_start":25,"column_end":27},"name":"U4","qualname":"::base::dimension::U4","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105041,"byte_end":105043,"line_start":288,"line_end":288,"column_start":29,"column_end":31},"name":"U5","qualname":"::base::dimension::U5","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105045,"byte_end":105047,"line_start":288,"line_end":288,"column_start":33,"column_end":35},"name":"U6","qualname":"::base::dimension::U6","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105049,"byte_end":105051,"line_start":288,"line_end":288,"column_start":37,"column_end":39},"name":"U7","qualname":"::base::dimension::U7","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105053,"byte_end":105055,"line_start":288,"line_end":288,"column_start":41,"column_end":43},"name":"U8","qualname":"::base::dimension::U8","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105057,"byte_end":105059,"line_start":288,"line_end":288,"column_start":45,"column_end":47},"name":"U9","qualname":"::base::dimension::U9","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11242},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105061,"byte_end":105064,"line_start":288,"line_end":288,"column_start":49,"column_end":52},"name":"U10","qualname":"::base::dimension::U10","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105066,"byte_end":105069,"line_start":288,"line_end":288,"column_start":54,"column_end":57},"name":"U11","qualname":"::base::dimension::U11","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11274},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105071,"byte_end":105074,"line_start":288,"line_end":288,"column_start":59,"column_end":62},"name":"U12","qualname":"::base::dimension::U12","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105076,"byte_end":105079,"line_start":288,"line_end":288,"column_start":64,"column_end":67},"name":"U13","qualname":"::base::dimension::U13","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11306},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105081,"byte_end":105084,"line_start":288,"line_end":288,"column_start":69,"column_end":72},"name":"U14","qualname":"::base::dimension::U14","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105086,"byte_end":105089,"line_start":288,"line_end":288,"column_start":74,"column_end":77},"name":"U15","qualname":"::base::dimension::U15","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11338},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105091,"byte_end":105094,"line_start":288,"line_end":288,"column_start":79,"column_end":82},"name":"U16","qualname":"::base::dimension::U16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105096,"byte_end":105099,"line_start":288,"line_end":288,"column_start":84,"column_end":87},"name":"U17","qualname":"::base::dimension::U17","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11370},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105101,"byte_end":105104,"line_start":288,"line_end":288,"column_start":89,"column_end":92},"name":"U18","qualname":"::base::dimension::U18","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11386},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105110,"byte_end":105113,"line_start":289,"line_end":289,"column_start":5,"column_end":8},"name":"U19","qualname":"::base::dimension::U19","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105115,"byte_end":105118,"line_start":289,"line_end":289,"column_start":10,"column_end":13},"name":"U20","qualname":"::base::dimension::U20","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11418},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105120,"byte_end":105123,"line_start":289,"line_end":289,"column_start":15,"column_end":18},"name":"U21","qualname":"::base::dimension::U21","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11434},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105125,"byte_end":105128,"line_start":289,"line_end":289,"column_start":20,"column_end":23},"name":"U22","qualname":"::base::dimension::U22","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11450},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105130,"byte_end":105133,"line_start":289,"line_end":289,"column_start":25,"column_end":28},"name":"U23","qualname":"::base::dimension::U23","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105135,"byte_end":105138,"line_start":289,"line_end":289,"column_start":30,"column_end":33},"name":"U24","qualname":"::base::dimension::U24","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11482},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105140,"byte_end":105143,"line_start":289,"line_end":289,"column_start":35,"column_end":38},"name":"U25","qualname":"::base::dimension::U25","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105145,"byte_end":105148,"line_start":289,"line_end":289,"column_start":40,"column_end":43},"name":"U26","qualname":"::base::dimension::U26","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11514},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105150,"byte_end":105153,"line_start":289,"line_end":289,"column_start":45,"column_end":48},"name":"U27","qualname":"::base::dimension::U27","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11530},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105155,"byte_end":105158,"line_start":289,"line_end":289,"column_start":50,"column_end":53},"name":"U28","qualname":"::base::dimension::U28","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11546},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105160,"byte_end":105163,"line_start":289,"line_end":289,"column_start":55,"column_end":58},"name":"U29","qualname":"::base::dimension::U29","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11562},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105165,"byte_end":105168,"line_start":289,"line_end":289,"column_start":60,"column_end":63},"name":"U30","qualname":"::base::dimension::U30","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11578},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105170,"byte_end":105173,"line_start":289,"line_end":289,"column_start":65,"column_end":68},"name":"U31","qualname":"::base::dimension::U31","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11594},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105175,"byte_end":105178,"line_start":289,"line_end":289,"column_start":70,"column_end":73},"name":"U32","qualname":"::base::dimension::U32","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11610},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105180,"byte_end":105183,"line_start":289,"line_end":289,"column_start":75,"column_end":78},"name":"U33","qualname":"::base::dimension::U33","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105185,"byte_end":105188,"line_start":289,"line_end":289,"column_start":80,"column_end":83},"name":"U34","qualname":"::base::dimension::U34","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11642},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105190,"byte_end":105193,"line_start":289,"line_end":289,"column_start":85,"column_end":88},"name":"U35","qualname":"::base::dimension::U35","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11658},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105195,"byte_end":105198,"line_start":289,"line_end":289,"column_start":90,"column_end":93},"name":"U36","qualname":"::base::dimension::U36","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105200,"byte_end":105203,"line_start":289,"line_end":289,"column_start":95,"column_end":98},"name":"U37","qualname":"::base::dimension::U37","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105209,"byte_end":105212,"line_start":290,"line_end":290,"column_start":5,"column_end":8},"name":"U38","qualname":"::base::dimension::U38","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11706},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105214,"byte_end":105217,"line_start":290,"line_end":290,"column_start":10,"column_end":13},"name":"U39","qualname":"::base::dimension::U39","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11722},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105219,"byte_end":105222,"line_start":290,"line_end":290,"column_start":15,"column_end":18},"name":"U40","qualname":"::base::dimension::U40","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11738},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105224,"byte_end":105227,"line_start":290,"line_end":290,"column_start":20,"column_end":23},"name":"U41","qualname":"::base::dimension::U41","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11754},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105229,"byte_end":105232,"line_start":290,"line_end":290,"column_start":25,"column_end":28},"name":"U42","qualname":"::base::dimension::U42","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105234,"byte_end":105237,"line_start":290,"line_end":290,"column_start":30,"column_end":33},"name":"U43","qualname":"::base::dimension::U43","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11786},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105239,"byte_end":105242,"line_start":290,"line_end":290,"column_start":35,"column_end":38},"name":"U44","qualname":"::base::dimension::U44","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105244,"byte_end":105247,"line_start":290,"line_end":290,"column_start":40,"column_end":43},"name":"U45","qualname":"::base::dimension::U45","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105249,"byte_end":105252,"line_start":290,"line_end":290,"column_start":45,"column_end":48},"name":"U46","qualname":"::base::dimension::U46","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11834},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105254,"byte_end":105257,"line_start":290,"line_end":290,"column_start":50,"column_end":53},"name":"U47","qualname":"::base::dimension::U47","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105259,"byte_end":105262,"line_start":290,"line_end":290,"column_start":55,"column_end":58},"name":"U48","qualname":"::base::dimension::U48","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11866},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105264,"byte_end":105267,"line_start":290,"line_end":290,"column_start":60,"column_end":63},"name":"U49","qualname":"::base::dimension::U49","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11882},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105269,"byte_end":105272,"line_start":290,"line_end":290,"column_start":65,"column_end":68},"name":"U50","qualname":"::base::dimension::U50","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11898},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105274,"byte_end":105277,"line_start":290,"line_end":290,"column_start":70,"column_end":73},"name":"U51","qualname":"::base::dimension::U51","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11914},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105279,"byte_end":105282,"line_start":290,"line_end":290,"column_start":75,"column_end":78},"name":"U52","qualname":"::base::dimension::U52","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105284,"byte_end":105287,"line_start":290,"line_end":290,"column_start":80,"column_end":83},"name":"U53","qualname":"::base::dimension::U53","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11946},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105289,"byte_end":105292,"line_start":290,"line_end":290,"column_start":85,"column_end":88},"name":"U54","qualname":"::base::dimension::U54","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11962},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105294,"byte_end":105297,"line_start":290,"line_end":290,"column_start":90,"column_end":93},"name":"U55","qualname":"::base::dimension::U55","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11978},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105299,"byte_end":105302,"line_start":290,"line_end":290,"column_start":95,"column_end":98},"name":"U56","qualname":"::base::dimension::U56","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11994},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105308,"byte_end":105311,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"U57","qualname":"::base::dimension::U57","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105313,"byte_end":105316,"line_start":291,"line_end":291,"column_start":10,"column_end":13},"name":"U58","qualname":"::base::dimension::U58","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12026},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105318,"byte_end":105321,"line_start":291,"line_end":291,"column_start":15,"column_end":18},"name":"U59","qualname":"::base::dimension::U59","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12042},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105323,"byte_end":105326,"line_start":291,"line_end":291,"column_start":20,"column_end":23},"name":"U60","qualname":"::base::dimension::U60","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12058},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105328,"byte_end":105331,"line_start":291,"line_end":291,"column_start":25,"column_end":28},"name":"U61","qualname":"::base::dimension::U61","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12074},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105333,"byte_end":105336,"line_start":291,"line_end":291,"column_start":30,"column_end":33},"name":"U62","qualname":"::base::dimension::U62","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12090},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105338,"byte_end":105341,"line_start":291,"line_end":291,"column_start":35,"column_end":38},"name":"U63","qualname":"::base::dimension::U63","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105343,"byte_end":105346,"line_start":291,"line_end":291,"column_start":40,"column_end":43},"name":"U64","qualname":"::base::dimension::U64","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105348,"byte_end":105351,"line_start":291,"line_end":291,"column_start":45,"column_end":48},"name":"U65","qualname":"::base::dimension::U65","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105353,"byte_end":105356,"line_start":291,"line_end":291,"column_start":50,"column_end":53},"name":"U66","qualname":"::base::dimension::U66","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12154},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105358,"byte_end":105361,"line_start":291,"line_end":291,"column_start":55,"column_end":58},"name":"U67","qualname":"::base::dimension::U67","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105363,"byte_end":105366,"line_start":291,"line_end":291,"column_start":60,"column_end":63},"name":"U68","qualname":"::base::dimension::U68","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105368,"byte_end":105371,"line_start":291,"line_end":291,"column_start":65,"column_end":68},"name":"U69","qualname":"::base::dimension::U69","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105373,"byte_end":105376,"line_start":291,"line_end":291,"column_start":70,"column_end":73},"name":"U70","qualname":"::base::dimension::U70","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12218},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105378,"byte_end":105381,"line_start":291,"line_end":291,"column_start":75,"column_end":78},"name":"U71","qualname":"::base::dimension::U71","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12234},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105383,"byte_end":105386,"line_start":291,"line_end":291,"column_start":80,"column_end":83},"name":"U72","qualname":"::base::dimension::U72","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105388,"byte_end":105391,"line_start":291,"line_end":291,"column_start":85,"column_end":88},"name":"U73","qualname":"::base::dimension::U73","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12266},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105393,"byte_end":105396,"line_start":291,"line_end":291,"column_start":90,"column_end":93},"name":"U74","qualname":"::base::dimension::U74","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12282},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105398,"byte_end":105401,"line_start":291,"line_end":291,"column_start":95,"column_end":98},"name":"U75","qualname":"::base::dimension::U75","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12298},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105407,"byte_end":105410,"line_start":292,"line_end":292,"column_start":5,"column_end":8},"name":"U76","qualname":"::base::dimension::U76","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12314},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105412,"byte_end":105415,"line_start":292,"line_end":292,"column_start":10,"column_end":13},"name":"U77","qualname":"::base::dimension::U77","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105417,"byte_end":105420,"line_start":292,"line_end":292,"column_start":15,"column_end":18},"name":"U78","qualname":"::base::dimension::U78","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12346},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105422,"byte_end":105425,"line_start":292,"line_end":292,"column_start":20,"column_end":23},"name":"U79","qualname":"::base::dimension::U79","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105427,"byte_end":105430,"line_start":292,"line_end":292,"column_start":25,"column_end":28},"name":"U80","qualname":"::base::dimension::U80","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105432,"byte_end":105435,"line_start":292,"line_end":292,"column_start":30,"column_end":33},"name":"U81","qualname":"::base::dimension::U81","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12394},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105437,"byte_end":105440,"line_start":292,"line_end":292,"column_start":35,"column_end":38},"name":"U82","qualname":"::base::dimension::U82","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12410},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105442,"byte_end":105445,"line_start":292,"line_end":292,"column_start":40,"column_end":43},"name":"U83","qualname":"::base::dimension::U83","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12426},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105447,"byte_end":105450,"line_start":292,"line_end":292,"column_start":45,"column_end":48},"name":"U84","qualname":"::base::dimension::U84","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12442},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105452,"byte_end":105455,"line_start":292,"line_end":292,"column_start":50,"column_end":53},"name":"U85","qualname":"::base::dimension::U85","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12458},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105457,"byte_end":105460,"line_start":292,"line_end":292,"column_start":55,"column_end":58},"name":"U86","qualname":"::base::dimension::U86","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12474},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105462,"byte_end":105465,"line_start":292,"line_end":292,"column_start":60,"column_end":63},"name":"U87","qualname":"::base::dimension::U87","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12490},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105467,"byte_end":105470,"line_start":292,"line_end":292,"column_start":65,"column_end":68},"name":"U88","qualname":"::base::dimension::U88","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12506},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105472,"byte_end":105475,"line_start":292,"line_end":292,"column_start":70,"column_end":73},"name":"U89","qualname":"::base::dimension::U89","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12522},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105477,"byte_end":105480,"line_start":292,"line_end":292,"column_start":75,"column_end":78},"name":"U90","qualname":"::base::dimension::U90","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105482,"byte_end":105485,"line_start":292,"line_end":292,"column_start":80,"column_end":83},"name":"U91","qualname":"::base::dimension::U91","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12554},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105487,"byte_end":105490,"line_start":292,"line_end":292,"column_start":85,"column_end":88},"name":"U92","qualname":"::base::dimension::U92","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105492,"byte_end":105495,"line_start":292,"line_end":292,"column_start":90,"column_end":93},"name":"U93","qualname":"::base::dimension::U93","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105497,"byte_end":105500,"line_start":292,"line_end":292,"column_start":95,"column_end":98},"name":"U94","qualname":"::base::dimension::U94","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12602},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105506,"byte_end":105509,"line_start":293,"line_end":293,"column_start":5,"column_end":8},"name":"U95","qualname":"::base::dimension::U95","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12618},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105511,"byte_end":105514,"line_start":293,"line_end":293,"column_start":10,"column_end":13},"name":"U96","qualname":"::base::dimension::U96","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12634},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105516,"byte_end":105519,"line_start":293,"line_end":293,"column_start":15,"column_end":18},"name":"U97","qualname":"::base::dimension::U97","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12650},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105521,"byte_end":105524,"line_start":293,"line_end":293,"column_start":20,"column_end":23},"name":"U98","qualname":"::base::dimension::U98","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12666},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105526,"byte_end":105529,"line_start":293,"line_end":293,"column_start":25,"column_end":28},"name":"U99","qualname":"::base::dimension::U99","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105531,"byte_end":105535,"line_start":293,"line_end":293,"column_start":30,"column_end":34},"name":"U100","qualname":"::base::dimension::U100","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105537,"byte_end":105541,"line_start":293,"line_end":293,"column_start":36,"column_end":40},"name":"U101","qualname":"::base::dimension::U101","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12714},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105543,"byte_end":105547,"line_start":293,"line_end":293,"column_start":42,"column_end":46},"name":"U102","qualname":"::base::dimension::U102","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12730},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105549,"byte_end":105553,"line_start":293,"line_end":293,"column_start":48,"column_end":52},"name":"U103","qualname":"::base::dimension::U103","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105555,"byte_end":105559,"line_start":293,"line_end":293,"column_start":54,"column_end":58},"name":"U104","qualname":"::base::dimension::U104","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12762},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105561,"byte_end":105565,"line_start":293,"line_end":293,"column_start":60,"column_end":64},"name":"U105","qualname":"::base::dimension::U105","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12778},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105567,"byte_end":105571,"line_start":293,"line_end":293,"column_start":66,"column_end":70},"name":"U106","qualname":"::base::dimension::U106","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12794},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105573,"byte_end":105577,"line_start":293,"line_end":293,"column_start":72,"column_end":76},"name":"U107","qualname":"::base::dimension::U107","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12810},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105579,"byte_end":105583,"line_start":293,"line_end":293,"column_start":78,"column_end":82},"name":"U108","qualname":"::base::dimension::U108","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105585,"byte_end":105589,"line_start":293,"line_end":293,"column_start":84,"column_end":88},"name":"U109","qualname":"::base::dimension::U109","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12842},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105591,"byte_end":105595,"line_start":293,"line_end":293,"column_start":90,"column_end":94},"name":"U110","qualname":"::base::dimension::U110","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12858},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105601,"byte_end":105605,"line_start":294,"line_end":294,"column_start":5,"column_end":9},"name":"U111","qualname":"::base::dimension::U111","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12874},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105607,"byte_end":105611,"line_start":294,"line_end":294,"column_start":11,"column_end":15},"name":"U112","qualname":"::base::dimension::U112","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12890},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105613,"byte_end":105617,"line_start":294,"line_end":294,"column_start":17,"column_end":21},"name":"U113","qualname":"::base::dimension::U113","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12906},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105619,"byte_end":105623,"line_start":294,"line_end":294,"column_start":23,"column_end":27},"name":"U114","qualname":"::base::dimension::U114","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12922},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105625,"byte_end":105629,"line_start":294,"line_end":294,"column_start":29,"column_end":33},"name":"U115","qualname":"::base::dimension::U115","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105631,"byte_end":105635,"line_start":294,"line_end":294,"column_start":35,"column_end":39},"name":"U116","qualname":"::base::dimension::U116","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105637,"byte_end":105641,"line_start":294,"line_end":294,"column_start":41,"column_end":45},"name":"U117","qualname":"::base::dimension::U117","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12970},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105643,"byte_end":105647,"line_start":294,"line_end":294,"column_start":47,"column_end":51},"name":"U118","qualname":"::base::dimension::U118","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":12986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105649,"byte_end":105653,"line_start":294,"line_end":294,"column_start":53,"column_end":57},"name":"U119","qualname":"::base::dimension::U119","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105655,"byte_end":105659,"line_start":294,"line_end":294,"column_start":59,"column_end":63},"name":"U120","qualname":"::base::dimension::U120","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13018},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105661,"byte_end":105665,"line_start":294,"line_end":294,"column_start":65,"column_end":69},"name":"U121","qualname":"::base::dimension::U121","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13034},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105667,"byte_end":105671,"line_start":294,"line_end":294,"column_start":71,"column_end":75},"name":"U122","qualname":"::base::dimension::U122","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13050},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105673,"byte_end":105677,"line_start":294,"line_end":294,"column_start":77,"column_end":81},"name":"U123","qualname":"::base::dimension::U123","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13066},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105679,"byte_end":105683,"line_start":294,"line_end":294,"column_start":83,"column_end":87},"name":"U124","qualname":"::base::dimension::U124","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13082},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105685,"byte_end":105689,"line_start":294,"line_end":294,"column_start":89,"column_end":93},"name":"U125","qualname":"::base::dimension::U125","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13098},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105691,"byte_end":105695,"line_start":294,"line_end":294,"column_start":95,"column_end":99},"name":"U126","qualname":"::base::dimension::U126","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":105701,"byte_end":105705,"line_start":295,"line_end":295,"column_start":5,"column_end":9},"name":"U127","qualname":"::base::dimension::U127","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type level dimension.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::base::iter","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":601},{"krate":0,"index":13130},{"krate":0,"index":13142},{"krate":0,"index":13149},{"krate":0,"index":13159},{"krate":0,"index":13166},{"krate":0,"index":13178},{"krate":0,"index":13185},{"krate":0,"index":13195},{"krate":0,"index":13202},{"krate":0,"index":13210},{"krate":0,"index":602},{"krate":0,"index":609},{"krate":0,"index":619},{"krate":0,"index":626},{"krate":0,"index":635},{"krate":0,"index":643},{"krate":0,"index":653},{"krate":0,"index":13217},{"krate":0,"index":13225},{"krate":0,"index":660},{"krate":0,"index":667},{"krate":0,"index":677},{"krate":0,"index":684},{"krate":0,"index":693},{"krate":0,"index":701},{"krate":0,"index":711}],"decl_id":null,"docs":" Matrix iterators.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":112767,"byte_end":112777,"line_start":97,"line_end":97,"column_start":18,"column_end":28},"name":"MatrixIter","qualname":"::base::iter::MatrixIter","value":"MatrixIter {  }","parent":null,"children":[{"krate":0,"index":13136},{"krate":0,"index":13137},{"krate":0,"index":13138},{"krate":0,"index":13139},{"krate":0,"index":13140},{"krate":0,"index":13141}],"decl_id":null,"docs":" An iterator through a dense matrix with arbitrary strides matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":112839,"byte_end":112852,"line_start":98,"line_end":98,"column_start":18,"column_end":31},"name":"MatrixIterMut","qualname":"::base::iter::MatrixIterMut","value":"MatrixIterMut {  }","parent":null,"children":[{"krate":0,"index":13172},{"krate":0,"index":13173},{"krate":0,"index":13174},{"krate":0,"index":13175},{"krate":0,"index":13176},{"krate":0,"index":13177}],"decl_id":null,"docs":" An iterator through a dense matrix with arbitrary strides matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":113017,"byte_end":113024,"line_start":108,"line_end":108,"column_start":12,"column_end":19},"name":"RowIter","qualname":"::base::iter::RowIter","value":"RowIter {  }","parent":null,"children":[{"krate":0,"index":13208},{"krate":0,"index":13209}],"decl_id":null,"docs":" An iterator through the rows of a matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114266,"byte_end":114276,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"RowIterMut","qualname":"::base::iter::RowIterMut","value":"RowIterMut {  }","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" An iterator through the mutable rows of a matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13217},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":115791,"byte_end":115801,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"ColumnIter","qualname":"::base::iter::ColumnIter","value":"ColumnIter {  }","parent":null,"children":[{"krate":0,"index":13223},{"krate":0,"index":13224}],"decl_id":null,"docs":" An iterator through the columns of a matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":117061,"byte_end":117074,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"ColumnIterMut","qualname":"::base::iter::ColumnIterMut","value":"ColumnIterMut {  }","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"decl_id":null,"docs":" An iterator through the mutable columns of a matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":121405,"byte_end":121412,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"neg_mut","qualname":"<Matrix<N, R, C, S>>::neg_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negates `self` in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":121384,"byte_end":121393,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":13252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":132584,"byte_end":132590,"line_start":372,"line_end":372,"column_start":27,"column_end":33},"name":"add_to","qualname":"<Matrix<N, R1, C1, SA>>::add_to","value":"fn <R2, C2, SB, R3, C3, SC> (&self, rhs: &Matrix<N, R2, C2, SB>, out: &mut Matrix<N, R3, C3, SC>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":127136,"byte_end":127145,"line_start":255,"line_end":255,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13342},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":132814,"byte_end":132820,"line_start":375,"line_end":375,"column_start":27,"column_end":33},"name":"sub_to","qualname":"<Matrix<N, R1, C1, SA>>::sub_to","value":"fn <R2, C2, SB, R3, C3, SC> (&self, rhs: &Matrix<N, R2, C2, SB>, out: &mut Matrix<N, R3, C3, SC>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self + rhs` but stores the result into `out` to avoid allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":127136,"byte_end":127145,"line_start":255,"line_end":255,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142395,"byte_end":142401,"line_start":679,"line_end":679,"column_start":12,"column_end":18},"name":"tr_mul","qualname":"<Matrix<N, R1, C1, SA>>::tr_mul","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> MatrixMN<N, C1, C2>","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self.transpose() * rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142374,"byte_end":142383,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142881,"byte_end":142887,"line_start":694,"line_end":694,"column_start":12,"column_end":18},"name":"ad_mul","qualname":"<Matrix<N, R1, C1, SA>>::ad_mul","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> MatrixMN<N, C1, C2>","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self.adjoint() * rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142860,"byte_end":142869,"line_start":693,"line_end":693,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":144558,"byte_end":144567,"line_start":743,"line_end":743,"column_start":12,"column_end":21},"name":"tr_mul_to","qualname":"<Matrix<N, R1, C1, SA>>::tr_mul_to","value":"fn <R2, C2, SB, R3, C3, SC> (&self, rhs: &Matrix<N, R2, C2, SB>, out: &mut Matrix<N, R3, C3, SC>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self.transpose() * rhs` but stores the result into `out` to avoid\n allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":144537,"byte_end":144546,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":145064,"byte_end":145073,"line_start":758,"line_end":758,"column_start":12,"column_end":21},"name":"ad_mul_to","qualname":"<Matrix<N, R1, C1, SA>>::ad_mul_to","value":"fn <R2, C2, SB, R3, C3, SC> (&self, rhs: &Matrix<N, R2, C2, SB>, out: &mut Matrix<N, R3, C3, SC>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self.adjoint() * rhs` but stores the result into `out` to avoid\n allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":145043,"byte_end":145052,"line_start":757,"line_end":757,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":145578,"byte_end":145584,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"mul_to","qualname":"<Matrix<N, R1, C1, SA>>::mul_to","value":"fn <R2, C2, SB, R3, C3, SC> (&self, rhs: &Matrix<N, R2, C2, SB>, out: &mut Matrix<N, R3, C3, SC>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `self * rhs` but stores the result into `out` to avoid allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":145557,"byte_end":145566,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":146125,"byte_end":146134,"line_start":789,"line_end":789,"column_start":12,"column_end":21},"name":"kronecker","qualname":"<Matrix<N, R1, C1, SA>>::kronecker","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> MatrixMN<N, DimProd<R1, R2>, DimProd<C1, C2>>","parent":null,"children":[],"decl_id":null,"docs":" The kronecker product of two matrices (aka. tensor product of the corresponding linear\n maps).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147472,"byte_end":147482,"line_start":832,"line_end":832,"column_start":12,"column_end":22},"name":"add_scalar","qualname":"<Matrix<N, R, C, S>>::add_scalar","value":"fn (&self, rhs: N) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Adds a scalar to `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147451,"byte_end":147460,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147729,"byte_end":147743,"line_start":841,"line_end":841,"column_start":12,"column_end":26},"name":"add_scalar_mut","qualname":"<Matrix<N, R, C, S>>::add_scalar_mut","value":"fn (&mut self, rhs: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a scalar to `self` in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147708,"byte_end":147717,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":149302,"byte_end":149306,"line_start":895,"line_end":895,"column_start":12,"column_end":16},"name":"amax","qualname":"<Matrix<N, R, C, S>>::amax","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of the component with the largest absolute value.\n # Example\n ```\n # use nalgebra::Vector3;\n assert_eq!(Vector3::new(-1.0, 2.0, 3.0).amax(), 3.0);\n assert_eq!(Vector3::new(-1.0, -2.0, -3.0).amax(), 3.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":149281,"byte_end":149290,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":149765,"byte_end":149770,"line_start":910,"line_end":910,"column_start":12,"column_end":17},"name":"camax","qualname":"<Matrix<N, R, C, S>>::camax","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Returns the the 1-norm of the complex component with the largest 1-norm.\n # Example\n ```\n # use nalgebra::{Vector3, Complex};\n assert_eq!(Vector3::new(\n     Complex::new(-3.0, -2.0),\n     Complex::new(1.0, 2.0),\n     Complex::new(1.0, 3.0)).camax(), 5.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":149744,"byte_end":149753,"line_start":909,"line_end":909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":150219,"byte_end":150222,"line_start":924,"line_end":924,"column_start":12,"column_end":15},"name":"max","qualname":"<Matrix<N, R, C, S>>::max","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Returns the component with the largest value.\n # Example\n ```\n # use nalgebra::Vector3;\n assert_eq!(Vector3::new(-1.0, 2.0, 3.0).max(), 3.0);\n assert_eq!(Vector3::new(-1.0, -2.0, -3.0).max(), -1.0);\n assert_eq!(Vector3::new(5u32, 2, 3).max(), 5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":150198,"byte_end":150207,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":150635,"byte_end":150639,"line_start":937,"line_end":937,"column_start":12,"column_end":16},"name":"amin","qualname":"<Matrix<N, R, C, S>>::amin","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of the component with the smallest absolute value.\n # Example\n ```\n # use nalgebra::Vector3;\n assert_eq!(Vector3::new(-1.0, 2.0, -3.0).amin(), 1.0);\n assert_eq!(Vector3::new(10.0, 2.0, 30.0).amin(), 2.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":150614,"byte_end":150623,"line_start":936,"line_end":936,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":151096,"byte_end":151101,"line_start":952,"line_end":952,"column_start":12,"column_end":17},"name":"camin","qualname":"<Matrix<N, R, C, S>>::camin","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Returns the the 1-norm of the complex component with the smallest 1-norm.\n # Example\n ```\n # use nalgebra::{Vector3, Complex};\n assert_eq!(Vector3::new(\n     Complex::new(-3.0, -2.0),\n     Complex::new(1.0, 2.0),\n     Complex::new(1.0, 3.0)).camin(), 3.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":151075,"byte_end":151084,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":151545,"byte_end":151548,"line_start":966,"line_end":966,"column_start":12,"column_end":15},"name":"min","qualname":"<Matrix<N, R, C, S>>::min","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Returns the component with the smallest value.\n # Example\n ```\n # use nalgebra::Vector3;\n assert_eq!(Vector3::new(-1.0, 2.0, 3.0).min(), -1.0);\n assert_eq!(Vector3::new(1.0, 2.0, 3.0).min(), 1.0);\n assert_eq!(Vector3::new(5u32, 2, 3).min(), 2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":151524,"byte_end":151533,"line_start":965,"line_end":965,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"storage","qualname":"::base::storage","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1020},{"krate":0,"index":1024},{"krate":0,"index":1028},{"krate":0,"index":1032},{"krate":0,"index":1050},{"krate":0,"index":1062},{"krate":0,"index":1066}],"decl_id":null,"docs":" Abstract definition of a matrix data storage.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":152061,"byte_end":152077,"line_start":15,"line_end":15,"column_start":10,"column_end":26},"name":"SameShapeStorage","qualname":"::base::storage::SameShapeStorage","value":"<DefaultAllocator as\nAllocator<N, SameShapeR<R1, R2>, SameShapeC<C1, C2>>>::Buffer","parent":null,"children":[],"decl_id":null,"docs":" The data storage for the sum of two matrices with dimensions `(R1, C1)` and `(R2, C2)`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":152291,"byte_end":152296,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Owned","qualname":"::base::storage::Owned","value":"<DefaultAllocator as Allocator<N, R, C>>::Buffer","parent":null,"children":[],"decl_id":null,"docs":" The owned data storage that can be allocated from `S`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":152454,"byte_end":152461,"line_start":23,"line_end":23,"column_start":10,"column_end":17},"name":"RStride","qualname":"::base::storage::RStride","value":"<<DefaultAllocator as Allocator<N, R, C>>::Buffer as\nStorage<N, R, C>>::RStride","parent":null,"children":[],"decl_id":null,"docs":" The row-stride of the owned data storage for a buffer of dimension `(R, C)`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":152657,"byte_end":152664,"line_start":27,"line_end":27,"column_start":10,"column_end":17},"name":"CStride","qualname":"::base::storage::CStride","value":"<<DefaultAllocator as Allocator<N, R, C>>::Buffer as\nStorage<N, R, C>>::CStride","parent":null,"children":[],"decl_id":null,"docs":" The column-stride of the owned data storage for a buffer of dimension `(R, C)`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153329,"byte_end":153336,"line_start":39,"line_end":39,"column_start":18,"column_end":25},"name":"Storage","qualname":"::base::storage::Storage","value":"Storage<N: Scalar, R: Dim, C: Dim = U1>: Debug + Sized","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049}],"decl_id":null,"docs":" The trait shared by all matrix data storage.\n\n FIXME: doc\n\n Note that `Self` must always have a number of elements compatible with the matrix length (given\n by `R` and `C` if they are known at compile-time). For example, implementors of this trait\n should **not** allow the user to modify the size of the underlying buffer with safe methods\n (for example the `VecStorage::data_mut` method is unsafe because the user could change the\n vector's size so that it no longer contains enough elements: this will lead to UB.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153445,"byte_end":153452,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"RStride","qualname":"::base::storage::Storage::RStride","value":"type RStride: Dim;","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The static stride of this storage's rows.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153522,"byte_end":153529,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"name":"CStride","qualname":"::base::storage::Storage::CStride","value":"type CStride: Dim;","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The static stride of this storage's columns.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153577,"byte_end":153580,"line_start":47,"line_end":47,"column_start":8,"column_end":11},"name":"ptr","qualname":"::base::storage::Storage::ptr","value":"fn (&self) -> *const N","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The matrix data pointer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153801,"byte_end":153806,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"shape","qualname":"::base::storage::Storage::shape","value":"fn (&self) -> (R, C)","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The dimension of the matrix at run-time. Arr length of zero indicates the additive identity\n element of any dimension. Must be equal to `Self::dimension()` if it is not `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154008,"byte_end":154015,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"strides","qualname":"::base::storage::Storage::strides","value":"fn (&self) -> (Self::RStride, Self::CStride)","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" The spacing between consecutive row elements and consecutive column elements.\n\n For example this returns `(1, 5)` for a row-major matrix with 5 columns.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154408,"byte_end":154420,"line_start":66,"line_end":66,"column_start":8,"column_end":20},"name":"linear_index","qualname":"::base::storage::Storage::linear_index","value":"fn (&self, irow: usize, icol: usize) -> usize","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Compute the index corresponding to the irow-th row and icol-th column of this matrix. The\n index must be such that the following holds:\n\n ```.ignore\n let lindex = self.linear_index(irow, icol);\n assert!(*self.get_unchecked(irow, icol) == *self.get_unchecked_linear(lindex)\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154391,"byte_end":154400,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154695,"byte_end":154723,"line_start":74,"line_end":74,"column_start":15,"column_end":43},"name":"get_address_unchecked_linear","qualname":"::base::storage::Storage::get_address_unchecked_linear","value":"fn (&self, i: usize) -> *const N","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Gets the address of the i-th matrix component without performing bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154671,"byte_end":154680,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154917,"byte_end":154938,"line_start":80,"line_end":80,"column_start":15,"column_end":36},"name":"get_address_unchecked","qualname":"::base::storage::Storage::get_address_unchecked","value":"fn (&self, irow: usize, icol: usize) -> *const N","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Gets the address of the i-th matrix component without performing bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":154893,"byte_end":154902,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155168,"byte_end":155188,"line_start":86,"line_end":86,"column_start":15,"column_end":35},"name":"get_unchecked_linear","qualname":"::base::storage::Storage::get_unchecked_linear","value":"fn (&self, i: usize) -> &N","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Retrieves a reference to the i-th element without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155144,"byte_end":155153,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155370,"byte_end":155383,"line_start":92,"line_end":92,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::base::storage::Storage::get_unchecked","value":"fn (&self, irow: usize, icol: usize) -> &N","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Retrieves a reference to the i-th element without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155346,"byte_end":155355,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155595,"byte_end":155608,"line_start":98,"line_end":98,"column_start":8,"column_end":21},"name":"is_contiguous","qualname":"::base::storage::Storage::is_contiguous","value":"fn (&self) -> bool","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Indicates whether this data buffer stores its elements contiguously.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155578,"byte_end":155587,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155807,"byte_end":155815,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::base::storage::Storage::as_slice","value":"fn (&self) -> &[N]","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Retrieves the data buffer as a contiguous slice.\n\n The matrix components may not be stored in a contiguous way, depending on the strides.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155790,"byte_end":155799,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":155914,"byte_end":155924,"line_start":107,"line_end":107,"column_start":8,"column_end":18},"name":"into_owned","qualname":"::base::storage::Storage::into_owned","value":"fn (self) -> Owned<N, R, C>","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Builds a matrix data storage that does not contain any reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156082,"byte_end":156093,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"clone_owned","qualname":"::base::storage::Storage::clone_owned","value":"fn (&self) -> Owned<N, R, C>","parent":{"krate":0,"index":1032},"children":[],"decl_id":null,"docs":" Clones this data storage to one that does not contain any reference.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156533,"byte_end":156543,"line_start":120,"line_end":120,"column_start":18,"column_end":28},"name":"StorageMut","qualname":"::base::storage::StorageMut","value":"StorageMut<N: Scalar, R: Dim, C: Dim = U1>: Storage<N, R, C>","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061}],"decl_id":null,"docs":" Trait implemented by matrix data storage that can provide a mutable access to its elements.\n\n Note that a mutable access does not mean that the matrix owns its data. For example, a mutable\n matrix slice can provide mutable access to its elements even if it does not own its data (it\n contains only an internal reference to them).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156644,"byte_end":156651,"line_start":122,"line_end":122,"column_start":8,"column_end":15},"name":"ptr_mut","qualname":"::base::storage::StorageMut::ptr_mut","value":"fn (&mut self) -> *mut N","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" The matrix mutable data pointer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156800,"byte_end":156832,"line_start":126,"line_end":126,"column_start":15,"column_end":47},"name":"get_address_unchecked_linear_mut","qualname":"::base::storage::StorageMut::get_address_unchecked_linear_mut","value":"fn (&mut self, i: usize) -> *mut N","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Gets the mutable address of the i-th matrix component without performing bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156776,"byte_end":156785,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157040,"byte_end":157065,"line_start":132,"line_end":132,"column_start":15,"column_end":40},"name":"get_address_unchecked_mut","qualname":"::base::storage::StorageMut::get_address_unchecked_mut","value":"fn (&mut self, irow: usize, icol: usize) -> *mut N","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Gets the mutable address of the i-th matrix component without performing bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157016,"byte_end":157025,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157318,"byte_end":157342,"line_start":138,"line_end":138,"column_start":15,"column_end":39},"name":"get_unchecked_linear_mut","qualname":"::base::storage::StorageMut::get_unchecked_linear_mut","value":"fn (&mut self, i: usize) -> &mut N","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Retrieves a mutable reference to the i-th element without bound-checking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157561,"byte_end":157578,"line_start":144,"line_end":144,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::base::storage::StorageMut::get_unchecked_mut","value":"fn (&mut self, irow: usize, icol: usize) -> &mut N","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Retrieves a mutable reference to the element at `(irow, icol)` without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157537,"byte_end":157546,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157796,"byte_end":157817,"line_start":150,"line_end":150,"column_start":15,"column_end":36},"name":"swap_unchecked_linear","qualname":"::base::storage::StorageMut::swap_unchecked_linear","value":"fn (&mut self, i1: usize, i2: usize) -> ()","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Swaps two elements using their linear index without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":157772,"byte_end":157781,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158095,"byte_end":158109,"line_start":159,"line_end":159,"column_start":15,"column_end":29},"name":"swap_unchecked","qualname":"::base::storage::StorageMut::swap_unchecked","value":"fn (&mut self, row_col1: (usize, usize), row_col2: (usize, usize)) -> ()","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Swaps two elements without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158071,"byte_end":158080,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158523,"byte_end":158535,"line_start":170,"line_end":170,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::base::storage::StorageMut::as_mut_slice","value":"fn (&mut self) -> &mut [N]","parent":{"krate":0,"index":1050},"children":[],"decl_id":null,"docs":" Retrieves the mutable data buffer as a contiguous slice.\n\n Matrix components may not be contiguous, depending on its strides.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158506,"byte_end":158515,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1062},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158894,"byte_end":158911,"line_start":178,"line_end":178,"column_start":18,"column_end":35},"name":"ContiguousStorage","qualname":"::base::storage::ContiguousStorage","value":"ContiguousStorage<N: Scalar, R: Dim, C: Dim = U1>: Storage<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" A matrix storage that is stored contiguously in memory.\n\n The storage requirement means that for any value of `i` in `[0, nrows * ncols[`, the value\n `.get_unchecked_linear` returns one of the matrix component. This trait is unsafe because\n failing to comply to this may cause Undefined Behaviors.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":159310,"byte_end":159330,"line_start":188,"line_end":188,"column_start":18,"column_end":38},"name":"ContiguousStorageMut","qualname":"::base::storage::ContiguousStorageMut","value":"ContiguousStorageMut<N: Scalar, R: Dim, C: Dim = U1>: ContiguousStorage<N, R, C> + StorageMut<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" A mutable matrix storage that is stored contiguously in memory.\n\n The storage requirement means that for any value of `i` in `[0, nrows * ncols[`, the value\n `.get_unchecked_linear` returns one of the matrix component. This trait is unsafe because\n failing to comply to this may cause Undefined Behaviors.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":159918,"byte_end":159926,"line_start":18,"line_end":18,"column_start":10,"column_end":18},"name":"MatrixNM","qualname":"::base::alias::MatrixNM","value":"Matrix<N, R, C, Owned<N, R, C>>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized column-major matrix with `R` rows and `C` columns.\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"This matrix name contains a typo. Use MatrixMN instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":159829,"byte_end":159908,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":1086},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160055,"byte_end":160063,"line_start":21,"line_end":21,"column_start":10,"column_end":18},"name":"MatrixMN","qualname":"::base::alias::MatrixMN","value":"Matrix<N, R, C, Owned<N, R, C>>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized column-major matrix with `R` rows and `C` columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1090},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160195,"byte_end":160202,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"name":"MatrixN","qualname":"::base::alias::MatrixN","value":"MatrixMN<N, D, D>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized column-major square matrix with `D` rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160333,"byte_end":160340,"line_start":28,"line_end":28,"column_start":10,"column_end":17},"name":"DMatrix","qualname":"::base::alias::DMatrix","value":"MatrixN<N, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" A dynamically sized column-major matrix.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160276,"byte_end":160323,"line_start":27,"line_end":27,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1095},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160433,"byte_end":160440,"line_start":31,"line_end":31,"column_start":10,"column_end":17},"name":"Matrix1","qualname":"::base::alias::Matrix1","value":"MatrixN<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x1 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160527,"byte_end":160534,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"name":"Matrix2","qualname":"::base::alias::Matrix2","value":"MatrixN<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x2 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160621,"byte_end":160628,"line_start":35,"line_end":35,"column_start":10,"column_end":17},"name":"Matrix3","qualname":"::base::alias::Matrix3","value":"MatrixN<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x3 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1101},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160715,"byte_end":160722,"line_start":37,"line_end":37,"column_start":10,"column_end":17},"name":"Matrix4","qualname":"::base::alias::Matrix4","value":"MatrixN<N, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x4 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160809,"byte_end":160816,"line_start":39,"line_end":39,"column_start":10,"column_end":17},"name":"Matrix5","qualname":"::base::alias::Matrix5","value":"MatrixN<N, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x5 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160903,"byte_end":160910,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"Matrix6","qualname":"::base::alias::Matrix6","value":"MatrixN<N, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x6 square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":160991,"byte_end":161000,"line_start":44,"line_end":44,"column_start":10,"column_end":19},"name":"Matrix1x2","qualname":"::base::alias::Matrix1x2","value":"MatrixMN<N, U1, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x2 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161085,"byte_end":161094,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"name":"Matrix1x3","qualname":"::base::alias::Matrix1x3","value":"MatrixMN<N, U1, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161179,"byte_end":161188,"line_start":48,"line_end":48,"column_start":10,"column_end":19},"name":"Matrix1x4","qualname":"::base::alias::Matrix1x4","value":"MatrixMN<N, U1, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161273,"byte_end":161282,"line_start":50,"line_end":50,"column_start":10,"column_end":19},"name":"Matrix1x5","qualname":"::base::alias::Matrix1x5","value":"MatrixMN<N, U1, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x5 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161367,"byte_end":161376,"line_start":52,"line_end":52,"column_start":10,"column_end":19},"name":"Matrix1x6","qualname":"::base::alias::Matrix1x6","value":"MatrixMN<N, U1, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 1x6 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161462,"byte_end":161471,"line_start":55,"line_end":55,"column_start":10,"column_end":19},"name":"Matrix2x3","qualname":"::base::alias::Matrix2x3","value":"MatrixMN<N, U2, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161556,"byte_end":161565,"line_start":57,"line_end":57,"column_start":10,"column_end":19},"name":"Matrix2x4","qualname":"::base::alias::Matrix2x4","value":"MatrixMN<N, U2, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161650,"byte_end":161659,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"Matrix2x5","qualname":"::base::alias::Matrix2x5","value":"MatrixMN<N, U2, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x5 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161744,"byte_end":161753,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"Matrix2x6","qualname":"::base::alias::Matrix2x6","value":"MatrixMN<N, U2, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x6 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161839,"byte_end":161848,"line_start":64,"line_end":64,"column_start":10,"column_end":19},"name":"Matrix3x4","qualname":"::base::alias::Matrix3x4","value":"MatrixMN<N, U3, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":161933,"byte_end":161942,"line_start":66,"line_end":66,"column_start":10,"column_end":19},"name":"Matrix3x5","qualname":"::base::alias::Matrix3x5","value":"MatrixMN<N, U3, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x5 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162027,"byte_end":162036,"line_start":68,"line_end":68,"column_start":10,"column_end":19},"name":"Matrix3x6","qualname":"::base::alias::Matrix3x6","value":"MatrixMN<N, U3, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x6 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162122,"byte_end":162131,"line_start":71,"line_end":71,"column_start":10,"column_end":19},"name":"Matrix4x5","qualname":"::base::alias::Matrix4x5","value":"MatrixMN<N, U4, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x5 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162216,"byte_end":162225,"line_start":73,"line_end":73,"column_start":10,"column_end":19},"name":"Matrix4x6","qualname":"::base::alias::Matrix4x6","value":"MatrixMN<N, U4, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x6 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162311,"byte_end":162320,"line_start":76,"line_end":76,"column_start":10,"column_end":19},"name":"Matrix5x6","qualname":"::base::alias::Matrix5x6","value":"MatrixMN<N, U5, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x6 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162406,"byte_end":162415,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"name":"Matrix2x1","qualname":"::base::alias::Matrix2x1","value":"MatrixMN<N, U2, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 2x1 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162500,"byte_end":162509,"line_start":81,"line_end":81,"column_start":10,"column_end":19},"name":"Matrix3x1","qualname":"::base::alias::Matrix3x1","value":"MatrixMN<N, U3, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x1 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162594,"byte_end":162603,"line_start":83,"line_end":83,"column_start":10,"column_end":19},"name":"Matrix4x1","qualname":"::base::alias::Matrix4x1","value":"MatrixMN<N, U4, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x1 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162688,"byte_end":162697,"line_start":85,"line_end":85,"column_start":10,"column_end":19},"name":"Matrix5x1","qualname":"::base::alias::Matrix5x1","value":"MatrixMN<N, U5, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x1 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162782,"byte_end":162791,"line_start":87,"line_end":87,"column_start":10,"column_end":19},"name":"Matrix6x1","qualname":"::base::alias::Matrix6x1","value":"MatrixMN<N, U6, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x1 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162877,"byte_end":162886,"line_start":90,"line_end":90,"column_start":10,"column_end":19},"name":"Matrix3x2","qualname":"::base::alias::Matrix3x2","value":"MatrixMN<N, U3, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 3x2 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":162971,"byte_end":162980,"line_start":92,"line_end":92,"column_start":10,"column_end":19},"name":"Matrix4x2","qualname":"::base::alias::Matrix4x2","value":"MatrixMN<N, U4, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x2 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163065,"byte_end":163074,"line_start":94,"line_end":94,"column_start":10,"column_end":19},"name":"Matrix5x2","qualname":"::base::alias::Matrix5x2","value":"MatrixMN<N, U5, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x2 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1153},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163159,"byte_end":163168,"line_start":96,"line_end":96,"column_start":10,"column_end":19},"name":"Matrix6x2","qualname":"::base::alias::Matrix6x2","value":"MatrixMN<N, U6, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x2 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163254,"byte_end":163263,"line_start":99,"line_end":99,"column_start":10,"column_end":19},"name":"Matrix4x3","qualname":"::base::alias::Matrix4x3","value":"MatrixMN<N, U4, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 4x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163348,"byte_end":163357,"line_start":101,"line_end":101,"column_start":10,"column_end":19},"name":"Matrix5x3","qualname":"::base::alias::Matrix5x3","value":"MatrixMN<N, U5, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163442,"byte_end":163451,"line_start":103,"line_end":103,"column_start":10,"column_end":19},"name":"Matrix6x3","qualname":"::base::alias::Matrix6x3","value":"MatrixMN<N, U6, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163537,"byte_end":163546,"line_start":106,"line_end":106,"column_start":10,"column_end":19},"name":"Matrix5x4","qualname":"::base::alias::Matrix5x4","value":"MatrixMN<N, U5, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 5x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163631,"byte_end":163640,"line_start":108,"line_end":108,"column_start":10,"column_end":19},"name":"Matrix6x4","qualname":"::base::alias::Matrix6x4","value":"MatrixMN<N, U6, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163726,"byte_end":163735,"line_start":111,"line_end":111,"column_start":10,"column_end":19},"name":"Matrix6x5","qualname":"::base::alias::Matrix6x5","value":"MatrixMN<N, U6, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, column-major, 6x5 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163897,"byte_end":163904,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"name":"DVector","qualname":"::base::alias::DVector","value":"Matrix<N, Dynamic, U1, VecStorage<N, Dynamic, U1>>","parent":null,"children":[],"decl_id":null,"docs":" A dynamically sized column vector.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":163840,"byte_end":163887,"line_start":121,"line_end":121,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164024,"byte_end":164031,"line_start":125,"line_end":125,"column_start":10,"column_end":17},"name":"VectorN","qualname":"::base::alias::VectorN","value":"MatrixMN<N, D, U1>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized D-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164122,"byte_end":164129,"line_start":128,"line_end":128,"column_start":10,"column_end":17},"name":"Vector1","qualname":"::base::alias::Vector1","value":"VectorN<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 1-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164212,"byte_end":164219,"line_start":130,"line_end":130,"column_start":10,"column_end":17},"name":"Vector2","qualname":"::base::alias::Vector2","value":"VectorN<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 2-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164302,"byte_end":164309,"line_start":132,"line_end":132,"column_start":10,"column_end":17},"name":"Vector3","qualname":"::base::alias::Vector3","value":"VectorN<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 3-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164392,"byte_end":164399,"line_start":134,"line_end":134,"column_start":10,"column_end":17},"name":"Vector4","qualname":"::base::alias::Vector4","value":"VectorN<N, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 4-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164482,"byte_end":164489,"line_start":136,"line_end":136,"column_start":10,"column_end":17},"name":"Vector5","qualname":"::base::alias::Vector5","value":"VectorN<N, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 5-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164572,"byte_end":164579,"line_start":138,"line_end":138,"column_start":10,"column_end":17},"name":"Vector6","qualname":"::base::alias::Vector6","value":"VectorN<N, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 6-dimensional column vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164730,"byte_end":164740,"line_start":149,"line_end":149,"column_start":10,"column_end":20},"name":"RowDVector","qualname":"::base::alias::RowDVector","value":"Matrix<N, U1, Dynamic, VecStorage<N, U1, Dynamic>>","parent":null,"children":[],"decl_id":null,"docs":" A dynamically sized row vector.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164673,"byte_end":164720,"line_start":148,"line_end":148,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164857,"byte_end":164867,"line_start":152,"line_end":152,"column_start":10,"column_end":20},"name":"RowVectorN","qualname":"::base::alias::RowVectorN","value":"MatrixMN<N, U1, D>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized D-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":164955,"byte_end":164965,"line_start":155,"line_end":155,"column_start":10,"column_end":20},"name":"RowVector1","qualname":"::base::alias::RowVector1","value":"RowVectorN<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 1-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":165048,"byte_end":165058,"line_start":157,"line_end":157,"column_start":10,"column_end":20},"name":"RowVector2","qualname":"::base::alias::RowVector2","value":"RowVectorN<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 2-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":165141,"byte_end":165151,"line_start":159,"line_end":159,"column_start":10,"column_end":20},"name":"RowVector3","qualname":"::base::alias::RowVector3","value":"RowVectorN<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 3-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":165234,"byte_end":165244,"line_start":161,"line_end":161,"column_start":10,"column_end":20},"name":"RowVector4","qualname":"::base::alias::RowVector4","value":"RowVectorN<N, U4>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 4-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":165327,"byte_end":165337,"line_start":163,"line_end":163,"column_start":10,"column_end":20},"name":"RowVector5","qualname":"::base::alias::RowVector5","value":"RowVectorN<N, U5>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 5-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias.rs","byte_start":165420,"byte_end":165430,"line_start":165,"line_end":165,"column_start":10,"column_end":20},"name":"RowVector6","qualname":"::base::alias::RowVector6","value":"RowVectorN<N, U6>","parent":null,"children":[],"decl_id":null,"docs":" A stack-allocated, 6-dimensional row vector.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":165725,"byte_end":165738,"line_start":13,"line_end":13,"column_start":10,"column_end":23},"name":"MatrixSliceMN","qualname":"::base::alias_slice::MatrixSliceMN","value":"Matrix<N, R, C, SliceStorage<'a, N, R, C, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with `R` rows and `C` columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1221},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":165916,"byte_end":165928,"line_start":17,"line_end":17,"column_start":10,"column_end":22},"name":"MatrixSliceN","qualname":"::base::alias_slice::MatrixSliceN","value":"MatrixSliceMN<'a, N, D, D, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with `D` rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166097,"byte_end":166109,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"DMatrixSlice","qualname":"::base::alias_slice::DMatrixSlice","value":"MatrixSliceN<'a, N, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice dynamic numbers of rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166251,"byte_end":166263,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"name":"MatrixSlice1","qualname":"::base::alias_slice::MatrixSlice1","value":"MatrixSliceN<'a, N, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166394,"byte_end":166406,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"name":"MatrixSlice2","qualname":"::base::alias_slice::MatrixSlice2","value":"MatrixSliceN<'a, N, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166537,"byte_end":166549,"line_start":31,"line_end":31,"column_start":10,"column_end":22},"name":"MatrixSlice3","qualname":"::base::alias_slice::MatrixSlice3","value":"MatrixSliceN<'a, N, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166680,"byte_end":166692,"line_start":34,"line_end":34,"column_start":10,"column_end":22},"name":"MatrixSlice4","qualname":"::base::alias_slice::MatrixSlice4","value":"MatrixSliceN<'a, N, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166823,"byte_end":166835,"line_start":37,"line_end":37,"column_start":10,"column_end":22},"name":"MatrixSlice5","qualname":"::base::alias_slice::MatrixSlice5","value":"MatrixSliceN<'a, N, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":166966,"byte_end":166978,"line_start":40,"line_end":40,"column_start":10,"column_end":22},"name":"MatrixSlice6","qualname":"::base::alias_slice::MatrixSlice6","value":"MatrixSliceN<'a, N, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167110,"byte_end":167124,"line_start":44,"line_end":44,"column_start":10,"column_end":24},"name":"MatrixSlice1x2","qualname":"::base::alias_slice::MatrixSlice1x2","value":"MatrixSliceMN<'a, N, U1, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1267},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167260,"byte_end":167274,"line_start":47,"line_end":47,"column_start":10,"column_end":24},"name":"MatrixSlice1x3","qualname":"::base::alias_slice::MatrixSlice1x3","value":"MatrixSliceMN<'a, N, U1, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1272},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167410,"byte_end":167424,"line_start":50,"line_end":50,"column_start":10,"column_end":24},"name":"MatrixSlice1x4","qualname":"::base::alias_slice::MatrixSlice1x4","value":"MatrixSliceMN<'a, N, U1, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167560,"byte_end":167574,"line_start":53,"line_end":53,"column_start":10,"column_end":24},"name":"MatrixSlice1x5","qualname":"::base::alias_slice::MatrixSlice1x5","value":"MatrixSliceMN<'a, N, U1, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167710,"byte_end":167724,"line_start":56,"line_end":56,"column_start":10,"column_end":24},"name":"MatrixSlice1x6","qualname":"::base::alias_slice::MatrixSlice1x6","value":"MatrixSliceMN<'a, N, U1, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1287},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":167861,"byte_end":167875,"line_start":60,"line_end":60,"column_start":10,"column_end":24},"name":"MatrixSlice2x1","qualname":"::base::alias_slice::MatrixSlice2x1","value":"MatrixSliceMN<'a, N, U2, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168011,"byte_end":168025,"line_start":63,"line_end":63,"column_start":10,"column_end":24},"name":"MatrixSlice2x3","qualname":"::base::alias_slice::MatrixSlice2x3","value":"MatrixSliceMN<'a, N, U2, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168161,"byte_end":168175,"line_start":66,"line_end":66,"column_start":10,"column_end":24},"name":"MatrixSlice2x4","qualname":"::base::alias_slice::MatrixSlice2x4","value":"MatrixSliceMN<'a, N, U2, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1302},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168311,"byte_end":168325,"line_start":69,"line_end":69,"column_start":10,"column_end":24},"name":"MatrixSlice2x5","qualname":"::base::alias_slice::MatrixSlice2x5","value":"MatrixSliceMN<'a, N, U2, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168461,"byte_end":168475,"line_start":72,"line_end":72,"column_start":10,"column_end":24},"name":"MatrixSlice2x6","qualname":"::base::alias_slice::MatrixSlice2x6","value":"MatrixSliceMN<'a, N, U2, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168612,"byte_end":168626,"line_start":76,"line_end":76,"column_start":10,"column_end":24},"name":"MatrixSlice3x1","qualname":"::base::alias_slice::MatrixSlice3x1","value":"MatrixSliceMN<'a, N, U3, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168762,"byte_end":168776,"line_start":79,"line_end":79,"column_start":10,"column_end":24},"name":"MatrixSlice3x2","qualname":"::base::alias_slice::MatrixSlice3x2","value":"MatrixSliceMN<'a, N, U3, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":168912,"byte_end":168926,"line_start":82,"line_end":82,"column_start":10,"column_end":24},"name":"MatrixSlice3x4","qualname":"::base::alias_slice::MatrixSlice3x4","value":"MatrixSliceMN<'a, N, U3, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169062,"byte_end":169076,"line_start":85,"line_end":85,"column_start":10,"column_end":24},"name":"MatrixSlice3x5","qualname":"::base::alias_slice::MatrixSlice3x5","value":"MatrixSliceMN<'a, N, U3, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1332},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169212,"byte_end":169226,"line_start":88,"line_end":88,"column_start":10,"column_end":24},"name":"MatrixSlice3x6","qualname":"::base::alias_slice::MatrixSlice3x6","value":"MatrixSliceMN<'a, N, U3, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169363,"byte_end":169377,"line_start":92,"line_end":92,"column_start":10,"column_end":24},"name":"MatrixSlice4x1","qualname":"::base::alias_slice::MatrixSlice4x1","value":"MatrixSliceMN<'a, N, U4, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169513,"byte_end":169527,"line_start":95,"line_end":95,"column_start":10,"column_end":24},"name":"MatrixSlice4x2","qualname":"::base::alias_slice::MatrixSlice4x2","value":"MatrixSliceMN<'a, N, U4, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169663,"byte_end":169677,"line_start":98,"line_end":98,"column_start":10,"column_end":24},"name":"MatrixSlice4x3","qualname":"::base::alias_slice::MatrixSlice4x3","value":"MatrixSliceMN<'a, N, U4, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169813,"byte_end":169827,"line_start":101,"line_end":101,"column_start":10,"column_end":24},"name":"MatrixSlice4x5","qualname":"::base::alias_slice::MatrixSlice4x5","value":"MatrixSliceMN<'a, N, U4, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":169963,"byte_end":169977,"line_start":104,"line_end":104,"column_start":10,"column_end":24},"name":"MatrixSlice4x6","qualname":"::base::alias_slice::MatrixSlice4x6","value":"MatrixSliceMN<'a, N, U4, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170114,"byte_end":170128,"line_start":108,"line_end":108,"column_start":10,"column_end":24},"name":"MatrixSlice5x1","qualname":"::base::alias_slice::MatrixSlice5x1","value":"MatrixSliceMN<'a, N, U5, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170264,"byte_end":170278,"line_start":111,"line_end":111,"column_start":10,"column_end":24},"name":"MatrixSlice5x2","qualname":"::base::alias_slice::MatrixSlice5x2","value":"MatrixSliceMN<'a, N, U5, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170414,"byte_end":170428,"line_start":114,"line_end":114,"column_start":10,"column_end":24},"name":"MatrixSlice5x3","qualname":"::base::alias_slice::MatrixSlice5x3","value":"MatrixSliceMN<'a, N, U5, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170564,"byte_end":170578,"line_start":117,"line_end":117,"column_start":10,"column_end":24},"name":"MatrixSlice5x4","qualname":"::base::alias_slice::MatrixSlice5x4","value":"MatrixSliceMN<'a, N, U5, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1382},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170714,"byte_end":170728,"line_start":120,"line_end":120,"column_start":10,"column_end":24},"name":"MatrixSlice5x6","qualname":"::base::alias_slice::MatrixSlice5x6","value":"MatrixSliceMN<'a, N, U5, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x6 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":170865,"byte_end":170879,"line_start":124,"line_end":124,"column_start":10,"column_end":24},"name":"MatrixSlice6x1","qualname":"::base::alias_slice::MatrixSlice6x1","value":"MatrixSliceMN<'a, N, U6, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x1 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171015,"byte_end":171029,"line_start":127,"line_end":127,"column_start":10,"column_end":24},"name":"MatrixSlice6x2","qualname":"::base::alias_slice::MatrixSlice6x2","value":"MatrixSliceMN<'a, N, U6, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x2 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171165,"byte_end":171179,"line_start":130,"line_end":130,"column_start":10,"column_end":24},"name":"MatrixSlice6x3","qualname":"::base::alias_slice::MatrixSlice6x3","value":"MatrixSliceMN<'a, N, U6, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x3 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171315,"byte_end":171329,"line_start":133,"line_end":133,"column_start":10,"column_end":24},"name":"MatrixSlice6x4","qualname":"::base::alias_slice::MatrixSlice6x4","value":"MatrixSliceMN<'a, N, U6, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x4 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171465,"byte_end":171479,"line_start":136,"line_end":136,"column_start":10,"column_end":24},"name":"MatrixSlice6x5","qualname":"::base::alias_slice::MatrixSlice6x5","value":"MatrixSliceMN<'a, N, U6, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x5 matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171665,"byte_end":171679,"line_start":140,"line_end":140,"column_start":10,"column_end":24},"name":"MatrixSlice1xX","qualname":"::base::alias_slice::MatrixSlice1xX","value":"MatrixSliceMN<'a, N, U1, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 1 row and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":171870,"byte_end":171884,"line_start":143,"line_end":143,"column_start":10,"column_end":24},"name":"MatrixSlice2xX","qualname":"::base::alias_slice::MatrixSlice2xX","value":"MatrixSliceMN<'a, N, U2, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 2 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":172075,"byte_end":172089,"line_start":146,"line_end":146,"column_start":10,"column_end":24},"name":"MatrixSlice3xX","qualname":"::base::alias_slice::MatrixSlice3xX","value":"MatrixSliceMN<'a, N, U3, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 3 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":172280,"byte_end":172294,"line_start":149,"line_end":149,"column_start":10,"column_end":24},"name":"MatrixSlice4xX","qualname":"::base::alias_slice::MatrixSlice4xX","value":"MatrixSliceMN<'a, N, U4, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 4 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":172485,"byte_end":172499,"line_start":152,"line_end":152,"column_start":10,"column_end":24},"name":"MatrixSlice5xX","qualname":"::base::alias_slice::MatrixSlice5xX","value":"MatrixSliceMN<'a, N, U5, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 5 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1437},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":172690,"byte_end":172704,"line_start":155,"line_end":155,"column_start":10,"column_end":24},"name":"MatrixSlice6xX","qualname":"::base::alias_slice::MatrixSlice6xX","value":"MatrixSliceMN<'a, N, U6, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with 6 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1442},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":172895,"byte_end":172909,"line_start":159,"line_end":159,"column_start":10,"column_end":24},"name":"MatrixSliceXx1","qualname":"::base::alias_slice::MatrixSliceXx1","value":"MatrixSliceMN<'a, N, Dynamic, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 1 column.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1447},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":173105,"byte_end":173119,"line_start":162,"line_end":162,"column_start":10,"column_end":24},"name":"MatrixSliceXx2","qualname":"::base::alias_slice::MatrixSliceXx2","value":"MatrixSliceMN<'a, N, Dynamic, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 2 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":173315,"byte_end":173329,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"MatrixSliceXx3","qualname":"::base::alias_slice::MatrixSliceXx3","value":"MatrixSliceMN<'a, N, Dynamic, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 3 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":173525,"byte_end":173539,"line_start":168,"line_end":168,"column_start":10,"column_end":24},"name":"MatrixSliceXx4","qualname":"::base::alias_slice::MatrixSliceXx4","value":"MatrixSliceMN<'a, N, Dynamic, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 4 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":173735,"byte_end":173749,"line_start":171,"line_end":171,"column_start":10,"column_end":24},"name":"MatrixSliceXx5","qualname":"::base::alias_slice::MatrixSliceXx5","value":"MatrixSliceMN<'a, N, Dynamic, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 5 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":173945,"byte_end":173959,"line_start":174,"line_end":174,"column_start":10,"column_end":24},"name":"MatrixSliceXx6","qualname":"::base::alias_slice::MatrixSliceXx6","value":"MatrixSliceMN<'a, N, Dynamic, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major matrix slice with a number of rows chosen at runtime and 6 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1472},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174110,"byte_end":174122,"line_start":178,"line_end":178,"column_start":10,"column_end":22},"name":"VectorSliceN","qualname":"::base::alias_slice::VectorSliceN","value":"Matrix<N, D, U1, SliceStorage<'a, N, D, U1, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A column vector slice with `D` rows.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174303,"byte_end":174315,"line_start":182,"line_end":182,"column_start":10,"column_end":22},"name":"DVectorSlice","qualname":"::base::alias_slice::DVectorSlice","value":"VectorSliceN<'a, N, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column vector slice dynamic numbers of rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174446,"byte_end":174458,"line_start":185,"line_end":185,"column_start":10,"column_end":22},"name":"VectorSlice1","qualname":"::base::alias_slice::VectorSlice1","value":"VectorSliceN<'a, N, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 1D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174578,"byte_end":174590,"line_start":187,"line_end":187,"column_start":10,"column_end":22},"name":"VectorSlice2","qualname":"::base::alias_slice::VectorSlice2","value":"VectorSliceN<'a, N, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 2D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1493},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174710,"byte_end":174722,"line_start":189,"line_end":189,"column_start":10,"column_end":22},"name":"VectorSlice3","qualname":"::base::alias_slice::VectorSlice3","value":"VectorSliceN<'a, N, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 3D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1498},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174842,"byte_end":174854,"line_start":191,"line_end":191,"column_start":10,"column_end":22},"name":"VectorSlice4","qualname":"::base::alias_slice::VectorSlice4","value":"VectorSliceN<'a, N, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 4D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":174974,"byte_end":174986,"line_start":193,"line_end":193,"column_start":10,"column_end":22},"name":"VectorSlice5","qualname":"::base::alias_slice::VectorSlice5","value":"VectorSliceN<'a, N, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 5D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1508},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":175106,"byte_end":175118,"line_start":195,"line_end":195,"column_start":10,"column_end":22},"name":"VectorSlice6","qualname":"::base::alias_slice::VectorSlice6","value":"VectorSliceN<'a, N, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 6D column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":175338,"byte_end":175354,"line_start":205,"line_end":205,"column_start":10,"column_end":26},"name":"MatrixSliceMutMN","qualname":"::base::alias_slice::MatrixSliceMutMN","value":"Matrix<N, R, C, SliceStorageMut<'a, N, R, C, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with `R` rows and `C` columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":175543,"byte_end":175558,"line_start":209,"line_end":209,"column_start":10,"column_end":25},"name":"MatrixSliceMutN","qualname":"::base::alias_slice::MatrixSliceMutN","value":"MatrixSliceMutMN<'a, N, D, D, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with `D` rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":175738,"byte_end":175753,"line_start":213,"line_end":213,"column_start":10,"column_end":25},"name":"DMatrixSliceMut","qualname":"::base::alias_slice::DMatrixSliceMut","value":"MatrixSliceMutN<'a, N, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice dynamic numbers of rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1531},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":175906,"byte_end":175921,"line_start":217,"line_end":217,"column_start":10,"column_end":25},"name":"MatrixSliceMut1","qualname":"::base::alias_slice::MatrixSliceMut1","value":"MatrixSliceMutN<'a, N, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1536},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176063,"byte_end":176078,"line_start":220,"line_end":220,"column_start":10,"column_end":25},"name":"MatrixSliceMut2","qualname":"::base::alias_slice::MatrixSliceMut2","value":"MatrixSliceMutN<'a, N, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1541},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176220,"byte_end":176235,"line_start":223,"line_end":223,"column_start":10,"column_end":25},"name":"MatrixSliceMut3","qualname":"::base::alias_slice::MatrixSliceMut3","value":"MatrixSliceMutN<'a, N, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176377,"byte_end":176392,"line_start":226,"line_end":226,"column_start":10,"column_end":25},"name":"MatrixSliceMut4","qualname":"::base::alias_slice::MatrixSliceMut4","value":"MatrixSliceMutN<'a, N, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1551},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176534,"byte_end":176549,"line_start":229,"line_end":229,"column_start":10,"column_end":25},"name":"MatrixSliceMut5","qualname":"::base::alias_slice::MatrixSliceMut5","value":"MatrixSliceMutN<'a, N, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1556},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176691,"byte_end":176706,"line_start":232,"line_end":232,"column_start":10,"column_end":25},"name":"MatrixSliceMut6","qualname":"::base::alias_slice::MatrixSliceMut6","value":"MatrixSliceMutN<'a, N, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":176849,"byte_end":176866,"line_start":236,"line_end":236,"column_start":10,"column_end":27},"name":"MatrixSliceMut1x2","qualname":"::base::alias_slice::MatrixSliceMut1x2","value":"MatrixSliceMutMN<'a, N, U1, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1566},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177013,"byte_end":177030,"line_start":239,"line_end":239,"column_start":10,"column_end":27},"name":"MatrixSliceMut1x3","qualname":"::base::alias_slice::MatrixSliceMut1x3","value":"MatrixSliceMutMN<'a, N, U1, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177177,"byte_end":177194,"line_start":242,"line_end":242,"column_start":10,"column_end":27},"name":"MatrixSliceMut1x4","qualname":"::base::alias_slice::MatrixSliceMut1x4","value":"MatrixSliceMutMN<'a, N, U1, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177341,"byte_end":177358,"line_start":245,"line_end":245,"column_start":10,"column_end":27},"name":"MatrixSliceMut1x5","qualname":"::base::alias_slice::MatrixSliceMut1x5","value":"MatrixSliceMutMN<'a, N, U1, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1581},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177505,"byte_end":177522,"line_start":248,"line_end":248,"column_start":10,"column_end":27},"name":"MatrixSliceMut1x6","qualname":"::base::alias_slice::MatrixSliceMut1x6","value":"MatrixSliceMutMN<'a, N, U1, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 1x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177670,"byte_end":177687,"line_start":252,"line_end":252,"column_start":10,"column_end":27},"name":"MatrixSliceMut2x1","qualname":"::base::alias_slice::MatrixSliceMut2x1","value":"MatrixSliceMutMN<'a, N, U2, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177834,"byte_end":177851,"line_start":255,"line_end":255,"column_start":10,"column_end":27},"name":"MatrixSliceMut2x3","qualname":"::base::alias_slice::MatrixSliceMut2x3","value":"MatrixSliceMutMN<'a, N, U2, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1596},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":177998,"byte_end":178015,"line_start":258,"line_end":258,"column_start":10,"column_end":27},"name":"MatrixSliceMut2x4","qualname":"::base::alias_slice::MatrixSliceMut2x4","value":"MatrixSliceMutMN<'a, N, U2, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1601},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178162,"byte_end":178179,"line_start":261,"line_end":261,"column_start":10,"column_end":27},"name":"MatrixSliceMut2x5","qualname":"::base::alias_slice::MatrixSliceMut2x5","value":"MatrixSliceMutMN<'a, N, U2, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1606},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178326,"byte_end":178343,"line_start":264,"line_end":264,"column_start":10,"column_end":27},"name":"MatrixSliceMut2x6","qualname":"::base::alias_slice::MatrixSliceMut2x6","value":"MatrixSliceMutMN<'a, N, U2, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 2x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178491,"byte_end":178508,"line_start":268,"line_end":268,"column_start":10,"column_end":27},"name":"MatrixSliceMut3x1","qualname":"::base::alias_slice::MatrixSliceMut3x1","value":"MatrixSliceMutMN<'a, N, U3, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1616},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178655,"byte_end":178672,"line_start":271,"line_end":271,"column_start":10,"column_end":27},"name":"MatrixSliceMut3x2","qualname":"::base::alias_slice::MatrixSliceMut3x2","value":"MatrixSliceMutMN<'a, N, U3, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1621},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178819,"byte_end":178836,"line_start":274,"line_end":274,"column_start":10,"column_end":27},"name":"MatrixSliceMut3x4","qualname":"::base::alias_slice::MatrixSliceMut3x4","value":"MatrixSliceMutMN<'a, N, U3, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":178983,"byte_end":179000,"line_start":277,"line_end":277,"column_start":10,"column_end":27},"name":"MatrixSliceMut3x5","qualname":"::base::alias_slice::MatrixSliceMut3x5","value":"MatrixSliceMutMN<'a, N, U3, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1631},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179147,"byte_end":179164,"line_start":280,"line_end":280,"column_start":10,"column_end":27},"name":"MatrixSliceMut3x6","qualname":"::base::alias_slice::MatrixSliceMut3x6","value":"MatrixSliceMutMN<'a, N, U3, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 3x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1636},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179312,"byte_end":179329,"line_start":284,"line_end":284,"column_start":10,"column_end":27},"name":"MatrixSliceMut4x1","qualname":"::base::alias_slice::MatrixSliceMut4x1","value":"MatrixSliceMutMN<'a, N, U4, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1641},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179476,"byte_end":179493,"line_start":287,"line_end":287,"column_start":10,"column_end":27},"name":"MatrixSliceMut4x2","qualname":"::base::alias_slice::MatrixSliceMut4x2","value":"MatrixSliceMutMN<'a, N, U4, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179640,"byte_end":179657,"line_start":290,"line_end":290,"column_start":10,"column_end":27},"name":"MatrixSliceMut4x3","qualname":"::base::alias_slice::MatrixSliceMut4x3","value":"MatrixSliceMutMN<'a, N, U4, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179804,"byte_end":179821,"line_start":293,"line_end":293,"column_start":10,"column_end":27},"name":"MatrixSliceMut4x5","qualname":"::base::alias_slice::MatrixSliceMut4x5","value":"MatrixSliceMutMN<'a, N, U4, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1656},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":179968,"byte_end":179985,"line_start":296,"line_end":296,"column_start":10,"column_end":27},"name":"MatrixSliceMut4x6","qualname":"::base::alias_slice::MatrixSliceMut4x6","value":"MatrixSliceMutMN<'a, N, U4, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 4x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180133,"byte_end":180150,"line_start":300,"line_end":300,"column_start":10,"column_end":27},"name":"MatrixSliceMut5x1","qualname":"::base::alias_slice::MatrixSliceMut5x1","value":"MatrixSliceMutMN<'a, N, U5, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1666},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180297,"byte_end":180314,"line_start":303,"line_end":303,"column_start":10,"column_end":27},"name":"MatrixSliceMut5x2","qualname":"::base::alias_slice::MatrixSliceMut5x2","value":"MatrixSliceMutMN<'a, N, U5, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180461,"byte_end":180478,"line_start":306,"line_end":306,"column_start":10,"column_end":27},"name":"MatrixSliceMut5x3","qualname":"::base::alias_slice::MatrixSliceMut5x3","value":"MatrixSliceMutMN<'a, N, U5, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1676},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180625,"byte_end":180642,"line_start":309,"line_end":309,"column_start":10,"column_end":27},"name":"MatrixSliceMut5x4","qualname":"::base::alias_slice::MatrixSliceMut5x4","value":"MatrixSliceMutMN<'a, N, U5, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180789,"byte_end":180806,"line_start":312,"line_end":312,"column_start":10,"column_end":27},"name":"MatrixSliceMut5x6","qualname":"::base::alias_slice::MatrixSliceMut5x6","value":"MatrixSliceMutMN<'a, N, U5, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 5x6 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":180954,"byte_end":180971,"line_start":316,"line_end":316,"column_start":10,"column_end":27},"name":"MatrixSliceMut6x1","qualname":"::base::alias_slice::MatrixSliceMut6x1","value":"MatrixSliceMutMN<'a, N, U6, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x1 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1691},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":181118,"byte_end":181135,"line_start":319,"line_end":319,"column_start":10,"column_end":27},"name":"MatrixSliceMut6x2","qualname":"::base::alias_slice::MatrixSliceMut6x2","value":"MatrixSliceMutMN<'a, N, U6, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x2 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":181282,"byte_end":181299,"line_start":322,"line_end":322,"column_start":10,"column_end":27},"name":"MatrixSliceMut6x3","qualname":"::base::alias_slice::MatrixSliceMut6x3","value":"MatrixSliceMutMN<'a, N, U6, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x3 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":181446,"byte_end":181463,"line_start":325,"line_end":325,"column_start":10,"column_end":27},"name":"MatrixSliceMut6x4","qualname":"::base::alias_slice::MatrixSliceMut6x4","value":"MatrixSliceMutMN<'a, N, U6, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x4 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":181610,"byte_end":181627,"line_start":328,"line_end":328,"column_start":10,"column_end":27},"name":"MatrixSliceMut6x5","qualname":"::base::alias_slice::MatrixSliceMut6x5","value":"MatrixSliceMutMN<'a, N, U6, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major 6x5 mutable matrix slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1711},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":181824,"byte_end":181841,"line_start":332,"line_end":332,"column_start":10,"column_end":27},"name":"MatrixSliceMut1xX","qualname":"::base::alias_slice::MatrixSliceMut1xX","value":"MatrixSliceMutMN<'a, N, U1, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 1 row and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":182043,"byte_end":182060,"line_start":335,"line_end":335,"column_start":10,"column_end":27},"name":"MatrixSliceMut2xX","qualname":"::base::alias_slice::MatrixSliceMut2xX","value":"MatrixSliceMutMN<'a, N, U2, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 2 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1721},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":182262,"byte_end":182279,"line_start":338,"line_end":338,"column_start":10,"column_end":27},"name":"MatrixSliceMut3xX","qualname":"::base::alias_slice::MatrixSliceMut3xX","value":"MatrixSliceMutMN<'a, N, U3, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 3 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":182481,"byte_end":182498,"line_start":341,"line_end":341,"column_start":10,"column_end":27},"name":"MatrixSliceMut4xX","qualname":"::base::alias_slice::MatrixSliceMut4xX","value":"MatrixSliceMutMN<'a, N, U4, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 4 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":182700,"byte_end":182717,"line_start":344,"line_end":344,"column_start":10,"column_end":27},"name":"MatrixSliceMut5xX","qualname":"::base::alias_slice::MatrixSliceMut5xX","value":"MatrixSliceMutMN<'a, N, U5, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 5 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1736},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":182919,"byte_end":182936,"line_start":347,"line_end":347,"column_start":10,"column_end":27},"name":"MatrixSliceMut6xX","qualname":"::base::alias_slice::MatrixSliceMut6xX","value":"MatrixSliceMutMN<'a, N, U6, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with 6 rows and a number of columns chosen at runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1741},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":183138,"byte_end":183155,"line_start":351,"line_end":351,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx1","qualname":"::base::alias_slice::MatrixSliceMutXx1","value":"MatrixSliceMutMN<'a, N, Dynamic, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 1 column.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":183362,"byte_end":183379,"line_start":354,"line_end":354,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx2","qualname":"::base::alias_slice::MatrixSliceMutXx2","value":"MatrixSliceMutMN<'a, N, Dynamic, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 2 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1751},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":183586,"byte_end":183603,"line_start":357,"line_end":357,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx3","qualname":"::base::alias_slice::MatrixSliceMutXx3","value":"MatrixSliceMutMN<'a, N, Dynamic, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 3 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":183810,"byte_end":183827,"line_start":360,"line_end":360,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx4","qualname":"::base::alias_slice::MatrixSliceMutXx4","value":"MatrixSliceMutMN<'a, N, Dynamic, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 4 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184034,"byte_end":184051,"line_start":363,"line_end":363,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx5","qualname":"::base::alias_slice::MatrixSliceMutXx5","value":"MatrixSliceMutMN<'a, N, Dynamic, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 5 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184258,"byte_end":184275,"line_start":366,"line_end":366,"column_start":10,"column_end":27},"name":"MatrixSliceMutXx6","qualname":"::base::alias_slice::MatrixSliceMutXx6","value":"MatrixSliceMutMN<'a, N, Dynamic, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A column-major mutable matrix slice with a number of rows chosen at runtime and 6 columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1771},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184437,"byte_end":184452,"line_start":370,"line_end":370,"column_start":10,"column_end":25},"name":"VectorSliceMutN","qualname":"::base::alias_slice::VectorSliceMutN","value":"Matrix<N, D, U1, SliceStorageMut<'a, N, D, U1, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A mutable column vector slice with `D` rows.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184644,"byte_end":184659,"line_start":374,"line_end":374,"column_start":10,"column_end":25},"name":"DVectorSliceMut","qualname":"::base::alias_slice::DVectorSliceMut","value":"VectorSliceMutN<'a, N, Dynamic, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A mutable column vector slice dynamic numbers of rows and columns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184801,"byte_end":184816,"line_start":377,"line_end":377,"column_start":10,"column_end":25},"name":"VectorSliceMut1","qualname":"::base::alias_slice::VectorSliceMut1","value":"VectorSliceMutN<'a, N, U1, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 1D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":184947,"byte_end":184962,"line_start":379,"line_end":379,"column_start":10,"column_end":25},"name":"VectorSliceMut2","qualname":"::base::alias_slice::VectorSliceMut2","value":"VectorSliceMutN<'a, N, U2, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 2D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1792},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":185093,"byte_end":185108,"line_start":381,"line_end":381,"column_start":10,"column_end":25},"name":"VectorSliceMut3","qualname":"::base::alias_slice::VectorSliceMut3","value":"VectorSliceMutN<'a, N, U3, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 3D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":185239,"byte_end":185254,"line_start":383,"line_end":383,"column_start":10,"column_end":25},"name":"VectorSliceMut4","qualname":"::base::alias_slice::VectorSliceMut4","value":"VectorSliceMutN<'a, N, U4, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 4D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":185385,"byte_end":185400,"line_start":385,"line_end":385,"column_start":10,"column_end":25},"name":"VectorSliceMut5","qualname":"::base::alias_slice::VectorSliceMut5","value":"VectorSliceMutN<'a, N, U5, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 5D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1807},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\alias_slice.rs","byte_start":185531,"byte_end":185546,"line_start":387,"line_end":387,"column_start":10,"column_end":25},"name":"VectorSliceMut6","qualname":"::base::alias_slice::VectorSliceMut6","value":"VectorSliceMutN<'a, N, U6, RStride, CStride>","parent":null,"children":[],"decl_id":null,"docs":" A 6D mutable column vector slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186500,"byte_end":186511,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"new_scaling","qualname":"<MatrixN<N, D>>::new_scaling","value":"fn (scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new homogeneous matrix that applies the same scaling factor on each dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186479,"byte_end":186488,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186793,"byte_end":186815,"line_start":40,"line_end":40,"column_start":12,"column_end":34},"name":"new_nonuniform_scaling","qualname":"<MatrixN<N, D>>::new_nonuniform_scaling","value":"fn <SB> (scaling: &Vector<N, DimNameDiff<D, U1>, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new homogeneous matrix that applies a distinct scaling factor for each dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186772,"byte_end":186781,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187198,"byte_end":187213,"line_start":55,"line_end":55,"column_start":12,"column_end":27},"name":"new_translation","qualname":"<MatrixN<N, D>>::new_translation","value":"fn <SB> (translation: &Vector<N, DimNameDiff<D, U1>, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new homogeneous matrix that applies a pure translation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187177,"byte_end":187186,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187668,"byte_end":187680,"line_start":71,"line_end":71,"column_start":12,"column_end":24},"name":"new_rotation","qualname":"<Matrix3<N>>::new_rotation","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 2 dimensional homogeneous rotation matrix from an angle in radian.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187647,"byte_end":187656,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187986,"byte_end":187998,"line_start":81,"line_end":81,"column_start":12,"column_end":24},"name":"new_rotation","qualname":"<Matrix4<N>>::new_rotation","value":"fn (axisangle: Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).\n\n Returns the identity matrix if the given argument is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187965,"byte_end":187974,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":188287,"byte_end":188309,"line_start":89,"line_end":89,"column_start":12,"column_end":34},"name":"new_rotation_wrt_point","qualname":"<Matrix4<N>>::new_rotation_wrt_point","value":"fn (axisangle: Vector3<N>, pt: Point3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).\n\n Returns the identity matrix if the given argument is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":188266,"byte_end":188275,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":188734,"byte_end":188750,"line_start":99,"line_end":99,"column_start":12,"column_end":28},"name":"from_scaled_axis","qualname":"<Matrix4<N>>::from_scaled_axis","value":"fn (axisangle: Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D homogeneous rotation matrix from an axis and an angle (multiplied together).\n\n Returns the identity matrix if the given argument is zero.\n This is identical to `Self::new_rotation`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":188713,"byte_end":188722,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189008,"byte_end":189025,"line_start":106,"line_end":106,"column_start":12,"column_end":29},"name":"from_euler_angles","qualname":"<Matrix4<N>>::from_euler_angles","value":"fn (roll: N, pitch: N, yaw: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rotation from Euler angles.\n\n The primitive rotations are applied in order: 1 roll − 2 pitch − 3 yaw.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189236,"byte_end":189251,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<Matrix4<N>>::from_axis_angle","value":"fn (axis: &Unit<Vector3<N>>, angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D homogeneous rotation matrix from an axis and a rotation angle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189467,"byte_end":189483,"line_start":117,"line_end":117,"column_start":12,"column_end":28},"name":"new_orthographic","qualname":"<Matrix4<N>>::new_orthographic","value":"fn (left: N, right: N, bottom: N, top: N, znear: N, zfar: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new homogeneous matrix for an orthographic projection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189446,"byte_end":189455,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189733,"byte_end":189748,"line_start":123,"line_end":123,"column_start":12,"column_end":27},"name":"new_perspective","qualname":"<Matrix4<N>>::new_perspective","value":"fn (aspect: N, fovy: N, znear: N, zfar: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new homogeneous matrix for a perspective projection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":189712,"byte_end":189721,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190160,"byte_end":190172,"line_start":133,"line_end":133,"column_start":12,"column_end":24},"name":"face_towards","qualname":"<Matrix4<N>>::face_towards","value":"fn (eye: &Point3<N>, target: &Point3<N>, up: &Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an isometry that corresponds to the local frame of an observer standing at the\n point `eye` and looking toward `target`.\n\n It maps the view direction `target - eye` to the positive `z` axis and the origin to the\n `eye`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190139,"byte_end":190148,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190436,"byte_end":190454,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"new_observer_frame","qualname":"<Matrix4<N>>::new_observer_frame","value":"fn (eye: &Point3<N>, target: &Point3<N>, up: &Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Deprecated: Use [Matrix4::face_towards] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `face_towards`\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190377,"byte_end":190424,"line_start":138,"line_end":138,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190649,"byte_end":190659,"line_start":145,"line_end":145,"column_start":12,"column_end":22},"name":"look_at_rh","qualname":"<Matrix4<N>>::look_at_rh","value":"fn (eye: &Point3<N>, target: &Point3<N>, up: &Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a right-handed look-at view matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190628,"byte_end":190637,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190876,"byte_end":190886,"line_start":151,"line_end":151,"column_start":12,"column_end":22},"name":"look_at_lh","qualname":"<Matrix4<N>>::look_at_lh","value":"fn (eye: &Point3<N>, target: &Point3<N>, up: &Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a left-handed look-at view matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":190855,"byte_end":190864,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191226,"byte_end":191240,"line_start":159,"line_end":159,"column_start":12,"column_end":26},"name":"append_scaling","qualname":"<SquareMatrix<N, D, S>>::append_scaling","value":"fn (&self, scaling: N) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to `self` followed by an uniform scaling factor.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191205,"byte_end":191214,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191584,"byte_end":191599,"line_start":171,"line_end":171,"column_start":12,"column_end":27},"name":"prepend_scaling","qualname":"<SquareMatrix<N, D, S>>::prepend_scaling","value":"fn (&self, scaling: N) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to an uniform scaling factor followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191563,"byte_end":191572,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191947,"byte_end":191972,"line_start":183,"line_end":183,"column_start":12,"column_end":37},"name":"append_nonuniform_scaling","qualname":"<SquareMatrix<N, D, S>>::append_nonuniform_scaling","value":"fn <SB> (&self, scaling: &Vector<N, DimNameDiff<D, U1>, SB>) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to `self` followed by a non-uniform scaling factor.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191926,"byte_end":191935,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":192434,"byte_end":192460,"line_start":199,"line_end":199,"column_start":12,"column_end":38},"name":"prepend_nonuniform_scaling","qualname":"<SquareMatrix<N, D, S>>::prepend_nonuniform_scaling","value":"fn <SB> (&self, scaling: &Vector<N, DimNameDiff<D, U1>, SB>) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to a non-uniform scaling factor followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":192413,"byte_end":192422,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":192908,"byte_end":192926,"line_start":215,"line_end":215,"column_start":12,"column_end":30},"name":"append_translation","qualname":"<SquareMatrix<N, D, S>>::append_translation","value":"fn <SB> (&self, shift: &Vector<N, DimNameDiff<D, U1>, SB>) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to `self` followed by a translation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":192887,"byte_end":192896,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193339,"byte_end":193358,"line_start":228,"line_end":228,"column_start":12,"column_end":31},"name":"prepend_translation","qualname":"<SquareMatrix<N, D, S>>::prepend_translation","value":"fn <SB> (&self, shift: &Vector<N, DimNameDiff<D, U1>, SB>) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to a translation followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193318,"byte_end":193327,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193936,"byte_end":193954,"line_start":246,"line_end":246,"column_start":12,"column_end":30},"name":"append_scaling_mut","qualname":"<SquareMatrix<N, D, S>>::append_scaling_mut","value":"fn (&mut self, scaling: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes in-place the transformation equal to `self` followed by an uniform scaling factor.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193915,"byte_end":193924,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":194242,"byte_end":194261,"line_start":254,"line_end":254,"column_start":12,"column_end":31},"name":"prepend_scaling_mut","qualname":"<SquareMatrix<N, D, S>>::prepend_scaling_mut","value":"fn (&mut self, scaling: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes in-place the transformation equal to an uniform scaling factor followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":194221,"byte_end":194230,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":194555,"byte_end":194584,"line_start":262,"line_end":262,"column_start":12,"column_end":41},"name":"append_nonuniform_scaling_mut","qualname":"<SquareMatrix<N, D, S>>::append_nonuniform_scaling_mut","value":"fn <SB> (&mut self, scaling: &Vector<N, DimNameDiff<D, U1>, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes in-place the transformation equal to `self` followed by a non-uniform scaling factor.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":194534,"byte_end":194543,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":195010,"byte_end":195040,"line_start":275,"line_end":275,"column_start":12,"column_end":42},"name":"prepend_nonuniform_scaling_mut","qualname":"<SquareMatrix<N, D, S>>::prepend_nonuniform_scaling_mut","value":"fn <SB> (&mut self, scaling: &Vector<N, DimNameDiff<D, U1>, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes in-place the transformation equal to a non-uniform scaling factor followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":194989,"byte_end":194998,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":195464,"byte_end":195486,"line_start":290,"line_end":290,"column_start":12,"column_end":34},"name":"append_translation_mut","qualname":"<SquareMatrix<N, D, S>>::append_translation_mut","value":"fn <SB> (&mut self, shift: &Vector<N, DimNameDiff<D, U1>, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to `self` followed by a translation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":195443,"byte_end":195452,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":195936,"byte_end":195959,"line_start":305,"line_end":305,"column_start":12,"column_end":35},"name":"prepend_translation_mut","qualname":"<SquareMatrix<N, D, S>>::prepend_translation_mut","value":"fn <SB> (&mut self, shift: &Vector<N, DimNameDiff<D, U1>, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes the transformation equal to a translation followed by `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":195915,"byte_end":195924,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":196955,"byte_end":196971,"line_start":331,"line_end":331,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<SquareMatrix<N, D, S>>::transform_vector","value":"fn (&self, v: &VectorN<N, DimNameDiff<D, U1>>) -> VectorN<N, DimNameDiff<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Transforms the given vector, assuming the matrix `self` uses homogeneous coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":196934,"byte_end":196943,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":197518,"byte_end":197533,"line_start":349,"line_end":349,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<SquareMatrix<N, D, S>>::transform_point","value":"fn (&self, pt: &Point<N, DimNameDiff<D, U1>>) -> Point<N, DimNameDiff<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Transforms the given point, assuming the matrix `self` uses homogeneous coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":197497,"byte_end":197506,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":199741,"byte_end":199744,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"abs","qualname":"<Matrix<N, R, C, S>>::abs","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the component-wise absolute value.\n\n # Example\n\n ```\n # use nalgebra::Matrix2;\n let a = Matrix2::new(0.0, 1.0,\n                      -2.0, -3.0);\n assert_eq!(a.abs(), Matrix2::new(0.0, 1.0, 2.0, 3.0))\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":199720,"byte_end":199729,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":13615},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204636,"byte_end":204649,"line_start":146,"line_end":146,"column_start":5,"column_end":18},"name":"component_mul","qualname":"<Matrix<N, R1, C1, SA>>::component_mul","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> MatrixComponentOp<N, R1, C1, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":"\n    Componentwise matrix or vector multiplication.\n\n    # Example\n\n    ```\n    # use nalgebra::Matrix2;\n    let a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 5.0, 12.0, 21.0);\n\n    assert_eq!(a.component_mul(&b), expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":200415,"byte_end":200424,"line_start":50,"line_end":50,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204692,"byte_end":204696,"line_start":146,"line_end":146,"column_start":61,"column_end":65},"name":"cmpy","qualname":"<Matrix<N, R1, C1, SA>>::cmpy","value":"fn <R2, C2, SB, R3, C3, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, b: &Matrix<N, R3, C3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Computes componentwise `self[i] = alpha * a[i] * b[i] + beta * self[i]`.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut m = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = (a.component_mul(&b) * 5.0) + m * 10.0;\n\n    m.cmpy(5.0, &a, &b, 10.0);\n    assert_eq!(m, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":201516,"byte_end":201525,"line_start":76,"line_end":76,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13631},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204670,"byte_end":204690,"line_start":146,"line_end":146,"column_start":39,"column_end":59},"name":"component_mul_assign","qualname":"<Matrix<N, R1, C1, SA>>::component_mul_assign","value":"fn <R2, C2, SB> (&mut self, rhs: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Inplace componentwise matrix or vector multiplication.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 5.0, 12.0, 21.0);\n\n    a.component_mul_assign(&b);\n\n    assert_eq!(a, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":203300,"byte_end":203309,"line_start":111,"line_end":111,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13635},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204651,"byte_end":204668,"line_start":146,"line_end":146,"column_start":20,"column_end":37},"name":"component_mul_mut","qualname":"<Matrix<N, R1, C1, SA>>::component_mul_mut","value":"fn <R2, C2, SB> (&mut self, rhs: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Inplace componentwise matrix or vector multiplication.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 5.0, 12.0, 21.0);\n\n    a.component_mul_assign(&b);\n\n    assert_eq!(a, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204095,"byte_end":204104,"line_start":131,"line_end":131,"column_start":13,"column_end":22}},{"value":"deprecated(note =\n             \"This is renamed using the `_assign` suffix instead of the `_mut` suffix.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204117,"byte_end":204213,"line_start":132,"line_end":132,"column_start":13,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":13644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":205809,"byte_end":205822,"line_start":191,"line_end":191,"column_start":5,"column_end":18},"name":"component_div","qualname":"<Matrix<N, R1, C1, SA>>::component_div","value":"fn <R2, C2, SB> (&self, rhs: &Matrix<N, R2, C2, SB>) -> MatrixComponentOp<N, R1, C1, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":"\n    Componentwise matrix or vector division.\n\n    # Example\n\n    ```\n    # use nalgebra::Matrix2;\n    let a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 1.0 / 5.0, 2.0 / 6.0, 3.0 / 7.0);\n\n    assert_eq!(a.component_div(&b), expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":200415,"byte_end":200424,"line_start":50,"line_end":50,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13653},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":205865,"byte_end":205869,"line_start":191,"line_end":191,"column_start":61,"column_end":65},"name":"cdpy","qualname":"<Matrix<N, R1, C1, SA>>::cdpy","value":"fn <R2, C2, SB, R3, C3, SC> (&mut self, alpha: N, a: &Matrix<N, R2, C2, SB>, b: &Matrix<N, R3, C3, SC>, beta: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Computes componentwise `self[i] = alpha * a[i] / b[i] + beta * self[i]`.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut m = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let a = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = (a.component_div(&b) * 5.0) + m * 10.0;\n\n    m.cdpy(5.0, &a, &b, 10.0);\n    assert_eq!(m, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":201516,"byte_end":201525,"line_start":76,"line_end":76,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13660},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":205843,"byte_end":205863,"line_start":191,"line_end":191,"column_start":39,"column_end":59},"name":"component_div_assign","qualname":"<Matrix<N, R1, C1, SA>>::component_div_assign","value":"fn <R2, C2, SB> (&mut self, rhs: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Inplace componentwise matrix or vector division.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 1.0 / 5.0, 2.0 / 6.0, 3.0 / 7.0);\n\n    a.component_div_assign(&b);\n\n    assert_eq!(a, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":203300,"byte_end":203309,"line_start":111,"line_end":111,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":13664},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":205824,"byte_end":205841,"line_start":191,"line_end":191,"column_start":20,"column_end":37},"name":"component_div_mut","qualname":"<Matrix<N, R1, C1, SA>>::component_div_mut","value":"fn <R2, C2, SB> (&mut self, rhs: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n    Inplace componentwise matrix or vector division.\n\n    # Example\n    ```\n    # use nalgebra::Matrix2;\n    let mut a = Matrix2::new(0.0, 1.0, 2.0, 3.0);\n    let b = Matrix2::new(4.0, 5.0, 6.0, 7.0);\n    let expected = Matrix2::new(0.0, 1.0 / 5.0, 2.0 / 6.0, 3.0 / 7.0);\n\n    a.component_div_assign(&b);\n\n    assert_eq!(a, expected);\n    ```\n    \n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204095,"byte_end":204104,"line_start":131,"line_end":131,"column_start":13,"column_end":22}},{"value":"deprecated(note =\n             \"This is renamed using the `_assign` suffix instead of the `_mut` suffix.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":204117,"byte_end":204213,"line_start":132,"line_end":132,"column_start":13,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208099,"byte_end":208124,"line_start":36,"line_end":36,"column_start":19,"column_end":44},"name":"new_uninitialized_generic","qualname":"<MatrixMN<N, R, C>>::new_uninitialized_generic","value":"fn (nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new uninitialized matrix. If the matrix has a compile-time dimension, this panics\n if `nrows != R::to_usize()` or `ncols != C::to_usize()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208071,"byte_end":208080,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208329,"byte_end":208349,"line_start":42,"line_end":42,"column_start":12,"column_end":32},"name":"from_element_generic","qualname":"<MatrixMN<N, R, C>>::from_element_generic","value":"fn (nrows: R, ncols: C, elem: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with all its elements set to `elem`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208308,"byte_end":208317,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208660,"byte_end":208674,"line_start":51,"line_end":51,"column_start":12,"column_end":26},"name":"repeat_generic","qualname":"<MatrixMN<N, R, C>>::repeat_generic","value":"fn (nrows: R, ncols: C, elem: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with all its elements set to `elem`.\n\n Same as `from_element_generic`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208639,"byte_end":208648,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208932,"byte_end":208945,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"zeros_generic","qualname":"<MatrixMN<N, R, C>>::zeros_generic","value":"fn (nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with all its elements set to 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":208911,"byte_end":208920,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":209156,"byte_end":209177,"line_start":65,"line_end":65,"column_start":12,"column_end":33},"name":"from_iterator_generic","qualname":"<MatrixMN<N, R, C>>::from_iterator_generic","value":"fn <I> (nrows: R, ncols: C, iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with all its elements filled by an iterator.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":209135,"byte_end":209144,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":209611,"byte_end":209633,"line_start":76,"line_end":76,"column_start":12,"column_end":34},"name":"from_row_slice_generic","qualname":"<MatrixMN<N, R, C>>::from_row_slice_generic","value":"fn (nrows: R, ncols: C, slice: &[N]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with its elements filled with the components provided by a slice in\n row-major order.\n\n The order of elements in the slice must follow the usual mathematic writing, i.e.,\n row-by-row.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":209590,"byte_end":209599,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":210387,"byte_end":210412,"line_start":97,"line_end":97,"column_start":12,"column_end":37},"name":"from_column_slice_generic","qualname":"<MatrixMN<N, R, C>>::from_column_slice_generic","value":"fn (nrows: R, ncols: C, slice: &[N]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix with its elements filled with the components provided by a slice. The\n components must have the same layout as the matrix data storage (i.e. column-major).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":210366,"byte_end":210375,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":210678,"byte_end":210693,"line_start":104,"line_end":104,"column_start":12,"column_end":27},"name":"from_fn_generic","qualname":"<MatrixMN<N, R, C>>::from_fn_generic","value":"fn <F> (nrows: R, ncols: C, mut f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix filled with the results of a function applied to each of its component\n coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":210657,"byte_end":210666,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":211283,"byte_end":211299,"line_start":122,"line_end":122,"column_start":12,"column_end":28},"name":"identity_generic","qualname":"<MatrixMN<N, R, C>>::identity_generic","value":"fn (nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity matrix.\n\n If the matrix is not square, the largest square submatrix starting at index `(0, 0)` is set\n to the identity matrix. All other entries are set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":211262,"byte_end":211271,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":211705,"byte_end":211734,"line_start":132,"line_end":132,"column_start":12,"column_end":41},"name":"from_diagonal_element_generic","qualname":"<MatrixMN<N, R, C>>::from_diagonal_element_generic","value":"fn (nrows: R, ncols: C, elt: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix with its diagonal filled with copies of `elt`.\n\n If the matrix is not square, the largest square submatrix starting at index `(0, 0)` is set\n to the identity matrix. All other entries are set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":211684,"byte_end":211693,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":212289,"byte_end":212318,"line_start":148,"line_end":148,"column_start":12,"column_end":41},"name":"from_partial_diagonal_generic","qualname":"<MatrixMN<N, R, C>>::from_partial_diagonal_generic","value":"fn (nrows: R, ncols: C, elts: &[N]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix that may be rectangular. The first `elts.len()` diagonal elements are\n filled with the content of `elts`. Others are set to 0.\n\n Panics if `elts.len()` is larger than the minimum among `nrows` and `ncols`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":212268,"byte_end":212277,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":213405,"byte_end":213414,"line_start":180,"line_end":180,"column_start":12,"column_end":21},"name":"from_rows","qualname":"<MatrixMN<N, R, C>>::from_rows","value":"fn <SB> (rows: &[Matrix<N, U1, C, SB>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a new matrix from its rows.\n\n Panics if not enough rows are provided (for statically-sized matrices), or if all rows do\n not have the same dimensions.\n\n # Example\n ```\n # use nalgebra::{RowVector3, Matrix3};\n # use std::iter;\n\n let m = Matrix3::from_rows(&[ RowVector3::new(1.0, 2.0, 3.0),  RowVector3::new(4.0, 5.0, 6.0),  RowVector3::new(7.0, 8.0, 9.0) ]);\n\n assert!(m.m11 == 1.0 && m.m12 == 2.0 && m.m13 == 3.0 &&\n         m.m21 == 4.0 && m.m22 == 5.0 && m.m23 == 6.0 &&\n         m.m31 == 7.0 && m.m32 == 8.0 && m.m33 == 9.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":213384,"byte_end":213393,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":214841,"byte_end":214853,"line_start":220,"line_end":220,"column_start":12,"column_end":24},"name":"from_columns","qualname":"<MatrixMN<N, R, C>>::from_columns","value":"fn <SB> (columns: &[Vector<N, R, SB>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a new matrix from its columns.\n\n Panics if not enough columns are provided (for statically-sized matrices), or if all\n columns do not have the same dimensions.\n\n # Example\n ```\n # use nalgebra::{Vector3, Matrix3};\n # use std::iter;\n\n let m = Matrix3::from_columns(&[ Vector3::new(1.0, 2.0, 3.0),  Vector3::new(4.0, 5.0, 6.0),  Vector3::new(7.0, 8.0, 9.0) ]);\n\n assert!(m.m11 == 1.0 && m.m12 == 4.0 && m.m13 == 7.0 &&\n         m.m21 == 2.0 && m.m22 == 5.0 && m.m23 == 8.0 &&\n         m.m31 == 3.0 && m.m32 == 6.0 && m.m33 == 9.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":214820,"byte_end":214829,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":215722,"byte_end":215740,"line_start":246,"line_end":246,"column_start":12,"column_end":30},"name":"new_random_generic","qualname":"<MatrixMN<N, R, C>>::new_random_generic","value":"fn (nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix filled with random values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":215673,"byte_end":215682,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":215687,"byte_end":215710,"line_start":245,"line_end":245,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":215986,"byte_end":216011,"line_start":253,"line_end":253,"column_start":12,"column_end":37},"name":"from_distribution_generic","qualname":"<MatrixMN<N, R, C>>::from_distribution_generic","value":"fn <Distr, G> (nrows: R, ncols: C, distribution: &Distr, rng: &mut G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix filled with random values from the given distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":215965,"byte_end":215974,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":216905,"byte_end":216921,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"from_vec_generic","qualname":"<MatrixMN<N, R, C>>::from_vec_generic","value":"fn (nrows: R, ncols: C, data: Vec<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix backed by a given `Vec`.\n\n The output matrix is filled column-by-column.\n\n # Example\n ```\n # use nalgebra::{Dynamic, DMatrix, Matrix, U1};\n\n let vec = vec![0, 1, 2, 3, 4, 5];\n let vec_ptr = vec.as_ptr();\n\n let matrix = Matrix::from_vec_generic(Dynamic::new(vec.len()), U1, vec);\n let matrix_storage_ptr = matrix.data.as_vec().as_ptr();\n\n // `matrix` is backed by exactly the same `Vec` as it was constructed from.\n assert_eq!(matrix_storage_ptr, vec_ptr);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":216856,"byte_end":216865,"line_start":280,"line_end":280,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":216870,"byte_end":216893,"line_start":281,"line_end":281,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":218055,"byte_end":218068,"line_start":311,"line_end":311,"column_start":12,"column_end":25},"name":"from_diagonal","qualname":"<MatrixN<N, D>>::from_diagonal","value":"fn <SB> (diag: &Vector<N, D, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a square matrix with its diagonal set to `diag` and all other entries set to 0.\n\n # Example\n ```\n # use nalgebra::{Vector3, DVector, Matrix3, DMatrix};\n # use std::iter;\n\n let m = Matrix3::from_diagonal(&Vector3::new(1.0, 2.0, 3.0));\n // The two additional arguments represent the matrix dimensions.\n let dm = DMatrix::from_diagonal(&DVector::from_row_slice(&[1.0, 2.0, 3.0]));\n\n assert!(m.m11 == 1.0 && m.m12 == 0.0 && m.m13 == 0.0 &&\n         m.m21 == 0.0 && m.m22 == 2.0 && m.m23 == 0.0 &&\n         m.m31 == 0.0 && m.m32 == 0.0 && m.m33 == 3.0);\n assert!(dm[(0, 0)] == 1.0 && dm[(0, 1)] == 0.0 && dm[(0, 2)] == 0.0 &&\n         dm[(1, 0)] == 0.0 && dm[(1, 1)] == 2.0 && dm[(1, 2)] == 0.0 &&\n         dm[(2, 0)] == 0.0 && dm[(2, 1)] == 0.0 && dm[(2, 2)] == 3.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":218034,"byte_end":218043,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246415,"byte_end":246416,"line_start":998,"line_end":998,"column_start":12,"column_end":13},"name":"x","qualname":"<VectorN<N, R>>::x","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its first component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246394,"byte_end":246403,"line_start":997,"line_end":997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246724,"byte_end":246725,"line_start":1010,"line_end":1010,"column_start":12,"column_end":13},"name":"y","qualname":"<VectorN<N, R>>::y","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its second component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246703,"byte_end":246712,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247032,"byte_end":247033,"line_start":1022,"line_end":1022,"column_start":12,"column_end":13},"name":"z","qualname":"<VectorN<N, R>>::z","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its third component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247011,"byte_end":247020,"line_start":1021,"line_end":1021,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247341,"byte_end":247342,"line_start":1034,"line_end":1034,"column_start":12,"column_end":13},"name":"w","qualname":"<VectorN<N, R>>::w","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its fourth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247320,"byte_end":247329,"line_start":1033,"line_end":1033,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247649,"byte_end":247650,"line_start":1046,"line_end":1046,"column_start":12,"column_end":13},"name":"a","qualname":"<VectorN<N, R>>::a","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its fifth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247628,"byte_end":247637,"line_start":1045,"line_end":1045,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247957,"byte_end":247958,"line_start":1058,"line_end":1058,"column_start":12,"column_end":13},"name":"b","qualname":"<VectorN<N, R>>::b","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The column vector with a 1 as its sixth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":247936,"byte_end":247945,"line_start":1057,"line_end":1057,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248270,"byte_end":248276,"line_start":1070,"line_end":1070,"column_start":12,"column_end":18},"name":"x_axis","qualname":"<VectorN<N, R>>::x_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its first component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248249,"byte_end":248258,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248506,"byte_end":248512,"line_start":1077,"line_end":1077,"column_start":12,"column_end":18},"name":"y_axis","qualname":"<VectorN<N, R>>::y_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its second component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248485,"byte_end":248494,"line_start":1076,"line_end":1076,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248741,"byte_end":248747,"line_start":1084,"line_end":1084,"column_start":12,"column_end":18},"name":"z_axis","qualname":"<VectorN<N, R>>::z_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its third component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248720,"byte_end":248729,"line_start":1083,"line_end":1083,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248977,"byte_end":248983,"line_start":1091,"line_end":1091,"column_start":12,"column_end":18},"name":"w_axis","qualname":"<VectorN<N, R>>::w_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its fourth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":248956,"byte_end":248965,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":249212,"byte_end":249218,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"a_axis","qualname":"<VectorN<N, R>>::a_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its fifth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":249191,"byte_end":249200,"line_start":1097,"line_end":1097,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":249447,"byte_end":249453,"line_start":1105,"line_end":1105,"column_start":12,"column_end":18},"name":"b_axis","qualname":"<VectorN<N, R>>::b_axis","value":"fn () -> Unit<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit column vector with a 1 as its sixth component, and zero elsewhere.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":249426,"byte_end":249435,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":250349,"byte_end":250390,"line_start":19,"line_end":19,"column_start":19,"column_end":60},"name":"from_slice_with_strides_generic_unchecked","qualname":"<MatrixSliceMN>::from_slice_with_strides_generic_unchecked","value":"fn (data: &'a [N], start: usize, nrows: R, ncols: C, rstride: RStride, cstride: CStride) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates, without bound-checking, a matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n This method is unsafe because the input data array is not checked to contain enough elements.\n The generic types `R`, `C`, `RStride`, `CStride` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":250321,"byte_end":250330,"line_start":18,"line_end":18,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":251107,"byte_end":251138,"line_start":41,"line_end":41,"column_start":12,"column_end":43},"name":"from_slice_with_strides_generic","qualname":"<MatrixSliceMN>::from_slice_with_strides_generic","value":"fn (data: &'a [N], nrows: R, ncols: C, rstride: RStride, cstride: CStride) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n Panics if the input data array dose not contain enough elements.\n The generic types `R`, `C`, `RStride`, `CStride` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":251086,"byte_end":251095,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":252385,"byte_end":252426,"line_start":72,"line_end":72,"column_start":19,"column_end":60},"name":"from_slice_with_strides_generic_unchecked","qualname":"<MatrixSliceMutMN>::from_slice_with_strides_generic_unchecked","value":"fn (data: &'a mut [N], start: usize, nrows: R, ncols: C, rstride: RStride, cstride: CStride) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates, without bound-checking, a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n This method is unsafe because the input data array is not checked to contain enough elements.\n The generic types `R`, `C`, `RStride`, `CStride` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":252357,"byte_end":252366,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":253162,"byte_end":253193,"line_start":94,"line_end":94,"column_start":12,"column_end":43},"name":"from_slice_with_strides_generic","qualname":"<MatrixSliceMutMN>::from_slice_with_strides_generic","value":"fn (data: &'a mut [N], nrows: R, ncols: C, rstride: RStride, cstride: CStride) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n Panics if the input data array dose not contain enough elements.\n The generic types `R`, `C`, `RStride`, `CStride` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":253141,"byte_end":253150,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":255284,"byte_end":255312,"line_start":142,"line_end":142,"column_start":19,"column_end":47},"name":"from_slice_generic_unchecked","qualname":"<MatrixSliceMN>::from_slice_generic_unchecked","value":"fn (data: &'a [N], start: usize, nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates, without bound-checking, a matrix slice from an array and with dimensions specified by generic types instances.\n\n This method is unsafe because the input data array is not checked to contain enough elements.\n The generic types `R` and `C` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":255256,"byte_end":255265,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":255852,"byte_end":255870,"line_start":157,"line_end":157,"column_start":12,"column_end":30},"name":"from_slice_generic","qualname":"<MatrixSliceMN>::from_slice_generic","value":"fn (data: &'a [N], nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n Panics if the input data array dose not contain enough elements.\n The generic types `R` and `C` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":255831,"byte_end":255840,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":256463,"byte_end":256491,"line_start":168,"line_end":168,"column_start":19,"column_end":47},"name":"from_slice_generic_unchecked","qualname":"<MatrixSliceMutMN>::from_slice_generic_unchecked","value":"fn (data: &'a mut [N], start: usize, nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates, without bound-checking, a mutable matrix slice from an array and with dimensions specified by generic types instances.\n\n This method is unsafe because the input data array is not checked to contain enough elements.\n The generic types `R` and `C` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":256435,"byte_end":256444,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":257043,"byte_end":257061,"line_start":183,"line_end":183,"column_start":12,"column_end":30},"name":"from_slice_generic","qualname":"<MatrixSliceMutMN>::from_slice_generic","value":"fn (data: &'a mut [N], nrows: R, ncols: C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a mutable matrix slice from an array and with dimensions and strides specified by generic types instances.\n\n Panics if the input data array dose not contain enough elements.\n The generic types `R` and `C` can either be type-level integers or integers wrapped with `Dynamic::new()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":257022,"byte_end":257031,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":277727,"byte_end":277741,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"upper_triangle","qualname":"<Matrix<N, R, C, S>>::upper_triangle","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the upper triangular part of this matrix (including the diagonal).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":277706,"byte_end":277715,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":278037,"byte_end":278051,"line_start":34,"line_end":34,"column_start":12,"column_end":26},"name":"lower_triangle","qualname":"<Matrix<N, R, C, S>>::lower_triangle","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the lower triangular part of this matrix (including the diagonal).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":278016,"byte_end":278025,"line_start":33,"line_end":33,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":278379,"byte_end":278390,"line_start":44,"line_end":44,"column_start":12,"column_end":23},"name":"select_rows","qualname":"<Matrix<N, R, C, S>>::select_rows","value":"fn <'a, I> (&self, irows: I) -> MatrixMN<N, Dynamic, C>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix by extracting the given set of rows from `self`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":278320,"byte_end":278367,"line_start":43,"line_end":43,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2307},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":279573,"byte_end":279587,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"select_columns","qualname":"<Matrix<N, R, C, S>>::select_columns","value":"fn <'a, I> (&self, icols: I) -> MatrixMN<N, R, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix by extracting the given set of columns from `self`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":279514,"byte_end":279561,"line_start":75,"line_end":75,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280306,"byte_end":280310,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"fill","qualname":"<Matrix<N, R, C, S>>::fill","value":"fn (&mut self, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the elements of this matrix to `val`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280285,"byte_end":280294,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280477,"byte_end":280495,"line_start":106,"line_end":106,"column_start":12,"column_end":30},"name":"fill_with_identity","qualname":"<Matrix<N, R, C, S>>::fill_with_identity","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills `self` with the identity matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280456,"byte_end":280465,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280697,"byte_end":280710,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"fill_diagonal","qualname":"<Matrix<N, R, C, S>>::fill_diagonal","value":"fn (&mut self, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the diagonal elements of this matrix to `val`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280676,"byte_end":280685,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":281003,"byte_end":281011,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"fill_row","qualname":"<Matrix<N, R, C, S>>::fill_row","value":"fn (&mut self, i: usize, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the elements of the selected row to `val`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280982,"byte_end":280991,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":281307,"byte_end":281318,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"fill_column","qualname":"<Matrix<N, R, C, S>>::fill_column","value":"fn (&mut self, j: usize, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the elements of the selected column to `val`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":281286,"byte_end":281295,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":281631,"byte_end":281643,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"set_diagonal","qualname":"<Matrix<N, R, C, S>>::set_diagonal","value":"fn <R2, S2> (&mut self, diag: &Vector<N, R2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the diagonal of this matrix with the content of the given vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":281610,"byte_end":281619,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2323},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":282446,"byte_end":282466,"line_start":164,"line_end":164,"column_start":12,"column_end":32},"name":"set_partial_diagonal","qualname":"<Matrix<N, R, C, S>>::set_partial_diagonal","value":"fn (&mut self, diag: impl Iterator<Item = N>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the diagonal of this matrix with the content of the given iterator.\n\n This will fill as many diagonal elements as the iterator yields, up to the\n minimum of the number of rows and columns of `self`, and starting with the\n diagonal element at index (0, 0).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":282425,"byte_end":282434,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":282861,"byte_end":282868,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"set_row","qualname":"<Matrix<N, R, C, S>>::set_row","value":"fn <C2, S2> (&mut self, i: usize, row: &RowVector<N, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the selected row of this matrix with the content of the given vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":282840,"byte_end":282849,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":283191,"byte_end":283201,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"set_column","qualname":"<Matrix<N, R, C, S>>::set_column","value":"fn <R2, S2> (&mut self, i: usize, column: &Vector<N, R2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the selected column of this matrix with the content of the given vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":283170,"byte_end":283179,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":283849,"byte_end":283868,"line_start":201,"line_end":201,"column_start":12,"column_end":31},"name":"fill_lower_triangle","qualname":"<Matrix<N, R, C, S>>::fill_lower_triangle","value":"fn (&mut self, val: N, shift: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the elements of the lower-triangular part of this matrix to `val`.\n\n The parameter `shift` allows some subdiagonals to be left untouched:\n * If `shift = 0` then the diagonal is overwritten as well.\n * If `shift = 1` then the diagonal is left untouched.\n * If `shift > 1`, then the diagonal and the first `shift - 1` subdiagonals are left\n untouched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":283828,"byte_end":283837,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2332},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":284522,"byte_end":284541,"line_start":217,"line_end":217,"column_start":12,"column_end":31},"name":"fill_upper_triangle","qualname":"<Matrix<N, R, C, S>>::fill_upper_triangle","value":"fn (&mut self, val: N, shift: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all the elements of the lower-triangular part of this matrix to `val`.\n\n The parameter `shift` allows some superdiagonals to be left untouched:\n * If `shift = 0` then the diagonal is overwritten as well.\n * If `shift = 1` then the diagonal is left untouched.\n * If `shift > 1`, then the diagonal and the first `shift - 1` superdiagonals are left\n untouched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":284501,"byte_end":284510,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":284957,"byte_end":284966,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"swap_rows","qualname":"<Matrix<N, R, C, S>>::swap_rows","value":"fn (&mut self, irow1: usize, irow2: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps two rows in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":284936,"byte_end":284945,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":285372,"byte_end":285384,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"swap_columns","qualname":"<Matrix<N, R, C, S>>::swap_columns","value":"fn (&mut self, icol1: usize, icol2: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps two columns in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":285351,"byte_end":285360,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":285975,"byte_end":286014,"line_start":260,"line_end":260,"column_start":12,"column_end":51},"name":"fill_lower_triangle_with_upper_triangle","qualname":"<Matrix<N, D, D, S>>::fill_lower_triangle_with_upper_triangle","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies the upper-triangle of this matrix to its lower-triangular part.\n\n This makes the matrix symmetric. Panics if the matrix is not square.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":286526,"byte_end":286565,"line_start":276,"line_end":276,"column_start":12,"column_end":51},"name":"fill_upper_triangle_with_lower_triangle","qualname":"<Matrix<N, D, D, S>>::fill_upper_triangle_with_lower_triangle","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies the upper-triangle of this matrix to its upper-triangular part.\n\n This makes the matrix symmetric. Panics if the matrix is not square.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":287142,"byte_end":287155,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"remove_column","qualname":"<Matrix<N, R, C, S>>::remove_column","value":"fn (self, i: usize) -> MatrixMN<N, R, DimDiff<C, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the `i`-th column from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":287121,"byte_end":287130,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":287469,"byte_end":287486,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"remove_columns_at","qualname":"<Matrix<N, R, C, S>>::remove_columns_at","value":"fn (self, indices: &[usize]) -> MatrixMN<N, R, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Removes all columns in `indices`   \n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":287410,"byte_end":287457,"line_start":311,"line_end":311,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":288736,"byte_end":288750,"line_start":349,"line_end":349,"column_start":12,"column_end":26},"name":"remove_rows_at","qualname":"<Matrix<N, R, C, S>>::remove_rows_at","value":"fn (self, indices: &[usize]) -> MatrixMN<N, Dynamic, C>","parent":null,"children":[],"decl_id":null,"docs":" Removes all rows in `indices`   \n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":288677,"byte_end":288724,"line_start":348,"line_end":348,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":289967,"byte_end":289987,"line_start":384,"line_end":384,"column_start":12,"column_end":32},"name":"remove_fixed_columns","qualname":"<Matrix<N, R, C, S>>::remove_fixed_columns","value":"fn <D> (self, i: usize) -> MatrixMN<N, R, DimDiff<C, D>>","parent":null,"children":[],"decl_id":null,"docs":" Removes `D::dim()` consecutive columns from this matrix, starting with the `i`-th\n (included).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":289946,"byte_end":289955,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":290393,"byte_end":290407,"line_start":396,"line_end":396,"column_start":12,"column_end":26},"name":"remove_columns","qualname":"<Matrix<N, R, C, S>>::remove_columns","value":"fn (self, i: usize, n: usize) -> MatrixMN<N, R, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Removes `n` consecutive columns from this matrix, starting with the `i`-th (included).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":290320,"byte_end":290329,"line_start":394,"line_end":394,"column_start":5,"column_end":14}},{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":290334,"byte_end":290381,"line_start":395,"line_end":395,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":290919,"byte_end":290941,"line_start":409,"line_end":409,"column_start":12,"column_end":34},"name":"remove_columns_generic","qualname":"<Matrix<N, R, C, S>>::remove_columns_generic","value":"fn <D> (self, i: usize, nremove: D) -> MatrixMN<N, R, DimDiff<C, D>>","parent":null,"children":[],"decl_id":null,"docs":" Removes `nremove.value()` columns from this matrix, starting with the `i`-th (included).\n\n This is the generic implementation of `.remove_columns(...)` and\n `.remove_fixed_columns(...)` which have nicer API interfaces.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":290898,"byte_end":290907,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":292316,"byte_end":292326,"line_start":457,"line_end":457,"column_start":12,"column_end":22},"name":"remove_row","qualname":"<Matrix<N, R, C, S>>::remove_row","value":"fn (self, i: usize) -> MatrixMN<N, DimDiff<R, U1>, C>","parent":null,"children":[],"decl_id":null,"docs":" Removes the `i`-th row from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":292295,"byte_end":292304,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":292654,"byte_end":292671,"line_start":467,"line_end":467,"column_start":12,"column_end":29},"name":"remove_fixed_rows","qualname":"<Matrix<N, R, C, S>>::remove_fixed_rows","value":"fn <D> (self, i: usize) -> MatrixMN<N, DimDiff<R, D>, C>","parent":null,"children":[],"decl_id":null,"docs":" Removes `D::dim()` consecutive rows from this matrix, starting with the `i`-th (included).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":292633,"byte_end":292642,"line_start":466,"line_end":466,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":293071,"byte_end":293082,"line_start":479,"line_end":479,"column_start":12,"column_end":23},"name":"remove_rows","qualname":"<Matrix<N, R, C, S>>::remove_rows","value":"fn (self, i: usize, n: usize) -> MatrixMN<N, Dynamic, C>","parent":null,"children":[],"decl_id":null,"docs":" Removes `n` consecutive rows from this matrix, starting with the `i`-th (included).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":292998,"byte_end":293007,"line_start":477,"line_end":477,"column_start":5,"column_end":14}},{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":293012,"byte_end":293059,"line_start":478,"line_end":478,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":293582,"byte_end":293601,"line_start":492,"line_end":492,"column_start":12,"column_end":31},"name":"remove_rows_generic","qualname":"<Matrix<N, R, C, S>>::remove_rows_generic","value":"fn <D> (self, i: usize, nremove: D) -> MatrixMN<N, DimDiff<R, D>, C>","parent":null,"children":[],"decl_id":null,"docs":" Removes `nremove.value()` rows from this matrix, starting with the `i`-th (included).\n\n This is the generic implementation of `.remove_rows(...)` and `.remove_fixed_rows(...)`\n which have nicer API interfaces.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":293561,"byte_end":293570,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":294639,"byte_end":294652,"line_start":533,"line_end":533,"column_start":12,"column_end":25},"name":"insert_column","qualname":"<Matrix<N, R, C, S>>::insert_column","value":"fn (self, i: usize, val: N) -> MatrixMN<N, R, DimSum<C, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a column filled with `val` at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":294618,"byte_end":294627,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":294981,"byte_end":295001,"line_start":543,"line_end":543,"column_start":12,"column_end":32},"name":"insert_fixed_columns","qualname":"<Matrix<N, R, C, S>>::insert_fixed_columns","value":"fn <D> (self, i: usize, val: N) -> MatrixMN<N, R, DimSum<C, D>>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `D::dim()` columns filled with `val` starting at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":294960,"byte_end":294969,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2363},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":295498,"byte_end":295512,"line_start":557,"line_end":557,"column_start":12,"column_end":26},"name":"insert_columns","qualname":"<Matrix<N, R, C, S>>::insert_columns","value":"fn (self, i: usize, n: usize, val: N) -> MatrixMN<N, R, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `n` columns filled with `val` starting at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":295425,"byte_end":295434,"line_start":555,"line_end":555,"column_start":5,"column_end":14}},{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":295439,"byte_end":295486,"line_start":556,"line_end":556,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":296032,"byte_end":296068,"line_start":571,"line_end":571,"column_start":19,"column_end":55},"name":"insert_columns_generic_uninitialized","qualname":"<Matrix<N, R, C, S>>::insert_columns_generic_uninitialized","value":"fn <D> (self, i: usize, ninsert: D) -> MatrixMN<N, R, DimSum<C, D>>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `ninsert.value()` columns starting at the `i-th` place of this matrix.\n\n The added column values are not initialized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":296004,"byte_end":296013,"line_start":570,"line_end":570,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297135,"byte_end":297145,"line_start":611,"line_end":611,"column_start":12,"column_end":22},"name":"insert_row","qualname":"<Matrix<N, R, C, S>>::insert_row","value":"fn (self, i: usize, val: N) -> MatrixMN<N, DimSum<R, U1>, C>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a row filled with `val` at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297114,"byte_end":297123,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2367},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297468,"byte_end":297485,"line_start":621,"line_end":621,"column_start":12,"column_end":29},"name":"insert_fixed_rows","qualname":"<Matrix<N, R, C, S>>::insert_fixed_rows","value":"fn <D> (self, i: usize, val: N) -> MatrixMN<N, DimSum<R, D>, C>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `D::dim()` rows filled with `val` starting at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297447,"byte_end":297456,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2369},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297973,"byte_end":297984,"line_start":635,"line_end":635,"column_start":12,"column_end":23},"name":"insert_rows","qualname":"<Matrix<N, R, C, S>>::insert_rows","value":"fn (self, i: usize, n: usize, val: N) -> MatrixMN<N, Dynamic, C>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `n` rows filled with `val` starting at the `i-th` position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297900,"byte_end":297909,"line_start":633,"line_end":633,"column_start":5,"column_end":14}},{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":297914,"byte_end":297961,"line_start":634,"line_end":634,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":298621,"byte_end":298654,"line_start":651,"line_end":651,"column_start":19,"column_end":52},"name":"insert_rows_generic_uninitialized","qualname":"<Matrix<N, R, C, S>>::insert_rows_generic_uninitialized","value":"fn <D> (self, i: usize, ninsert: D) -> MatrixMN<N, DimSum<R, D>, C>","parent":null,"children":[],"decl_id":null,"docs":" Inserts `ninsert.value()` rows at the `i-th` place of this matrix.\n\n The added rows values are not initialized.\n This is the generic implementation of `.insert_rows(...)` and\n `.insert_fixed_rows(...)` which have nicer API interfaces.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":298593,"byte_end":298602,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2372},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":299846,"byte_end":299852,"line_start":695,"line_end":695,"column_start":12,"column_end":18},"name":"resize","qualname":"<Matrix<N, R, C, S>>::resize","value":"fn (self, new_nrows: usize, new_ncols: usize, val: N) -> DMatrix<N>","parent":null,"children":[],"decl_id":null,"docs":" Resizes this matrix so that it contains `new_nrows` rows and `new_ncols` columns.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows and/or columns than `self`, then the extra rows or columns are filled with `val`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":299787,"byte_end":299834,"line_start":694,"line_end":694,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2373},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":300438,"byte_end":300455,"line_start":705,"line_end":705,"column_start":12,"column_end":29},"name":"resize_vertically","qualname":"<Matrix<N, R, C, S>>::resize_vertically","value":"fn (self, new_nrows: usize, val: N) -> MatrixMN<N, Dynamic, C>","parent":null,"children":[],"decl_id":null,"docs":" Resizes this matrix vertically, i.e., so that it contains `new_nrows` rows while keeping the same number of columns.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows than `self`, then the extra rows are filled with `val`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":300379,"byte_end":300426,"line_start":704,"line_end":704,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":301067,"byte_end":301086,"line_start":716,"line_end":716,"column_start":12,"column_end":31},"name":"resize_horizontally","qualname":"<Matrix<N, R, C, S>>::resize_horizontally","value":"fn (self, new_ncols: usize, val: N) -> MatrixMN<N, R, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Resizes this matrix horizontally, i.e., so that it contains `new_ncolumns` columns while keeping the same number of columns.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n columns than `self`, then the extra columns are filled with `val`.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":301008,"byte_end":301055,"line_start":715,"line_end":715,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":301627,"byte_end":301639,"line_start":726,"line_end":726,"column_start":12,"column_end":24},"name":"fixed_resize","qualname":"<Matrix<N, R, C, S>>::fixed_resize","value":"fn <R2, C2> (self, val: N) -> MatrixMN<N, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" Resizes this matrix so that it contains `R2::value()` rows and `C2::value()` columns.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows and/or columns than `self`, then the extra rows or columns are filled with `val`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":302128,"byte_end":302142,"line_start":736,"line_end":736,"column_start":12,"column_end":26},"name":"resize_generic","qualname":"<Matrix<N, R, C, S>>::resize_generic","value":"fn <R2, C2> (self, new_nrows: R2, new_ncols: C2, val: N) -> MatrixMN<N, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" Resizes `self` such that it has dimensions `new_nrows × now_ncols`.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows and/or columns than `self`, then the extra rows or columns are filled with `val`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":302107,"byte_end":302116,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":304487,"byte_end":304497,"line_start":807,"line_end":807,"column_start":12,"column_end":22},"name":"resize_mut","qualname":"<DMatrix<N>>::resize_mut","value":"fn (&mut self, new_nrows: usize, new_ncols: usize, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes this matrix in-place.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows and/or columns than `self`, then the extra rows or columns are filled with `val`.\n\n Defined only for owned fully-dynamic matrices, i.e., `DMatrix`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":305408,"byte_end":305429,"line_start":827,"line_end":827,"column_start":12,"column_end":33},"name":"resize_vertically_mut","qualname":"<MatrixMN<N, Dynamic, C>>::resize_vertically_mut","value":"fn (&mut self, new_nrows: usize, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Changes the number of rows of this matrix in-place.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n rows than `self`, then the extra rows are filled with `val`.\n\n Defined only for owned matrices with a dynamic number of rows (for example, `DVector`).\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":305349,"byte_end":305396,"line_start":826,"line_end":826,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":306373,"byte_end":306396,"line_start":848,"line_end":848,"column_start":12,"column_end":35},"name":"resize_horizontally_mut","qualname":"<MatrixMN<N, R, Dynamic>>::resize_horizontally_mut","value":"fn (&mut self, new_ncols: usize, val: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Changes the number of column of this matrix in-place.\n\n The values are copied such that `self[(i, j)] == result[(i, j)]`. If the result has more\n columns than `self`, then the extra columns are filled with `val`.\n\n Defined only for owned matrices with a dynamic number of columns (for example, `DVector`).\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", feature = \"alloc\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":306314,"byte_end":306361,"line_start":847,"line_end":847,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":2415},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"indexing","qualname":"::base::indexing","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","parent":null,"children":[{"krate":0,"index":2416},{"krate":0,"index":2427},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2437},{"krate":0,"index":2443},{"krate":0,"index":2449},{"krate":0,"index":2455},{"krate":0,"index":2462},{"krate":0,"index":2468},{"krate":0,"index":2474},{"krate":0,"index":2480},{"krate":0,"index":2486},{"krate":0,"index":2497},{"krate":0,"index":2507},{"krate":0,"index":2530},{"krate":0,"index":2539},{"krate":0,"index":2547},{"krate":0,"index":2556},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":15626},{"krate":0,"index":15636},{"krate":0,"index":15645},{"krate":0,"index":15655},{"krate":0,"index":15664},{"krate":0,"index":15674},{"krate":0,"index":15683},{"krate":0,"index":15693},{"krate":0,"index":15702},{"krate":0,"index":15712},{"krate":0,"index":15721},{"krate":0,"index":15731},{"krate":0,"index":15740},{"krate":0,"index":15751},{"krate":0,"index":15761},{"krate":0,"index":15771},{"krate":0,"index":15780},{"krate":0,"index":15790},{"krate":0,"index":15799},{"krate":0,"index":15809},{"krate":0,"index":15818},{"krate":0,"index":15828},{"krate":0,"index":15837},{"krate":0,"index":15847},{"krate":0,"index":15856},{"krate":0,"index":15866},{"krate":0,"index":15875},{"krate":0,"index":15885},{"krate":0,"index":15894},{"krate":0,"index":15905},{"krate":0,"index":15915},{"krate":0,"index":15925},{"krate":0,"index":15934},{"krate":0,"index":15944},{"krate":0,"index":15953},{"krate":0,"index":15963},{"krate":0,"index":15972},{"krate":0,"index":15982},{"krate":0,"index":15991},{"krate":0,"index":16001},{"krate":0,"index":16010},{"krate":0,"index":16020},{"krate":0,"index":16029},{"krate":0,"index":16039},{"krate":0,"index":16048},{"krate":0,"index":16059},{"krate":0,"index":16069},{"krate":0,"index":16079},{"krate":0,"index":16088},{"krate":0,"index":16098},{"krate":0,"index":16107},{"krate":0,"index":16117},{"krate":0,"index":16126},{"krate":0,"index":16136},{"krate":0,"index":16145},{"krate":0,"index":16155},{"krate":0,"index":16164},{"krate":0,"index":16174},{"krate":0,"index":16183},{"krate":0,"index":16193},{"krate":0,"index":16202},{"krate":0,"index":16213},{"krate":0,"index":16223},{"krate":0,"index":16233},{"krate":0,"index":16242},{"krate":0,"index":16252},{"krate":0,"index":16261},{"krate":0,"index":16271},{"krate":0,"index":16280},{"krate":0,"index":16290},{"krate":0,"index":16299},{"krate":0,"index":16309},{"krate":0,"index":16318},{"krate":0,"index":16328},{"krate":0,"index":16337},{"krate":0,"index":16347},{"krate":0,"index":16356},{"krate":0,"index":16367},{"krate":0,"index":16377},{"krate":0,"index":16387},{"krate":0,"index":16396},{"krate":0,"index":16406},{"krate":0,"index":16415},{"krate":0,"index":16425},{"krate":0,"index":16434},{"krate":0,"index":16444},{"krate":0,"index":16453},{"krate":0,"index":16463},{"krate":0,"index":16472},{"krate":0,"index":16482},{"krate":0,"index":16491},{"krate":0,"index":16501},{"krate":0,"index":16510},{"krate":0,"index":16521},{"krate":0,"index":16531},{"krate":0,"index":16541},{"krate":0,"index":16550},{"krate":0,"index":16560},{"krate":0,"index":16569},{"krate":0,"index":16579},{"krate":0,"index":16588},{"krate":0,"index":16598},{"krate":0,"index":16607},{"krate":0,"index":16617},{"krate":0,"index":16626},{"krate":0,"index":16636},{"krate":0,"index":16645},{"krate":0,"index":16655},{"krate":0,"index":16664},{"krate":0,"index":16675},{"krate":0,"index":16685},{"krate":0,"index":16696},{"krate":0,"index":16706},{"krate":0,"index":16717},{"krate":0,"index":16727},{"krate":0,"index":16738},{"krate":0,"index":16748},{"krate":0,"index":16759},{"krate":0,"index":16769},{"krate":0,"index":16780},{"krate":0,"index":16790},{"krate":0,"index":16801},{"krate":0,"index":16811},{"krate":0,"index":16822},{"krate":0,"index":16832},{"krate":0,"index":16844}],"decl_id":null,"docs":" Indexing\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2433},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":313461,"byte_end":313467,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"Length","qualname":"::base::indexing::DimRange::Length","value":"type Length: Dim;","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" The number of elements indexed by this range.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2486},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":320710,"byte_end":320721,"line_start":270,"line_end":270,"column_start":11,"column_end":22},"name":"MatrixIndex","qualname":"::base::indexing::MatrixIndex","value":"MatrixIndex<'a, N: Scalar, R: Dim, C: Dim, S: Storage<N, R, C>>: Sized","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496}],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2492},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":320838,"byte_end":320844,"line_start":273,"line_end":273,"column_start":10,"column_end":16},"name":"Output","qualname":"::base::indexing::MatrixIndex::Output","value":"type Output : 'a;","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" The output type returned by methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":320948,"byte_end":320960,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"contained_by","qualname":"::base::indexing::MatrixIndex::contained_by","value":"fn (&self, matrix: &Matrix<N, R, C, S>) -> bool","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" Produces true if the given matrix is contained by this index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321159,"byte_end":321162,"line_start":283,"line_end":283,"column_start":8,"column_end":11},"name":"get","qualname":"::base::indexing::MatrixIndex::get","value":"fn (self, matrix: &'a Matrix<N, R, C, S>) -> Option<Self::Output>","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" Produces a shared view of the data at this location if in bounds,\n or `None`, otherwise.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321134,"byte_end":321151,"line_start":282,"line_end":282,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321513,"byte_end":321526,"line_start":294,"line_end":294,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::base::indexing::MatrixIndex::get_unchecked","value":"fn (self, matrix: &'a Matrix<N, R, C, S>) -> Self::Output","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" Produces a shared view of the data at this location if in bounds\n without any bounds checking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321728,"byte_end":321733,"line_start":300,"line_end":300,"column_start":8,"column_end":13},"name":"index","qualname":"::base::indexing::MatrixIndex::index","value":"fn (self, matrix: &'a Matrix<N, R, C, S>) -> Self::Output","parent":{"krate":0,"index":2486},"children":[],"decl_id":null,"docs":" Produces a shared view to the data at this location, or panics\n if out of bounds.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321703,"byte_end":321720,"line_start":299,"line_end":299,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":2497},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321914,"byte_end":321928,"line_start":306,"line_end":306,"column_start":11,"column_end":25},"name":"MatrixIndexMut","qualname":"::base::indexing::MatrixIndexMut","value":"MatrixIndexMut<'a, N: Scalar, R: Dim, C: Dim, S: StorageMut<N, R, C>>: MatrixIndex<'a, N, R, C, S>","parent":null,"children":[{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506}],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322069,"byte_end":322078,"line_start":308,"line_end":308,"column_start":10,"column_end":19},"name":"OutputMut","qualname":"::base::indexing::MatrixIndexMut::OutputMut","value":"type OutputMut : 'a;","parent":{"krate":0,"index":2497},"children":[],"decl_id":null,"docs":" The output type returned by methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322229,"byte_end":322246,"line_start":313,"line_end":313,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::base::indexing::MatrixIndexMut::get_unchecked_mut","value":"fn (self, matrix: &'a mut Matrix<N, R, C, S>) -> Self::OutputMut","parent":{"krate":0,"index":2497},"children":[],"decl_id":null,"docs":" Produces a mutable view of the data at this location, without\n performing any bounds checking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322442,"byte_end":322449,"line_start":319,"line_end":319,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::base::indexing::MatrixIndexMut::get_mut","value":"fn (self, matrix: &'a mut Matrix<N, R, C, S>) -> Option<Self::OutputMut>","parent":{"krate":0,"index":2497},"children":[],"decl_id":null,"docs":" Produces a mutable view of the data at this location, if in\n bounds.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322417,"byte_end":322434,"line_start":318,"line_end":318,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322814,"byte_end":322823,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::base::indexing::MatrixIndexMut::index_mut","value":"fn (self, matrix: &'a mut Matrix<N, R, C, S>) -> Self::OutputMut","parent":{"krate":0,"index":2497},"children":[],"decl_id":null,"docs":" Produces a mutable view of the data at this location, or panics\n if out of bounds.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":322789,"byte_end":322806,"line_start":330,"line_end":330,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":325780,"byte_end":325783,"line_start":440,"line_end":440,"column_start":12,"column_end":15},"name":"get","qualname":"<Matrix<N, R, C, S>>::get","value":"fn <'a, I> (&'a self, index: I) -> Option<I::Output>","parent":null,"children":[],"decl_id":null,"docs":" Produces a view of the data at the given index, or\n `None` if the index is out of bounds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":325759,"byte_end":325768,"line_start":439,"line_end":439,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326056,"byte_end":326063,"line_start":450,"line_end":450,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Matrix<N, R, C, S>>::get_mut","value":"fn <'a, I> (&'a mut self, index: I) -> Option<I::OutputMut>","parent":null,"children":[],"decl_id":null,"docs":" Produces a mutable view of the data at the given index, or\n `None` if the index is out of bounds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326035,"byte_end":326044,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326374,"byte_end":326379,"line_start":461,"line_end":461,"column_start":12,"column_end":17},"name":"index","qualname":"<Matrix<N, R, C, S>>::index","value":"fn <'a, I> (&'a self, index: I) -> I::Output","parent":null,"children":[],"decl_id":null,"docs":" Produces a view of the data at the given index, or\n panics if the index is out of bounds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326353,"byte_end":326362,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326646,"byte_end":326655,"line_start":471,"line_end":471,"column_start":12,"column_end":21},"name":"index_mut","qualname":"<Matrix<N, R, C, S>>::index_mut","value":"fn <'a, I> (&'a mut self, index: I) -> I::OutputMut","parent":null,"children":[],"decl_id":null,"docs":" Produces a mutable view of the data at the given index, or\n panics if the index is out of bounds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326625,"byte_end":326634,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326961,"byte_end":326974,"line_start":482,"line_end":482,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Matrix<N, R, C, S>>::get_unchecked","value":"fn <'a, I> (&'a self, index: I) -> I::Output","parent":null,"children":[],"decl_id":null,"docs":" Produces a view of the data at the given index, without doing\n any bounds checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":326933,"byte_end":326942,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":327249,"byte_end":327266,"line_start":492,"line_end":492,"column_start":19,"column_end":36},"name":"get_unchecked_mut","qualname":"<Matrix<N, R, C, S>>::get_unchecked_mut","value":"fn <'a, I> (&'a mut self, index: I) -> I::OutputMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable view of the data at the given index, without doing\n any bounds checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":327221,"byte_end":327230,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":2629},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":335631,"byte_end":335643,"line_start":31,"line_end":31,"column_start":10,"column_end":22},"name":"SquareMatrix","qualname":"::base::matrix::SquareMatrix","value":"Matrix<N, D, D, S>","parent":null,"children":[],"decl_id":null,"docs":" A square matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":335728,"byte_end":335734,"line_start":34,"line_end":34,"column_start":10,"column_end":16},"name":"Vector","qualname":"::base::matrix::Vector","value":"Matrix<N, D, U1, S>","parent":null,"children":[],"decl_id":null,"docs":" A matrix with one column and `D` rows.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2637},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":335821,"byte_end":335830,"line_start":37,"line_end":37,"column_start":10,"column_end":19},"name":"RowVector","qualname":"::base::matrix::RowVector","value":"Matrix<N, U1, D, S>","parent":null,"children":[],"decl_id":null,"docs":" A matrix with one row and `D` columns .\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2641},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":335917,"byte_end":335926,"line_start":40,"line_end":40,"column_start":10,"column_end":19},"name":"MatrixSum","qualname":"::base::matrix::MatrixSum","value":"Matrix<N, SameShapeR<R1, R2>, SameShapeC<C1, C2>,\n       SameShapeStorage<N, R1, C1, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" The type of the result of a matrix sum.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":336094,"byte_end":336103,"line_start":44,"line_end":44,"column_start":10,"column_end":19},"name":"VectorSum","qualname":"::base::matrix::VectorSum","value":"Matrix<N, SameShapeR<R1, R2>, U1, SameShapeStorage<N, R1, U1, R2, U1>>","parent":null,"children":[],"decl_id":null,"docs":" The type of the result of a matrix sum.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2651},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":336257,"byte_end":336268,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"MatrixCross","qualname":"::base::matrix::MatrixCross","value":"Matrix<N, SameShapeR<R1, R2>, SameShapeC<C1, C2>,\n       SameShapeStorage<N, R1, C1, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" The type of the result of a matrix cross product.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16855},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":337788,"byte_end":337794,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"Matrix","qualname":"::base::matrix::Matrix","value":"Matrix { data }","parent":null,"children":[{"krate":0,"index":16860},{"krate":0,"index":16861}],"decl_id":null,"docs":" The most generic column-major matrix (and vector) type.\n\n It combines four type parameters:\n - `N`: for the matrix components scalar type.\n - `R`: for the matrix number of rows.\n - `C`: for the matrix number of columns.\n - `S`: for the matrix data storage, i.e., the buffer that actually contains the matrix\n components.\n\n The matrix dimensions parameters `R` and `C` can either be:\n - type-level unsigned integer constants (e.g. `U1`, `U124`) from the `nalgebra::` root module.\n All numbers from 0 to 127 are defined that way.\n - type-level unsigned integer constants (e.g. `U1024`, `U10000`) from the `typenum::` crate.\n Using those, you will not get error messages as nice as for numbers smaller than 128 defined on\n the `nalgebra::` module.\n - the special value `Dynamic` from the `nalgebra::` root module. This indicates that the\n specified dimension is not known at compile-time. Note that this will generally imply that the\n matrix data storage `S` performs a dynamic allocation and contains extra metadata for the\n matrix shape.\n\n Note that mixing `Dynamic` with type-level unsigned integers is allowed. Actually, a\n dynamically-sized column vector should be represented as a `Matrix<N, Dynamic, U1, S>` (given\n some concrete types for `N` and a compatible data storage type `S`).\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":337743,"byte_end":337753,"line_start":74,"line_end":74,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":16860},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":337974,"byte_end":337978,"line_start":79,"line_end":79,"column_start":9,"column_end":13},"name":"data","qualname":"::base::matrix::Matrix::data","value":"S","parent":{"krate":0,"index":16855},"children":[],"decl_id":null,"docs":" The data storage that contains all the matrix components and informations about its number\n of rows and column (if needed).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339671,"byte_end":339701,"line_start":143,"line_end":143,"column_start":19,"column_end":49},"name":"from_data_statically_unchecked","qualname":"<Matrix<N, R, C, S>>::from_data_statically_unchecked","value":"fn (data: S) -> Matrix<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix with the given data without statically checking that the matrix\n dimension matches the storage dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339643,"byte_end":339652,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339980,"byte_end":339989,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"from_data","qualname":"<Matrix<N, R, C, S>>::from_data","value":"fn (data: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new matrix with the given data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339959,"byte_end":339968,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2675},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":340319,"byte_end":340322,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"len","qualname":"<Matrix<N, R, C, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of elements of this matrix.\n\n # Examples:\n\n ```\n # use nalgebra::Matrix3x4;\n let mat = Matrix3x4::<f32>::zeros();\n assert_eq!(mat.len(), 12);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":340298,"byte_end":340307,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":340699,"byte_end":340704,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"shape","qualname":"<Matrix<N, R, C, S>>::shape","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The shape of this matrix returned as the tuple (number of rows, number of columns).\n\n # Examples:\n\n ```\n # use nalgebra::Matrix3x4;\n let mat = Matrix3x4::<f32>::zeros();\n assert_eq!(mat.shape(), (3, 4));\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":340678,"byte_end":340687,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341058,"byte_end":341063,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"nrows","qualname":"<Matrix<N, R, C, S>>::nrows","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of rows of this matrix.\n\n # Examples:\n\n ```\n # use nalgebra::Matrix3x4;\n let mat = Matrix3x4::<f32>::zeros();\n assert_eq!(mat.nrows(), 3);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341037,"byte_end":341046,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341347,"byte_end":341352,"line_start":208,"line_end":208,"column_start":12,"column_end":17},"name":"ncols","qualname":"<Matrix<N, R, C, S>>::ncols","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of columns of this matrix.\n\n # Examples:\n\n ```\n # use nalgebra::Matrix3x4;\n let mat = Matrix3x4::<f32>::zeros();\n assert_eq!(mat.ncols(), 4);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341326,"byte_end":341335,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341835,"byte_end":341842,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"strides","qualname":"<Matrix<N, R, C, S>>::strides","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The strides (row stride, column stride) of this matrix.\n\n # Examples:\n\n ```\n # use nalgebra::DMatrix;\n let mat = DMatrix::<f32>::zeros(10, 10);\n let slice = mat.slice_with_steps((0, 0), (5, 3), (1, 2));\n // The column strides is the number of steps (here 2) multiplied by the corresponding dimension.\n assert_eq!(mat.strides(), (1, 10));\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":341814,"byte_end":341823,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":342578,"byte_end":342582,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"iter","qualname":"<Matrix<N, R, C, S>>::iter","value":"fn (&self) -> MatrixIter<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Iterates through this matrix coordinates in column-major order.\n\n # Examples:\n\n ```\n # use nalgebra::Matrix2x3;\n let mat = Matrix2x3::new(11, 12, 13,\n                          21, 22, 23);\n let mut it = mat.iter();\n assert_eq!(*it.next().unwrap(), 11);\n assert_eq!(*it.next().unwrap(), 21);\n assert_eq!(*it.next().unwrap(), 12);\n assert_eq!(*it.next().unwrap(), 22);\n assert_eq!(*it.next().unwrap(), 13);\n assert_eq!(*it.next().unwrap(), 23);\n assert!(it.next().is_none());\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":342557,"byte_end":342566,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":343008,"byte_end":343016,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"row_iter","qualname":"<Matrix<N, R, C, S>>::row_iter","value":"fn (&self) -> RowIter<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Iterate through the rows of this matrix.\n\n # Example\n ```\n # use nalgebra::Matrix2x3;\n let mut a = Matrix2x3::new(1, 2, 3,\n                            4, 5, 6);\n for (i, row) in a.row_iter().enumerate() {\n     assert_eq!(row, a.row(i))\n }\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":342987,"byte_end":342996,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":343437,"byte_end":343448,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"column_iter","qualname":"<Matrix<N, R, C, S>>::column_iter","value":"fn (&self) -> ColumnIter<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Iterate through the columns of this matrix.\n # Example\n ```\n # use nalgebra::Matrix2x3;\n let mut a = Matrix2x3::new(1, 2, 3,\n                            4, 5, 6);\n for (i, column) in a.column_iter().enumerate() {\n     assert_eq!(column, a.column(i))\n }\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":343416,"byte_end":343425,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":343655,"byte_end":343677,"line_start":283,"line_end":283,"column_start":12,"column_end":34},"name":"vector_to_matrix_index","qualname":"<Matrix<N, R, C, S>>::vector_to_matrix_index","value":"fn (&self, i: usize) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Computes the row and column coordinates of the i-th element of this matrix seen as a\n vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":343634,"byte_end":343643,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":344222,"byte_end":344228,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Matrix<N, R, C, S>>::as_ptr","value":"fn (&self) -> *const N","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the start of the matrix.\n\n If the matrix is not empty, this pointer is guaranteed to be aligned\n and non-null.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":344201,"byte_end":344210,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":344458,"byte_end":344469,"line_start":310,"line_end":310,"column_start":12,"column_end":23},"name":"relative_eq","qualname":"<Matrix<N, R, C, S>>::relative_eq","value":"fn <R2, C2, SB> (&self, other: &Matrix<N, R2, C2, SB>, eps: N::Epsilon, max_relative: N::Epsilon) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether `self` and `rhs` are equal up to a given epsilon.\n\n See `relative_eq` from the `RelativeEq` trait for more details.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":344437,"byte_end":344446,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345072,"byte_end":345074,"line_start":332,"line_end":332,"column_start":12,"column_end":14},"name":"eq","qualname":"<Matrix<N, R, C, S>>::eq","value":"fn <R2, C2, SB> (&self, other: &Matrix<N, R2, C2, SB>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether `self` and `rhs` are exactly equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345051,"byte_end":345060,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345512,"byte_end":345522,"line_start":346,"line_end":346,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Matrix<N, R, C, S>>::into_owned","value":"fn (self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Moves this matrix into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345491,"byte_end":345500,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345917,"byte_end":345931,"line_start":356,"line_end":356,"column_start":12,"column_end":26},"name":"into_owned_sum","qualname":"<Matrix<N, R, C, S>>::into_owned_sum","value":"fn <R2, C2> (self) -> MatrixSum<N, R, C, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" Moves this matrix into one that owns its data. The actual type of the result depends on\n matrix storage combination rules for addition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":345896,"byte_end":345905,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":346748,"byte_end":346759,"line_start":380,"line_end":380,"column_start":12,"column_end":23},"name":"clone_owned","qualname":"<Matrix<N, R, C, S>>::clone_owned","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Clones this matrix to one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":346727,"byte_end":346736,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":347072,"byte_end":347087,"line_start":388,"line_end":388,"column_start":12,"column_end":27},"name":"clone_owned_sum","qualname":"<Matrix<N, R, C, S>>::clone_owned_sum","value":"fn <R2, C2> (&self) -> MatrixSum<N, R, C, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" Clones this matrix into one that owns its data. The actual type of the result depends on\n matrix storage combination rules for addition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":347051,"byte_end":347060,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":348002,"byte_end":348005,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"map","qualname":"<Matrix<N, R, C, S>>::map","value":"fn <N2, F> (&self, mut f: F) -> MatrixMN<N2, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix containing the result of `f` applied to each of its entries.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":347981,"byte_end":347990,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":348751,"byte_end":348768,"line_start":437,"line_end":437,"column_start":12,"column_end":29},"name":"map_with_location","qualname":"<Matrix<N, R, C, S>>::map_with_location","value":"fn <N2, F> (&self, mut f: F) -> MatrixMN<N2, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix containing the result of `f` applied to each of its entries. Unlike `map`,\n `f` also gets passed the row and column index, i.e. `f(row, col, value)`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":348730,"byte_end":348739,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2709},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":349495,"byte_end":349502,"line_start":463,"line_end":463,"column_start":12,"column_end":19},"name":"zip_map","qualname":"<Matrix<N, R, C, S>>::zip_map","value":"fn <N2, N3, S2, F> (&self, rhs: &Matrix<N2, R, C, S2>, mut f: F) -> MatrixMN<N3, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix containing the result of `f` applied to each entries of `self` and\n `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":349474,"byte_end":349483,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":350528,"byte_end":350539,"line_start":496,"line_end":496,"column_start":12,"column_end":23},"name":"zip_zip_map","qualname":"<Matrix<N, R, C, S>>::zip_zip_map","value":"fn <N2, N3, N4, S2, S3, F> (&self, b: &Matrix<N2, R, C, S2>, c: &Matrix<N3, R, C, S3>, mut f: F) -> MatrixMN<N4, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a matrix containing the result of `f` applied to each entries of `self` and\n `b`, and `c`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":350507,"byte_end":350516,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":351750,"byte_end":351754,"line_start":537,"line_end":537,"column_start":12,"column_end":16},"name":"fold","qualname":"<Matrix<N, R, C, S>>::fold","value":"fn <Acc> (&self, init: Acc, mut f: impl FnMut(Acc, N) -> Acc) -> Acc","parent":null,"children":[],"decl_id":null,"docs":" Folds a function `f` on each entry of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":351729,"byte_end":351738,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2724},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":352260,"byte_end":352268,"line_start":556,"line_end":556,"column_start":12,"column_end":20},"name":"zip_fold","qualname":"<Matrix<N, R, C, S>>::zip_fold","value":"fn <N2, R2, C2, S2, Acc> (&self, rhs: &Matrix<N2, R2, C2, S2>, init: Acc, mut f: impl FnMut(Acc, N, N2) -> Acc) -> Acc","parent":null,"children":[],"decl_id":null,"docs":" Folds a function `f` on each pairs of entries from `self` and `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":352239,"byte_end":352248,"line_start":555,"line_end":555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":353230,"byte_end":353242,"line_start":588,"line_end":588,"column_start":12,"column_end":24},"name":"transpose_to","qualname":"<Matrix<N, R, C, S>>::transpose_to","value":"fn <R2, C2, SB> (&self, out: &mut Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transposes `self` and store the result into `out`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":353209,"byte_end":353218,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2735},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":353928,"byte_end":353937,"line_start":613,"line_end":613,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Matrix<N, R, C, S>>::transpose","value":"fn (&self) -> MatrixMN<N, C, R>","parent":null,"children":[],"decl_id":null,"docs":" Transposes `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":353907,"byte_end":353916,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354393,"byte_end":354401,"line_start":629,"line_end":629,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Matrix<N, R, C, S>>::iter_mut","value":"fn (&mut self) -> MatrixIterMut<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Mutably iterates through this matrix coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354372,"byte_end":354381,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354688,"byte_end":354698,"line_start":638,"line_end":638,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Matrix<N, R, C, S>>::as_mut_ptr","value":"fn (&mut self) -> *mut N","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the start of the matrix.\n\n If the matrix is not empty, this pointer is guaranteed to be aligned\n and non-null.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354667,"byte_end":354676,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":355253,"byte_end":355265,"line_start":658,"line_end":658,"column_start":12,"column_end":24},"name":"row_iter_mut","qualname":"<Matrix<N, R, C, S>>::row_iter_mut","value":"fn (&mut self) -> RowIterMut<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Mutably iterates through this matrix rows.\n\n # Example\n ```\n # use nalgebra::Matrix2x3;\n let mut a = Matrix2x3::new(1, 2, 3,\n                            4, 5, 6);\n for (i, mut row) in a.row_iter_mut().enumerate() {\n     row *= (i + 1) * 10;\n }\n\n let expected = Matrix2x3::new(10, 20, 30,\n                               80, 100, 120);\n assert_eq!(a, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":355232,"byte_end":355241,"line_start":657,"line_end":657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":355844,"byte_end":355859,"line_start":678,"line_end":678,"column_start":12,"column_end":27},"name":"column_iter_mut","qualname":"<Matrix<N, R, C, S>>::column_iter_mut","value":"fn (&mut self) -> ColumnIterMut<N, R, C, S>","parent":null,"children":[],"decl_id":null,"docs":" Mutably iterates through this matrix columns.\n\n # Example\n ```\n # use nalgebra::Matrix2x3;\n let mut a = Matrix2x3::new(1, 2, 3,\n                            4, 5, 6);\n for (i, mut col) in a.column_iter_mut().enumerate() {\n     col *= (i + 1) * 10;\n }\n\n let expected = Matrix2x3::new(10, 40, 90,\n                               40, 100, 180);\n assert_eq!(a, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":355823,"byte_end":355832,"line_start":677,"line_end":677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2745},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":356024,"byte_end":356038,"line_start":684,"line_end":684,"column_start":19,"column_end":33},"name":"swap_unchecked","qualname":"<Matrix<N, R, C, S>>::swap_unchecked","value":"fn (&mut self, row_cols1: (usize, usize), row_cols2: (usize, usize)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps two entries without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":355996,"byte_end":356005,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":356382,"byte_end":356386,"line_start":692,"line_end":692,"column_start":12,"column_end":16},"name":"swap","qualname":"<Matrix<N, R, C, S>>::swap","value":"fn (&mut self, row_cols1: (usize, usize), row_cols2: (usize, usize)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps two entries.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":356361,"byte_end":356370,"line_start":691,"line_end":691,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":357062,"byte_end":357077,"line_start":709,"line_end":709,"column_start":12,"column_end":27},"name":"copy_from_slice","qualname":"<Matrix<N, R, C, S>>::copy_from_slice","value":"fn (&mut self, slice: &[N]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills this matrix with the content of a slice. Both must hold the same number of elements.\n\n The components of the slice are assumed to be ordered in column-major order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":357041,"byte_end":357050,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":357639,"byte_end":357648,"line_start":728,"line_end":728,"column_start":12,"column_end":21},"name":"copy_from","qualname":"<Matrix<N, R, C, S>>::copy_from","value":"fn <R2, C2, SB> (&mut self, other: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills this matrix with the content of another one. Both must have the same shape.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":357618,"byte_end":357627,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":358333,"byte_end":358345,"line_start":751,"line_end":751,"column_start":12,"column_end":24},"name":"tr_copy_from","qualname":"<Matrix<N, R, C, S>>::tr_copy_from","value":"fn <R2, C2, SB> (&mut self, other: &Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills this matrix with the content of the transpose another one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":358312,"byte_end":358321,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359157,"byte_end":359167,"line_start":776,"line_end":776,"column_start":12,"column_end":22},"name":"apply_into","qualname":"<Matrix<N, R, C, S>>::apply_into","value":"fn <F> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns `self` with each of its components replaced by the result of a closure `f` applied on it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359136,"byte_end":359145,"line_start":775,"line_end":775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359367,"byte_end":359372,"line_start":783,"line_end":783,"column_start":12,"column_end":17},"name":"apply","qualname":"<Matrix<N, R, C, S>>::apply","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces each component of `self` by the result of a closure `f` applied on it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359346,"byte_end":359355,"line_start":782,"line_end":782,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2760},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359857,"byte_end":359866,"line_start":799,"line_end":799,"column_start":12,"column_end":21},"name":"zip_apply","qualname":"<Matrix<N, R, C, S>>::zip_apply","value":"fn <N2, R2, C2, S2> (&mut self, rhs: &Matrix<N2, R2, C2, S2>, mut f: impl FnMut(N, N2) -> N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces each component of `self` by the result of a closure `f` applied on its components\n joined with the components from `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":359836,"byte_end":359845,"line_start":798,"line_end":798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":360808,"byte_end":360821,"line_start":827,"line_end":827,"column_start":12,"column_end":25},"name":"zip_zip_apply","qualname":"<Matrix<N, R, C, S>>::zip_zip_apply","value":"fn <N2, R2, C2, S2, N3, R3, C3, S3> (&mut self, b: &Matrix<N2, R2, C2, S2>, c: &Matrix<N3, R3, C3, S3>, mut f: impl FnMut(N, N2, N3) -> N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces each component of `self` by the result of a closure `f` applied on its components\n joined with the components from `b` and `c`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":360787,"byte_end":360796,"line_start":826,"line_end":826,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362201,"byte_end":362215,"line_start":865,"line_end":865,"column_start":19,"column_end":33},"name":"vget_unchecked","qualname":"<Vector<N, D, S>>::vget_unchecked","value":"fn (&self, i: usize) -> &N","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the i-th element of this column vector without bound checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362173,"byte_end":362182,"line_start":864,"line_end":864,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362596,"byte_end":362614,"line_start":875,"line_end":875,"column_start":19,"column_end":37},"name":"vget_unchecked_mut","qualname":"<Vector<N, D, S>>::vget_unchecked_mut","value":"fn (&mut self, i: usize) -> &mut N","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the i-th element of this column vector without bound checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362568,"byte_end":362577,"line_start":874,"line_end":874,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363011,"byte_end":363019,"line_start":885,"line_end":885,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Matrix<N, R, C, S>>::as_slice","value":"fn (&self) -> &[N]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire matrix entries ordered column-by-columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362990,"byte_end":362999,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2797},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363284,"byte_end":363296,"line_start":893,"line_end":893,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<Matrix<N, R, C, S>>::as_mut_slice","value":"fn (&mut self) -> &mut [N]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice containing the entire matrix entries ordered column-by-columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363263,"byte_end":363272,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363498,"byte_end":363511,"line_start":900,"line_end":900,"column_start":12,"column_end":25},"name":"transpose_mut","qualname":"<Matrix<N, D, D, S>>::transpose_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transposes the square matrix `self` in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2808},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":364034,"byte_end":364044,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"adjoint_to","qualname":"<Matrix<N, R, C, S>>::adjoint_to","value":"fn <R2, C2, SB> (&self, out: &mut Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Takes the adjoint (aka. conjugate-transpose) of `self` and store the result into `out`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":364013,"byte_end":364022,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":364772,"byte_end":364779,"line_start":944,"line_end":944,"column_start":12,"column_end":19},"name":"adjoint","qualname":"<Matrix<N, R, C, S>>::adjoint","value":"fn (&self) -> MatrixMN<N, C, R>","parent":null,"children":[],"decl_id":null,"docs":" The adjoint (aka. conjugate-transpose) of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":364751,"byte_end":364760,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2813},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365258,"byte_end":365280,"line_start":959,"line_end":959,"column_start":12,"column_end":34},"name":"conjugate_transpose_to","qualname":"<Matrix<N, R, C, S>>::conjugate_transpose_to","value":"fn <R2, C2, SB> (&self, out: &mut Matrix<N, R2, C2, SB>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Takes the conjugate and transposes `self` and store the result into `out`.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Renamed `self.adjoint_to(out)`.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365177,"byte_end":365232,"line_start":957,"line_end":957,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365237,"byte_end":365246,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365679,"byte_end":365698,"line_start":972,"line_end":972,"column_start":12,"column_end":31},"name":"conjugate_transpose","qualname":"<Matrix<N, R, C, S>>::conjugate_transpose","value":"fn (&self) -> MatrixMN<N, C, R>","parent":null,"children":[],"decl_id":null,"docs":" The conjugate transposition of `self`.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Renamed `self.adjoint()`.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365604,"byte_end":365653,"line_start":970,"line_end":970,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365658,"byte_end":365667,"line_start":971,"line_end":971,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365868,"byte_end":365877,"line_start":979,"line_end":979,"column_start":12,"column_end":21},"name":"conjugate","qualname":"<Matrix<N, R, C, S>>::conjugate","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" The conjugate of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":365847,"byte_end":365856,"line_start":978,"line_end":978,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366106,"byte_end":366113,"line_start":986,"line_end":986,"column_start":12,"column_end":19},"name":"unscale","qualname":"<Matrix<N, R, C, S>>::unscale","value":"fn (&self, real: N::RealField) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Divides each component of the complex matrix `self` by the given real.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366085,"byte_end":366094,"line_start":985,"line_end":985,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366367,"byte_end":366372,"line_start":993,"line_end":993,"column_start":12,"column_end":17},"name":"scale","qualname":"<Matrix<N, R, C, S>>::scale","value":"fn (&self, real: N::RealField) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Multiplies each component of the complex matrix `self` by the given real.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366346,"byte_end":366355,"line_start":992,"line_end":992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366697,"byte_end":366710,"line_start":1002,"line_end":1002,"column_start":12,"column_end":25},"name":"conjugate_mut","qualname":"<Matrix<N, R, C, S>>::conjugate_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The conjugate of the complex matrix `self` computed in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366676,"byte_end":366685,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366873,"byte_end":366884,"line_start":1008,"line_end":1008,"column_start":12,"column_end":23},"name":"unscale_mut","qualname":"<Matrix<N, R, C, S>>::unscale_mut","value":"fn (&mut self, real: N::RealField) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Divides each component of the complex matrix `self` by the given real.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366852,"byte_end":366861,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367072,"byte_end":367081,"line_start":1014,"line_end":1014,"column_start":12,"column_end":21},"name":"scale_mut","qualname":"<Matrix<N, R, C, S>>::scale_mut","value":"fn (&mut self, real: N::RealField) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Multiplies each component of the complex matrix `self` by the given real.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367051,"byte_end":367060,"line_start":1013,"line_end":1013,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367345,"byte_end":367368,"line_start":1022,"line_end":1022,"column_start":12,"column_end":35},"name":"conjugate_transform_mut","qualname":"<Matrix<N, D, D, S>>::conjugate_transform_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to its adjoint.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Renamed to `self.adjoint_mut()`.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367277,"byte_end":367333,"line_start":1021,"line_end":1021,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367490,"byte_end":367501,"line_start":1027,"line_end":1027,"column_start":12,"column_end":23},"name":"adjoint_mut","qualname":"<Matrix<N, D, D, S>>::adjoint_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to its adjoint (aka. conjugate-transpose).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":368417,"byte_end":368425,"line_start":1058,"line_end":1058,"column_start":12,"column_end":20},"name":"diagonal","qualname":"<SquareMatrix<N, D, S>>::diagonal","value":"fn (&self) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" The diagonal of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":368396,"byte_end":368405,"line_start":1057,"line_end":1057,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2847},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":368743,"byte_end":368755,"line_start":1067,"line_end":1067,"column_start":12,"column_end":24},"name":"map_diagonal","qualname":"<SquareMatrix<N, D, S>>::map_diagonal","value":"fn <N2> (&self, mut f: impl FnMut(N) -> N2) -> VectorN<N2, D>","parent":null,"children":[],"decl_id":null,"docs":" Apply the given function to this matrix's diagonal and returns it.\n\n This is a more efficient version of `self.diagonal().map(f)` since this\n allocates only once.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369400,"byte_end":369405,"line_start":1088,"line_end":1088,"column_start":12,"column_end":17},"name":"trace","qualname":"<SquareMatrix<N, D, S>>::trace","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Computes a trace of a square matrix, i.e., the sum of its diagonal elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369379,"byte_end":369388,"line_start":1087,"line_end":1087,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2855},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369939,"byte_end":369953,"line_start":1109,"line_end":1109,"column_start":12,"column_end":26},"name":"symmetric_part","qualname":"<SquareMatrix<N, D, S>>::symmetric_part","value":"fn (&self) -> MatrixMN<N, D, D>","parent":null,"children":[],"decl_id":null,"docs":" The symmetric part of `self`, i.e., `0.5 * (self + self.transpose())`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369918,"byte_end":369927,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370353,"byte_end":370367,"line_start":1120,"line_end":1120,"column_start":12,"column_end":26},"name":"hermitian_part","qualname":"<SquareMatrix<N, D, S>>::hermitian_part","value":"fn (&self) -> MatrixMN<N, D, D>","parent":null,"children":[],"decl_id":null,"docs":" The hermitian part of `self`, i.e., `0.5 * (self + self.adjoint())`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370332,"byte_end":370341,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370943,"byte_end":370957,"line_start":1136,"line_end":1136,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Matrix<N, D, D, S>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Yields the homogeneous matrix for this matrix, i.e., appending an additional dimension and\n and setting the diagonal element to `1`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370922,"byte_end":370931,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371629,"byte_end":371643,"line_start":1151,"line_end":1151,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Vector<N, D, S>>::to_homogeneous","value":"fn (&self) -> VectorN<N, DimSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the coordinates in projective space of this vector, i.e., appends a `0` to its\n coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371608,"byte_end":371617,"line_start":1150,"line_end":1150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371966,"byte_end":371982,"line_start":1159,"line_end":1159,"column_start":12,"column_end":28},"name":"from_homogeneous","qualname":"<Vector<N, D, S>>::from_homogeneous","value":"fn <SB> (v: Vector<N, DimSum<D, U1>, SB>) -> Option<VectorN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a vector from coordinates in projective space, i.e., removes a `0` at the end of\n `self`. Returns `None` if this last component is not zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371945,"byte_end":371954,"line_start":1158,"line_end":1158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2873},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":372550,"byte_end":372554,"line_start":1176,"line_end":1176,"column_start":12,"column_end":16},"name":"push","qualname":"<Vector<N, D, S>>::push","value":"fn (&self, element: N) -> VectorN<N, DimSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new vector of higher dimension by appending `element` to the end of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":372529,"byte_end":372538,"line_start":1175,"line_end":1175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":381129,"byte_end":381133,"line_start":1460,"line_end":1460,"column_start":12,"column_end":16},"name":"perp","qualname":"<Matrix<N, R, C, S>>::perp","value":"fn <R2, C2, SB> (&self, b: &Matrix<N, R2, C2, SB>) -> N","parent":null,"children":[],"decl_id":null,"docs":" The perpendicular product between two 2D column vectors, i.e. `a.x * b.y - a.y * b.x`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":381108,"byte_end":381117,"line_start":1459,"line_end":1459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":381989,"byte_end":381994,"line_start":1484,"line_end":1484,"column_start":12,"column_end":17},"name":"cross","qualname":"<Matrix<N, R, C, S>>::cross","value":"fn <R2, C2, SB> (&self, b: &Matrix<N, R2, C2, SB>) -> MatrixCross<N, R, C, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" The 3D cross product between two vectors.\n\n Panics if the shape is not 3D vector. In the future, this will be implemented only for\n dynamically-sized matrices and statically-sized 3D matrices.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":381968,"byte_end":381977,"line_start":1483,"line_end":1483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384534,"byte_end":384546,"line_start":1553,"line_end":1553,"column_start":12,"column_end":24},"name":"cross_matrix","qualname":"<Vector<N, U3, S>>::cross_matrix","value":"fn (&self) -> MatrixN<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" Computes the matrix `M` such that for all vector `v` we have `M * v == self.cross(&v)`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384513,"byte_end":384522,"line_start":1552,"line_end":1552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384975,"byte_end":384980,"line_start":1571,"line_end":1571,"column_start":12,"column_end":17},"name":"angle","qualname":"<Matrix<N, R, C, S>>::angle","value":"fn <R2, C2, SB> (&self, other: &Matrix<N, R2, C2, SB>) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" The smallest angle between two vectors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384954,"byte_end":384963,"line_start":1570,"line_end":1570,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":386216,"byte_end":386220,"line_start":1611,"line_end":1611,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector<N, D, S>>::lerp","value":"fn <S2> (&self, rhs: &Vector<N, D, S2>, t: N) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns `self * (1.0 - t) + rhs * t`, i.e., the linear blend of the vectors x and y using the scalar value a.\n\n The value for a is not restricted to the range `[0, 1]`.\n\n # Examples:\n\n ```\n # use nalgebra::Vector3;\n let x = Vector3::new(1.0, 2.0, 3.0);\n let y = Vector3::new(10.0, 20.0, 30.0);\n assert_eq!(x.lerp(&y, 0.1), Vector3::new(1.9, 3.8, 5.7));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":387035,"byte_end":387040,"line_start":1634,"line_end":1634,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Unit<Vector<N, D, S>>>::slerp","value":"fn <S2> (&self, rhs: &Unit<Vector<N, D, S2>>, t: N::RealField) -> Unit<VectorN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the spherical linear interpolation between two unit vectors.\n\n # Examples:\n\n ```\n # use nalgebra::geometry::UnitQuaternion;\n\n let q1 = UnitQuaternion::from_euler_angles(std::f32::consts::FRAC_PI_4, 0.0, 0.0);\n let q2 = UnitQuaternion::from_euler_angles(-std::f32::consts::PI, 0.0, 0.0);\n\n let q = q1.slerp(&q2, 1.0 / 3.0);\n\n assert_eq!(q.euler_angles(), (std::f32::consts::FRAC_PI_2, 0.0, 0.0));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":387711,"byte_end":387720,"line_start":1651,"line_end":1651,"column_start":12,"column_end":21},"name":"try_slerp","qualname":"<Unit<Vector<N, D, S>>>::try_slerp","value":"fn <S2> (&self, rhs: &Unit<Vector<N, D, S2>>, t: N::RealField, epsilon: N::RealField) -> Option<Unit<VectorN<N, D>>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the spherical linear interpolation between two unit vectors.\n\n Returns `None` if the two vectors are almost collinear and with opposite direction\n (in this case, there is an infinity of possible results).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403383,"byte_end":403395,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"ArrayStorage","qualname":"::base::array_storage::ArrayStorage","value":"ArrayStorage {  }","parent":null,"children":[{"krate":0,"index":3164}],"decl_id":null,"docs":" A array-based statically sized matrix data storage.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403361,"byte_end":403371,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":3165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403664,"byte_end":403675,"line_start":49,"line_end":49,"column_start":10,"column_end":21},"name":"MatrixArray","qualname":"::base::array_storage::MatrixArray","value":"ArrayStorage<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Renamed to [ArrayStorage].\n","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `ArrayStorage`\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403576,"byte_end":403623,"line_start":47,"line_end":47,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":17004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415034,"byte_end":415046,"line_start":85,"line_end":85,"column_start":23,"column_end":35},"name":"SliceStorage","qualname":"::base::matrix_slice::SliceStorage","value":"SliceStorage {  }","parent":null,"children":[{"krate":0,"index":17011},{"krate":0,"index":17012},{"krate":0,"index":17013},{"krate":0,"index":17014}],"decl_id":null,"docs":"A matrix data storage for a matrix slice. Only contains an internal reference to another matrix data storage.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17060},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415298,"byte_end":415313,"line_start":89,"line_end":89,"column_start":30,"column_end":45},"name":"SliceStorageMut","qualname":"::base::matrix_slice::SliceStorageMut","value":"SliceStorageMut {  }","parent":null,"children":[{"krate":0,"index":17067},{"krate":0,"index":17068},{"krate":0,"index":17069},{"krate":0,"index":17070}],"decl_id":null,"docs":"A mutable matrix data storage for mutable matrix slice. Only contains an internal mutable reference to another matrix data storage.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":17111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437267,"byte_end":437278,"line_start":621,"line_end":621,"column_start":19,"column_end":30},"name":"MatrixSlice","qualname":"::base::matrix_slice::MatrixSlice","value":"Matrix<N, R, C, SliceStorage<'a, N, R, C, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A matrix slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437344,"byte_end":437347,"line_start":622,"line_end":622,"column_start":6,"column_end":9},"name":"row","qualname":"<Matrix<N, R, C, S>>::row","value":"fn (self: &Self, i: usize) -> MatrixSlice<N, U1, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":421600,"byte_end":421609,"line_start":271,"line_end":271,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437354,"byte_end":437362,"line_start":623,"line_end":623,"column_start":6,"column_end":14},"name":"row_part","qualname":"<Matrix<N, R, C, S>>::row_part","value":"fn (self: &Self, i: usize, n: usize) -> MatrixSlice<N, U1, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the `n` first elements of the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":421872,"byte_end":421881,"line_start":277,"line_end":277,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437369,"byte_end":437373,"line_start":624,"line_end":624,"column_start":6,"column_end":10},"name":"rows","qualname":"<Matrix<N, R, C, S>>::rows","value":"fn (self: &Self, first_row: usize, nrows: usize) -> MatrixSlice<N, Dynamic, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422161,"byte_end":422170,"line_start":283,"line_end":283,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17126},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437380,"byte_end":437394,"line_start":625,"line_end":625,"column_start":6,"column_end":20},"name":"rows_with_step","qualname":"<Matrix<N, R, C, S>>::rows_with_step","value":"fn (self: &Self, first_row: usize, nrows: usize, step: usize) -> MatrixSlice<N, Dynamic, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422505,"byte_end":422514,"line_start":291,"line_end":291,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437401,"byte_end":437411,"line_start":626,"line_end":626,"column_start":6,"column_end":16},"name":"fixed_rows","qualname":"<Matrix<N, R, C, S>>::fixed_rows","value":"fn <RSlice> (self: &Self, first_row: usize) -> MatrixSlice<N, RSlice, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a compile-time number of consecutive rows from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422870,"byte_end":422879,"line_start":299,"line_end":299,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437418,"byte_end":437438,"line_start":627,"line_end":627,"column_start":6,"column_end":26},"name":"fixed_rows_with_step","qualname":"<Matrix<N, R, C, S>>::fixed_rows_with_step","value":"fn <RSlice> (self: &Self, first_row: usize, step: usize) -> MatrixSlice<N, RSlice, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a compile-time number of rows regularly skipping `step`\n rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":423237,"byte_end":423246,"line_start":308,"line_end":308,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437445,"byte_end":437457,"line_start":628,"line_end":628,"column_start":6,"column_end":18},"name":"rows_generic","qualname":"<Matrix<N, R, C, S>>::rows_generic","value":"fn <RSlice> (self: &Self, row_start: usize, nrows: RSlice) -> MatrixSlice<N, RSlice, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both\n argument may or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":423685,"byte_end":423694,"line_start":317,"line_end":317,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437464,"byte_end":437486,"line_start":629,"line_end":629,"column_start":6,"column_end":28},"name":"rows_generic_with_step","qualname":"<Matrix<N, R, C, S>>::rows_generic_with_step","value":"fn <RSlice> (self: &Self, row_start: usize, nrows: RSlice, step: usize) -> MatrixSlice<N, RSlice, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both\n argument may or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":424451,"byte_end":424460,"line_start":334,"line_end":334,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437493,"byte_end":437499,"line_start":630,"line_end":630,"column_start":6,"column_end":12},"name":"column","qualname":"<Matrix<N, R, C, S>>::column","value":"fn (self: &Self, i: usize) -> MatrixSlice<N, R, U1, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the i-th column of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":425443,"byte_end":425452,"line_start":358,"line_end":358,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17136},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437506,"byte_end":437517,"line_start":631,"line_end":631,"column_start":6,"column_end":17},"name":"column_part","qualname":"<Matrix<N, R, C, S>>::column_part","value":"fn (self: &Self, i: usize, n: usize) -> MatrixSlice<N, Dynamic, U1, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the `n` first elements of the i-th column of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":425724,"byte_end":425733,"line_start":364,"line_end":364,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437524,"byte_end":437531,"line_start":632,"line_end":632,"column_start":6,"column_end":13},"name":"columns","qualname":"<Matrix<N, R, C, S>>::columns","value":"fn (self: &Self, first_col: usize, ncols: usize) -> MatrixSlice<N, R, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426019,"byte_end":426028,"line_start":370,"line_end":370,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437538,"byte_end":437555,"line_start":633,"line_end":633,"column_start":6,"column_end":23},"name":"columns_with_step","qualname":"<Matrix<N, R, C, S>>::columns_with_step","value":"fn (self: &Self, first_col: usize, ncols: usize, step: usize) -> MatrixSlice<N, R, Dynamic, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive columns regularly skipping `step`\n columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426391,"byte_end":426400,"line_start":379,"line_end":379,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437562,"byte_end":437575,"line_start":634,"line_end":634,"column_start":6,"column_end":19},"name":"fixed_columns","qualname":"<Matrix<N, R, C, S>>::fixed_columns","value":"fn <CSlice> (self: &Self, first_col: usize) -> MatrixSlice<N, R, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a compile-time number of consecutive columns from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426765,"byte_end":426774,"line_start":387,"line_end":387,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437582,"byte_end":437605,"line_start":635,"line_end":635,"column_start":6,"column_end":29},"name":"fixed_columns_with_step","qualname":"<Matrix<N, R, C, S>>::fixed_columns_with_step","value":"fn <CSlice> (self: &Self, first_col: usize, step: usize) -> MatrixSlice<N, R, CSlice, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a compile-time number of columns regularly skipping\n `step` columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":427144,"byte_end":427153,"line_start":396,"line_end":396,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17143},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437612,"byte_end":437627,"line_start":636,"line_end":636,"column_start":6,"column_end":21},"name":"columns_generic","qualname":"<Matrix<N, R, C, S>>::columns_generic","value":"fn <CSlice> (self: &Self, first_col: usize, ncols: CSlice) -> MatrixSlice<N, R, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `ncols` columns. The number of columns may or may not be\n known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":427571,"byte_end":427580,"line_start":405,"line_end":405,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437634,"byte_end":437659,"line_start":637,"line_end":637,"column_start":6,"column_end":31},"name":"columns_generic_with_step","qualname":"<Matrix<N, R, C, S>>::columns_generic_with_step","value":"fn <CSlice> (self: &Self, first_col: usize, ncols: CSlice, step: usize) -> MatrixSlice<N, R, CSlice, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may\n or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":428334,"byte_end":428343,"line_start":422,"line_end":422,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437666,"byte_end":437671,"line_start":638,"line_end":638,"column_start":6,"column_end":11},"name":"slice","qualname":"<Matrix<N, R, C, S>>::slice","value":"fn (self: &Self, start: (usize, usize), shape: (usize, usize)) -> MatrixSlice<N, Dynamic, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)`\n consecutive elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":429367,"byte_end":429376,"line_start":447,"line_end":447,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17148},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437678,"byte_end":437694,"line_start":639,"line_end":639,"column_start":6,"column_end":22},"name":"slice_with_steps","qualname":"<Matrix<N, R, C, S>>::slice_with_steps","value":"fn (self: &Self, start: (usize, usize), shape: (usize, usize), steps: (usize, usize)) -> MatrixSlice<N, Dynamic, Dynamic, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(start.0, start.1)` and with\n `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is\n separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the\n original matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":430210,"byte_end":430219,"line_start":465,"line_end":465,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437701,"byte_end":437712,"line_start":640,"line_end":640,"column_start":6,"column_end":17},"name":"fixed_slice","qualname":"<Matrix<N, R, C, S>>::fixed_slice","value":"fn <RSlice, CSlice> (self: &Self, irow: usize, icol: usize) -> MatrixSlice<N, RSlice, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(),\n CSlice::dim())` consecutive components.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":430733,"byte_end":430742,"line_start":475,"line_end":475,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17152},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437719,"byte_end":437741,"line_start":641,"line_end":641,"column_start":6,"column_end":28},"name":"fixed_slice_with_steps","qualname":"<Matrix<N, R, C, S>>::fixed_slice_with_steps","value":"fn <RSlice, CSlice> (self: &Self, start: (usize, usize), steps: (usize, usize)) -> MatrixSlice<N, RSlice, CSlice, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(start.0, start.1)` and with\n `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced\n matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of\n the original matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":431684,"byte_end":431693,"line_start":494,"line_end":494,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17155},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437748,"byte_end":437761,"line_start":642,"line_end":642,"column_start":6,"column_end":19},"name":"generic_slice","qualname":"<Matrix<N, R, C, S>>::generic_slice","value":"fn <RSlice, CSlice> (self: &Self, start: (usize, usize), shape: (RSlice, CSlice)) -> MatrixSlice<N, RSlice, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Creates a slice that may or may not have a fixed size and stride.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":432195,"byte_end":432204,"line_start":504,"line_end":504,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17158},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437768,"byte_end":437792,"line_start":643,"line_end":643,"column_start":6,"column_end":30},"name":"generic_slice_with_steps","qualname":"<Matrix<N, R, C, S>>::generic_slice_with_steps","value":"fn <RSlice, CSlice> (self: &Self, start: (usize, usize), shape: (RSlice, CSlice), steps: (usize, usize)) -> MatrixSlice<N, RSlice, CSlice, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Creates a slice that may or may not have a fixed size and stride.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":432851,"byte_end":432860,"line_start":519,"line_end":519,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437799,"byte_end":437814,"line_start":644,"line_end":644,"column_start":6,"column_end":21},"name":"rows_range_pair","qualname":"<Matrix<N, R, C, S>>::rows_range_pair","value":"fn <Range1, Range2> (self: &Self, r1: Range1, r2: Range2) -> (MatrixSlice<N, Range1::Size, C, S::RStride, S::CStride>,\n MatrixSlice<N, Range2::Size, C, S::RStride, S::CStride>)","parent":null,"children":[],"decl_id":null,"docs":" Splits this NxM matrix into two parts delimited by two ranges.\n\n Panics if the ranges overlap or if the first range is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":434143,"byte_end":434152,"line_start":548,"line_end":548,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437821,"byte_end":437839,"line_start":645,"line_end":645,"column_start":6,"column_end":24},"name":"columns_range_pair","qualname":"<Matrix<N, R, C, S>>::columns_range_pair","value":"fn <Range1, Range2> (self: &Self, r1: Range1, r2: Range2) -> (MatrixSlice<N, R, Range1::Size, S::RStride, S::CStride>,\n MatrixSlice<N, R, Range2::Size, S::RStride, S::CStride>)","parent":null,"children":[],"decl_id":null,"docs":" Splits this NxM matrix into two parts delimited by two ranges.\n\n Panics if the ranges overlap or if the first range is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":435764,"byte_end":435773,"line_start":584,"line_end":584,"column_start":13,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":17167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437885,"byte_end":437899,"line_start":648,"line_end":648,"column_start":23,"column_end":37},"name":"MatrixSliceMut","qualname":"::base::matrix_slice::MatrixSliceMut","value":"Matrix<N, R, C, SliceStorageMut<'a, N, R, C, RStride, CStride>>","parent":null,"children":[],"decl_id":null,"docs":" A matrix slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437979,"byte_end":437986,"line_start":649,"line_end":649,"column_start":6,"column_end":13},"name":"row_mut","qualname":"<Matrix<N, R, C, S>>::row_mut","value":"fn (self: &mut Self, i: usize) -> MatrixSliceMut<N, U1, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":421600,"byte_end":421609,"line_start":271,"line_end":271,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":437993,"byte_end":438005,"line_start":650,"line_end":650,"column_start":6,"column_end":18},"name":"row_part_mut","qualname":"<Matrix<N, R, C, S>>::row_part_mut","value":"fn (self: &mut Self, i: usize, n: usize) -> MatrixSliceMut<N, U1, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the `n` first elements of the i-th row of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":421872,"byte_end":421881,"line_start":277,"line_end":277,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438012,"byte_end":438020,"line_start":651,"line_end":651,"column_start":6,"column_end":14},"name":"rows_mut","qualname":"<Matrix<N, R, C, S>>::rows_mut","value":"fn (self: &mut Self, first_row: usize, nrows: usize) -> MatrixSliceMut<N, Dynamic, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422161,"byte_end":422170,"line_start":283,"line_end":283,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438027,"byte_end":438045,"line_start":652,"line_end":652,"column_start":6,"column_end":24},"name":"rows_with_step_mut","qualname":"<Matrix<N, R, C, S>>::rows_with_step_mut","value":"fn (self: &mut Self, first_row: usize, nrows: usize, step: usize) -> MatrixSliceMut<N, Dynamic, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive rows regularly skipping `step` rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422505,"byte_end":422514,"line_start":291,"line_end":291,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438052,"byte_end":438066,"line_start":653,"line_end":653,"column_start":6,"column_end":20},"name":"fixed_rows_mut","qualname":"<Matrix<N, R, C, S>>::fixed_rows_mut","value":"fn <RSlice> (self: &mut Self, first_row: usize) -> MatrixSliceMut<N, RSlice, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a compile-time number of consecutive rows from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":422870,"byte_end":422879,"line_start":299,"line_end":299,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438073,"byte_end":438097,"line_start":654,"line_end":654,"column_start":6,"column_end":30},"name":"fixed_rows_with_step_mut","qualname":"<Matrix<N, R, C, S>>::fixed_rows_with_step_mut","value":"fn <RSlice> (self: &mut Self, first_row: usize, step: usize) -> MatrixSliceMut<N, RSlice, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a compile-time number of rows regularly skipping `step`\n rows.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":423237,"byte_end":423246,"line_start":308,"line_end":308,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17187},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438104,"byte_end":438120,"line_start":655,"line_end":655,"column_start":6,"column_end":22},"name":"rows_generic_mut","qualname":"<Matrix<N, R, C, S>>::rows_generic_mut","value":"fn <RSlice> (self: &mut Self, row_start: usize, nrows: RSlice) -> MatrixSliceMut<N, RSlice, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both\n argument may or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":423685,"byte_end":423694,"line_start":317,"line_end":317,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438127,"byte_end":438153,"line_start":656,"line_end":656,"column_start":6,"column_end":32},"name":"rows_generic_with_step_mut","qualname":"<Matrix<N, R, C, S>>::rows_generic_with_step_mut","value":"fn <RSlice> (self: &mut Self, row_start: usize, nrows: RSlice, step: usize) -> MatrixSliceMut<N, RSlice, C, Dynamic, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `nrows` rows regularly skipping `step` rows. Both\n argument may or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":424451,"byte_end":424460,"line_start":334,"line_end":334,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438160,"byte_end":438170,"line_start":657,"line_end":657,"column_start":6,"column_end":16},"name":"column_mut","qualname":"<Matrix<N, R, C, S>>::column_mut","value":"fn (self: &mut Self, i: usize) -> MatrixSliceMut<N, R, U1, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the i-th column of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":425443,"byte_end":425452,"line_start":358,"line_end":358,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438177,"byte_end":438192,"line_start":658,"line_end":658,"column_start":6,"column_end":21},"name":"column_part_mut","qualname":"<Matrix<N, R, C, S>>::column_part_mut","value":"fn (self: &mut Self, i: usize, n: usize) -> MatrixSliceMut<N, Dynamic, U1, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice containing the `n` first elements of the i-th column of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":425724,"byte_end":425733,"line_start":364,"line_end":364,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438199,"byte_end":438210,"line_start":659,"line_end":659,"column_start":6,"column_end":17},"name":"columns_mut","qualname":"<Matrix<N, R, C, S>>::columns_mut","value":"fn (self: &mut Self, first_col: usize, ncols: usize) -> MatrixSliceMut<N, R, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426019,"byte_end":426028,"line_start":370,"line_end":370,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438217,"byte_end":438238,"line_start":660,"line_end":660,"column_start":6,"column_end":27},"name":"columns_with_step_mut","qualname":"<Matrix<N, R, C, S>>::columns_with_step_mut","value":"fn (self: &mut Self, first_col: usize, ncols: usize, step: usize) -> MatrixSliceMut<N, R, Dynamic, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a set of consecutive columns regularly skipping `step`\n columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426391,"byte_end":426400,"line_start":379,"line_end":379,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438245,"byte_end":438262,"line_start":661,"line_end":661,"column_start":6,"column_end":23},"name":"fixed_columns_mut","qualname":"<Matrix<N, R, C, S>>::fixed_columns_mut","value":"fn <CSlice> (self: &mut Self, first_col: usize) -> MatrixSliceMut<N, R, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a compile-time number of consecutive columns from this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":426765,"byte_end":426774,"line_start":387,"line_end":387,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438269,"byte_end":438296,"line_start":662,"line_end":662,"column_start":6,"column_end":33},"name":"fixed_columns_with_step_mut","qualname":"<Matrix<N, R, C, S>>::fixed_columns_with_step_mut","value":"fn <CSlice> (self: &mut Self, first_col: usize, step: usize) -> MatrixSliceMut<N, R, CSlice, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix a compile-time number of columns regularly skipping\n `step` columns.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":427144,"byte_end":427153,"line_start":396,"line_end":396,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438303,"byte_end":438322,"line_start":663,"line_end":663,"column_start":6,"column_end":25},"name":"columns_generic_mut","qualname":"<Matrix<N, R, C, S>>::columns_generic_mut","value":"fn <CSlice> (self: &mut Self, first_col: usize, ncols: CSlice) -> MatrixSliceMut<N, R, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `ncols` columns. The number of columns may or may not be\n known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":427571,"byte_end":427580,"line_start":405,"line_end":405,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438329,"byte_end":438358,"line_start":664,"line_end":664,"column_start":6,"column_end":35},"name":"columns_generic_with_step_mut","qualname":"<Matrix<N, R, C, S>>::columns_generic_with_step_mut","value":"fn <CSlice> (self: &mut Self, first_col: usize, ncols: CSlice, step: usize) -> MatrixSliceMut<N, R, CSlice, S::RStride, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Extracts from this matrix `ncols` columns skipping `step` columns. Both argument may\n or may not be values known at compile-time.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":428334,"byte_end":428343,"line_start":422,"line_end":422,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438365,"byte_end":438374,"line_start":665,"line_end":665,"column_start":6,"column_end":15},"name":"slice_mut","qualname":"<Matrix<N, R, C, S>>::slice_mut","value":"fn (self: &mut Self, start: (usize, usize), shape: (usize, usize)) -> MatrixSliceMut<N, Dynamic, Dynamic, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(irow, icol)` and with `(nrows, ncols)`\n consecutive elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":429367,"byte_end":429376,"line_start":447,"line_end":447,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438381,"byte_end":438401,"line_start":666,"line_end":666,"column_start":6,"column_end":26},"name":"slice_with_steps_mut","qualname":"<Matrix<N, R, C, S>>::slice_with_steps_mut","value":"fn (self: &mut Self, start: (usize, usize), shape: (usize, usize), steps: (usize, usize)) -> MatrixSliceMut<N, Dynamic, Dynamic, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(start.0, start.1)` and with\n `(shape.0, shape.1)` components. Each row (resp. column) of the sliced matrix is\n separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of the\n original matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":430210,"byte_end":430219,"line_start":465,"line_end":465,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438408,"byte_end":438423,"line_start":667,"line_end":667,"column_start":6,"column_end":21},"name":"fixed_slice_mut","qualname":"<Matrix<N, R, C, S>>::fixed_slice_mut","value":"fn <RSlice, CSlice> (self: &mut Self, irow: usize, icol: usize) -> MatrixSliceMut<N, RSlice, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(irow, icol)` and with `(R::dim(),\n CSlice::dim())` consecutive components.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":430733,"byte_end":430742,"line_start":475,"line_end":475,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438430,"byte_end":438456,"line_start":668,"line_end":668,"column_start":6,"column_end":32},"name":"fixed_slice_with_steps_mut","qualname":"<Matrix<N, R, C, S>>::fixed_slice_with_steps_mut","value":"fn <RSlice, CSlice> (self: &mut Self, start: (usize, usize), steps: (usize, usize)) -> MatrixSliceMut<N, RSlice, CSlice, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Slices this matrix starting at its component `(start.0, start.1)` and with\n `(R::dim(), CSlice::dim())` components. Each row (resp. column) of the sliced\n matrix is separated by `steps.0` (resp. `steps.1`) ignored rows (resp. columns) of\n the original matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":431684,"byte_end":431693,"line_start":494,"line_end":494,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17211},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438463,"byte_end":438480,"line_start":669,"line_end":669,"column_start":6,"column_end":23},"name":"generic_slice_mut","qualname":"<Matrix<N, R, C, S>>::generic_slice_mut","value":"fn <RSlice, CSlice> (self: &mut Self, start: (usize, usize), shape: (RSlice, CSlice)) -> MatrixSliceMut<N, RSlice, CSlice, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Creates a slice that may or may not have a fixed size and stride.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":432195,"byte_end":432204,"line_start":504,"line_end":504,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17214},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438487,"byte_end":438515,"line_start":670,"line_end":670,"column_start":6,"column_end":34},"name":"generic_slice_with_steps_mut","qualname":"<Matrix<N, R, C, S>>::generic_slice_with_steps_mut","value":"fn <RSlice, CSlice> (self: &mut Self, start: (usize, usize), shape: (RSlice, CSlice), steps: (usize, usize)) -> MatrixSliceMut<N, RSlice, CSlice, Dynamic, Dynamic>","parent":null,"children":[],"decl_id":null,"docs":" Creates a slice that may or may not have a fixed size and stride.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":432851,"byte_end":432860,"line_start":519,"line_end":519,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17217},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438522,"byte_end":438541,"line_start":671,"line_end":671,"column_start":6,"column_end":25},"name":"rows_range_pair_mut","qualname":"<Matrix<N, R, C, S>>::rows_range_pair_mut","value":"fn <Range1, Range2> (self: &mut Self, r1: Range1, r2: Range2) -> (MatrixSliceMut<N, Range1::Size, C, S::RStride, S::CStride>,\n MatrixSliceMut<N, Range2::Size, C, S::RStride, S::CStride>)","parent":null,"children":[],"decl_id":null,"docs":" Splits this NxM matrix into two parts delimited by two ranges.\n\n Panics if the ranges overlap or if the first range is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":434143,"byte_end":434152,"line_start":548,"line_end":548,"column_start":13,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":17220},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438548,"byte_end":438570,"line_start":672,"line_end":672,"column_start":6,"column_end":28},"name":"columns_range_pair_mut","qualname":"<Matrix<N, R, C, S>>::columns_range_pair_mut","value":"fn <Range1, Range2> (self: &mut Self, r1: Range1, r2: Range2) -> (MatrixSliceMut<N, R, Range1::Size, S::RStride, S::CStride>,\n MatrixSliceMut<N, R, Range2::Size, S::RStride, S::CStride>)","parent":null,"children":[],"decl_id":null,"docs":" Splits this NxM matrix into two parts delimited by two ranges.\n\n Panics if the ranges overlap or if the first range is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":435764,"byte_end":435773,"line_start":584,"line_end":584,"column_start":13,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":3325},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438876,"byte_end":438886,"line_start":681,"line_end":681,"column_start":11,"column_end":21},"name":"SliceRange","qualname":"::base::matrix_slice::SliceRange","value":"SliceRange<D: Dim>","parent":null,"children":[{"krate":0,"index":3327},{"krate":0,"index":3328},{"krate":0,"index":3329},{"krate":0,"index":3330}],"decl_id":null,"docs":" A range with a size that may be known at compile-time.\n\n This may be:\n * A single `usize` index, e.g., `4`\n * A left-open range `std::ops::RangeTo`, e.g., `.. 4`\n * A right-open range `std::ops::RangeFrom`, e.g., `4 ..`\n * A full range `std::ops::RangeFull`, e.g., `..`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3327},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":438967,"byte_end":438971,"line_start":683,"line_end":683,"column_start":10,"column_end":14},"name":"Size","qualname":"::base::matrix_slice::SliceRange::Size","value":"type Size: Dim;","parent":{"krate":0,"index":3325},"children":[],"decl_id":null,"docs":" Type of the range size. May be a type-level integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3328},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":439024,"byte_end":439029,"line_start":686,"line_end":686,"column_start":8,"column_end":13},"name":"begin","qualname":"::base::matrix_slice::SliceRange::begin","value":"fn (&self, shape: D) -> usize","parent":{"krate":0,"index":3325},"children":[],"decl_id":null,"docs":" The start index of the range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":439201,"byte_end":439204,"line_start":689,"line_end":689,"column_start":8,"column_end":11},"name":"end","qualname":"::base::matrix_slice::SliceRange::end","value":"fn (&self, shape: D) -> usize","parent":{"krate":0,"index":3325},"children":[],"decl_id":null,"docs":" The index immediately after the last index inside of the range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":439315,"byte_end":439319,"line_start":691,"line_end":691,"column_start":8,"column_end":12},"name":"size","qualname":"::base::matrix_slice::SliceRange::size","value":"fn (&self, shape: D) -> Self::Size","parent":{"krate":0,"index":3325},"children":[],"decl_id":null,"docs":" The number of elements of the range, i.e., `self.end - self.begin`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3366},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441255,"byte_end":441266,"line_start":793,"line_end":793,"column_start":12,"column_end":23},"name":"slice_range","qualname":"<Matrix<N, R, C, S>>::slice_range","value":"fn <RowRange, ColRange> (&self, rows: RowRange, cols: ColRange) -> MatrixSlice<N, RowRange::Size, ColRange::Size, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices a sub-matrix containing the rows indexed by the range `rows` and the columns indexed\n by the range `cols`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441234,"byte_end":441243,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3369},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441800,"byte_end":441810,"line_start":811,"line_end":811,"column_start":12,"column_end":22},"name":"rows_range","qualname":"<Matrix<N, R, C, S>>::rows_range","value":"fn <RowRange> (&self, rows: RowRange) -> MatrixSlice<N, RowRange::Size, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slice containing all the rows indexed by the range `rows`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441779,"byte_end":441788,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":442086,"byte_end":442099,"line_start":821,"line_end":821,"column_start":12,"column_end":25},"name":"columns_range","qualname":"<Matrix<N, R, C, S>>::columns_range","value":"fn <ColRange> (&self, cols: ColRange) -> MatrixSlice<N, R, ColRange::Size, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slice containing all the columns indexed by the range `rows`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":442065,"byte_end":442074,"line_start":820,"line_end":820,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":442507,"byte_end":442522,"line_start":833,"line_end":833,"column_start":12,"column_end":27},"name":"slice_range_mut","qualname":"<Matrix<N, R, C, S>>::slice_range_mut","value":"fn <RowRange, ColRange> (&mut self, rows: RowRange, cols: ColRange) -> MatrixSliceMut<N, RowRange::Size, ColRange::Size, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slices a mutable sub-matrix containing the rows indexed by the range `rows` and the columns\n indexed by the range `cols`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443067,"byte_end":443081,"line_start":851,"line_end":851,"column_start":12,"column_end":26},"name":"rows_range_mut","qualname":"<Matrix<N, R, C, S>>::rows_range_mut","value":"fn <RowRange> (&mut self, rows: RowRange) -> MatrixSliceMut<N, RowRange::Size, C, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slice containing all the rows indexed by the range `rows`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443046,"byte_end":443055,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443368,"byte_end":443385,"line_start":861,"line_end":861,"column_start":12,"column_end":29},"name":"columns_range_mut","qualname":"<Matrix<N, R, C, S>>::columns_range_mut","value":"fn <ColRange> (&mut self, cols: ColRange) -> MatrixSliceMut<N, R, ColRange::Size, S::RStride, S::CStride>","parent":null,"children":[],"decl_id":null,"docs":" Slice containing all the columns indexed by the range `cols`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443347,"byte_end":443356,"line_start":860,"line_end":860,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":17223},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":444998,"byte_end":445008,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"VecStorage","qualname":"::base::vec_storage::VecStorage","value":"VecStorage {  }","parent":null,"children":[{"krate":0,"index":17227},{"krate":0,"index":17228},{"krate":0,"index":17229}],"decl_id":null,"docs":" A Vec-based matrix data storage. It may be dynamically-sized.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":444864,"byte_end":444874,"line_start":23,"line_end":23,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":3413},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445163,"byte_end":445172,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"name":"MatrixVec","qualname":"::base::vec_storage::MatrixVec","value":"VecStorage<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Renamed to [VecStorage].\n","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `VecStorage`\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445079,"byte_end":445124,"line_start":32,"line_end":32,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445360,"byte_end":445363,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<VecStorage<N, R, C>>::new","value":"fn (nrows: R, ncols: C, data: Vec<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new dynamic matrix data storage from the given vector and shape.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445339,"byte_end":445348,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445717,"byte_end":445723,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"as_vec","qualname":"<VecStorage<N, R, C>>::as_vec","value":"fn (&self) -> &Vec<N>","parent":null,"children":[],"decl_id":null,"docs":" The underlying data storage.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445696,"byte_end":445705,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445962,"byte_end":445972,"line_start":62,"line_end":62,"column_start":19,"column_end":29},"name":"as_vec_mut","qualname":"<VecStorage<N, R, C>>::as_vec_mut","value":"fn (&mut self) -> &mut Vec<N>","parent":null,"children":[],"decl_id":null,"docs":" The underlying mutable data storage.\n\n This is unsafe because this may cause UB if the size of the vector is changed\n by the user.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445934,"byte_end":445943,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446312,"byte_end":446318,"line_start":71,"line_end":71,"column_start":19,"column_end":25},"name":"resize","qualname":"<VecStorage<N, R, C>>::resize","value":"fn (mut self, sz: usize) -> Vec<N>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the underlying mutable data storage and unwraps it.\n\n If `sz` is larger than the current size, additional elements are uninitialized.\n If `sz` is smaller than the current size, additional elements are truncated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446284,"byte_end":446293,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446696,"byte_end":446699,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"len","qualname":"<VecStorage<N, R, C>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of elements on the underlying vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446675,"byte_end":446684,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3518},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":453019,"byte_end":453027,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Matrix<N, R, C, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if this is an empty matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":452998,"byte_end":453007,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3519},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":453199,"byte_end":453208,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"is_square","qualname":"<Matrix<N, R, C, S>>::is_square","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if this is a square matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":453178,"byte_end":453187,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":453692,"byte_end":453703,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Matrix<N, R, C, S>>::is_identity","value":"fn (&self, eps: N::Epsilon) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicated if this is the identity matrix within a relative error of `eps`.\n\n If the matrix is diagonal, this checks that diagonal elements (i.e. at coordinates `(i, i)`\n for i from `0` to `min(R, C)`) are equal one; and that all other elements are zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":453671,"byte_end":453680,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455388,"byte_end":455401,"line_start":93,"line_end":93,"column_start":12,"column_end":25},"name":"is_orthogonal","qualname":"<Matrix<N, R, C, S>>::is_orthogonal","value":"fn (&self, eps: N::Epsilon) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks that `Mᵀ × M = Id`.\n\n In this definition `Id` is approximately equal to the identity matrix with a relative error\n equal to `eps`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455367,"byte_end":455376,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3531},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455926,"byte_end":455947,"line_start":109,"line_end":109,"column_start":12,"column_end":33},"name":"is_special_orthogonal","qualname":"<SquareMatrix<N, D, S>>::is_special_orthogonal","value":"fn (&self, eps: N) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks that this matrix is orthogonal and has a determinant equal to 1.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455905,"byte_end":455914,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3532},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":456248,"byte_end":456261,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<SquareMatrix<N, D, S>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this matrix is invertible.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":456227,"byte_end":456236,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3537},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456585,"byte_end":456591,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Scalar","qualname":"::base::scalar::Scalar","value":"Scalar: Copy + PartialEq + Debug + Any","parent":null,"children":[{"krate":0,"index":3538}],"decl_id":null,"docs":" The basic scalar type for all structures of `nalgebra`.\n\n This does not make any assumption on the algebraic properties of `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456786,"byte_end":456788,"line_start":13,"line_end":13,"column_start":8,"column_end":10},"name":"is","qualname":"::base::scalar::Scalar::is","value":"fn <T> () -> bool","parent":{"krate":0,"index":3537},"children":[],"decl_id":null,"docs":" Tests if `Self` the same as the type `T`\n\n Typically used to test of `Self` is a f32 or a f64 with `N::is::<f32>()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456630,"byte_end":456639,"line_start":9,"line_end":9,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":17263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457677,"byte_end":457679,"line_start":24,"line_end":24,"column_start":15,"column_end":17},"name":"xx","qualname":"<Vector<N, D, S>>::xx","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17264},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457715,"byte_end":457718,"line_start":25,"line_end":25,"column_start":15,"column_end":18},"name":"xxx","qualname":"<Vector<N, D, S>>::xxx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17269},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457757,"byte_end":457759,"line_start":27,"line_end":27,"column_start":15,"column_end":17},"name":"xy","qualname":"<Vector<N, D, S>>::xy","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17270},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457795,"byte_end":457797,"line_start":28,"line_end":28,"column_start":15,"column_end":17},"name":"yx","qualname":"<Vector<N, D, S>>::yx","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17271},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457833,"byte_end":457835,"line_start":29,"line_end":29,"column_start":15,"column_end":17},"name":"yy","qualname":"<Vector<N, D, S>>::yy","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17272},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457871,"byte_end":457874,"line_start":30,"line_end":30,"column_start":15,"column_end":18},"name":"xxy","qualname":"<Vector<N, D, S>>::xxy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17273},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457912,"byte_end":457915,"line_start":31,"line_end":31,"column_start":15,"column_end":18},"name":"xyx","qualname":"<Vector<N, D, S>>::xyx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17274},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457953,"byte_end":457956,"line_start":32,"line_end":32,"column_start":15,"column_end":18},"name":"xyy","qualname":"<Vector<N, D, S>>::xyy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17275},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457994,"byte_end":457997,"line_start":33,"line_end":33,"column_start":15,"column_end":18},"name":"yxx","qualname":"<Vector<N, D, S>>::yxx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17276},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458035,"byte_end":458038,"line_start":34,"line_end":34,"column_start":15,"column_end":18},"name":"yxy","qualname":"<Vector<N, D, S>>::yxy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17277},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458076,"byte_end":458079,"line_start":35,"line_end":35,"column_start":15,"column_end":18},"name":"yyx","qualname":"<Vector<N, D, S>>::yyx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17278},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458117,"byte_end":458120,"line_start":36,"line_end":36,"column_start":15,"column_end":18},"name":"yyy","qualname":"<Vector<N, D, S>>::yyy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17283},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458159,"byte_end":458161,"line_start":38,"line_end":38,"column_start":15,"column_end":17},"name":"xz","qualname":"<Vector<N, D, S>>::xz","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17284},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458197,"byte_end":458199,"line_start":39,"line_end":39,"column_start":15,"column_end":17},"name":"yz","qualname":"<Vector<N, D, S>>::yz","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17285},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458235,"byte_end":458237,"line_start":40,"line_end":40,"column_start":15,"column_end":17},"name":"zx","qualname":"<Vector<N, D, S>>::zx","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17286},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458273,"byte_end":458275,"line_start":41,"line_end":41,"column_start":15,"column_end":17},"name":"zy","qualname":"<Vector<N, D, S>>::zy","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17287},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458311,"byte_end":458313,"line_start":42,"line_end":42,"column_start":15,"column_end":17},"name":"zz","qualname":"<Vector<N, D, S>>::zz","value":"fn (&self) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17288},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458349,"byte_end":458352,"line_start":43,"line_end":43,"column_start":15,"column_end":18},"name":"xxz","qualname":"<Vector<N, D, S>>::xxz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17289},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458390,"byte_end":458393,"line_start":44,"line_end":44,"column_start":15,"column_end":18},"name":"xyz","qualname":"<Vector<N, D, S>>::xyz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458431,"byte_end":458434,"line_start":45,"line_end":45,"column_start":15,"column_end":18},"name":"xzx","qualname":"<Vector<N, D, S>>::xzx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458472,"byte_end":458475,"line_start":46,"line_end":46,"column_start":15,"column_end":18},"name":"xzy","qualname":"<Vector<N, D, S>>::xzy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458513,"byte_end":458516,"line_start":47,"line_end":47,"column_start":15,"column_end":18},"name":"xzz","qualname":"<Vector<N, D, S>>::xzz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17293},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458554,"byte_end":458557,"line_start":48,"line_end":48,"column_start":15,"column_end":18},"name":"yxz","qualname":"<Vector<N, D, S>>::yxz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17294},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458595,"byte_end":458598,"line_start":49,"line_end":49,"column_start":15,"column_end":18},"name":"yyz","qualname":"<Vector<N, D, S>>::yyz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17295},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458636,"byte_end":458639,"line_start":50,"line_end":50,"column_start":15,"column_end":18},"name":"yzx","qualname":"<Vector<N, D, S>>::yzx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17296},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458677,"byte_end":458680,"line_start":51,"line_end":51,"column_start":15,"column_end":18},"name":"yzy","qualname":"<Vector<N, D, S>>::yzy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17297},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458718,"byte_end":458721,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"name":"yzz","qualname":"<Vector<N, D, S>>::yzz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17298},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458759,"byte_end":458762,"line_start":53,"line_end":53,"column_start":15,"column_end":18},"name":"zxx","qualname":"<Vector<N, D, S>>::zxx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458800,"byte_end":458803,"line_start":54,"line_end":54,"column_start":15,"column_end":18},"name":"zxy","qualname":"<Vector<N, D, S>>::zxy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17300},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458841,"byte_end":458844,"line_start":55,"line_end":55,"column_start":15,"column_end":18},"name":"zxz","qualname":"<Vector<N, D, S>>::zxz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17301},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458882,"byte_end":458885,"line_start":56,"line_end":56,"column_start":15,"column_end":18},"name":"zyx","qualname":"<Vector<N, D, S>>::zyx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17302},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458923,"byte_end":458926,"line_start":57,"line_end":57,"column_start":15,"column_end":18},"name":"zyy","qualname":"<Vector<N, D, S>>::zyy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":458964,"byte_end":458967,"line_start":58,"line_end":58,"column_start":15,"column_end":18},"name":"zyz","qualname":"<Vector<N, D, S>>::zyz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17304},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":459005,"byte_end":459008,"line_start":59,"line_end":59,"column_start":15,"column_end":18},"name":"zzx","qualname":"<Vector<N, D, S>>::zzx","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":459046,"byte_end":459049,"line_start":60,"line_end":60,"column_start":15,"column_end":18},"name":"zzy","qualname":"<Vector<N, D, S>>::zzy","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":17306},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":459087,"byte_end":459090,"line_start":61,"line_end":61,"column_start":15,"column_end":18},"name":"zzz","qualname":"<Vector<N, D, S>>::zzz","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new vector from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\swizzle.rs","byte_start":457455,"byte_end":457464,"line_start":13,"line_end":13,"column_start":21,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":17307},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":459777,"byte_end":459781,"line_start":21,"line_end":21,"column_start":12,"column_end":16},"name":"Unit","qualname":"::base::unit::Unit","value":"Unit {  }","parent":null,"children":[{"krate":0,"index":17309}],"decl_id":null,"docs":" A wrapper that ensures the underlying algebraic entity has a unit norm.\n\n Use `.as_ref()` or `.into_inner()` to obtain the underlying value by-reference or by-move.\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":459694,"byte_end":459714,"line_start":19,"line_end":19,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3567},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":460833,"byte_end":460846,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"new_normalize","qualname":"<Unit<T>>::new_normalize","value":"fn (value: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Normalize the given value and return it wrapped on a `Unit` structure.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":460812,"byte_end":460821,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3568},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461104,"byte_end":461111,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Unit<T>>::try_new","value":"fn (value: T, min_norm: T::RealField) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to normalize the given value and return it wrapped on a `Unit` structure.\n\n Returns `None` if the norm was smaller or equal to `min_norm`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461083,"byte_end":461092,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461352,"byte_end":461363,"line_start":73,"line_end":73,"column_start":12,"column_end":23},"name":"new_and_get","qualname":"<Unit<T>>::new_and_get","value":"fn (mut value: T) -> (Self, T::RealField)","parent":null,"children":[],"decl_id":null,"docs":" Normalize the given value and return it wrapped on a `Unit` structure and its norm.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461331,"byte_end":461340,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461682,"byte_end":461697,"line_start":83,"line_end":83,"column_start":12,"column_end":27},"name":"try_new_and_get","qualname":"<Unit<T>>::try_new_and_get","value":"fn (mut value: T, min_norm: T::RealField) -> Option<(Self, T::RealField)>","parent":null,"children":[],"decl_id":null,"docs":" Normalize the given value and return it wrapped on a `Unit` structure and its norm.\n\n Returns `None` if the norm was smaller or equal to `min_norm`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":461661,"byte_end":461670,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462311,"byte_end":462322,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"renormalize","qualname":"<Unit<T>>::renormalize","value":"fn (&mut self) -> T::RealField","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this value again. This is useful when repeated computations\n might cause a drift in the norm because of float inaccuracies.\n\n Returns the norm before re-normalization. See `.renormalize_fast` for a faster alternative\n that may be slightly less accurate if `self` drifted significantly from having a unit length.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462290,"byte_end":462299,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3573},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462618,"byte_end":462634,"line_start":105,"line_end":105,"column_start":12,"column_end":28},"name":"renormalize_fast","qualname":"<Unit<T>>::renormalize_fast","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this value again using a first-order Taylor approximation.\n This is useful when repeated computations might cause a drift in the norm\n because of float inaccuracies.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462597,"byte_end":462606,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3576},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462994,"byte_end":463007,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"new_unchecked","qualname":"<Unit<T>>::new_unchecked","value":"fn (value: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given value, assuming it is already normalized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462973,"byte_end":462982,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3577},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463160,"byte_end":463178,"line_start":122,"line_end":122,"column_start":12,"column_end":30},"name":"from_ref_unchecked","qualname":"<Unit<T>>::from_ref_unchecked","value":"fn <'a> (value: &'a T) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given reference, assuming it is already normalized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463139,"byte_end":463148,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3579},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463324,"byte_end":463334,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Unit<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463303,"byte_end":463312,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3580},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463545,"byte_end":463551,"line_start":136,"line_end":136,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Unit<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying value.\n Deprecated: use [Unit::into_inner] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `.into_inner()` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463470,"byte_end":463519,"line_start":134,"line_end":134,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463524,"byte_end":463533,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3581},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463833,"byte_end":463849,"line_start":144,"line_end":144,"column_start":12,"column_end":28},"name":"as_mut_unchecked","qualname":"<Unit<T>>::as_mut_unchecked","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying value. This is `_unchecked` because modifying\n the underlying value in such a way that it no longer has unit length may lead to unexpected\n results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463812,"byte_end":463821,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3618},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":466442,"byte_end":466455,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"compress_rows","qualname":"<Matrix<N, R, C, S>>::compress_rows","value":"fn (&self, f: impl Fn(VectorSliceN<N, R, S::RStride, S::CStride>) -> N) -> RowVectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a row vector where each element is the result of the application of `f` on the\n corresponding column of the original matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":466421,"byte_end":466430,"line_start":9,"line_end":9,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":467168,"byte_end":467184,"line_start":29,"line_end":29,"column_start":12,"column_end":28},"name":"compress_rows_tr","qualname":"<Matrix<N, R, C, S>>::compress_rows_tr","value":"fn (&self, f: impl Fn(VectorSliceN<N, R, S::RStride, S::CStride>) -> N) -> VectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a column vector where each element is the result of the application of `f` on the\n corresponding column of the original matrix.\n\n This is the same as `self.compress_rows(f).transpose()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":467147,"byte_end":467156,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":467756,"byte_end":467772,"line_start":45,"line_end":45,"column_start":12,"column_end":28},"name":"compress_columns","qualname":"<Matrix<N, R, C, S>>::compress_columns","value":"fn (&self, init: VectorN<N, R>, f: impl Fn(&mut VectorN<N, R>, VectorSliceN<N, R, S::RStride, S::CStride>)) -> VectorN<N, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a column vector resulting from the folding of `f` on each column of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":467735,"byte_end":467744,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3629},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":468539,"byte_end":468542,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"sum","qualname":"<Matrix<N, R, C, S>>::sum","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The sum of all the elements of this matrix.\n\n # Example\n\n ```\n # use nalgebra::Matrix2x3;\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.sum(), 21.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":468518,"byte_end":468527,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":469059,"byte_end":469066,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"row_sum","qualname":"<Matrix<N, R, C, S>>::row_sum","value":"fn (&self) -> RowVectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The sum of all the rows of this matrix.\n\n Use `.row_variance_tr` if you need the result in a column vector instead.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, RowVector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_sum(), RowVector3::new(5.0, 7.0, 9.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":469038,"byte_end":469047,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":469600,"byte_end":469610,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"row_sum_tr","qualname":"<Matrix<N, R, C, S>>::row_sum_tr","value":"fn (&self) -> VectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The sum of all the rows of this matrix. The result is transposed and returned as a column vector.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, Vector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_sum_tr(), Vector3::new(5.0, 7.0, 9.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":469579,"byte_end":469588,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3635},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":470081,"byte_end":470091,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"column_sum","qualname":"<Matrix<N, R, C, S>>::column_sum","value":"fn (&self) -> VectorN<N, R>","parent":null,"children":[],"decl_id":null,"docs":" The sum of all the columns of this matrix.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, Vector2};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.column_sum(), Vector2::new(6.0, 15.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":470060,"byte_end":470069,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3637},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":470802,"byte_end":470810,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"name":"variance","qualname":"<Matrix<N, R, C, S>>::variance","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The variance of all the elements of this matrix.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Matrix2x3;\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_relative_eq!(m.variance(), 35.0 / 12.0, epsilon = 1.0e-8);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":470781,"byte_end":470790,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":471595,"byte_end":471607,"line_start":176,"line_end":176,"column_start":12,"column_end":24},"name":"row_variance","qualname":"<Matrix<N, R, C, S>>::row_variance","value":"fn (&self) -> RowVectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The variance of all the rows of this matrix.\n\n Use `.row_variance_tr` if you need the result in a column vector instead.\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, RowVector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_variance(), RowVector3::new(2.25, 2.25, 2.25));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":471574,"byte_end":471583,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3641},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":472159,"byte_end":472174,"line_start":193,"line_end":193,"column_start":12,"column_end":27},"name":"row_variance_tr","qualname":"<Matrix<N, R, C, S>>::row_variance_tr","value":"fn (&self) -> VectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The variance of all the rows of this matrix. The result is transposed and returned as a column vector.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, Vector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_variance_tr(), Vector3::new(2.25, 2.25, 2.25));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":472138,"byte_end":472147,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":472742,"byte_end":472757,"line_start":211,"line_end":211,"column_start":12,"column_end":27},"name":"column_variance","qualname":"<Matrix<N, R, C, S>>::column_variance","value":"fn (&self) -> VectorN<N, R>","parent":null,"children":[],"decl_id":null,"docs":" The variance of all the columns of this matrix.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix2x3, Vector2};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_relative_eq!(m.column_variance(), Vector2::new(2.0 / 3.0, 2.0 / 3.0), epsilon = 1.0e-8);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":472721,"byte_end":472730,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":473684,"byte_end":473688,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"mean","qualname":"<Matrix<N, R, C, S>>::mean","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The mean of all the elements of this matrix.\n\n # Example\n\n ```\n # use nalgebra::Matrix2x3;\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.mean(), 3.5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":473663,"byte_end":473672,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":474281,"byte_end":474289,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"row_mean","qualname":"<Matrix<N, R, C, S>>::row_mean","value":"fn (&self) -> RowVectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The mean of all the rows of this matrix.\n\n Use `.row_mean_tr` if you need the result in a column vector instead.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, RowVector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_mean(), RowVector3::new(2.5, 3.5, 4.5));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":474260,"byte_end":474269,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":474826,"byte_end":474837,"line_start":285,"line_end":285,"column_start":12,"column_end":23},"name":"row_mean_tr","qualname":"<Matrix<N, R, C, S>>::row_mean_tr","value":"fn (&self) -> VectorN<N, C>","parent":null,"children":[],"decl_id":null,"docs":" The mean of all the rows of this matrix. The result is transposed and returned as a column vector.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, Vector3};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.row_mean_tr(), Vector3::new(2.5, 3.5, 4.5));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":474805,"byte_end":474814,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3651},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":475310,"byte_end":475321,"line_start":302,"line_end":302,"column_start":12,"column_end":23},"name":"column_mean","qualname":"<Matrix<N, R, C, S>>::column_mean","value":"fn (&self) -> VectorN<N, R>","parent":null,"children":[],"decl_id":null,"docs":" The mean of all the columns of this matrix.\n\n # Example\n\n ```\n # use nalgebra::{Matrix2x3, Vector2};\n\n let m = Matrix2x3::new(1.0, 2.0, 3.0,\n                        4.0, 5.0, 6.0);\n assert_eq!(m.column_mean(), Vector2::new(2.0, 5.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":475289,"byte_end":475298,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3671},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476089,"byte_end":476093,"line_start":14,"line_end":14,"column_start":11,"column_end":15},"name":"Norm","qualname":"::base::norm::Norm","value":"Norm<N: ComplexField>","parent":null,"children":[{"krate":0,"index":3673},{"krate":0,"index":3677}],"decl_id":null,"docs":" A trait for abstract matrix norms.\n\n This may be moved to the alga crate in the future.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476165,"byte_end":476169,"line_start":16,"line_end":16,"column_start":8,"column_end":12},"name":"norm","qualname":"::base::norm::Norm::norm","value":"fn <R, C, S> (&self, m: &Matrix<N, R, C, S>) -> N::RealField","parent":{"krate":0,"index":3671},"children":[],"decl_id":null,"docs":" Apply this norm to the given matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476391,"byte_end":476406,"line_start":19,"line_end":19,"column_start":8,"column_end":23},"name":"metric_distance","qualname":"::base::norm::Norm::metric_distance","value":"fn <R1, C1, S1, R2, C2, S2> (&self, m1: &Matrix<N, R1, C1, S1>, m2: &Matrix<N, R2, C2, S2>) -> N::RealField","parent":{"krate":0,"index":3671},"children":[],"decl_id":null,"docs":" Use the metric induced by this norm to compute the metric distance between the two given matrices.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476743,"byte_end":476756,"line_start":26,"line_end":26,"column_start":12,"column_end":25},"name":"EuclideanNorm","qualname":"::base::norm::EuclideanNorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" Euclidean norm.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3686},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476782,"byte_end":476788,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"LpNorm","qualname":"::base::norm::LpNorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" Lp norm.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476890,"byte_end":476901,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"UniformNorm","qualname":"::base::norm::UniformNorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" L-infinite norm aka. Chebytchev norm aka. uniform norm aka. suppremum norm.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3740},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479605,"byte_end":479617,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"norm_squared","qualname":"<Matrix<N, R, C, S>>::norm_squared","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" The squared L2 norm of this vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479584,"byte_end":479593,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3741},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479951,"byte_end":479955,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"norm","qualname":"<Matrix<N, R, C, S>>::norm","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" The L2 norm of this matrix.\n\n Use `.apply_norm` to apply a custom norm.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479930,"byte_end":479939,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":480219,"byte_end":480234,"line_start":124,"line_end":124,"column_start":12,"column_end":27},"name":"metric_distance","qualname":"<Matrix<N, R, C, S>>::metric_distance","value":"fn <R2, C2, S2> (&self, rhs: &Matrix<N, R2, C2, S2>) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Compute the distance between `self` and `rhs` using the metric induced by the euclidean norm.\n\n Use `.apply_metric_distance` to apply a custom norm.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":480198,"byte_end":480207,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":480936,"byte_end":480946,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"apply_norm","qualname":"<Matrix<N, R, C, S>>::apply_norm","value":"fn (&self, norm: &impl Norm<N>) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Uses the given `norm` to compute the norm of `self`.\n\n # Example\n\n ```\n # use nalgebra::{Vector3, UniformNorm, LpNorm, EuclideanNorm};\n\n let v = Vector3::new(1.0, 2.0, 3.0);\n assert_eq!(v.apply_norm(&UniformNorm), 3.0);\n assert_eq!(v.apply_norm(&LpNorm(1)), 6.0);\n assert_eq!(v.apply_norm(&EuclideanNorm), v.norm());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":480915,"byte_end":480924,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3748},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":481636,"byte_end":481657,"line_start":162,"line_end":162,"column_start":12,"column_end":33},"name":"apply_metric_distance","qualname":"<Matrix<N, R, C, S>>::apply_metric_distance","value":"fn <R2, C2, S2> (&self, rhs: &Matrix<N, R2, C2, S2>, norm: &impl Norm<N>) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Uses the metric induced by the given `norm` to compute the metric distance between `self` and `rhs`.\n\n # Example\n\n ```\n # use nalgebra::{Vector3, UniformNorm, LpNorm, EuclideanNorm};\n\n let v1 = Vector3::new(1.0, 2.0, 3.0);\n let v2 = Vector3::new(10.0, 20.0, 30.0);\n\n assert_eq!(v1.apply_metric_distance(&v2, &UniformNorm), 27.0);\n assert_eq!(v1.apply_metric_distance(&v2, &LpNorm(1)), 27.0 + 18.0 + 9.0);\n assert_eq!(v1.apply_metric_distance(&v2, &EuclideanNorm), (v1 - v2).norm());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":481615,"byte_end":481624,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482110,"byte_end":482119,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"magnitude","qualname":"<Matrix<N, R, C, S>>::magnitude","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" A synonym for the norm of this matrix.\n\n Aka the length.\n\n This function is simply implemented as a call to `norm()`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482089,"byte_end":482098,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482374,"byte_end":482391,"line_start":184,"line_end":184,"column_start":12,"column_end":29},"name":"magnitude_squared","qualname":"<Matrix<N, R, C, S>>::magnitude_squared","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" A synonym for the squared norm of this matrix.\n\n Aka the squared length.\n\n This function is simply implemented as a call to `norm_squared()`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482353,"byte_end":482362,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3755},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482530,"byte_end":482539,"line_start":190,"line_end":190,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Matrix<N, R, C, S>>::normalize","value":"fn (&self) -> MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns a normalized version of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482509,"byte_end":482518,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482785,"byte_end":482798,"line_start":197,"line_end":197,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Matrix<N, R, C, S>>::try_normalize","value":"fn (&self, min_norm: N::RealField) -> Option<MatrixMN<N, R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a normalized version of this matrix unless its norm as smaller or equal to `eps`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":482764,"byte_end":482773,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3757},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483115,"byte_end":483122,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"lp_norm","qualname":"<Matrix<N, R, C, S>>::lp_norm","value":"fn (&self, p: i32) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" The Lp norm of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483094,"byte_end":483103,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3763},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483372,"byte_end":483385,"line_start":219,"line_end":219,"column_start":12,"column_end":25},"name":"normalize_mut","qualname":"<Matrix<N, R, C, S>>::normalize_mut","value":"fn (&mut self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this matrix in-place and returns its norm.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483351,"byte_end":483360,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3764},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483701,"byte_end":483718,"line_start":230,"line_end":230,"column_start":12,"column_end":29},"name":"try_normalize_mut","qualname":"<Matrix<N, R, C, S>>::try_normalize_mut","value":"fn (&mut self, min_norm: N::RealField) -> Option<N::RealField>","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this matrix in-place or does nothing if its norm is smaller or equal to `eps`.\n\n If the normalization succeeded, returns the old normal of this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483680,"byte_end":483689,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":3765},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\helper.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"helper","qualname":"::base::helper","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\helper.rs","parent":null,"children":[{"krate":0,"index":3766},{"krate":0,"index":3769},{"krate":0,"index":3770}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\helper.rs","byte_start":484413,"byte_end":484424,"line_start":20,"line_end":20,"column_start":8,"column_end":19},"name":"reject_rand","qualname":"::base::helper::reject_rand","value":"fn <G, F, T> (g: &mut G, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\helper.rs","byte_start":484396,"byte_end":484405,"line_start":19,"line_end":19,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3787},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometry","qualname":"::geometry","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\mod.rs","parent":null,"children":[{"krate":0,"index":3788},{"krate":0,"index":3795},{"krate":0,"index":3872},{"krate":0,"index":3914},{"krate":0,"index":3935},{"krate":0,"index":3981},{"krate":0,"index":4037},{"krate":0,"index":4062},{"krate":0,"index":4127},{"krate":0,"index":4210},{"krate":0,"index":4291},{"krate":0,"index":4300},{"krate":0,"index":4322},{"krate":0,"index":4423},{"krate":0,"index":4461},{"krate":0,"index":4557},{"krate":0,"index":4720},{"krate":0,"index":4842},{"krate":0,"index":4942},{"krate":0,"index":5036},{"krate":0,"index":5051},{"krate":0,"index":5101},{"krate":0,"index":5157},{"krate":0,"index":5230},{"krate":0,"index":5283},{"krate":0,"index":5356},{"krate":0,"index":5464},{"krate":0,"index":5546},{"krate":0,"index":5627},{"krate":0,"index":5648},{"krate":0,"index":5686},{"krate":0,"index":5761},{"krate":0,"index":5786},{"krate":0,"index":5811},{"krate":0,"index":5905},{"krate":0,"index":5988},{"krate":0,"index":6006},{"krate":0,"index":6064},{"krate":0,"index":6130},{"krate":0,"index":6159},{"krate":0,"index":6261},{"krate":0,"index":6340},{"krate":0,"index":6358},{"krate":0,"index":6414},{"krate":0,"index":6471},{"krate":0,"index":6500},{"krate":0,"index":6515},{"krate":0,"index":6644},{"krate":0,"index":6703},{"krate":0,"index":6724},{"krate":0,"index":6748},{"krate":0,"index":6787},{"krate":0,"index":6841},{"krate":0,"index":6894},{"krate":0,"index":6967},{"krate":0,"index":7034},{"krate":0,"index":7035},{"krate":0,"index":7036},{"krate":0,"index":7037},{"krate":0,"index":7038},{"krate":0,"index":7039},{"krate":0,"index":7040},{"krate":0,"index":7041},{"krate":0,"index":7042},{"krate":0,"index":7043},{"krate":0,"index":7044},{"krate":0,"index":7045},{"krate":0,"index":7046},{"krate":0,"index":7047},{"krate":0,"index":7048},{"krate":0,"index":7049},{"krate":0,"index":7050}],"decl_id":null,"docs":" [Reexported at the root of this crate.] Data structures for points and usual transformations\n (rotations, isometries, etc.)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17333},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":495737,"byte_end":495742,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Point","qualname":"::geometry::point::Point","value":"Point { coords }","parent":null,"children":[{"krate":0,"index":17336}],"decl_id":null,"docs":" A point in a n-dimensional euclidean space.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":495691,"byte_end":495701,"line_start":21,"line_end":21,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":17336},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":495888,"byte_end":495894,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"name":"coords","qualname":"::geometry::point::Point::coords","value":"base::matrix::Matrix<N, D, base::dimension::U1, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, D>>::Buffer>","parent":{"krate":0,"index":17333},"children":[],"decl_id":null,"docs":" The coordinates of this point, i.e., the shift from the origin.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":498297,"byte_end":498311,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Point<N, D>>::to_homogeneous","value":"fn (&self) -> VectorN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this point into a vector in homogeneous coordinates, i.e., appends a `1` at the\n end of it.\n\n This is the same as `.into()`.\n\n # Example\n ```\n # use nalgebra::{Point2, Point3, Vector3, Vector4};\n let p = Point2::new(10.0, 20.0);\n assert_eq!(p.to_homogeneous(), Vector3::new(10.0, 20.0, 1.0));\n\n // This works in any dimension.\n let p = Point3::new(10.0, 20.0, 30.0);\n assert_eq!(p.to_homogeneous(), Vector4::new(10.0, 20.0, 30.0, 1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":498276,"byte_end":498285,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3829},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":498826,"byte_end":498842,"line_start":129,"line_end":129,"column_start":12,"column_end":28},"name":"from_coordinates","qualname":"<Point<N, D>>::from_coordinates","value":"fn (coords: VectorN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point with the given coordinates.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Use Point::from(vector) instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":498744,"byte_end":498800,"line_start":127,"line_end":127,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":498805,"byte_end":498814,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3830},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":499267,"byte_end":499270,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"len","qualname":"<Point<N, D>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The dimension of this point.\n\n # Example\n ```\n # use nalgebra::{Point2, Point3};\n let p = Point2::new(1.0, 2.0);\n assert_eq!(p.len(), 2);\n\n // This works in any dimension.\n let p = Point3::new(10.0, 20.0, 30.0);\n assert_eq!(p.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":499246,"byte_end":499255,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":499559,"byte_end":499565,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"stride","qualname":"<Point<N, D>>::stride","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The stride of this point. This is the number of buffer element separating each component of\n this point.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":499446,"byte_end":499455,"line_start":152,"line_end":152,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This methods is no longer significant and will always return 1.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":499460,"byte_end":499547,"line_start":153,"line_end":153,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":3832},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500022,"byte_end":500026,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"iter","qualname":"<Point<N, D>>::iter","value":"fn (&self) -> MatrixIter<N, D, U1, <DefaultAllocator as Allocator<N, D>>::Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Iterates through this point coordinates.\n\n # Example\n ```\n # use nalgebra::Point3;\n let p = Point3::new(1.0, 2.0, 3.0);\n let mut it = p.iter().cloned();\n\n assert_eq!(it.next(), Some(1.0));\n assert_eq!(it.next(), Some(2.0));\n assert_eq!(it.next(), Some(3.0));\n assert_eq!(it.next(), None);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500001,"byte_end":500010,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3833},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500252,"byte_end":500265,"line_start":177,"line_end":177,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Point<N, D>>::get_unchecked","value":"fn (&self, i: usize) -> &N","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to i-th element of this point without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500224,"byte_end":500233,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500672,"byte_end":500680,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Point<N, D>>::iter_mut","value":"fn (&mut self) -> MatrixIterMut<N, D, U1, <DefaultAllocator as Allocator<N, D>>::Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Mutably iterates through this point coordinates.\n\n # Example\n ```\n # use nalgebra::Point3;\n let mut p = Point3::new(1.0, 2.0, 3.0);\n\n for e in p.iter_mut() {\n     *e *= 10.0;\n }\n\n assert_eq!(p, Point3::new(10.0, 20.0, 30.0));\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500651,"byte_end":500660,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3835},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500940,"byte_end":500957,"line_start":202,"line_end":202,"column_start":19,"column_end":36},"name":"get_unchecked_mut","qualname":"<Point<N, D>>::get_unchecked_mut","value":"fn (&mut self, i: usize) -> &mut N","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to i-th element of this point without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":500912,"byte_end":500921,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501122,"byte_end":501136,"line_start":208,"line_end":208,"column_start":19,"column_end":33},"name":"swap_unchecked","qualname":"<Point<N, D>>::swap_unchecked","value":"fn (&mut self, i1: usize, i2: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps two entries without bound-checking.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501094,"byte_end":501103,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":3923},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":505847,"byte_end":505853,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Point1","qualname":"::geometry::point_alias::Point1","value":"Point<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 1-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3925},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":505933,"byte_end":505939,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Point2","qualname":"::geometry::point_alias::Point2","value":"Point<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 2-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3927},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":506019,"byte_end":506025,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Point3","qualname":"::geometry::point_alias::Point3","value":"Point<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 3-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":506105,"byte_end":506111,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"Point4","qualname":"::geometry::point_alias::Point4","value":"Point<N, U4>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 4-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3931},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":506191,"byte_end":506197,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"Point5","qualname":"::geometry::point_alias::Point5","value":"Point<N, U5>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 5-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3933},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alias.rs","byte_start":506277,"byte_end":506283,"line_start":16,"line_end":16,"column_start":10,"column_end":16},"name":"Point6","qualname":"::geometry::point_alias::Point6","value":"Point<N, U6>","parent":null,"children":[],"decl_id":null,"docs":" A statically sized 6-dimensional column point.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3964},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":506881,"byte_end":506898,"line_start":20,"line_end":20,"column_start":19,"column_end":36},"name":"new_uninitialized","qualname":"<Point<N, D>>::new_uninitialized","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point with uninitialized coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":506853,"byte_end":506862,"line_start":19,"line_end":19,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3965},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":507527,"byte_end":507533,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point<N, D>>::origin","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point with all coordinates equal to zero.\n\n # Example\n\n ```\n # use nalgebra::{Point2, Point3};\n // This works in any dimension.\n // The explicit crate::<f32> type annotation may not always be needed,\n // depending on the context of type inference.\n let pt = Point2::<f32>::origin();\n assert!(pt.x == 0.0 && pt.y == 0.0);\n\n let pt = Point3::<f32>::origin();\n assert!(pt.x == 0.0 && pt.y == 0.0 && pt.z == 0.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":507506,"byte_end":507515,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3966},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":508037,"byte_end":508047,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Point<N, D>>::from_slice","value":"fn (components: &[N]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point from a slice.\n\n # Example\n\n ```\n # use nalgebra::{Point2, Point3};\n let data = [ 1.0, 2.0, 3.0 ];\n\n let pt = Point2::from_slice(&data[..2]);\n assert_eq!(pt, Point2::new(1.0, 2.0));\n\n let pt = Point3::from_slice(&data);\n assert_eq!(pt, Point3::new(1.0, 2.0, 3.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":508016,"byte_end":508025,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3967},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":509404,"byte_end":509420,"line_start":95,"line_end":95,"column_start":12,"column_end":28},"name":"from_homogeneous","qualname":"<Point<N, D>>::from_homogeneous","value":"fn (v: VectorN<N, DimNameSum<D, U1>>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point from its homogeneous vector representation.\n\n In practice, this builds a D-dimensional points with the same first D component as `v`\n divided by the last component of `v`. Returns `None` if this divisor is zero.\n\n # Example\n\n ```\n # use nalgebra::{Point2, Point3, Vector3, Vector4};\n\n let coords = Vector4::new(1.0, 2.0, 3.0, 1.0);\n let pt = Point3::from_homogeneous(coords);\n assert_eq!(pt, Some(Point3::new(1.0, 2.0, 3.0)));\n\n // All component of the result will be divided by the\n // last component of the vector, here 2.0.\n let coords = Vector4::new(1.0, 2.0, 3.0, 2.0);\n let pt = Point3::from_homogeneous(coords);\n assert_eq!(pt, Some(Point3::new(0.5, 1.0, 1.5)));\n\n // Fails because the last component is zero.\n let coords = Vector4::new(1.0, 2.0, 3.0, 0.0);\n let pt = Point3::from_homogeneous(coords);\n assert!(pt.is_none());\n\n // Works also in other dimensions.\n let coords = Vector3::new(1.0, 2.0, 1.0);\n let pt = Point2::from_homogeneous(coords);\n assert_eq!(pt, Some(Point2::new(1.0, 2.0)));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":509383,"byte_end":509392,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":17747},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527053,"byte_end":527061,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Rotation","qualname":"::geometry::rotation::Rotation","value":"Rotation {  }","parent":null,"children":[{"krate":0,"index":17750}],"decl_id":null,"docs":" A rotation matrix.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527014,"byte_end":527024,"line_start":25,"line_end":25,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530040,"byte_end":530046,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"matrix","qualname":"<Rotation<N, D>>::matrix","value":"fn (&self) -> &MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying matrix representation of this rotation.\n\n # Example\n ```\n # use nalgebra::{Rotation2, Rotation3, Vector3, Matrix2, Matrix3};\n # use std::f32;\n let rot = Rotation3::from_axis_angle(&Vector3::z_axis(), f32::consts::FRAC_PI_6);\n let expected = Matrix3::new(0.8660254, -0.5,      0.0,\n                             0.5,       0.8660254, 0.0,\n                             0.0,       0.0,       1.0);\n assert_eq!(*rot.matrix(), expected);\n\n\n let rot = Rotation2::new(f32::consts::FRAC_PI_6);\n let expected = Matrix2::new(0.8660254, -0.5,\n                             0.5,       0.8660254);\n assert_eq!(*rot.matrix(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530019,"byte_end":530028,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530287,"byte_end":530297,"line_start":137,"line_end":137,"column_start":19,"column_end":29},"name":"matrix_mut","qualname":"<Rotation<N, D>>::matrix_mut","value":"fn (&mut self) -> &mut MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the underlying matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530192,"byte_end":530201,"line_start":135,"line_end":135,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Use `.matrix_mut_unchecked()` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530206,"byte_end":530268,"line_start":136,"line_end":136,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":4167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530736,"byte_end":530756,"line_start":147,"line_end":147,"column_start":12,"column_end":32},"name":"matrix_mut_unchecked","qualname":"<Rotation<N, D>>::matrix_mut_unchecked","value":"fn (&mut self) -> &mut MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the underlying matrix representation of this rotation.\n\n This is suffixed by \"_unchecked\" because this allows the user to replace the matrix by another one that is\n non-square, non-inversible, or non-orthonormal. If one of those properties is broken,\n subsequent method calls may be UB.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":530715,"byte_end":530724,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":531645,"byte_end":531655,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Rotation<N, D>>::into_inner","value":"fn (self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the underlying matrix.\n\n # Example\n ```\n # use nalgebra::{Rotation2, Rotation3, Vector3, Matrix2, Matrix3};\n # use std::f32;\n let rot = Rotation3::from_axis_angle(&Vector3::z_axis(), f32::consts::FRAC_PI_6);\n let mat = rot.into_inner();\n let expected = Matrix3::new(0.8660254, -0.5,      0.0,\n                             0.5,       0.8660254, 0.0,\n                             0.0,       0.0,       1.0);\n assert_eq!(mat, expected);\n\n\n let rot = Rotation2::new(f32::consts::FRAC_PI_6);\n let mat = rot.into_inner();\n let expected = Matrix2::new(0.8660254, -0.5,\n                             0.5,       0.8660254);\n assert_eq!(mat, expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":531624,"byte_end":531633,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":531882,"byte_end":531888,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Rotation<N, D>>::unwrap","value":"fn (self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the underlying matrix.\n Deprecated: Use [Rotation::into_inner] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `.into_inner()` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":531807,"byte_end":531856,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":531861,"byte_end":531870,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":532983,"byte_end":532997,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Rotation<N, D>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this rotation into its equivalent homogeneous transformation matrix.\n\n This is the same as `self.into()`.\n\n # Example\n ```\n # use nalgebra::{Rotation2, Rotation3, Vector3, Matrix3, Matrix4};\n # use std::f32;\n let rot = Rotation3::from_axis_angle(&Vector3::z_axis(), f32::consts::FRAC_PI_6);\n let expected = Matrix4::new(0.8660254, -0.5,      0.0, 0.0,\n                             0.5,       0.8660254, 0.0, 0.0,\n                             0.0,       0.0,       1.0, 0.0,\n                             0.0,       0.0,       0.0, 1.0);\n assert_eq!(rot.to_homogeneous(), expected);\n\n\n let rot = Rotation2::new(f32::consts::FRAC_PI_6);\n let expected = Matrix3::new(0.8660254, -0.5,      0.0,\n                             0.5,       0.8660254, 0.0,\n                             0.0,       0.0,       1.0);\n assert_eq!(rot.to_homogeneous(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":532962,"byte_end":532971,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":534372,"byte_end":534393,"line_start":245,"line_end":245,"column_start":12,"column_end":33},"name":"from_matrix_unchecked","qualname":"<Rotation<N, D>>::from_matrix_unchecked","value":"fn (matrix: MatrixN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rotation from the given square matrix.\n\n The matrix squareness is checked but not its orthonormality.\n\n # Example\n ```\n # use nalgebra::{Rotation2, Rotation3, Matrix2, Matrix3};\n # use std::f32;\n let mat = Matrix3::new(0.8660254, -0.5,      0.0,\n                        0.5,       0.8660254, 0.0,\n                        0.0,       0.0,       1.0);\n let rot = Rotation3::from_matrix_unchecked(mat);\n\n assert_eq!(*rot.matrix(), mat);\n\n\n let mat = Matrix2::new(0.8660254, -0.5,\n                        0.5,       0.8660254);\n let rot = Rotation2::from_matrix_unchecked(mat);\n\n assert_eq!(*rot.matrix(), mat);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":534351,"byte_end":534360,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":535416,"byte_end":535425,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Rotation<N, D>>::transpose","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transposes `self`.\n\n Same as `.inverse()` because the inverse of a rotation matrix is its transform.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation2, Rotation3, Vector3};\n let rot = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n let tr_rot = rot.transpose();\n assert_relative_eq!(rot * tr_rot, Rotation3::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(tr_rot * rot, Rotation3::identity(), epsilon = 1.0e-6);\n\n let rot = Rotation2::new(1.2);\n let tr_rot = rot.transpose();\n assert_relative_eq!(rot * tr_rot, Rotation2::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(tr_rot * rot, Rotation2::identity(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":535395,"byte_end":535404,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":536309,"byte_end":536316,"line_start":296,"line_end":296,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation<N, D>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self`.\n\n Same as `.transpose()` because the inverse of a rotation matrix is its transform.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation2, Rotation3, Vector3};\n let rot = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n let inv = rot.inverse();\n assert_relative_eq!(rot * inv, Rotation3::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(inv * rot, Rotation3::identity(), epsilon = 1.0e-6);\n\n let rot = Rotation2::new(1.2);\n let inv = rot.inverse();\n assert_relative_eq!(rot * inv, Rotation2::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(inv * rot, Rotation2::identity(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":536288,"byte_end":536297,"line_start":295,"line_end":295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":537320,"byte_end":537333,"line_start":323,"line_end":323,"column_start":12,"column_end":25},"name":"transpose_mut","qualname":"<Rotation<N, D>>::transpose_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transposes `self` in-place.\n\n Same as `.inverse_mut()` because the inverse of a rotation matrix is its transform.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation2, Rotation3, Vector3};\n let rot = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n let mut tr_rot = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n tr_rot.transpose_mut();\n\n assert_relative_eq!(rot * tr_rot, Rotation3::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(tr_rot * rot, Rotation3::identity(), epsilon = 1.0e-6);\n\n let rot = Rotation2::new(1.2);\n let mut tr_rot = Rotation2::new(1.2);\n tr_rot.transpose_mut();\n\n assert_relative_eq!(rot * tr_rot, Rotation2::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(tr_rot * rot, Rotation2::identity(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":537299,"byte_end":537308,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4175},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":538315,"byte_end":538326,"line_start":350,"line_end":350,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<Rotation<N, D>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self` in-place.\n\n Same as `.transpose_mut()` because the inverse of a rotation matrix is its transform.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation2, Rotation3, Vector3};\n let rot = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n let mut inv = Rotation3::new(Vector3::new(1.0, 2.0, 3.0));\n inv.inverse_mut();\n\n assert_relative_eq!(rot * inv, Rotation3::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(inv * rot, Rotation3::identity(), epsilon = 1.0e-6);\n\n let rot = Rotation2::new(1.2);\n let mut inv = Rotation2::new(1.2);\n inv.inverse_mut();\n\n assert_relative_eq!(rot * inv, Rotation2::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(inv * rot, Rotation2::identity(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":538294,"byte_end":538303,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":539069,"byte_end":539084,"line_start":373,"line_end":373,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation<N, D>>::transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given point.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Point3, Rotation2, Rotation3, UnitQuaternion, Vector3};\n let rot = Rotation3::new(Vector3::y() * f32::consts::FRAC_PI_2);\n let transformed_point = rot.transform_point(&Point3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_point, Point3::new(3.0, 2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":539048,"byte_end":539057,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4180},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":539731,"byte_end":539747,"line_start":392,"line_end":392,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation<N, D>>::transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given vector.\n\n This is the same as the multiplication `self * v`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation2, Rotation3, UnitQuaternion, Vector3};\n let rot = Rotation3::new(Vector3::y() * f32::consts::FRAC_PI_2);\n let transformed_vector = rot.transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_vector, Vector3::new(3.0, 2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":539710,"byte_end":539719,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":540474,"byte_end":540497,"line_start":411,"line_end":411,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<Rotation<N, D>>::inverse_transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given point by the inverse of this rotation. This may be\n cheaper than inverting the rotation and then transforming the given\n point.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Point3, Rotation2, Rotation3, UnitQuaternion, Vector3};\n let rot = Rotation3::new(Vector3::y() * f32::consts::FRAC_PI_2);\n let transformed_point = rot.inverse_transform_point(&Point3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_point, Point3::new(-3.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":540453,"byte_end":540462,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541266,"byte_end":541290,"line_start":430,"line_end":430,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<Rotation<N, D>>::inverse_transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given vector by the inverse of this rotation. This may be\n cheaper than inverting the rotation and then transforming the given\n vector.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation2, Rotation3, UnitQuaternion, Vector3};\n let rot = Rotation3::new(Vector3::y() * f32::consts::FRAC_PI_2);\n let transformed_vector = rot.inverse_transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_vector, Vector3::new(-3.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541245,"byte_end":541254,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":4296},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alias.rs","byte_start":550753,"byte_end":550762,"line_start":6,"line_end":6,"column_start":10,"column_end":19},"name":"Rotation2","qualname":"::geometry::rotation_alias::Rotation2","value":"Rotation<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional rotation matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4298},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alias.rs","byte_start":550832,"byte_end":550841,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"Rotation3","qualname":"::geometry::rotation_alias::Rotation3","value":"Rotation<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional rotation matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4317},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551577,"byte_end":551585,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation<N, D>>::identity","value":"fn () -> Rotation<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new square identity rotation of the given `dimension`.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let rot1 = Quaternion::identity();\n let rot2 = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n\n assert_eq!(rot1 * rot2, rot2);\n assert_eq!(rot2 * rot1, rot2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551556,"byte_end":551565,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4491},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":566221,"byte_end":566224,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2<N>>::new","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 2 dimensional rotation matrix from an angle in radian.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation2, Point2};\n let rot = Rotation2::new(f32::consts::FRAC_PI_2);\n\n assert_relative_eq!(rot * Point2::new(3.0, 4.0), Point2::new(-4.0, 3.0));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4492},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":566646,"byte_end":566662,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"from_scaled_axis","qualname":"<Rotation2<N>>::from_scaled_axis","value":"fn <SB> (axisangle: Vector<N, U1, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 2 dimensional rotation matrix from an angle in radian wrapped in a 1-dimensional vector.\n\n\n This is generally used in the context of generic programming. Using\n the `::new(angle)` method instead is more common.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":566625,"byte_end":566634,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":567117,"byte_end":567128,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<Rotation2<N>>::from_matrix","value":"fn (m: &Matrix2<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a rotation matrix by extracting the rotation part of the given transformation `m`.\n\n This is an iterative method. See `.from_matrix_eps` to provide mover\n convergence parameters and starting solution.\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4495},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":568042,"byte_end":568057,"line_start":72,"line_end":72,"column_start":12,"column_end":27},"name":"from_matrix_eps","qualname":"<Rotation2<N>>::from_matrix_eps","value":"fn (m: &Matrix2<N>, eps: N, mut max_iter: usize, guess: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a rotation matrix by extracting the rotation part of the given transformation `m`.\n\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n\n # Parameters\n\n * `m`: the matrix from which the rotational part is to be extracted.\n * `eps`: the angular errors tolerated between the current rotation and the optimal one.\n * `max_iter`: the maximum number of iterations. Loops indefinitely until convergence if set to `0`.\n * `guess`: an estimate of the solution. Convergence will be significantly faster if an initial solution close\n           to the actual solution is provided. Can be set to `Rotation2::identity()` if no other\n           guesses come to mind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":569342,"byte_end":569358,"line_start":111,"line_end":111,"column_start":12,"column_end":28},"name":"rotation_between","qualname":"<Rotation2<N>>::rotation_between","value":"fn <SB, SC> (a: &Vector<N, U2, SB>, b: &Vector<N, U2, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rotation matrix required to align `a` and `b` but with its angle.\n\n This is the rotation `R` such that `(R * a).angle(b) == 0 && (R * a).dot(b).is_positive()`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector2, Rotation2};\n let a = Vector2::new(1.0, 2.0);\n let b = Vector2::new(2.0, 1.0);\n let rot = Rotation2::rotation_between(&a, &b);\n assert_relative_eq!(rot * a, b);\n assert_relative_eq!(rot.inverse() * b, a);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":569321,"byte_end":569330,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4499},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":570254,"byte_end":570277,"line_start":134,"line_end":134,"column_start":12,"column_end":35},"name":"scaled_rotation_between","qualname":"<Rotation2<N>>::scaled_rotation_between","value":"fn <SB, SC> (a: &Vector<N, U2, SB>, b: &Vector<N, U2, SC>, s: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector2, Rotation2};\n let a = Vector2::new(1.0, 2.0);\n let b = Vector2::new(2.0, 1.0);\n let rot2 = Rotation2::scaled_rotation_between(&a, &b, 0.2);\n let rot5 = Rotation2::scaled_rotation_between(&a, &b, 0.5);\n assert_relative_eq!(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(rot5 * rot5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":570233,"byte_end":570242,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4502},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":570817,"byte_end":570822,"line_start":156,"line_end":156,"column_start":12,"column_end":17},"name":"angle","qualname":"<Rotation2<N>>::angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation2;\n let rot = Rotation2::new(1.78);\n assert_relative_eq!(rot.angle(), 1.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":570796,"byte_end":570805,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":571264,"byte_end":571272,"line_start":171,"line_end":171,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Rotation2<N>>::angle_to","value":"fn (&self, other: &Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle needed to make `self` and `other` coincide.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation2;\n let rot1 = Rotation2::new(0.1);\n let rot2 = Rotation2::new(1.7);\n assert_relative_eq!(rot1.angle_to(&rot2), 1.6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":571243,"byte_end":571252,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4504},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":571902,"byte_end":571913,"line_start":191,"line_end":191,"column_start":12,"column_end":23},"name":"rotation_to","qualname":"<Rotation2<N>>::rotation_to","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rotation matrix needed to make `self` and `other` coincide.\n\n The result is such that: `self.rotation_to(other) * self == other`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation2;\n let rot1 = Rotation2::new(0.1);\n let rot2 = Rotation2::new(1.7);\n let rot_to = rot1.rotation_to(&rot2);\n\n assert_relative_eq!(rot_to * rot1, rot2);\n assert_relative_eq!(rot_to.inverse() * rot2, rot1);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":571881,"byte_end":571890,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4505},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":572196,"byte_end":572207,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"renormalize","qualname":"<Rotation2<N>>::renormalize","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure this rotation is an orthonormal rotation matrix. This is useful when repeated\n computations might cause the matrix from progressively not being orthonormal anymore.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":572175,"byte_end":572184,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4506},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":572813,"byte_end":572817,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"powf","qualname":"<Rotation2<N>>::powf","value":"fn (&self, n: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raise the quaternion to a given floating power, i.e., returns the rotation with the angle\n of `self` multiplied by `n`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation2;\n let rot = Rotation2::new(0.78);\n let pow = rot.powf(2.0);\n assert_relative_eq!(pow.angle(), 2.0 * 0.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":572792,"byte_end":572801,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4507},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573110,"byte_end":573121,"line_start":228,"line_end":228,"column_start":12,"column_end":23},"name":"scaled_axis","qualname":"<Rotation2<N>>::scaled_axis","value":"fn (&self) -> VectorN<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle returned as a 1-dimensional vector.\n\n This is generally used in the context of generic programming. Using\n the `.angle()` method instead is more common.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573089,"byte_end":573098,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4515},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":574829,"byte_end":574832,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation3<N>>::new","value":"fn <SB> (axisangle: Vector<N, U3, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3 dimensional rotation matrix from an axis and an angle.\n\n # Arguments\n   * `axisangle` - A vector representing the rotation. Its magnitude is the amount of rotation\n   in radian. Its direction is the axis of rotation.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let rot = Rotation3::new(axisangle);\n\n assert_relative_eq!(rot * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(rot * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(Rotation3::new(Vector3::<f32>::zeros()), Rotation3::identity());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":575405,"byte_end":575416,"line_start":293,"line_end":293,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<Rotation3<N>>::from_matrix","value":"fn (m: &Matrix3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a rotation matrix by extracting the rotation part of the given transformation `m`.\n\n This is an iterative method. See `.from_matrix_eps` to provide mover\n convergence parameters and starting solution.\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4518},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":576326,"byte_end":576341,"line_start":309,"line_end":309,"column_start":12,"column_end":27},"name":"from_matrix_eps","qualname":"<Rotation3<N>>::from_matrix_eps","value":"fn (m: &Matrix3<N>, eps: N, mut max_iter: usize, guess: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a rotation matrix by extracting the rotation part of the given transformation `m`.\n\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n\n # Parameters\n\n * `m`: the matrix from which the rotational part is to be extracted.\n * `eps`: the angular errors tolerated between the current rotation and the optimal one.\n * `max_iter`: the maximum number of iterations. Loops indefinitely until convergence if set to `0`.\n * `guess`: a guess of the solution. Convergence will be significantly faster if an initial solution close\n           to the actual solution is provided. Can be set to `Rotation3::identity()` if no other\n           guesses come to mind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4519},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":578141,"byte_end":578157,"line_start":357,"line_end":357,"column_start":12,"column_end":28},"name":"from_scaled_axis","qualname":"<Rotation3<N>>::from_scaled_axis","value":"fn <SB> (axisangle: Vector<N, U3, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D rotation matrix from an axis scaled by the rotation angle.\n\n This is the same as `Self::new(axisangle)`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let rot = Rotation3::new(axisangle);\n\n assert_relative_eq!(rot * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(rot * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(Rotation3::from_scaled_axis(Vector3::<f32>::zeros()), Rotation3::identity());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4521},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":579221,"byte_end":579236,"line_start":383,"line_end":383,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<Rotation3<N>>::from_axis_angle","value":"fn <SB> (axis: &Unit<Vector<N, U3, SB>>, angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a 3D rotation matrix from an axis and a rotation angle.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Point3, Vector3};\n let axis = Vector3::y_axis();\n let angle = f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let rot = Rotation3::from_axis_angle(&axis, angle);\n\n assert_eq!(rot.axis().unwrap(), axis);\n assert_eq!(rot.angle(), angle);\n assert_relative_eq!(rot * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(rot * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(Rotation3::from_scaled_axis(Vector3::<f32>::zeros()), Rotation3::identity());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4523},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":580787,"byte_end":580804,"line_start":425,"line_end":425,"column_start":12,"column_end":29},"name":"from_euler_angles","qualname":"<Rotation3<N>>::from_euler_angles","value":"fn (roll: N, pitch: N, yaw: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rotation from Euler angles.\n\n The primitive rotations are applied in order: 1 roll − 2 pitch − 3 yaw.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation3;\n let rot = Rotation3::from_euler_angles(0.1, 0.2, 0.3);\n let euler = rot.euler_angles();\n assert_relative_eq!(euler.0, 0.1, epsilon = 1.0e-6);\n assert_relative_eq!(euler.1, 0.2, epsilon = 1.0e-6);\n assert_relative_eq!(euler.2, 0.3, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":581481,"byte_end":581496,"line_start":447,"line_end":447,"column_start":12,"column_end":27},"name":"to_euler_angles","qualname":"<Rotation3<N>>::to_euler_angles","value":"fn (&self) -> (N, N, N)","parent":null,"children":[],"decl_id":null,"docs":" Creates Euler angles from a rotation.\n\n The angles are produced in the form (roll, pitch, yaw).\n","sig":null,"attributes":[{"value":"deprecated(note = \"This is renamed to use `.euler_angles()`.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":581404,"byte_end":581469,"line_start":446,"line_end":446,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4525},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":582121,"byte_end":582133,"line_start":465,"line_end":465,"column_start":12,"column_end":24},"name":"euler_angles","qualname":"<Rotation3<N>>::euler_angles","value":"fn (&self) -> (N, N, N)","parent":null,"children":[],"decl_id":null,"docs":" Euler angles corresponding to this rotation from a rotation.\n\n The angles are produced in the form (roll, pitch, yaw).\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Rotation3;\n let rot = Rotation3::from_euler_angles(0.1, 0.2, 0.3);\n let euler = rot.euler_angles();\n assert_relative_eq!(euler.0, 0.1, epsilon = 1.0e-6);\n assert_relative_eq!(euler.1, 0.2, epsilon = 1.0e-6);\n assert_relative_eq!(euler.2, 0.3, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":583135,"byte_end":583146,"line_start":487,"line_end":487,"column_start":12,"column_end":23},"name":"renormalize","qualname":"<Rotation3<N>>::renormalize","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure this rotation is an orthonormal rotation matrix. This is useful when repeated\n computations might cause the matrix from progressively not being orthonormal anymore.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":583114,"byte_end":583123,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4527},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":584212,"byte_end":584224,"line_start":516,"line_end":516,"column_start":12,"column_end":24},"name":"face_towards","qualname":"<Rotation3<N>>::face_towards","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation that corresponds to the local frame of an observer standing at the\n origin and looking toward `dir`.\n\n It maps the `z` axis to the direction `dir`.\n\n # Arguments\n   * dir - The look direction, that is, direction the matrix `z` axis will be aligned with.\n   * up - The vertical direction. The only requirement of this parameter is to not be\n   collinear to `dir`. Non-collinearity is not checked.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let rot = Rotation3::face_towards(&dir, &up);\n assert_relative_eq!(rot * Vector3::z(), dir.normalize());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":584191,"byte_end":584200,"line_start":515,"line_end":515,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4530},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":584795,"byte_end":584814,"line_start":532,"line_end":532,"column_start":12,"column_end":31},"name":"new_observer_frames","qualname":"<Rotation3<N>>::new_observer_frames","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Deprecated: Use [Rotation3::face_towards] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `face_towards`\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":584736,"byte_end":584783,"line_start":531,"line_end":531,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4533},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":585913,"byte_end":585923,"line_start":563,"line_end":563,"column_start":12,"column_end":22},"name":"look_at_rh","qualname":"<Rotation3<N>>::look_at_rh","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a right-handed look-at view matrix without translation.\n\n It maps the view direction `dir` to the **negative** `z` axis.\n This conforms to the common notion of right handed look-at matrix from the computer\n graphics community.\n\n # Arguments\n   * dir - The direction toward which the camera looks.\n   * up - A vector approximately aligned with required the vertical axis. The only\n   requirement of this parameter is to not be collinear to `dir`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let rot = Rotation3::look_at_rh(&dir, &up);\n assert_relative_eq!(rot * dir.normalize(), -Vector3::z());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":585892,"byte_end":585901,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4536},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":587036,"byte_end":587046,"line_start":594,"line_end":594,"column_start":12,"column_end":22},"name":"look_at_lh","qualname":"<Rotation3<N>>::look_at_lh","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a left-handed look-at view matrix without translation.\n\n It maps the view direction `dir` to the **positive** `z` axis.\n This conforms to the common notion of left handed look-at matrix from the computer\n graphics community.\n\n # Arguments\n   * dir - The direction toward which the camera looks.\n   * up - A vector approximately aligned with required the vertical axis. The only\n   requirement of this parameter is to not be collinear to `dir`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Rotation3, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let rot = Rotation3::look_at_lh(&dir, &up);\n assert_relative_eq!(rot * dir.normalize(), Vector3::z());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":587015,"byte_end":587024,"line_start":593,"line_end":593,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4539},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":587870,"byte_end":587886,"line_start":617,"line_end":617,"column_start":12,"column_end":28},"name":"rotation_between","qualname":"<Rotation3<N>>::rotation_between","value":"fn <SB, SC> (a: &Vector<N, U3, SB>, b: &Vector<N, U3, SC>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The rotation matrix required to align `a` and `b` but with its angle.\n\n This is the rotation `R` such that `(R * a).angle(b) == 0 && (R * a).dot(b).is_positive()`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector3, Rotation3};\n let a = Vector3::new(1.0, 2.0, 3.0);\n let b = Vector3::new(3.0, 1.0, 2.0);\n let rot = Rotation3::rotation_between(&a, &b).unwrap();\n assert_relative_eq!(rot * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(rot.inverse() * b, a, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":587849,"byte_end":587858,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4542},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":588791,"byte_end":588814,"line_start":640,"line_end":640,"column_start":12,"column_end":35},"name":"scaled_rotation_between","qualname":"<Rotation3<N>>::scaled_rotation_between","value":"fn <SB, SC> (a: &Vector<N, U3, SB>, b: &Vector<N, U3, SC>, n: N) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector3, Rotation3};\n let a = Vector3::new(1.0, 2.0, 3.0);\n let b = Vector3::new(3.0, 1.0, 2.0);\n let rot2 = Rotation3::scaled_rotation_between(&a, &b, 0.2).unwrap();\n let rot5 = Rotation3::scaled_rotation_between(&a, &b, 0.5).unwrap();\n assert_relative_eq!(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(rot5 * rot5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":588770,"byte_end":588779,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":590059,"byte_end":590064,"line_start":681,"line_end":681,"column_start":12,"column_end":17},"name":"angle","qualname":"<Rotation3<N>>::angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle in [0; pi].\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Unit, Rotation3, Vector3};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let rot = Rotation3::from_axis_angle(&axis, 1.78);\n assert_relative_eq!(rot.angle(), 1.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":590038,"byte_end":590047,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4546},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":590829,"byte_end":590833,"line_start":703,"line_end":703,"column_start":12,"column_end":16},"name":"axis","qualname":"<Rotation3<N>>::axis","value":"fn (&self) -> Option<Unit<Vector3<N>>>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis. Returns `None` if the rotation angle is zero or PI.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = Rotation3::from_axis_angle(&axis, angle);\n assert_relative_eq!(rot.axis().unwrap(), axis);\n\n // Case with a zero angle.\n let rot = Rotation3::from_axis_angle(&axis, 0.0);\n assert!(rot.axis().is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":590808,"byte_end":590817,"line_start":702,"line_end":702,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4547},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":591565,"byte_end":591576,"line_start":724,"line_end":724,"column_start":12,"column_end":23},"name":"scaled_axis","qualname":"<Rotation3<N>>::scaled_axis","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis multiplied by the rotation angle.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3, Unit};\n let axisangle = Vector3::new(0.1, 0.2, 0.3);\n let rot = Rotation3::new(axisangle);\n assert_relative_eq!(rot.scaled_axis(), axisangle, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":591544,"byte_end":591553,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":592495,"byte_end":592505,"line_start":752,"line_end":752,"column_start":12,"column_end":22},"name":"axis_angle","qualname":"<Rotation3<N>>::axis_angle","value":"fn (&self) -> Option<(Unit<Vector3<N>>, N)>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis and angle in ]0, pi] of this unit quaternion.\n\n Returns `None` if the angle is zero.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = Rotation3::from_axis_angle(&axis, angle);\n let axis_angle = rot.axis_angle().unwrap();\n assert_relative_eq!(axis_angle.0, axis);\n assert_relative_eq!(axis_angle.1, angle);\n\n // Case with a zero angle.\n let rot = Rotation3::from_axis_angle(&axis, 0.0);\n assert!(rot.axis_angle().is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":592474,"byte_end":592483,"line_start":751,"line_end":751,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4549},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":593140,"byte_end":593148,"line_start":771,"line_end":771,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Rotation3<N>>::angle_to","value":"fn (&self, other: &Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle needed to make `self` and `other` coincide.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3};\n let rot1 = Rotation3::from_axis_angle(&Vector3::y_axis(), 1.0);\n let rot2 = Rotation3::from_axis_angle(&Vector3::x_axis(), 0.1);\n assert_relative_eq!(rot1.angle_to(&rot2), 1.0045657, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":593119,"byte_end":593128,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":593803,"byte_end":593814,"line_start":789,"line_end":789,"column_start":12,"column_end":23},"name":"rotation_to","qualname":"<Rotation3<N>>::rotation_to","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rotation matrix needed to make `self` and `other` coincide.\n\n The result is such that: `self.rotation_to(other) * self == other`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3};\n let rot1 = Rotation3::from_axis_angle(&Vector3::y_axis(), 1.0);\n let rot2 = Rotation3::from_axis_angle(&Vector3::x_axis(), 0.1);\n let rot_to = rot1.rotation_to(&rot2);\n assert_relative_eq!(rot_to * rot1, rot2, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":593782,"byte_end":593791,"line_start":788,"line_end":788,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4551},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":594530,"byte_end":594534,"line_start":808,"line_end":808,"column_start":12,"column_end":16},"name":"powf","qualname":"<Rotation3<N>>::powf","value":"fn (&self, n: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raise the quaternion to a given floating power, i.e., returns the rotation with the same\n axis as `self` and an angle equal to `self.angle()` multiplied by `n`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = Rotation3::from_axis_angle(&axis, angle);\n let pow = rot.powf(2.0);\n assert_relative_eq!(pow.axis().unwrap(), axis, epsilon = 1.0e-6);\n assert_eq!(pow.angle(), 2.4);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":594509,"byte_end":594518,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":18027},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597221,"byte_end":597231,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"Quaternion","qualname":"::geometry::quaternion::Quaternion","value":"Quaternion { coords }","parent":null,"children":[{"krate":0,"index":18029}],"decl_id":null,"docs":" A quaternion. See the type alias `UnitQuaternion = Unit<Quaternion>` for a quaternion\n that may be used as a rotation.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597182,"byte_end":597192,"line_start":26,"line_end":26,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":18029},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597349,"byte_end":597355,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"name":"coords","qualname":"::geometry::quaternion::Quaternion::coords","value":"base::matrix::Matrix<N, base::dimension::U4, base::dimension::U1, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, base::dimension::U4>>::Buffer>","parent":{"krate":0,"index":18027},"children":[],"decl_id":null,"docs":" This quaternion as a 4D vector of coordinates in the `[ x, y, z, w ]` storage order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4601},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599298,"byte_end":599308,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Quaternion<N>>::into_owned","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Moves this unit quaternion into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599185,"byte_end":599194,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This method is a no-op and will be removed in a future release.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599199,"byte_end":599286,"line_start":100,"line_end":100,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":4602},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599527,"byte_end":599538,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"clone_owned","qualname":"<Quaternion<N>>::clone_owned","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones this unit quaternion into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599414,"byte_end":599423,"line_start":106,"line_end":106,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This method is a no-op and will be removed in a future release.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599428,"byte_end":599515,"line_start":107,"line_end":107,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":4603},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599943,"byte_end":599952,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Quaternion<N>>::normalize","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let q_normalized = q.normalize();\n relative_eq!(q_normalized.norm(), 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599922,"byte_end":599931,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4604},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":600093,"byte_end":600097,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"imag","qualname":"<Quaternion<N>>::imag","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" The imaginary part of this quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":600072,"byte_end":600081,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4605},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":600480,"byte_end":600489,"line_start":143,"line_end":143,"column_start":12,"column_end":21},"name":"conjugate","qualname":"<Quaternion<N>>::conjugate","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The conjugate of this quaternion.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let conj = q.conjugate();\n assert!(conj.i == -2.0 && conj.j == -3.0 && conj.k == -4.0 && conj.w == 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":600459,"byte_end":600468,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4606},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":601142,"byte_end":601153,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<Quaternion<N>>::try_inverse","value":"fn (&self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Inverts this quaternion if it is not zero.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let inv_q = q.try_inverse();\n\n assert!(inv_q.is_some());\n assert_relative_eq!(inv_q.unwrap() * q, Quaternion::identity());\n\n //Non-invertible case\n let q = Quaternion::new(0.0, 0.0, 0.0, 0.0);\n let inv_q = q.try_inverse();\n\n assert!(inv_q.is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":601121,"byte_end":601130,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4607},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":601764,"byte_end":601768,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Quaternion<N>>::lerp","value":"fn (&self, other: &Self, t: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two quaternion.\n\n Computes `self * (1 - t) + other * t`.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q1 = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let q2 = Quaternion::new(10.0, 20.0, 30.0, 40.0);\n\n assert_eq!(q1.lerp(&q2, 0.1), Quaternion::new(1.9, 3.8, 5.7, 7.6));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":601743,"byte_end":601752,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4608},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":602195,"byte_end":602201,"line_start":204,"line_end":204,"column_start":12,"column_end":18},"name":"vector","qualname":"<Quaternion<N>>::vector","value":"fn (&self) -> MatrixSlice<N, U3, U1, RStride<N, U4, U1>, CStride<N, U4, U1>>","parent":null,"children":[],"decl_id":null,"docs":" The vector part `(i, j, k)` of this quaternion.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_eq!(q.vector()[0], 2.0);\n assert_eq!(q.vector()[1], 3.0);\n assert_eq!(q.vector()[2], 4.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":602174,"byte_end":602183,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4609},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":602573,"byte_end":602579,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"scalar","qualname":"<Quaternion<N>>::scalar","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The scalar part `w` of this quaternion.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_eq!(q.scalar(), 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":602552,"byte_end":602561,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4610},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603078,"byte_end":603087,"line_start":232,"line_end":232,"column_start":12,"column_end":21},"name":"as_vector","qualname":"<Quaternion<N>>::as_vector","value":"fn (&self) -> &Vector4<N>","parent":null,"children":[],"decl_id":null,"docs":" Reinterprets this quaternion as a 4D vector.\n\n # Example\n ```\n # use nalgebra::{Vector4, Quaternion};\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n // Recall that the quaternion is stored internally as (i, j, k, w)\n // while the crate::new constructor takes the arguments as (w, i, j, k).\n assert_eq!(*q.as_vector(), Vector4::new(2.0, 3.0, 4.0, 1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603057,"byte_end":603066,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4611},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603454,"byte_end":603458,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"norm","qualname":"<Quaternion<N>>::norm","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The norm of this quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_relative_eq!(q.norm(), 5.47722557, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603433,"byte_end":603442,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4612},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603910,"byte_end":603919,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"magnitude","qualname":"<Quaternion<N>>::magnitude","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" A synonym for the norm of this quaternion.\n\n Aka the length.\n This is the same as `.norm()`\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_relative_eq!(q.magnitude(), 5.47722557, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":603889,"byte_end":603898,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":604219,"byte_end":604231,"line_start":276,"line_end":276,"column_start":12,"column_end":24},"name":"norm_squared","qualname":"<Quaternion<N>>::norm_squared","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The squared norm of this quaternion.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_eq!(q.magnitude_squared(), 30.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":604198,"byte_end":604207,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4614},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":604646,"byte_end":604663,"line_start":292,"line_end":292,"column_start":12,"column_end":29},"name":"magnitude_squared","qualname":"<Quaternion<N>>::magnitude_squared","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" A synonym for the squared norm of this quaternion.\n\n Aka the squared length.\n This is the same as `.norm_squared()`\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_eq!(q.magnitude_squared(), 30.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":604625,"byte_end":604634,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4615},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":605015,"byte_end":605018,"line_start":306,"line_end":306,"column_start":12,"column_end":15},"name":"dot","qualname":"<Quaternion<N>>::dot","value":"fn (&self, rhs: &Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The dot product of two quaternions.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q1 = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let q2 = Quaternion::new(5.0, 6.0, 7.0, 8.0);\n assert_eq!(q1.dot(&q2), 70.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":604994,"byte_end":605003,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4616},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":605678,"byte_end":605683,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"inner","qualname":"<Quaternion<N>>::inner","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the inner product (also known as the dot product).\n See \"Foundations of Game Engine Development, Volume 1: Mathematics\" by Lengyel\n Formula 4.89.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let a = Quaternion::new(0.0, 2.0, 3.0, 4.0);\n let b = Quaternion::new(0.0, 5.0, 2.0, 1.0);\n let expected = Quaternion::new(-20.0, 0.0, 0.0, 0.0);\n let result = a.inner(&b);\n assert_relative_eq!(expected, result, epsilon = 1.0e-5);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":605657,"byte_end":605666,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4617},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":606372,"byte_end":606377,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"outer","qualname":"<Quaternion<N>>::outer","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the outer product (also known as the wedge product).\n See \"Foundations of Game Engine Development, Volume 1: Mathematics\" by Lengyel\n Formula 4.89.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let a = Quaternion::new(0.0, 2.0, 3.0, 4.0);\n let b = Quaternion::new(0.0, 5.0, 2.0, 1.0);\n let expected = Quaternion::new(0.0, -5.0, 18.0, -11.0);\n let result = a.outer(&b);\n assert_relative_eq!(expected, result, epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":606351,"byte_end":606360,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4618},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":607132,"byte_end":607139,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"project","qualname":"<Quaternion<N>>::project","value":"fn (&self, other: &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the projection of `self` onto `other` (also known as the parallel).\n See \"Foundations of Game Engine Development, Volume 1: Mathematics\" by Lengyel\n Formula 4.94.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let a = Quaternion::new(0.0, 2.0, 3.0, 4.0);\n let b = Quaternion::new(0.0, 5.0, 2.0, 1.0);\n let expected = Quaternion::new(0.0, 3.333333333333333, 1.3333333333333333, 0.6666666666666666);\n let result = a.project(&b).unwrap();\n assert_relative_eq!(expected, result, epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":607111,"byte_end":607120,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4619},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":607905,"byte_end":607911,"line_start":381,"line_end":381,"column_start":12,"column_end":18},"name":"reject","qualname":"<Quaternion<N>>::reject","value":"fn (&self, other: &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Calculates the rejection of `self` from `other` (also known as the perpendicular).\n See \"Foundations of Game Engine Development, Volume 1: Mathematics\" by Lengyel\n Formula 4.94.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let a = Quaternion::new(0.0, 2.0, 3.0, 4.0);\n let b = Quaternion::new(0.0, 5.0, 2.0, 1.0);\n let expected = Quaternion::new(0.0, -1.3333333333333333, 1.6666666666666665, 3.3333333333333335);\n let result = a.reject(&b).unwrap();\n assert_relative_eq!(expected, result, epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":607884,"byte_end":607893,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":608621,"byte_end":608640,"line_start":400,"line_end":400,"column_start":12,"column_end":31},"name":"polar_decomposition","qualname":"<Quaternion<N>>::polar_decomposition","value":"fn (&self) -> (N, N, Option<Unit<Vector3<N>>>)","parent":null,"children":[],"decl_id":null,"docs":" The polar decomposition of this quaternion.\n\n Returns, from left to right: the quaternion norm, the half rotation angle, the rotation\n axis. If the rotation angle is zero, the rotation axis is set to `None`.\n\n # Example\n ```\n # use std::f32;\n # use nalgebra::{Vector3, Quaternion};\n let q = Quaternion::new(0.0, 5.0, 0.0, 0.0);\n let (norm, half_ang, axis) = q.polar_decomposition();\n assert_eq!(norm, 5.0);\n assert_eq!(half_ang, f32::consts::FRAC_PI_2);\n assert_eq!(axis, Some(Vector3::x_axis()));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4621},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":609461,"byte_end":609463,"line_start":424,"line_end":424,"column_start":12,"column_end":14},"name":"ln","qualname":"<Quaternion<N>>::ln","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute the natural logarithm of a quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(2.0, 5.0, 0.0, 0.0);\n assert_relative_eq!(q.ln(), Quaternion::new(1.683647, 1.190289, 0.0, 0.0), epsilon = 1.0e-6)\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":609440,"byte_end":609449,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":610004,"byte_end":610007,"line_start":442,"line_end":442,"column_start":12,"column_end":15},"name":"exp","qualname":"<Quaternion<N>>::exp","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute the exponential of a quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.683647, 1.190289, 0.0, 0.0);\n assert_relative_eq!(q.exp(), Quaternion::new(2.0, 5.0, 0.0, 0.0), epsilon = 1.0e-5)\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":609983,"byte_end":609992,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4623},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":610699,"byte_end":610706,"line_start":461,"line_end":461,"column_start":12,"column_end":19},"name":"exp_eps","qualname":"<Quaternion<N>>::exp_eps","value":"fn (&self, eps: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute the exponential of a quaternion. Returns the identity if the vector part of this quaternion\n has a norm smaller than `eps`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.683647, 1.190289, 0.0, 0.0);\n assert_relative_eq!(q.exp_eps(1.0e-6), Quaternion::new(2.0, 5.0, 0.0, 0.0), epsilon = 1.0e-5);\n\n // Singular case.\n let q = Quaternion::new(0.0000001, 0.0, 0.0, 0.0);\n assert_eq!(q.exp_eps(1.0e-6), Quaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":610678,"byte_end":610687,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":611453,"byte_end":611457,"line_start":486,"line_end":486,"column_start":12,"column_end":16},"name":"powf","qualname":"<Quaternion<N>>::powf","value":"fn (&self, n: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raise the quaternion to a given floating power.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert_relative_eq!(q.powf(1.5), Quaternion::new( -6.2576659, 4.1549037, 6.2323556, 8.3098075), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":611432,"byte_end":611441,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4625},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":611905,"byte_end":611918,"line_start":500,"line_end":500,"column_start":12,"column_end":25},"name":"as_vector_mut","qualname":"<Quaternion<N>>::as_vector_mut","value":"fn (&mut self) -> &mut Vector4<N>","parent":null,"children":[],"decl_id":null,"docs":" Transforms this quaternion into its 4D vector form (Vector part, Scalar part).\n\n # Example\n ```\n # use nalgebra::{Quaternion, Vector4};\n let mut q = Quaternion::identity();\n *q.as_vector_mut() = Vector4::new(1.0, 2.0, 3.0, 4.0);\n assert!(q.i == 1.0 && q.j == 2.0 && q.k == 3.0 && q.w == 4.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":611884,"byte_end":611893,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":612416,"byte_end":612426,"line_start":519,"line_end":519,"column_start":12,"column_end":22},"name":"vector_mut","qualname":"<Quaternion<N>>::vector_mut","value":"fn (&mut self) -> MatrixSliceMut<N, U3, U1, RStride<N, U4, U1>, CStride<N, U4, U1>>","parent":null,"children":[],"decl_id":null,"docs":" The mutable vector part `(i, j, k)` of this quaternion.\n\n # Example\n ```\n # use nalgebra::{Quaternion, Vector4};\n let mut q = Quaternion::identity();\n {\n     let mut v = q.vector_mut();\n     v[0] = 2.0;\n     v[1] = 3.0;\n     v[2] = 4.0;\n }\n assert!(q.i == 2.0 && q.j == 3.0 && q.k == 4.0 && q.w == 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":612395,"byte_end":612404,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4627},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":612895,"byte_end":612908,"line_start":535,"line_end":535,"column_start":12,"column_end":25},"name":"conjugate_mut","qualname":"<Quaternion<N>>::conjugate_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replaces this quaternion by its conjugate.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let mut q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n q.conjugate_mut();\n assert!(q.i == -2.0 && q.j == -3.0 && q.k == -4.0 && q.w == 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":612874,"byte_end":612883,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4628},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":613601,"byte_end":613616,"line_start":557,"line_end":557,"column_start":12,"column_end":27},"name":"try_inverse_mut","qualname":"<Quaternion<N>>::try_inverse_mut","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Inverts this quaternion in-place if it is not zero.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let mut q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n\n assert!(q.try_inverse_mut());\n assert_relative_eq!(q * Quaternion::new(1.0, 2.0, 3.0, 4.0), Quaternion::identity());\n\n //Non-invertible case\n let mut q = Quaternion::new(0.0, 0.0, 0.0, 0.0);\n assert!(!q.try_inverse_mut());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":613580,"byte_end":613589,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4629},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614204,"byte_end":614217,"line_start":581,"line_end":581,"column_start":12,"column_end":25},"name":"normalize_mut","qualname":"<Quaternion<N>>::normalize_mut","value":"fn (&mut self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Normalizes this quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let mut q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n q.normalize_mut();\n assert_relative_eq!(q.norm(), 1.0);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614183,"byte_end":614192,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4630},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614347,"byte_end":614354,"line_start":587,"line_end":587,"column_start":12,"column_end":19},"name":"squared","qualname":"<Quaternion<N>>::squared","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates square of a quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614326,"byte_end":614335,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4631},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614461,"byte_end":614465,"line_start":593,"line_end":593,"column_start":12,"column_end":16},"name":"half","qualname":"<Quaternion<N>>::half","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Divides quaternion into two.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614440,"byte_end":614449,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4632},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614585,"byte_end":614589,"line_start":599,"line_end":599,"column_start":12,"column_end":16},"name":"sqrt","qualname":"<Quaternion<N>>::sqrt","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates square root.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614564,"byte_end":614573,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614719,"byte_end":614726,"line_start":605,"line_end":605,"column_start":12,"column_end":19},"name":"is_pure","qualname":"<Quaternion<N>>::is_pure","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the quaternion is pure.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614698,"byte_end":614707,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4634},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614848,"byte_end":614852,"line_start":611,"line_end":611,"column_start":12,"column_end":16},"name":"pure","qualname":"<Quaternion<N>>::pure","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert quaternion to pure quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":614827,"byte_end":614836,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4635},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":615048,"byte_end":615056,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"left_div","qualname":"<Quaternion<N>>::left_div","value":"fn (&self, other: &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Left quaternionic division.\n\n Calculates B<sup>-1</sup> * A where A = self, B = other.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":615027,"byte_end":615036,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4637},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":615744,"byte_end":615753,"line_start":638,"line_end":638,"column_start":12,"column_end":21},"name":"right_div","qualname":"<Quaternion<N>>::right_div","value":"fn (&self, other: &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Right quaternionic division.\n\n Calculates A * B<sup>-1</sup> where A = self, B = other.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let a = Quaternion::new(0.0, 1.0, 2.0, 3.0);\n let b = Quaternion::new(0.0, 5.0, 2.0, 1.0);\n let result = a.right_div(&b).unwrap();\n let expected = Quaternion::new(0.4, 0.13333333333333336, -0.4666666666666667, 0.26666666666666666);\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":615723,"byte_end":615732,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4639},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":616325,"byte_end":616328,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"cos","qualname":"<Quaternion<N>>::cos","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic cosinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(58.93364616794395, -34.086183690465596, -51.1292755356984, -68.17236738093119);\n let result = input.cos();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":616304,"byte_end":616313,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":616867,"byte_end":616871,"line_start":671,"line_end":671,"column_start":12,"column_end":16},"name":"acos","qualname":"<Quaternion<N>>::acos","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic arccosinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let result = input.cos().acos();\n assert_relative_eq!(input, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":616846,"byte_end":616855,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4641},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":617551,"byte_end":617554,"line_start":692,"line_end":692,"column_start":12,"column_end":15},"name":"sin","qualname":"<Quaternion<N>>::sin","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic sinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(91.78371578403467, 21.886486853029176, 32.82973027954377, 43.77297370605835);\n let result = input.sin();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":617530,"byte_end":617539,"line_start":691,"line_end":691,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4642},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":618090,"byte_end":618094,"line_start":709,"line_end":709,"column_start":12,"column_end":16},"name":"asin","qualname":"<Quaternion<N>>::asin","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic arcsinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let result = input.sin().asin();\n assert_relative_eq!(input, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":618069,"byte_end":618078,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":618789,"byte_end":618792,"line_start":730,"line_end":730,"column_start":12,"column_end":15},"name":"tan","qualname":"<Quaternion<N>>::tan","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic tangent.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(0.00003821631725009489, 0.3713971716439371, 0.5570957574659058, 0.7427943432878743);\n let result = input.tan();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":618768,"byte_end":618777,"line_start":729,"line_end":729,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":619231,"byte_end":619235,"line_start":745,"line_end":745,"column_start":12,"column_end":16},"name":"atan","qualname":"<Quaternion<N>>::atan","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the quaternionic arctangent.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let result = input.tan().atan();\n assert_relative_eq!(input, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":619210,"byte_end":619219,"line_start":744,"line_end":744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":619960,"byte_end":619964,"line_start":766,"line_end":766,"column_start":12,"column_end":16},"name":"sinh","qualname":"<Quaternion<N>>::sinh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic sinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(0.7323376060463428, -0.4482074499805421, -0.6723111749708133, -0.8964148999610843);\n let result = input.sinh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":619939,"byte_end":619948,"line_start":765,"line_end":765,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":620520,"byte_end":620525,"line_start":782,"line_end":782,"column_start":12,"column_end":17},"name":"asinh","qualname":"<Quaternion<N>>::asinh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic arcsinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(2.385889902585242, 0.514052600662788, 0.7710789009941821, 1.028105201325576);\n let result = input.asinh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":620499,"byte_end":620508,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":621139,"byte_end":621143,"line_start":799,"line_end":799,"column_start":12,"column_end":16},"name":"cosh","qualname":"<Quaternion<N>>::cosh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic cosinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(0.9615851176369566, -0.3413521745610167, -0.5120282618415251, -0.6827043491220334);\n let result = input.cosh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":621118,"byte_end":621127,"line_start":798,"line_end":798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4648},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":621704,"byte_end":621709,"line_start":815,"line_end":815,"column_start":12,"column_end":17},"name":"acosh","qualname":"<Quaternion<N>>::acosh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic arccosinus.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(2.4014472020074007, 0.5162761016176176, 0.7744141524264264, 1.0325522032352352);\n let result = input.acosh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":621683,"byte_end":621692,"line_start":814,"line_end":814,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4649},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":622342,"byte_end":622346,"line_start":832,"line_end":832,"column_start":12,"column_end":16},"name":"tanh","qualname":"<Quaternion<N>>::tanh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic tangent.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(1.0248695360556623, -0.10229568178876419, -0.1534435226831464, -0.20459136357752844);\n let result = input.tanh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":622321,"byte_end":622330,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4650},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":622917,"byte_end":622922,"line_start":848,"line_end":848,"column_start":12,"column_end":17},"name":"atanh","qualname":"<Quaternion<N>>::atanh","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the hyperbolic quaternionic arctangent.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Quaternion;\n let input = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n let expected = Quaternion::new(0.03230293287000163, 0.5173453683196951, 0.7760180524795426, 1.0346907366393903);\n let result = input.atanh();\n assert_relative_eq!(expected, result, epsilon = 1.0e-7);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":622896,"byte_end":622905,"line_start":847,"line_end":847,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":4670},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625042,"byte_end":625056,"line_start":915,"line_end":915,"column_start":10,"column_end":24},"name":"UnitQuaternion","qualname":"::geometry::quaternion::UnitQuaternion","value":"Unit<Quaternion<N>>","parent":null,"children":[],"decl_id":null,"docs":" A unit quaternions. May be used to represent a rotation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625346,"byte_end":625356,"line_start":923,"line_end":923,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<UnitQuaternion<N>>::into_owned","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Moves this unit quaternion into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625191,"byte_end":625200,"line_start":919,"line_end":919,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This method is unnecessary and will be removed in a future release. Use `.clone()` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625205,"byte_end":625334,"line_start":920,"line_end":922,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":4675},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625617,"byte_end":625628,"line_start":932,"line_end":932,"column_start":12,"column_end":23},"name":"clone_owned","qualname":"<UnitQuaternion<N>>::clone_owned","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clones this unit quaternion into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625462,"byte_end":625471,"line_start":928,"line_end":928,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This method is unnecessary and will be removed in a future release. Use `.clone()` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625476,"byte_end":625605,"line_start":929,"line_end":931,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":626034,"byte_end":626039,"line_start":946,"line_end":946,"column_start":12,"column_end":17},"name":"angle","qualname":"<UnitQuaternion<N>>::angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle in [0; pi] of this unit quaternion.\n\n # Example\n ```\n # use nalgebra::{Unit, UnitQuaternion, Vector3};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let rot = UnitQuaternion::from_axis_angle(&axis, 1.78);\n assert_eq!(rot.angle(), 1.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":626013,"byte_end":626022,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":626511,"byte_end":626521,"line_start":962,"line_end":962,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<UnitQuaternion<N>>::quaternion","value":"fn (&self) -> &Quaternion<N>","parent":null,"children":[],"decl_id":null,"docs":" The underlying quaternion.\n\n Same as `self.as_ref()`.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Quaternion};\n let axis = UnitQuaternion::identity();\n assert_eq!(*axis.quaternion(), Quaternion::new(1.0, 0.0, 0.0, 0.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":626490,"byte_end":626499,"line_start":961,"line_end":961,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4678},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":627007,"byte_end":627016,"line_start":977,"line_end":977,"column_start":12,"column_end":21},"name":"conjugate","qualname":"<UnitQuaternion<N>>::conjugate","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute the conjugate of this unit quaternion.\n\n # Example\n ```\n # use nalgebra::{Unit, UnitQuaternion, Vector3};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let rot = UnitQuaternion::from_axis_angle(&axis, 1.78);\n let conj = rot.conjugate();\n assert_eq!(conj, UnitQuaternion::from_axis_angle(&-axis, 1.78));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":626986,"byte_end":626995,"line_start":976,"line_end":976,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4679},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":627563,"byte_end":627570,"line_start":993,"line_end":993,"column_start":12,"column_end":19},"name":"inverse","qualname":"<UnitQuaternion<N>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inverts this quaternion if it is not zero.\n\n # Example\n ```\n # use nalgebra::{Unit, UnitQuaternion, Vector3};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let rot = UnitQuaternion::from_axis_angle(&axis, 1.78);\n let inv = rot.inverse();\n assert_eq!(rot * inv, UnitQuaternion::identity());\n assert_eq!(inv * rot, UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":627542,"byte_end":627551,"line_start":992,"line_end":992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":628095,"byte_end":628103,"line_start":1008,"line_end":1008,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<UnitQuaternion<N>>::angle_to","value":"fn (&self, other: &Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle needed to make `self` and `other` coincide.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitQuaternion, Vector3};\n let rot1 = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 1.0);\n let rot2 = UnitQuaternion::from_axis_angle(&Vector3::x_axis(), 0.1);\n assert_relative_eq!(rot1.angle_to(&rot2), 1.0045657, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":628074,"byte_end":628083,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4681},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":628800,"byte_end":628811,"line_start":1027,"line_end":1027,"column_start":12,"column_end":23},"name":"rotation_to","qualname":"<UnitQuaternion<N>>::rotation_to","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The unit quaternion needed to make `self` and `other` coincide.\n\n The result is such that: `self.rotation_to(other) * self == other`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitQuaternion, Vector3};\n let rot1 = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), 1.0);\n let rot2 = UnitQuaternion::from_axis_angle(&Vector3::x_axis(), 0.1);\n let rot_to = rot1.rotation_to(&rot2);\n assert_relative_eq!(rot_to * rot1, rot2, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":628779,"byte_end":628788,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4682},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":629350,"byte_end":629354,"line_start":1043,"line_end":1043,"column_start":12,"column_end":16},"name":"lerp","qualname":"<UnitQuaternion<N>>::lerp","value":"fn (&self, other: &Self, t: N) -> Quaternion<N>","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two unit quaternions.\n\n The result is not normalized.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Quaternion};\n let q1 = UnitQuaternion::new_normalize(Quaternion::new(1.0, 0.0, 0.0, 0.0));\n let q2 = UnitQuaternion::new_normalize(Quaternion::new(0.0, 1.0, 0.0, 0.0));\n assert_eq!(q1.lerp(&q2, 0.1), Quaternion::new(0.9, 0.1, 0.0, 0.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":629329,"byte_end":629338,"line_start":1042,"line_end":1042,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4683},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":630017,"byte_end":630022,"line_start":1059,"line_end":1059,"column_start":12,"column_end":17},"name":"nlerp","qualname":"<UnitQuaternion<N>>::nlerp","value":"fn (&self, other: &Self, t: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Normalized linear interpolation between two unit quaternions.\n\n This is the same as `self.lerp` except that the result is normalized.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Quaternion};\n let q1 = UnitQuaternion::new_normalize(Quaternion::new(1.0, 0.0, 0.0, 0.0));\n let q2 = UnitQuaternion::new_normalize(Quaternion::new(0.0, 1.0, 0.0, 0.0));\n assert_eq!(q1.nlerp(&q2, 0.1), UnitQuaternion::new_normalize(Quaternion::new(0.9, 0.1, 0.0, 0.0)));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":629996,"byte_end":630005,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":630458,"byte_end":630463,"line_start":1071,"line_end":1071,"column_start":12,"column_end":17},"name":"slerp","qualname":"<UnitQuaternion<N>>::slerp","value":"fn (&self, other: &Self, t: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between two unit quaternions.\n\n Panics if the angle between both quaternion is 180 degrees (in which case the interpolation\n is not well-defined). Use `.try_slerp` instead to avoid the panic.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":630437,"byte_end":630446,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4685},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":631304,"byte_end":631313,"line_start":1090,"line_end":1090,"column_start":12,"column_end":21},"name":"try_slerp","qualname":"<UnitQuaternion<N>>::try_slerp","value":"fn (&self, other: &Self, t: N, epsilon: N) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the spherical linear interpolation between two unit quaternions or returns `None`\n if both quaternions are approximately 180 degrees apart (in which case the interpolation is\n not well-defined).\n\n # Arguments\n * `self`: the first quaternion to interpolate from.\n * `other`: the second quaternion to interpolate toward.\n * `t`: the interpolation parameter. Should be between 0 and 1.\n * `epsilon`: the value below which the sinus of the angle separating both quaternion\n must be to return `None`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":631283,"byte_end":631292,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":631698,"byte_end":631711,"line_start":1104,"line_end":1104,"column_start":12,"column_end":25},"name":"conjugate_mut","qualname":"<UnitQuaternion<N>>::conjugate_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the conjugate of this unit quaternion in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":631677,"byte_end":631686,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":632331,"byte_end":632342,"line_start":1121,"line_end":1121,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<UnitQuaternion<N>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts this quaternion if it is not zero.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitQuaternion, Vector3, Unit};\n let axisangle = Vector3::new(0.1, 0.2, 0.3);\n let mut rot = UnitQuaternion::new(axisangle);\n rot.inverse_mut();\n assert_relative_eq!(rot * UnitQuaternion::new(axisangle), UnitQuaternion::identity());\n assert_relative_eq!(UnitQuaternion::new(axisangle) * rot, UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":632310,"byte_end":632319,"line_start":1120,"line_end":1120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":632976,"byte_end":632980,"line_start":1140,"line_end":1140,"column_start":12,"column_end":16},"name":"axis","qualname":"<UnitQuaternion<N>>::axis","value":"fn (&self) -> Option<Unit<Vector3<N>>>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis of this unit quaternion or `None` if the rotation is zero.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = UnitQuaternion::from_axis_angle(&axis, angle);\n assert_eq!(rot.axis(), Some(axis));\n\n // Case with a zero angle.\n let rot = UnitQuaternion::from_axis_angle(&axis, 0.0);\n assert!(rot.axis().is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":632955,"byte_end":632964,"line_start":1139,"line_end":1139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":633676,"byte_end":633687,"line_start":1161,"line_end":1161,"column_start":12,"column_end":23},"name":"scaled_axis","qualname":"<UnitQuaternion<N>>::scaled_axis","value":"fn (&self) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis of this unit quaternion multiplied by the rotation angle.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitQuaternion, Vector3, Unit};\n let axisangle = Vector3::new(0.1, 0.2, 0.3);\n let rot = UnitQuaternion::new(axisangle);\n assert_relative_eq!(rot.scaled_axis(), axisangle, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":633655,"byte_end":633664,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4691},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":634486,"byte_end":634496,"line_start":1186,"line_end":1186,"column_start":12,"column_end":22},"name":"axis_angle","qualname":"<UnitQuaternion<N>>::axis_angle","value":"fn (&self) -> Option<(Unit<Vector3<N>>, N)>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis and angle in ]0, pi] of this unit quaternion.\n\n Returns `None` if the angle is zero.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = UnitQuaternion::from_axis_angle(&axis, angle);\n assert_eq!(rot.axis_angle(), Some((axis, angle)));\n\n // Case with a zero angle.\n let rot = UnitQuaternion::from_axis_angle(&axis, 0.0);\n assert!(rot.axis_angle().is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":634465,"byte_end":634474,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4693},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":634774,"byte_end":634777,"line_start":1194,"line_end":1194,"column_start":12,"column_end":15},"name":"exp","qualname":"<UnitQuaternion<N>>::exp","value":"fn (&self) -> Quaternion<N>","parent":null,"children":[],"decl_id":null,"docs":" Compute the exponential of a quaternion.\n\n Note that this function yields a `Quaternion<N>` because it loses the unit property.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":634753,"byte_end":634762,"line_start":1193,"line_end":1193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":635493,"byte_end":635495,"line_start":1213,"line_end":1213,"column_start":12,"column_end":14},"name":"ln","qualname":"<UnitQuaternion<N>>::ln","value":"fn (&self) -> Quaternion<N>","parent":null,"children":[],"decl_id":null,"docs":" Compute the natural logarithm of a quaternion.\n\n Note that this function yields a `Quaternion<N>` because it loses the unit property.\n The vector part of the return value corresponds to the axis-angle representation (divided\n by 2.0) of this unit quaternion.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector3, UnitQuaternion};\n let axisangle = Vector3::new(0.1, 0.2, 0.3);\n let q = UnitQuaternion::new(axisangle);\n assert_relative_eq!(q.ln().vector().into_owned(), axisangle, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":635472,"byte_end":635481,"line_start":1212,"line_end":1212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4695},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":636366,"byte_end":636370,"line_start":1238,"line_end":1238,"column_start":12,"column_end":16},"name":"powf","qualname":"<UnitQuaternion<N>>::powf","value":"fn (&self, n: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raise the quaternion to a given floating power.\n\n This returns the unit quaternion that identifies a rotation with axis `self.axis()` and\n angle `self.angle() × n`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitQuaternion, Vector3, Unit};\n let axis = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let angle = 1.2;\n let rot = UnitQuaternion::from_axis_angle(&axis, angle);\n let pow = rot.powf(2.0);\n assert_relative_eq!(pow.axis().unwrap(), axis, epsilon = 1.0e-6);\n assert_eq!(pow.angle(), 2.4);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":636345,"byte_end":636354,"line_start":1237,"line_end":1237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":637228,"byte_end":637246,"line_start":1263,"line_end":1263,"column_start":12,"column_end":30},"name":"to_rotation_matrix","qualname":"<UnitQuaternion<N>>::to_rotation_matrix","value":"fn (&self) -> Rotation<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" Builds a rotation matrix from this unit quaternion.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3, Matrix3};\n let q = UnitQuaternion::from_axis_angle(&Vector3::z_axis(), f32::consts::FRAC_PI_6);\n let rot = q.to_rotation_matrix();\n let expected = Matrix3::new(0.8660254, -0.5,      0.0,\n                             0.5,       0.8660254, 0.0,\n                             0.0,       0.0,       1.0);\n\n assert_relative_eq!(*rot.matrix(), expected, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":637207,"byte_end":637216,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4697},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":638333,"byte_end":638348,"line_start":1298,"line_end":1298,"column_start":12,"column_end":27},"name":"to_euler_angles","qualname":"<UnitQuaternion<N>>::to_euler_angles","value":"fn (&self) -> (N, N, N)","parent":null,"children":[],"decl_id":null,"docs":" Converts this unit quaternion into its equivalent Euler angles.\n\n The angles are produced in the form (roll, pitch, yaw).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":638242,"byte_end":638251,"line_start":1296,"line_end":1296,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"This is renamed to use `.euler_angles()`.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":638256,"byte_end":638321,"line_start":1297,"line_end":1297,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":639002,"byte_end":639014,"line_start":1317,"line_end":1317,"column_start":12,"column_end":24},"name":"euler_angles","qualname":"<UnitQuaternion<N>>::euler_angles","value":"fn (&self) -> (N, N, N)","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the euler angles corresponding to this unit quaternion.\n\n The angles are produced in the form (roll, pitch, yaw).\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitQuaternion;\n let rot = UnitQuaternion::from_euler_angles(0.1, 0.2, 0.3);\n let euler = rot.euler_angles();\n assert_relative_eq!(euler.0, 0.1, epsilon = 1.0e-6);\n assert_relative_eq!(euler.1, 0.2, epsilon = 1.0e-6);\n assert_relative_eq!(euler.2, 0.3, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":638981,"byte_end":638990,"line_start":1316,"line_end":1316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":639852,"byte_end":639866,"line_start":1338,"line_end":1338,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<UnitQuaternion<N>>::to_homogeneous","value":"fn (&self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts this unit quaternion into its equivalent homogeneous transformation matrix.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3, Matrix4};\n let rot = UnitQuaternion::from_axis_angle(&Vector3::z_axis(), f32::consts::FRAC_PI_6);\n let expected = Matrix4::new(0.8660254, -0.5,      0.0, 0.0,\n                             0.5,       0.8660254, 0.0, 0.0,\n                             0.0,       0.0,       1.0, 0.0,\n                             0.0,       0.0,       0.0, 1.0);\n\n assert_relative_eq!(rot.to_homogeneous(), expected, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":639831,"byte_end":639840,"line_start":1337,"line_end":1337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4700},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":640554,"byte_end":640569,"line_start":1358,"line_end":1358,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<UnitQuaternion<N>>::transform_point","value":"fn (&self, pt: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate a point by this unit quaternion.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3, Point3};\n let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), f32::consts::FRAC_PI_2);\n let transformed_point = rot.transform_point(&Point3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_point, Point3::new(3.0, 2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":640533,"byte_end":640542,"line_start":1357,"line_end":1357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4701},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":641236,"byte_end":641252,"line_start":1378,"line_end":1378,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<UnitQuaternion<N>>::transform_vector","value":"fn (&self, v: &Vector3<N>) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate a vector by this unit quaternion.\n\n This is the same as the multiplication `self * v`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3};\n let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), f32::consts::FRAC_PI_2);\n let transformed_vector = rot.transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_vector, Vector3::new(3.0, 2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":641215,"byte_end":641224,"line_start":1377,"line_end":1377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4702},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":641976,"byte_end":641999,"line_start":1398,"line_end":1398,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<UnitQuaternion<N>>::inverse_transform_point","value":"fn (&self, pt: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate a point by the inverse of this unit quaternion. This may be\n cheaper than inverting the unit quaternion and transforming the\n point.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3, Point3};\n let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), f32::consts::FRAC_PI_2);\n let transformed_point = rot.inverse_transform_point(&Point3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_point, Point3::new(-3.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":641955,"byte_end":641964,"line_start":1397,"line_end":1397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4703},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":642889,"byte_end":642913,"line_start":1420,"line_end":1420,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<UnitQuaternion<N>>::inverse_transform_vector","value":"fn (&self, v: &Vector3<N>) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate a vector by the inverse of this unit quaternion. This may be\n cheaper than inverting the unit quaternion and transforming the\n vector.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3};\n let rot = UnitQuaternion::from_axis_angle(&Vector3::y_axis(), f32::consts::FRAC_PI_2);\n let transformed_vector = rot.inverse_transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n\n assert_relative_eq!(transformed_vector, Vector3::new(-3.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":642868,"byte_end":642877,"line_start":1419,"line_end":1419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":652443,"byte_end":652454,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"from_vector","qualname":"<Quaternion<N>>::from_vector","value":"fn (vector: Vector4<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a quaternion from a 4D vector. The quaternion scalar part corresponds to the `w`\n vector component.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":652372,"byte_end":652381,"line_start":23,"line_end":23,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Use `::from` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":652386,"byte_end":652431,"line_start":24,"line_end":24,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4868},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653116,"byte_end":653119,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Quaternion<N>>::new","value":"fn (w: N, i: N, j: N, k: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from its individual components. Note that the arguments order does\n **not** follow the storage order.\n\n The storage order is `[ i, j, k, w ]` while the arguments for this functions are in the\n order `(w, i, j, k)`.\n\n # Example\n ```\n # use nalgebra::{Quaternion, Vector4};\n let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n assert!(q.i == 2.0 && q.j == 3.0 && q.k == 4.0 && q.w == 1.0);\n assert_eq!(*q.as_vector(), Vector4::new(2.0, 3.0, 4.0, 1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653095,"byte_end":653104,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4869},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653269,"byte_end":653278,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"from_imag","qualname":"<Quaternion<N>>::from_imag","value":"fn (vector: Vector3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a pure quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653248,"byte_end":653257,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4870},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653993,"byte_end":654003,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Quaternion<N>>::from_parts","value":"fn <SB> (scalar: N, vector: Vector<N, U3, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from its scalar and vector parts. Note that the arguments order does\n **not** follow the storage order.\n\n The storage order is [ vector, scalar ].\n\n # Example\n ```\n # use nalgebra::{Quaternion, Vector3, Vector4};\n let w = 1.0;\n let ijk = Vector3::new(2.0, 3.0, 4.0);\n let q = Quaternion::from_parts(w, ijk);\n assert!(q.i == 2.0 && q.j == 3.0 && q.k == 4.0 && q.w == 1.0);\n assert_eq!(*q.as_vector(), Vector4::new(2.0, 3.0, 4.0, 1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":653928,"byte_end":653937,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4872},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":654214,"byte_end":654223,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"from_real","qualname":"<Quaternion<N>>::from_real","value":"fn (r: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a real quaternion.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":654193,"byte_end":654202,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4873},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":654473,"byte_end":654497,"line_start":84,"line_end":84,"column_start":12,"column_end":36},"name":"from_polar_decomposition","qualname":"<Quaternion<N>>::from_polar_decomposition","value":"fn <SB> (scale: N, theta: N, axis: Unit<Vector<N, U3, SB>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from its polar decomposition.\n\n Note that `axis` is assumed to be a unit vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655053,"byte_end":655061,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"identity","qualname":"<Quaternion<N>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The quaternion multiplicative identity.\n\n # Example\n ```\n # use nalgebra::Quaternion;\n let q = Quaternion::identity();\n let q2 = Quaternion::new(1.0, 2.0, 3.0, 4.0);\n\n assert_eq!(q * q2, q2);\n assert_eq!(q2 * q, q2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655032,"byte_end":655041,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4890},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":656552,"byte_end":656560,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"identity","qualname":"<UnitQuaternion<N>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rotation identity.\n\n # Example\n ```\n # use nalgebra::{UnitQuaternion, Vector3, Point3};\n let q = UnitQuaternion::identity();\n let q2 = UnitQuaternion::new(Vector3::new(1.0, 2.0, 3.0));\n let v = Vector3::new_random();\n let p = Point3::from(v);\n\n assert_eq!(q * q2, q2);\n assert_eq!(q2 * q, q2);\n assert_eq!(q * v, v);\n assert_eq!(q * p, p);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":656531,"byte_end":656540,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4891},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":657667,"byte_end":657682,"line_start":196,"line_end":196,"column_start":12,"column_end":27},"name":"from_axis_angle","qualname":"<UnitQuaternion<N>>::from_axis_angle","value":"fn <SB> (axis: &Unit<Vector<N, U3, SB>>, angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new quaternion from a unit vector (the rotation axis) and an angle\n (the rotation angle).\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Point3, Vector3};\n let axis = Vector3::y_axis();\n let angle = f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let q = UnitQuaternion::from_axis_angle(&axis, angle);\n\n assert_eq!(q.axis().unwrap(), axis);\n assert_eq!(q.angle(), angle);\n assert_relative_eq!(q * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(q * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(UnitQuaternion::from_scaled_axis(Vector3::<f32>::zeros()), UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":657646,"byte_end":657655,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4893},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":658085,"byte_end":658100,"line_start":208,"line_end":208,"column_start":12,"column_end":27},"name":"from_quaternion","qualname":"<UnitQuaternion<N>>::from_quaternion","value":"fn (q: Quaternion<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion from a quaternion.\n\n The input quaternion will be normalized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":658064,"byte_end":658073,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4894},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":658766,"byte_end":658783,"line_start":227,"line_end":227,"column_start":12,"column_end":29},"name":"from_euler_angles","qualname":"<UnitQuaternion<N>>::from_euler_angles","value":"fn (roll: N, pitch: N, yaw: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion from Euler angles.\n\n The primitive rotations are applied in order: 1 roll − 2 pitch − 3 yaw.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitQuaternion;\n let rot = UnitQuaternion::from_euler_angles(0.1, 0.2, 0.3);\n let euler = rot.euler_angles();\n assert_relative_eq!(euler.0, 0.1, epsilon = 1.0e-6);\n assert_relative_eq!(euler.1, 0.2, epsilon = 1.0e-6);\n assert_relative_eq!(euler.2, 0.3, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":658745,"byte_end":658754,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4895},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":659923,"byte_end":659943,"line_start":257,"line_end":257,"column_start":12,"column_end":32},"name":"from_rotation_matrix","qualname":"<UnitQuaternion<N>>::from_rotation_matrix","value":"fn (rotmat: &Rotation3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an unit quaternion from a rotation matrix.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Rotation3, UnitQuaternion, Vector3};\n let axis = Vector3::y_axis();\n let angle = 0.1;\n let rot = Rotation3::from_axis_angle(&axis, angle);\n let q = UnitQuaternion::from_rotation_matrix(&rot);\n assert_relative_eq!(q.to_rotation_matrix(), rot, epsilon = 1.0e-6);\n assert_relative_eq!(q.axis().unwrap(), rot.axis().unwrap(), epsilon = 1.0e-6);\n assert_relative_eq!(q.angle(), rot.angle(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":659902,"byte_end":659911,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":662354,"byte_end":662365,"line_start":310,"line_end":310,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<UnitQuaternion<N>>::from_matrix","value":"fn (m: &Matrix3<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an unit quaternion by extracting the rotation part of the given transformation `m`.\n\n This is an iterative method. See `.from_matrix_eps` to provide mover\n convergence parameters and starting solution.\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4897},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":663250,"byte_end":663265,"line_start":326,"line_end":326,"column_start":12,"column_end":27},"name":"from_matrix_eps","qualname":"<UnitQuaternion<N>>::from_matrix_eps","value":"fn (m: &Matrix3<N>, eps: N, max_iter: usize, guess: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an unit quaternion by extracting the rotation part of the given transformation `m`.\n\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n\n # Parameters\n\n * `m`: the matrix from which the rotational part is to be extracted.\n * `eps`: the angular errors tolerated between the current rotation and the optimal one.\n * `max_iter`: the maximum number of iterations. Loops indefinitely until convergence if set to `0`.\n * `guess`: an estimate of the solution. Convergence will be significantly faster if an initial solution close\n           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other\n           guesses come to mind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4898},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":663976,"byte_end":663992,"line_start":345,"line_end":345,"column_start":12,"column_end":28},"name":"rotation_between","qualname":"<UnitQuaternion<N>>::rotation_between","value":"fn <SB, SC> (a: &Vector<N, U3, SB>, b: &Vector<N, U3, SC>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit quaternion needed to make `a` and `b` be collinear and point toward the same\n direction.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector3, UnitQuaternion};\n let a = Vector3::new(1.0, 2.0, 3.0);\n let b = Vector3::new(3.0, 1.0, 2.0);\n let q = UnitQuaternion::rotation_between(&a, &b).unwrap();\n assert_relative_eq!(q * a, b);\n assert_relative_eq!(q.inverse() * b, a);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":663955,"byte_end":663964,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4901},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":664894,"byte_end":664917,"line_start":368,"line_end":368,"column_start":12,"column_end":35},"name":"scaled_rotation_between","qualname":"<UnitQuaternion<N>>::scaled_rotation_between","value":"fn <SB, SC> (a: &Vector<N, U3, SB>, b: &Vector<N, U3, SC>, s: N) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector3, UnitQuaternion};\n let a = Vector3::new(1.0, 2.0, 3.0);\n let b = Vector3::new(3.0, 1.0, 2.0);\n let q2 = UnitQuaternion::scaled_rotation_between(&a, &b, 0.2).unwrap();\n let q5 = UnitQuaternion::scaled_rotation_between(&a, &b, 0.5).unwrap();\n assert_relative_eq!(q2 * q2 * q2 * q2 * q2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(q5 * q5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":664873,"byte_end":664882,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4904},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":666014,"byte_end":666035,"line_start":402,"line_end":402,"column_start":12,"column_end":33},"name":"rotation_between_axis","qualname":"<UnitQuaternion<N>>::rotation_between_axis","value":"fn <SB, SC> (a: &Unit<Vector<N, U3, SB>>, b: &Unit<Vector<N, U3, SC>>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The unit quaternion needed to make `a` and `b` be collinear and point toward the same\n direction.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Unit, Vector3, UnitQuaternion};\n let a = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let b = Unit::new_normalize(Vector3::new(3.0, 1.0, 2.0));\n let q = UnitQuaternion::rotation_between(&a, &b).unwrap();\n assert_relative_eq!(q * a, b);\n assert_relative_eq!(q.inverse() * b, a);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":665993,"byte_end":666002,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4907},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":667025,"byte_end":667053,"line_start":428,"line_end":428,"column_start":12,"column_end":40},"name":"scaled_rotation_between_axis","qualname":"<UnitQuaternion<N>>::scaled_rotation_between_axis","value":"fn <SB, SC> (na: &Unit<Vector<N, U3, SB>>, nb: &Unit<Vector<N, U3, SC>>, s: N) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Unit, Vector3, UnitQuaternion};\n let a = Unit::new_normalize(Vector3::new(1.0, 2.0, 3.0));\n let b = Unit::new_normalize(Vector3::new(3.0, 1.0, 2.0));\n let q2 = UnitQuaternion::scaled_rotation_between(&a, &b, 0.2).unwrap();\n let q5 = UnitQuaternion::scaled_rotation_between(&a, &b, 0.5).unwrap();\n assert_relative_eq!(q2 * q2 * q2 * q2 * q2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(q5 * q5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":667004,"byte_end":667013,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4910},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":668982,"byte_end":668994,"line_start":486,"line_end":486,"column_start":12,"column_end":24},"name":"face_towards","qualname":"<UnitQuaternion<N>>::face_towards","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an unit quaternion that corresponds to the local frame of an observer standing at the\n origin and looking toward `dir`.\n\n It maps the `z` axis to the direction `dir`.\n\n # Arguments\n   * dir - The look direction. It does not need to be normalized.\n   * up - The vertical direction. It does not need to be normalized.\n   The only requirement of this parameter is to not be collinear to `dir`. Non-collinearity\n   is not checked.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let q = UnitQuaternion::face_towards(&dir, &up);\n assert_relative_eq!(q * Vector3::z(), dir.normalize());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":668961,"byte_end":668970,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4913},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":669336,"byte_end":669355,"line_start":496,"line_end":496,"column_start":12,"column_end":31},"name":"new_observer_frames","qualname":"<UnitQuaternion<N>>::new_observer_frames","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Deprecated: Use [UnitQuaternion::face_towards] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"renamed to `face_towards`\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":669277,"byte_end":669324,"line_start":495,"line_end":495,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4916},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":670507,"byte_end":670517,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"look_at_rh","qualname":"<UnitQuaternion<N>>::look_at_rh","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a right-handed look-at view matrix without translation.\n\n It maps the view direction `dir` to the **negative** `z` axis.\n This conforms to the common notion of right handed look-at matrix from the computer\n graphics community.\n\n # Arguments\n   * dir − The view direction. It does not need to be normalized.\n   * up - A vector approximately aligned with required the vertical axis. It does not need\n   to be normalized. The only requirement of this parameter is to not be collinear to `dir`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let q = UnitQuaternion::look_at_rh(&dir, &up);\n assert_relative_eq!(q * dir.normalize(), -Vector3::z());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":670486,"byte_end":670495,"line_start":526,"line_end":526,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4919},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":671643,"byte_end":671653,"line_start":558,"line_end":558,"column_start":12,"column_end":22},"name":"look_at_lh","qualname":"<UnitQuaternion<N>>::look_at_lh","value":"fn <SB, SC> (dir: &Vector<N, U3, SB>, up: &Vector<N, U3, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a left-handed look-at view matrix without translation.\n\n It maps the view direction `dir` to the **positive** `z` axis.\n This conforms to the common notion of left handed look-at matrix from the computer\n graphics community.\n\n # Arguments\n   * dir − The view direction. It does not need to be normalized.\n   * up - A vector approximately aligned with required the vertical axis. The only\n   requirement of this parameter is to not be collinear to `dir`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Vector3};\n let dir = Vector3::new(1.0, 2.0, 3.0);\n let up = Vector3::y();\n\n let q = UnitQuaternion::look_at_lh(&dir, &up);\n assert_relative_eq!(q * dir.normalize(), Vector3::z());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":671622,"byte_end":671631,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4922},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":672852,"byte_end":672855,"line_start":588,"line_end":588,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitQuaternion<N>>::new","value":"fn <SB> (axisangle: Vector<N, U3, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.\n\n If `axisangle` has a magnitude smaller than `N::default_epsilon()`, this returns the identity rotation.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let q = UnitQuaternion::new(axisangle);\n\n assert_relative_eq!(q * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(q * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(UnitQuaternion::new(Vector3::<f32>::zeros()), UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":672831,"byte_end":672840,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":674115,"byte_end":674122,"line_start":617,"line_end":617,"column_start":12,"column_end":19},"name":"new_eps","qualname":"<UnitQuaternion<N>>::new_eps","value":"fn <SB> (axisangle: Vector<N, U3, SB>, eps: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.\n\n If `axisangle` has a magnitude smaller than `eps`, this returns the identity rotation.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let q = UnitQuaternion::new_eps(axisangle, 1.0e-6);\n\n assert_relative_eq!(q * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(q * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // An almost zero vector yields an identity.\n assert_eq!(UnitQuaternion::new_eps(Vector3::new(1.0e-8, 1.0e-9, 1.0e-7), 1.0e-6), UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":674094,"byte_end":674103,"line_start":616,"line_end":616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4926},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":675435,"byte_end":675451,"line_start":647,"line_end":647,"column_start":12,"column_end":28},"name":"from_scaled_axis","qualname":"<UnitQuaternion<N>>::from_scaled_axis","value":"fn <SB> (axisangle: Vector<N, U3, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.\n\n If `axisangle` has a magnitude smaller than `N::default_epsilon()`, this returns the identity rotation.\n Same as `Self::new(axisangle)`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let q = UnitQuaternion::from_scaled_axis(axisangle);\n\n assert_relative_eq!(q * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(q * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // A zero vector yields an identity.\n assert_eq!(UnitQuaternion::from_scaled_axis(Vector3::<f32>::zeros()), UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":675414,"byte_end":675423,"line_start":646,"line_end":646,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4928},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":676672,"byte_end":676692,"line_start":675,"line_end":675,"column_start":12,"column_end":32},"name":"from_scaled_axis_eps","qualname":"<UnitQuaternion<N>>::from_scaled_axis_eps","value":"fn <SB> (axisangle: Vector<N, U3, SB>, eps: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit quaternion rotation from a rotation axis scaled by the rotation angle.\n\n If `axisangle` has a magnitude smaller than `eps`, this returns the identity rotation.\n Same as `Self::new_eps(axisangle, eps)`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion, Point3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n // Point and vector being transformed in the tests.\n let pt = Point3::new(4.0, 5.0, 6.0);\n let vec = Vector3::new(4.0, 5.0, 6.0);\n let q = UnitQuaternion::from_scaled_axis_eps(axisangle, 1.0e-6);\n\n assert_relative_eq!(q * pt, Point3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n assert_relative_eq!(q * vec, Vector3::new(6.0, 5.0, -4.0), epsilon = 1.0e-6);\n\n // An almost zero vector yields an identity.\n assert_eq!(UnitQuaternion::from_scaled_axis_eps(Vector3::new(1.0e-8, 1.0e-9, 1.0e-7), 1.0e-6), UnitQuaternion::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":676651,"byte_end":676660,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":677915,"byte_end":677922,"line_start":705,"line_end":705,"column_start":12,"column_end":19},"name":"mean_of","qualname":"<UnitQuaternion<N>>::mean_of","value":"fn (unit_quaternions: impl IntoIterator<Item = Self>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the mean unit quaternion from a data structure implementing IntoIterator\n returning unit quaternions.\n\n The method will panic if the iterator does not return any quaternions.\n\n Algorithm from: Oshman, Yaakov, and Avishy Carmi. \"Attitude estimation from vector\n observations using a genetic-algorithm-embedded quaternion particle filter.\" Journal of\n Guidance, Control, and Dynamics 29.4 (2006): 879-891.\n \n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitQuaternion};\n let q1 = UnitQuaternion::from_euler_angles(0.0, 0.0, 0.0);\n let q2 = UnitQuaternion::from_euler_angles(-0.1, 0.0, 0.0);\n let q3 = UnitQuaternion::from_euler_angles(0.1, 0.0, 0.0);\n\n let quat_vec = vec![q1, q2, q3];\n let q_mean = UnitQuaternion::mean_of(quat_vec);\n\n let euler_angles_mean = q_mean.euler_angles();\n assert_relative_eq!(euler_angles_mean.0, 0.0, epsilon = 1.0e-7)\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":677894,"byte_end":677903,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":5118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707054,"byte_end":707065,"line_start":10,"line_end":10,"column_start":10,"column_end":21},"name":"UnitComplex","qualname":"::geometry::unit_complex::UnitComplex","value":"Unit<Complex<N>>","parent":null,"children":[],"decl_id":null,"docs":" A complex number with a norm equal to 1.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707390,"byte_end":707395,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"angle","qualname":"<UnitComplex<N>>::angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle in `]-pi; pi]` of this unit complex number.\n\n # Example\n ```\n # use nalgebra::UnitComplex;\n let rot = UnitComplex::new(1.78);\n assert_eq!(rot.angle(), 1.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707369,"byte_end":707378,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707722,"byte_end":707731,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"sin_angle","qualname":"<UnitComplex<N>>::sin_angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The sine of the rotation angle.\n\n # Example\n ```\n # use nalgebra::UnitComplex;\n let angle = 1.78f32;\n let rot = UnitComplex::new(angle);\n assert_eq!(rot.sin_angle(), angle.sin());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707701,"byte_end":707710,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708044,"byte_end":708053,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"cos_angle","qualname":"<UnitComplex<N>>::cos_angle","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The cosine of the rotation angle.\n\n # Example\n ```\n # use nalgebra::UnitComplex;\n let angle = 1.78f32;\n let rot = UnitComplex::new(angle);\n assert_eq!(rot.cos_angle(),angle.cos());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708023,"byte_end":708032,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708317,"byte_end":708328,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"scaled_axis","qualname":"<UnitComplex<N>>::scaled_axis","value":"fn (&self) -> Vector1<N>","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle returned as a 1-dimensional vector.\n\n This is generally used in the context of generic programming. Using\n the `.angle()` method instead is more common.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708296,"byte_end":708305,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5126},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708673,"byte_end":708683,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"axis_angle","qualname":"<UnitComplex<N>>::axis_angle","value":"fn (&self) -> Option<(Unit<Vector1<N>>, N)>","parent":null,"children":[],"decl_id":null,"docs":" The rotation axis and angle in ]0, pi] of this complex number.\n\n This is generally used in the context of generic programming. Using\n the `.angle()` method instead is more common.\n Returns `None` if the angle is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":708652,"byte_end":708661,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":709417,"byte_end":709424,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"complex","qualname":"<UnitComplex<N>>::complex","value":"fn (&self) -> &Complex<N>","parent":null,"children":[],"decl_id":null,"docs":" The underlying complex number.\n\n Same as `self.as_ref()`.\n\n # Example\n ```\n # extern crate num_complex;\n # use num_complex::Complex;\n # use nalgebra::UnitComplex;\n let angle = 1.78f32;\n let rot = UnitComplex::new(angle);\n assert_eq!(*rot.complex(), Complex::new(angle.cos(), angle.sin()));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":709396,"byte_end":709405,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":709842,"byte_end":709851,"line_start":110,"line_end":110,"column_start":12,"column_end":21},"name":"conjugate","qualname":"<UnitComplex<N>>::conjugate","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute the conjugate of this unit complex number.\n\n # Example\n ```\n # use nalgebra::UnitComplex;\n let rot = UnitComplex::new(1.78);\n let conj = rot.conjugate();\n assert_eq!(rot.complex().im, -conj.complex().im);\n assert_eq!(rot.complex().re, conj.complex().re);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":709821,"byte_end":709830,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":710368,"byte_end":710375,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"inverse","qualname":"<UnitComplex<N>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inverts this complex number if it is not zero.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let rot = UnitComplex::new(1.2);\n let inv = rot.inverse();\n assert_relative_eq!(rot * inv, UnitComplex::identity(), epsilon = 1.0e-6);\n assert_relative_eq!(inv * rot, UnitComplex::identity(), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":710347,"byte_end":710356,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":710792,"byte_end":710800,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<UnitComplex<N>>::angle_to","value":"fn (&self, other: &Self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The rotation angle needed to make `self` and `other` coincide.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let rot1 = UnitComplex::new(0.1);\n let rot2 = UnitComplex::new(1.7);\n assert_relative_eq!(rot1.angle_to(&rot2), 1.6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":710771,"byte_end":710780,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":711467,"byte_end":711478,"line_start":162,"line_end":162,"column_start":12,"column_end":23},"name":"rotation_to","qualname":"<UnitComplex<N>>::rotation_to","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The unit complex number needed to make `self` and `other` coincide.\n\n The result is such that: `self.rotation_to(other) * self == other`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let rot1 = UnitComplex::new(0.1);\n let rot2 = UnitComplex::new(1.7);\n let rot_to = rot1.rotation_to(&rot2);\n\n assert_relative_eq!(rot_to * rot1, rot2);\n assert_relative_eq!(rot_to.inverse() * rot2, rot1);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":711446,"byte_end":711455,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5132},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":712023,"byte_end":712036,"line_start":180,"line_end":180,"column_start":12,"column_end":25},"name":"conjugate_mut","qualname":"<UnitComplex<N>>::conjugate_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute in-place the conjugate of this unit complex number.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let angle = 1.7;\n let rot = UnitComplex::new(angle);\n let mut conj = UnitComplex::new(angle);\n conj.conjugate_mut();\n assert_eq!(rot.complex().im, -conj.complex().im);\n assert_eq!(rot.complex().re, conj.complex().re);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":712002,"byte_end":712011,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":712599,"byte_end":712610,"line_start":198,"line_end":198,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<UnitComplex<N>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts in-place this unit complex number.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let angle = 1.7;\n let mut rot = UnitComplex::new(angle);\n rot.inverse_mut();\n assert_relative_eq!(rot * UnitComplex::new(angle), UnitComplex::identity());\n assert_relative_eq!(UnitComplex::new(angle) * rot, UnitComplex::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":712578,"byte_end":712587,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5134},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":713135,"byte_end":713139,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"powf","qualname":"<UnitComplex<N>>::powf","value":"fn (&self, n: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raise this unit complex number to a given floating power.\n\n This returns the unit complex number that identifies a rotation angle equal to\n `self.angle() × n`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::UnitComplex;\n let rot = UnitComplex::new(0.78);\n let pow = rot.powf(2.0);\n assert_relative_eq!(pow.angle(), 2.0 * 0.78);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":713114,"byte_end":713123,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":713619,"byte_end":713637,"line_start":231,"line_end":231,"column_start":12,"column_end":30},"name":"to_rotation_matrix","qualname":"<UnitComplex<N>>::to_rotation_matrix","value":"fn (&self) -> Rotation2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds the rotation matrix corresponding to this unit complex number.\n\n # Example\n ```\n # use nalgebra::{UnitComplex, Rotation2};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_6);\n let expected = Rotation2::new(f32::consts::FRAC_PI_6);\n assert_eq!(rot.to_rotation_matrix(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":713598,"byte_end":713607,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5136},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":714335,"byte_end":714349,"line_start":251,"line_end":251,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<UnitComplex<N>>::to_homogeneous","value":"fn (&self) -> Matrix3<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts this unit complex number into its equivalent homogeneous transformation matrix.\n\n # Example\n ```\n # use nalgebra::{UnitComplex, Matrix3};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_6);\n let expected = Matrix3::new(0.8660254, -0.5,      0.0,\n                             0.5,       0.8660254, 0.0,\n                             0.0,       0.0,       1.0);\n assert_eq!(rot.to_homogeneous(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":714314,"byte_end":714323,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":714976,"byte_end":714991,"line_start":269,"line_end":269,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<UnitComplex<N>>::transform_point","value":"fn (&self, pt: &Point2<N>) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given point by this unit complex number.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitComplex, Point2};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let transformed_point = rot.transform_point(&Point2::new(1.0, 2.0));\n assert_relative_eq!(transformed_point, Point2::new(-2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":714955,"byte_end":714964,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":715606,"byte_end":715622,"line_start":287,"line_end":287,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<UnitComplex<N>>::transform_vector","value":"fn (&self, v: &Vector2<N>) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given vector by this unit complex number.\n\n This is the same as the multiplication `self * v`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitComplex, Vector2};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let transformed_vector = rot.transform_vector(&Vector2::new(1.0, 2.0));\n assert_relative_eq!(transformed_vector, Vector2::new(-2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":715585,"byte_end":715594,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":716186,"byte_end":716209,"line_start":303,"line_end":303,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<UnitComplex<N>>::inverse_transform_point","value":"fn (&self, pt: &Point2<N>) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given point by the inverse of this unit complex number.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitComplex, Point2};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let transformed_point = rot.inverse_transform_point(&Point2::new(1.0, 2.0));\n assert_relative_eq!(transformed_point, Point2::new(2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":716165,"byte_end":716174,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":716947,"byte_end":716971,"line_start":321,"line_end":321,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<UnitComplex<N>>::inverse_transform_vector","value":"fn (&self, v: &Vector2<N>) -> Vector2<N>","parent":null,"children":[],"decl_id":null,"docs":" Rotate the given vector by the inverse of this unit complex number.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{UnitComplex, Vector2};\n # use std::f32;\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let transformed_vector = rot.inverse_transform_vector(&Vector2::new(1.0, 2.0));\n assert_relative_eq!(transformed_vector, Vector2::new(2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":716926,"byte_end":716935,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723447,"byte_end":723455,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"identity","qualname":"<UnitComplex<N>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The unit complex number multiplicative identity.\n\n # Example\n ```\n # use nalgebra::UnitComplex;\n let rot1 = UnitComplex::identity();\n let rot2 = UnitComplex::new(1.7);\n\n assert_eq!(rot1 * rot2, rot2);\n assert_eq!(rot2 * rot1, rot2);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723426,"byte_end":723435,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723977,"byte_end":723980,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitComplex<N>>::new","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds the unit complex number corresponding to the rotation with the given angle.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitComplex, Point2};\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n\n assert_relative_eq!(rot * Point2::new(3.0, 4.0), Point2::new(-4.0, 3.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723956,"byte_end":723965,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":724611,"byte_end":724621,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"from_angle","qualname":"<UnitComplex<N>>::from_angle","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds the unit complex number corresponding to the rotation with the angle.\n\n Same as `Self::new(angle)`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitComplex, Point2};\n let rot = UnitComplex::from_angle(f32::consts::FRAC_PI_2);\n\n assert_relative_eq!(rot * Point2::new(3.0, 4.0), Point2::new(-4.0, 3.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":724590,"byte_end":724599,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":725367,"byte_end":725389,"line_start":87,"line_end":87,"column_start":12,"column_end":34},"name":"from_cos_sin_unchecked","qualname":"<UnitComplex<N>>::from_cos_sin_unchecked","value":"fn (cos: N, sin: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds the unit complex number from the sinus and cosinus of the rotation angle.\n\n The input values are not checked to actually be cosines and sine of the same value.\n Is is generally preferable to use the `::new(angle)` constructor instead.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{UnitComplex, Vector2, Point2};\n let angle = f32::consts::FRAC_PI_2;\n let rot = UnitComplex::from_cos_sin_unchecked(angle.cos(), angle.sin());\n\n assert_relative_eq!(rot * Point2::new(3.0, 4.0), Point2::new(-4.0, 3.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":725346,"byte_end":725355,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":725740,"byte_end":725756,"line_start":96,"line_end":96,"column_start":12,"column_end":28},"name":"from_scaled_axis","qualname":"<UnitComplex<N>>::from_scaled_axis","value":"fn <SB> (axisangle: Vector<N, U1, SB>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a unit complex rotation from an angle in radian wrapped in a 1-dimensional vector.\n\n This is generally used in the context of generic programming. Using\n the `::new(angle)` method instead is more common.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":725719,"byte_end":725728,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":726014,"byte_end":726026,"line_start":104,"line_end":104,"column_start":12,"column_end":24},"name":"from_complex","qualname":"<UnitComplex<N>>::from_complex","value":"fn (q: Complex<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit complex number from a complex number.\n\n The input complex number will be normalized.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":725993,"byte_end":726002,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5259},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":726298,"byte_end":726318,"line_start":112,"line_end":112,"column_start":12,"column_end":32},"name":"from_complex_and_get","qualname":"<UnitComplex<N>>::from_complex_and_get","value":"fn (q: Complex<N>) -> (Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unit complex number from a complex number.\n\n The input complex number will be normalized. Returns the norm of the complex number as well.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":726277,"byte_end":726286,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":726868,"byte_end":726888,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"from_rotation_matrix","qualname":"<UnitComplex<N>>::from_rotation_matrix","value":"fn (rotmat: &Rotation2<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds the unit complex number from the corresponding 2D rotation matrix.\n\n # Example\n ```\n # use nalgebra::{Rotation2, UnitComplex};\n let rot = Rotation2::new(1.7);\n let complex = UnitComplex::from_rotation_matrix(&rot);\n assert_eq!(complex, UnitComplex::new(1.7));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":726847,"byte_end":726856,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":727356,"byte_end":727367,"line_start":137,"line_end":137,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<UnitComplex<N>>::from_matrix","value":"fn (m: &Matrix2<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an unit complex by extracting the rotation part of the given transformation `m`.\n\n This is an iterative method. See `.from_matrix_eps` to provide mover\n convergence parameters and starting solution.\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":728249,"byte_end":728264,"line_start":153,"line_end":153,"column_start":12,"column_end":27},"name":"from_matrix_eps","qualname":"<UnitComplex<N>>::from_matrix_eps","value":"fn (m: &Matrix2<N>, eps: N, max_iter: usize, guess: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds an unit complex by extracting the rotation part of the given transformation `m`.\n\n This implements \"A Robust Method to Extract the Rotational Part of Deformations\" by Müller et al.\n\n # Parameters\n\n * `m`: the matrix from which the rotational part is to be extracted.\n * `eps`: the angular errors tolerated between the current rotation and the optimal one.\n * `max_iter`: the maximum number of iterations. Loops indefinitely until convergence if set to `0`.\n * `guess`: an estimate of the solution. Convergence will be significantly faster if an initial solution close\n           to the actual solution is provided. Can be set to `UnitQuaternion::identity()` if no other\n           guesses come to mind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":728953,"byte_end":728969,"line_start":172,"line_end":172,"column_start":12,"column_end":28},"name":"rotation_between","qualname":"<UnitComplex<N>>::rotation_between","value":"fn <SB, SC> (a: &Vector<N, U2, SB>, b: &Vector<N, U2, SC>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The unit complex needed to make `a` and `b` be collinear and point toward the same\n direction.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector2, UnitComplex};\n let a = Vector2::new(1.0, 2.0);\n let b = Vector2::new(2.0, 1.0);\n let rot = UnitComplex::rotation_between(&a, &b);\n assert_relative_eq!(rot * a, b);\n assert_relative_eq!(rot.inverse() * b, a);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":728932,"byte_end":728941,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5266},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":729844,"byte_end":729867,"line_start":195,"line_end":195,"column_start":12,"column_end":35},"name":"scaled_rotation_between","qualname":"<UnitComplex<N>>::scaled_rotation_between","value":"fn <SB, SC> (a: &Vector<N, U2, SB>, b: &Vector<N, U2, SC>, s: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Vector2, UnitComplex};\n let a = Vector2::new(1.0, 2.0);\n let b = Vector2::new(2.0, 1.0);\n let rot2 = UnitComplex::scaled_rotation_between(&a, &b, 0.2);\n let rot5 = UnitComplex::scaled_rotation_between(&a, &b, 0.5);\n assert_relative_eq!(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(rot5 * rot5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":729823,"byte_end":729832,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5269},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":730933,"byte_end":730954,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"rotation_between_axis","qualname":"<UnitComplex<N>>::rotation_between_axis","value":"fn <SB, SC> (a: &Unit<Vector<N, U2, SB>>, b: &Unit<Vector<N, U2, SC>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The unit complex needed to make `a` and `b` be collinear and point toward the same\n direction.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Unit, Vector2, UnitComplex};\n let a = Unit::new_normalize(Vector2::new(1.0, 2.0));\n let b = Unit::new_normalize(Vector2::new(2.0, 1.0));\n let rot = UnitComplex::rotation_between_axis(&a, &b);\n assert_relative_eq!(rot * a, b);\n assert_relative_eq!(rot.inverse() * b, a);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":730912,"byte_end":730921,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5272},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":731927,"byte_end":731955,"line_start":255,"line_end":255,"column_start":12,"column_end":40},"name":"scaled_rotation_between_axis","qualname":"<UnitComplex<N>>::scaled_rotation_between_axis","value":"fn <SB, SC> (na: &Unit<Vector<N, U2, SB>>, nb: &Unit<Vector<N, U2, SC>>, s: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The smallest rotation needed to make `a` and `b` collinear and point toward the same\n direction, raised to the power `s`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Unit, Vector2, UnitComplex};\n let a = Unit::new_normalize(Vector2::new(1.0, 2.0));\n let b = Unit::new_normalize(Vector2::new(2.0, 1.0));\n let rot2 = UnitComplex::scaled_rotation_between_axis(&a, &b, 0.2);\n let rot5 = UnitComplex::scaled_rotation_between_axis(&a, &b, 0.5);\n assert_relative_eq!(rot2 * rot2 * rot2 * rot2 * rot2 * a, b, epsilon = 1.0e-6);\n assert_relative_eq!(rot5 * rot5 * a, b, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":731906,"byte_end":731915,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":18644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":750506,"byte_end":750517,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"Translation","qualname":"::geometry::translation::Translation","value":"Translation { vector }","parent":null,"children":[{"krate":0,"index":18647}],"decl_id":null,"docs":" A translation.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":750467,"byte_end":750477,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":18647},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":750708,"byte_end":750714,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"vector","qualname":"::geometry::translation::Translation::vector","value":"base::matrix::Matrix<N, D, base::dimension::U1, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, D>>::Buffer>","parent":{"krate":0,"index":18644},"children":[],"decl_id":null,"docs":" The translation coordinates, i.e., how much is added to a point's coordinates when it is\n translated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5507},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":752800,"byte_end":752811,"line_start":114,"line_end":114,"column_start":12,"column_end":23},"name":"from_vector","qualname":"<Translation<N, D>>::from_vector","value":"fn (vector: VectorN<N, D>) -> Translation<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new translation from the given vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":752729,"byte_end":752738,"line_start":112,"line_end":112,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Use `::from` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":752743,"byte_end":752788,"line_start":113,"line_end":113,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5508},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":753447,"byte_end":753454,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation<N, D>>::inverse","value":"fn (&self) -> Translation<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self`.\n\n # Example\n ```\n # use nalgebra::{Translation2, Translation3};\n let t = Translation3::new(1.0, 2.0, 3.0);\n assert_eq!(t * t.inverse(), Translation3::identity());\n assert_eq!(t.inverse() * t, Translation3::identity());\n\n // Work in all dimensions.\n let t = Translation2::new(1.0, 2.0);\n assert_eq!(t * t.inverse(), Translation2::identity());\n assert_eq!(t.inverse() * t, Translation2::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":753426,"byte_end":753435,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5509},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":754384,"byte_end":754398,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Translation<N, D>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this translation into its equivalent homogeneous transformation matrix.\n\n # Example\n ```\n # use nalgebra::{Translation2, Translation3, Matrix3, Matrix4};\n let t = Translation3::new(10.0, 20.0, 30.0);\n let expected = Matrix4::new(1.0, 0.0, 0.0, 10.0,\n                             0.0, 1.0, 0.0, 20.0,\n                             0.0, 0.0, 1.0, 30.0,\n                             0.0, 0.0, 0.0, 1.0);\n assert_eq!(t.to_homogeneous(), expected);\n\n let t = Translation2::new(10.0, 20.0);\n let expected = Matrix3::new(1.0, 0.0, 10.0,\n                             0.0, 1.0, 20.0,\n                             0.0, 0.0, 1.0);\n assert_eq!(t.to_homogeneous(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":754363,"byte_end":754372,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5510},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":755455,"byte_end":755466,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<Translation<N, D>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self` in-place.\n\n # Example\n ```\n # use nalgebra::{Translation2, Translation3};\n let t = Translation3::new(1.0, 2.0, 3.0);\n let mut inv_t = Translation3::new(1.0, 2.0, 3.0);\n inv_t.inverse_mut();\n assert_eq!(t * inv_t, Translation3::identity());\n assert_eq!(inv_t * t, Translation3::identity());\n\n // Work in all dimensions.\n let t = Translation2::new(1.0, 2.0);\n let mut inv_t = Translation2::new(1.0, 2.0);\n inv_t.inverse_mut();\n assert_eq!(t * inv_t, Translation2::identity());\n assert_eq!(inv_t * t, Translation2::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":755434,"byte_end":755443,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5514},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756053,"byte_end":756068,"line_start":209,"line_end":209,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation<N, D>>::transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given point.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n ```\n # use nalgebra::{Translation3, Point3};\n let t = Translation3::new(1.0, 2.0, 3.0);\n let transformed_point = t.transform_point(&Point3::new(4.0, 5.0, 6.0));\n assert_eq!(transformed_point, Point3::new(5.0, 7.0, 9.0));\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756032,"byte_end":756041,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5518},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756632,"byte_end":756655,"line_start":226,"line_end":226,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<Translation<N, D>>::inverse_transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given point by the inverse of this translation.\n\n # Example\n ```\n # use nalgebra::{Translation3, Point3};\n let t = Translation3::new(1.0, 2.0, 3.0);\n let transformed_point = t.inverse_transform_point(&Point3::new(4.0, 5.0, 6.0));\n assert_eq!(transformed_point, Point3::new(3.0, 3.0, 3.0));\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756611,"byte_end":756620,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":5636},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":763660,"byte_end":763672,"line_start":6,"line_end":6,"column_start":10,"column_end":22},"name":"Translation1","qualname":"::geometry::translation_alias::Translation1","value":"Translation<N, U1>","parent":null,"children":[],"decl_id":null,"docs":" A 1-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5638},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":763741,"byte_end":763753,"line_start":9,"line_end":9,"column_start":10,"column_end":22},"name":"Translation2","qualname":"::geometry::translation_alias::Translation2","value":"Translation<N, U2>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":763822,"byte_end":763834,"line_start":12,"line_end":12,"column_start":10,"column_end":22},"name":"Translation3","qualname":"::geometry::translation_alias::Translation3","value":"Translation<N, U3>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5642},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":763903,"byte_end":763915,"line_start":15,"line_end":15,"column_start":10,"column_end":22},"name":"Translation4","qualname":"::geometry::translation_alias::Translation4","value":"Translation<N, U4>","parent":null,"children":[],"decl_id":null,"docs":" A 4-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":763984,"byte_end":763996,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"Translation5","qualname":"::geometry::translation_alias::Translation5","value":"Translation<N, U5>","parent":null,"children":[],"decl_id":null,"docs":" A 5-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":5646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alias.rs","byte_start":764065,"byte_end":764077,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"Translation6","qualname":"::geometry::translation_alias::Translation6","value":"Translation<N, U6>","parent":null,"children":[],"decl_id":null,"docs":" A 6-dimensional translation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765099,"byte_end":765107,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation<N, D>>::identity","value":"fn () -> Translation<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity translation.\n\n # Example\n ```\n # use nalgebra::{Point2, Point3, Translation2, Translation3};\n let t = Translation2::identity();\n let p = Point2::new(1.0, 2.0);\n assert_eq!(t * p, p);\n\n // Works in all dimensions.\n let t = Translation3::identity();\n let p = Point3::new(1.0, 2.0, 3.0);\n assert_eq!(t * p, p);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765078,"byte_end":765087,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":18823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":781946,"byte_end":781954,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"Isometry","qualname":"::geometry::isometry::Isometry","value":"Isometry { rotation, translation }","parent":null,"children":[{"krate":0,"index":18827},{"krate":0,"index":18828},{"krate":0,"index":18829}],"decl_id":null,"docs":" A direct isometry, i.e., a rotation followed by a translation, aka. a rigid-body motion, aka. an element of a Special Euclidean (SE) group.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":781426,"byte_end":781436,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":18827},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":782085,"byte_end":782093,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"rotation","qualname":"::geometry::isometry::Isometry::rotation","value":"R","parent":{"krate":0,"index":18823},"children":[],"decl_id":null,"docs":" The pure rotational part of this isometry.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":18828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":782160,"byte_end":782171,"line_start":45,"line_end":45,"column_start":9,"column_end":20},"name":"translation","qualname":"::geometry::isometry::Isometry::translation","value":"geometry::translation::Translation<N, D>","parent":{"krate":0,"index":18823},"children":[],"decl_id":null,"docs":" The pure translational part of this isometry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5856},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":784587,"byte_end":784597,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Isometry<N, D, R>>::from_parts","value":"fn (translation: Translation<N, D>, rotation: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new isometry from its rotational and translational parts.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry3, Translation3, UnitQuaternion, Vector3, Point3};\n let tra = Translation3::new(0.0, 0.0, 3.0);\n let rot = UnitQuaternion::from_scaled_axis(Vector3::y() * f32::consts::PI);\n let iso = Isometry3::from_parts(tra, rot);\n\n assert_relative_eq!(iso * Point3::new(1.0, 2.0, 3.0), Point3::new(-1.0, 2.0, 0.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":784566,"byte_end":784575,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5857},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":785184,"byte_end":785191,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Isometry<N, D, R>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self`.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{Isometry2, Point2, Vector2};\n let iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n let inv = iso.inverse();\n let pt = Point2::new(1.0, 2.0);\n\n assert_eq!(inv * (iso * pt), pt);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":785163,"byte_end":785172,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5858},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":785731,"byte_end":785742,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<Isometry<N, D, R>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self` in-place.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{Isometry2, Point2, Vector2};\n let mut iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n let pt = Point2::new(1.0, 2.0);\n let transformed_pt = iso * pt;\n iso.inverse_mut();\n\n assert_eq!(iso * transformed_pt, pt);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":785710,"byte_end":785719,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5859},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":786454,"byte_end":786476,"line_start":189,"line_end":189,"column_start":12,"column_end":34},"name":"append_translation_mut","qualname":"<Isometry<N, D, R>>::append_translation_mut","value":"fn (&mut self, t: &Translation<N, D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends to `self` the given translation in-place.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{Isometry2, Translation2, Vector2};\n let mut iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n let tra = Translation2::new(3.0, 4.0);\n // Same as `iso = tra * iso`.\n iso.append_translation_mut(&tra);\n\n assert_eq!(iso.translation, Translation2::new(4.0, 6.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":786433,"byte_end":786442,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5860},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":787195,"byte_end":787214,"line_start":209,"line_end":209,"column_start":12,"column_end":31},"name":"append_rotation_mut","qualname":"<Isometry<N, D, R>>::append_rotation_mut","value":"fn (&mut self, r: &R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends to `self` the given rotation in-place.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry2, Translation2, UnitComplex, Vector2};\n let mut iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::PI / 6.0);\n let rot = UnitComplex::new(f32::consts::PI / 2.0);\n // Same as `iso = rot * iso`.\n iso.append_rotation_mut(&rot);\n\n assert_relative_eq!(iso, Isometry2::new(Vector2::new(-2.0, 1.0), f32::consts::PI * 2.0 / 3.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":787174,"byte_end":787183,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":788067,"byte_end":788096,"line_start":231,"line_end":231,"column_start":12,"column_end":41},"name":"append_rotation_wrt_point_mut","qualname":"<Isometry<N, D, R>>::append_rotation_wrt_point_mut","value":"fn (&mut self, r: &R, p: &Point<N, D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that\n lets `p` invariant.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry2, Translation2, UnitComplex, Vector2, Point2};\n let mut iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let pt = Point2::new(1.0, 0.0);\n iso.append_rotation_wrt_point_mut(&rot, &pt);\n\n assert_relative_eq!(iso * pt, Point2::new(-2.0, 0.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":788046,"byte_end":788055,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5862},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":788969,"byte_end":788999,"line_start":254,"line_end":254,"column_start":12,"column_end":42},"name":"append_rotation_wrt_center_mut","qualname":"<Isometry<N, D, R>>::append_rotation_wrt_center_mut","value":"fn (&mut self, r: &R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends in-place to `self` a rotation centered at the point with coordinates\n `self.translation`.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{Isometry2, Translation2, UnitComplex, Vector2, Point2};\n let mut iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n iso.append_rotation_wrt_center_mut(&rot);\n\n // The translation part should not have changed.\n assert_eq!(iso.translation.vector, Vector2::new(1.0, 2.0));\n assert_eq!(iso.rotation, UnitComplex::new(f32::consts::PI));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":788948,"byte_end":788957,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":789818,"byte_end":789833,"line_start":276,"line_end":276,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Isometry<N, D, R>>::transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by this isometry.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry3, Translation3, UnitQuaternion, Vector3, Point3};\n let tra = Translation3::new(0.0, 0.0, 3.0);\n let rot = UnitQuaternion::from_scaled_axis(Vector3::y() * f32::consts::FRAC_PI_2);\n let iso = Isometry3::from_parts(tra, rot);\n\n let transformed_point = iso.transform_point(&Point3::new(1.0, 2.0, 3.0));\n assert_relative_eq!(transformed_point, Point3::new(3.0, 2.0, 2.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":789797,"byte_end":789806,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5864},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":790690,"byte_end":790706,"line_start":299,"line_end":299,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Isometry<N, D, R>>::transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by this isometry, ignoring the translation\n component of the isometry.\n\n This is the same as the multiplication `self * v`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry3, Translation3, UnitQuaternion, Vector3};\n let tra = Translation3::new(0.0, 0.0, 3.0);\n let rot = UnitQuaternion::from_scaled_axis(Vector3::y() * f32::consts::FRAC_PI_2);\n let iso = Isometry3::from_parts(tra, rot);\n\n let transformed_point = iso.transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n assert_relative_eq!(transformed_point, Vector3::new(3.0, 2.0, -1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":790669,"byte_end":790678,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5865},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":791583,"byte_end":791606,"line_start":321,"line_end":321,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<Isometry<N, D, R>>::inverse_transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by the inverse of this isometry. This may be\n less expensive than computing the entire isometry inverse and then\n transforming the point.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry3, Translation3, UnitQuaternion, Vector3, Point3};\n let tra = Translation3::new(0.0, 0.0, 3.0);\n let rot = UnitQuaternion::from_scaled_axis(Vector3::y() * f32::consts::FRAC_PI_2);\n let iso = Isometry3::from_parts(tra, rot);\n\n let transformed_point = iso.inverse_transform_point(&Point3::new(1.0, 2.0, 3.0));\n assert_relative_eq!(transformed_point, Point3::new(0.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":791562,"byte_end":791571,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5866},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":792613,"byte_end":792637,"line_start":345,"line_end":345,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<Isometry<N, D, R>>::inverse_transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by the inverse of this isometry, ignoring the\n translation component of the isometry. This may be\n less expensive than computing the entire isometry inverse and then\n transforming the point.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry3, Translation3, UnitQuaternion, Vector3};\n let tra = Translation3::new(0.0, 0.0, 3.0);\n let rot = UnitQuaternion::from_scaled_axis(Vector3::y() * f32::consts::FRAC_PI_2);\n let iso = Isometry3::from_parts(tra, rot);\n\n let transformed_point = iso.inverse_transform_vector(&Vector3::new(1.0, 2.0, 3.0));\n assert_relative_eq!(transformed_point, Vector3::new(-3.0, 2.0, 1.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":792592,"byte_end":792601,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5871},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":793834,"byte_end":793848,"line_start":373,"line_end":373,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Isometry<N, D, R>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this isometry into its equivalent homogeneous transformation matrix.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry2, Vector2, Matrix3};\n let iso = Isometry2::new(Vector2::new(10.0, 20.0), f32::consts::FRAC_PI_6);\n let expected = Matrix3::new(0.8660254, -0.5,      10.0,\n                             0.5,       0.8660254, 20.0,\n                             0.0,       0.0,       1.0);\n\n assert_relative_eq!(iso.to_homogeneous(), expected, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":793813,"byte_end":793822,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":5998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alias.rs","byte_start":802281,"byte_end":802290,"line_start":6,"line_end":6,"column_start":10,"column_end":19},"name":"Isometry2","qualname":"::geometry::isometry_alias::Isometry2","value":"Isometry<N, U2, UnitComplex<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional direct isometry using a unit complex number for its rotational part. Also known as a rigid-body motion, or as an element of SE(2).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6000},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alias.rs","byte_start":802486,"byte_end":802495,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"Isometry3","qualname":"::geometry::isometry_alias::Isometry3","value":"Isometry<N, U3, UnitQuaternion<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional direct isometry using a unit quaternion for its rotational part. Also known as a rigid-body motion, or as an element of SE(3).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alias.rs","byte_start":802694,"byte_end":802709,"line_start":12,"line_end":12,"column_start":10,"column_end":25},"name":"IsometryMatrix2","qualname":"::geometry::isometry_alias::IsometryMatrix2","value":"Isometry<N, U2, Rotation2<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional direct isometry using a rotation matrix for its rotational part. Also known as a rigid-body motion, or as an element of SE(2).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alias.rs","byte_start":802903,"byte_end":802918,"line_start":15,"line_end":15,"column_start":10,"column_end":25},"name":"IsometryMatrix3","qualname":"::geometry::isometry_alias::IsometryMatrix3","value":"Isometry<N, U3, Rotation3<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional direct isometry using a rotation matrix for its rotational part. Also known as a rigid-body motion, or as an element of SE(3).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6039},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":804103,"byte_end":804111,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"identity","qualname":"<Isometry<N, D, R>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity isometry.\n\n # Example\n\n ```\n # use nalgebra::{Isometry2, Point2, Isometry3, Point3};\n\n let iso = Isometry2::identity();\n let pt = Point2::new(1.0, 2.0);\n assert_eq!(iso * pt, pt);\n\n let iso = Isometry3::identity();\n let pt = Point3::new(1.0, 2.0, 3.0);\n assert_eq!(iso * pt, pt);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":804082,"byte_end":804091,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6040},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":804879,"byte_end":804897,"line_start":62,"line_end":62,"column_start":12,"column_end":30},"name":"rotation_wrt_point","qualname":"<Isometry<N, D, R>>::rotation_wrt_point","value":"fn (r: R, p: Point<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The isometry that applies the rotation `r` with its axis passing through the point `p`.\n This effectively lets `p` invariant.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Isometry2, Point2, UnitComplex};\n let rot = UnitComplex::new(f32::consts::PI);\n let pt = Point2::new(1.0, 0.0);\n let iso = Isometry2::rotation_wrt_point(rot, pt);\n\n assert_eq!(iso * pt, pt); // The rotation center is not affected.\n assert_relative_eq!(iso * Point2::new(1.0, 2.0), Point2::new(1.0, -2.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":804858,"byte_end":804867,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6055},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806661,"byte_end":806664,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<Isometry<N, U2, Rotation2<N>>>::new","value":"fn (translation: Vector2<N>, angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new 2D isometry from a translation and a rotation angle.\n\n Its rotational part is represented as a 2x2 rotation matrix.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{Isometry2, Vector2, Point2};\n let iso = Isometry2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n\n assert_eq!(iso * Point2::new(3.0, 4.0), Point2::new(-3.0, 5.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806640,"byte_end":806649,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6056},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806936,"byte_end":806947,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"translation","qualname":"<Isometry<N, U2, Rotation2<N>>>::translation","value":"fn (x: N, y: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new isometry from the given translation coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806915,"byte_end":806924,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6057},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807113,"byte_end":807121,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Isometry<N, U2, Rotation2<N>>>::rotation","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new isometry from the given rotation angle.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807092,"byte_end":807101,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6060},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807736,"byte_end":807739,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Isometry<N, U2, UnitComplex<N>>>::new","value":"fn (translation: Vector2<N>, angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new 2D isometry from a translation and a rotation angle.\n\n Its rotational part is represented as an unit complex number.\n\n # Example\n\n ```\n # use std::f32;\n # use nalgebra::{IsometryMatrix2, Point2, Vector2};\n let iso = IsometryMatrix2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2);\n\n assert_eq!(iso * Point2::new(3.0, 4.0), Point2::new(-3.0, 5.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807715,"byte_end":807724,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6061},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":808012,"byte_end":808023,"line_start":170,"line_end":170,"column_start":12,"column_end":23},"name":"translation","qualname":"<Isometry<N, U2, UnitComplex<N>>>::translation","value":"fn (x: N, y: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new isometry from the given translation coordinates.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807991,"byte_end":808000,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6062},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":808215,"byte_end":808223,"line_start":176,"line_end":176,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Isometry<N, U2, UnitComplex<N>>>::rotation","value":"fn (angle: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new isometry from the given rotation angle.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":808194,"byte_end":808203,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":19364},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":839723,"byte_end":839733,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"Similarity","qualname":"::geometry::similarity::Similarity","value":"Similarity { isometry }","parent":null,"children":[{"krate":0,"index":19368},{"krate":0,"index":19369}],"decl_id":null,"docs":" A similarity, i.e., an uniform scaling, followed by a rotation, followed by a translation.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":839096,"byte_end":839106,"line_start":23,"line_end":23,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":19368},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":839891,"byte_end":839899,"line_start":48,"line_end":48,"column_start":9,"column_end":17},"name":"isometry","qualname":"::geometry::similarity::Similarity::isometry","value":"geometry::isometry::Isometry<N, D, R>","parent":{"krate":0,"index":19364},"children":[],"decl_id":null,"docs":" The part of this similarity that does not include the scaling factor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841440,"byte_end":841450,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Similarity<N, D, R>>::from_parts","value":"fn (translation: Translation<N, D>, rotation: R, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new similarity from its rotational and translational parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841419,"byte_end":841428,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841745,"byte_end":841758,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"from_isometry","qualname":"<Similarity<N, D, R>>::from_isometry","value":"fn (isometry: Isometry<N, D, R>, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new similarity from its rotational and translational parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841724,"byte_end":841733,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842125,"byte_end":842137,"line_start":130,"line_end":130,"column_start":12,"column_end":24},"name":"from_scaling","qualname":"<Similarity<N, D, R>>::from_scaling","value":"fn (scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new similarity that applies only a scaling factor.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842104,"byte_end":842113,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842275,"byte_end":842282,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Similarity<N, D, R>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842254,"byte_end":842263,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842440,"byte_end":842451,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<Similarity<N, D, R>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts `self` in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842419,"byte_end":842428,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6209},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842702,"byte_end":842713,"line_start":152,"line_end":152,"column_start":12,"column_end":23},"name":"set_scaling","qualname":"<Similarity<N, D, R>>::set_scaling","value":"fn (&mut self, scaling: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The scaling factor of this similarity transformation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842681,"byte_end":842690,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":843003,"byte_end":843010,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"scaling","qualname":"<Similarity<N, D, R>>::scaling","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The scaling factor of this similarity transformation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":842982,"byte_end":842991,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6211},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":843171,"byte_end":843186,"line_start":169,"line_end":169,"column_start":12,"column_end":27},"name":"prepend_scaling","qualname":"<Similarity<N, D, R>>::prepend_scaling","value":"fn (&self, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The similarity transformation that applies a scaling factor `scaling` before `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":843150,"byte_end":843159,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6212},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":843553,"byte_end":843567,"line_start":180,"line_end":180,"column_start":12,"column_end":26},"name":"append_scaling","qualname":"<Similarity<N, D, R>>::append_scaling","value":"fn (&self, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The similarity transformation that applies a scaling factor `scaling` after `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":843532,"byte_end":843541,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6213},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844067,"byte_end":844086,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"prepend_scaling_mut","qualname":"<Similarity<N, D, R>>::prepend_scaling_mut","value":"fn (&mut self, scaling: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to the similarity transformation that applies a scaling factor `scaling` before `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844046,"byte_end":844055,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6214},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844421,"byte_end":844439,"line_start":206,"line_end":206,"column_start":12,"column_end":30},"name":"append_scaling_mut","qualname":"<Similarity<N, D, R>>::append_scaling_mut","value":"fn (&mut self, scaling: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to the similarity transformation that applies a scaling factor `scaling` after `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844400,"byte_end":844409,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6215},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844779,"byte_end":844801,"line_start":218,"line_end":218,"column_start":12,"column_end":34},"name":"append_translation_mut","qualname":"<Similarity<N, D, R>>::append_translation_mut","value":"fn (&mut self, t: &Translation<N, D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends to `self` the given translation in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844758,"byte_end":844767,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6216},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844973,"byte_end":844992,"line_start":224,"line_end":224,"column_start":12,"column_end":31},"name":"append_rotation_mut","qualname":"<Similarity<N, D, R>>::append_rotation_mut","value":"fn (&mut self, r: &R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends to `self` the given rotation in-place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":844952,"byte_end":844961,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6217},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":845215,"byte_end":845244,"line_start":231,"line_end":231,"column_start":12,"column_end":41},"name":"append_rotation_wrt_point_mut","qualname":"<Similarity<N, D, R>>::append_rotation_wrt_point_mut","value":"fn (&mut self, r: &R, p: &Point<N, D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends in-place to `self` a rotation centered at the point `p`, i.e., the rotation that\n lets `p` invariant.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":845194,"byte_end":845203,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6218},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":845485,"byte_end":845515,"line_start":238,"line_end":238,"column_start":12,"column_end":42},"name":"append_rotation_wrt_center_mut","qualname":"<Similarity<N, D, R>>::append_rotation_wrt_center_mut","value":"fn (&mut self, r: &R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends in-place to `self` a rotation centered at the point with coordinates\n `self.translation`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":845464,"byte_end":845473,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6219},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":846282,"byte_end":846297,"line_start":258,"line_end":258,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Similarity<N, D, R>>::transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by this similarity.\n\n This is the same as the multiplication `self * pt`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Point3, Similarity3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n let translation = Vector3::new(1.0, 2.0, 3.0);\n let sim = Similarity3::new(translation, axisangle, 3.0);\n let transformed_point = sim.transform_point(&Point3::new(4.0, 5.0, 6.0));\n assert_relative_eq!(transformed_point, Point3::new(19.0, 17.0, -9.0), epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":846261,"byte_end":846270,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6220},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":847092,"byte_end":847108,"line_start":279,"line_end":279,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Similarity<N, D, R>>::transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by this similarity, ignoring the translational\n component.\n\n This is the same as the multiplication `self * t`.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Similarity3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n let translation = Vector3::new(1.0, 2.0, 3.0);\n let sim = Similarity3::new(translation, axisangle, 3.0);\n let transformed_vector = sim.transform_vector(&Vector3::new(4.0, 5.0, 6.0));\n assert_relative_eq!(transformed_vector, Vector3::new(18.0, 15.0, -12.0), epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":847071,"byte_end":847080,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6221},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":847919,"byte_end":847942,"line_start":299,"line_end":299,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<Similarity<N, D, R>>::inverse_transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by the inverse of this similarity. This may\n be cheaper than inverting the similarity and then transforming the\n given point.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Point3, Similarity3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n let translation = Vector3::new(1.0, 2.0, 3.0);\n let sim = Similarity3::new(translation, axisangle, 2.0);\n let transformed_point = sim.inverse_transform_point(&Point3::new(4.0, 5.0, 6.0));\n assert_relative_eq!(transformed_point, Point3::new(-1.5, 1.5, 1.5), epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":847898,"byte_end":847907,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6222},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":848837,"byte_end":848861,"line_start":319,"line_end":319,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<Similarity<N, D, R>>::inverse_transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by the inverse of this similarity,\n ignoring the translational component. This may be cheaper than\n inverting the similarity and then transforming the given vector.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Similarity3, Vector3};\n let axisangle = Vector3::y() * f32::consts::FRAC_PI_2;\n let translation = Vector3::new(1.0, 2.0, 3.0);\n let sim = Similarity3::new(translation, axisangle, 2.0);\n let transformed_vector = sim.inverse_transform_vector(&Vector3::new(4.0, 5.0, 6.0));\n assert_relative_eq!(transformed_vector, Vector3::new(-3.0, 2.5, 2.0), epsilon = 1.0e-5);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":848816,"byte_end":848825,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849544,"byte_end":849558,"line_start":333,"line_end":333,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Similarity<N, D, R>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this similarity into its equivalent homogeneous transformation matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849523,"byte_end":849532,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":6350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alias.rs","byte_start":857538,"byte_end":857549,"line_start":6,"line_end":6,"column_start":10,"column_end":21},"name":"Similarity2","qualname":"::geometry::similarity_alias::Similarity2","value":"Similarity<N, U2, UnitComplex<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional similarity.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alias.rs","byte_start":857632,"byte_end":857643,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"Similarity3","qualname":"::geometry::similarity_alias::Similarity3","value":"Similarity<N, U3, UnitQuaternion<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional similarity.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alias.rs","byte_start":857775,"byte_end":857792,"line_start":12,"line_end":12,"column_start":10,"column_end":27},"name":"SimilarityMatrix2","qualname":"::geometry::similarity_alias::SimilarityMatrix2","value":"Similarity<N, U2, Rotation2<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 2-dimensional similarity using a rotation matrix for its rotation part.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alias.rs","byte_start":857919,"byte_end":857936,"line_start":15,"line_end":15,"column_start":10,"column_end":27},"name":"SimilarityMatrix3","qualname":"::geometry::similarity_alias::SimilarityMatrix3","value":"Similarity<N, U3, Rotation3<N>>","parent":null,"children":[],"decl_id":null,"docs":" A 3-dimensional similarity using a rotation matrix for its rotation part.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6389},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859122,"byte_end":859130,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"identity","qualname":"<Similarity<N, D, R>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity similarity.\n\n # Example\n\n ```\n # use nalgebra::{Similarity2, Point2, Similarity3, Point3};\n\n let sim = Similarity2::identity();\n let pt = Point2::new(1.0, 2.0);\n assert_eq!(sim * pt, pt);\n\n let sim = Similarity3::identity();\n let pt = Point3::new(1.0, 2.0, 3.0);\n assert_eq!(sim * pt, pt);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859101,"byte_end":859110,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6406},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":860709,"byte_end":860727,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"rotation_wrt_point","qualname":"<Similarity<N, D, R>>::rotation_wrt_point","value":"fn (r: R, p: Point<N, D>, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The similarity that applies the scaling factor `scaling`, followed by the rotation `r` with\n its axis passing through the point `p`.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Similarity2, Point2, UnitComplex};\n let rot = UnitComplex::new(f32::consts::FRAC_PI_2);\n let pt = Point2::new(3.0, 2.0);\n let sim = Similarity2::rotation_wrt_point(rot, pt, 4.0);\n\n assert_relative_eq!(sim * Point2::new(1.0, 2.0), Point2::new(-3.0, 3.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":860688,"byte_end":860697,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6409},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862070,"byte_end":862073,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<Similarity<N, U2, Rotation2<N>>>::new","value":"fn (translation: Vector2<N>, angle: N, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new similarity from a translation, a rotation, and an uniform scaling factor.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{SimilarityMatrix2, Vector2, Point2};\n let sim = SimilarityMatrix2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2, 3.0);\n\n assert_relative_eq!(sim * Point2::new(2.0, 4.0), Point2::new(-11.0, 8.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862049,"byte_end":862058,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6412},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862810,"byte_end":862813,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<Similarity<N, U2, UnitComplex<N>>>::new","value":"fn (translation: Vector2<N>, angle: N, scaling: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new similarity from a translation and a rotation angle.\n\n # Example\n\n ```\n # #[macro_use] extern crate approx;\n # use std::f32;\n # use nalgebra::{Similarity2, Vector2, Point2};\n let sim = Similarity2::new(Vector2::new(1.0, 2.0), f32::consts::FRAC_PI_2, 3.0);\n\n assert_relative_eq!(sim * Point2::new(2.0, 4.0), Point2::new(-11.0, 8.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862789,"byte_end":862798,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":19913},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894166,"byte_end":894168,"line_start":27,"line_end":27,"column_start":15,"column_end":17},"name":"xx","qualname":"<Point<N, D>>::xx","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19914},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894203,"byte_end":894206,"line_start":28,"line_end":28,"column_start":15,"column_end":18},"name":"xxx","qualname":"<Point<N, D>>::xxx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19918},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894244,"byte_end":894246,"line_start":30,"line_end":30,"column_start":15,"column_end":17},"name":"xy","qualname":"<Point<N, D>>::xy","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19919},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894281,"byte_end":894283,"line_start":31,"line_end":31,"column_start":15,"column_end":17},"name":"yx","qualname":"<Point<N, D>>::yx","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19920},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894318,"byte_end":894320,"line_start":32,"line_end":32,"column_start":15,"column_end":17},"name":"yy","qualname":"<Point<N, D>>::yy","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19921},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894355,"byte_end":894358,"line_start":33,"line_end":33,"column_start":15,"column_end":18},"name":"xxy","qualname":"<Point<N, D>>::xxy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19922},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894395,"byte_end":894398,"line_start":34,"line_end":34,"column_start":15,"column_end":18},"name":"xyx","qualname":"<Point<N, D>>::xyx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19923},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894435,"byte_end":894438,"line_start":35,"line_end":35,"column_start":15,"column_end":18},"name":"xyy","qualname":"<Point<N, D>>::xyy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894475,"byte_end":894478,"line_start":36,"line_end":36,"column_start":15,"column_end":18},"name":"yxx","qualname":"<Point<N, D>>::yxx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19925},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894515,"byte_end":894518,"line_start":37,"line_end":37,"column_start":15,"column_end":18},"name":"yxy","qualname":"<Point<N, D>>::yxy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19926},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894555,"byte_end":894558,"line_start":38,"line_end":38,"column_start":15,"column_end":18},"name":"yyx","qualname":"<Point<N, D>>::yyx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19927},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894595,"byte_end":894598,"line_start":39,"line_end":39,"column_start":15,"column_end":18},"name":"yyy","qualname":"<Point<N, D>>::yyy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19931},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894636,"byte_end":894638,"line_start":41,"line_end":41,"column_start":15,"column_end":17},"name":"xz","qualname":"<Point<N, D>>::xz","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894673,"byte_end":894675,"line_start":42,"line_end":42,"column_start":15,"column_end":17},"name":"yz","qualname":"<Point<N, D>>::yz","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19933},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894710,"byte_end":894712,"line_start":43,"line_end":43,"column_start":15,"column_end":17},"name":"zx","qualname":"<Point<N, D>>::zx","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894747,"byte_end":894749,"line_start":44,"line_end":44,"column_start":15,"column_end":17},"name":"zy","qualname":"<Point<N, D>>::zy","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894784,"byte_end":894786,"line_start":45,"line_end":45,"column_start":15,"column_end":17},"name":"zz","qualname":"<Point<N, D>>::zz","value":"fn (&self) -> Point2<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894821,"byte_end":894824,"line_start":46,"line_end":46,"column_start":15,"column_end":18},"name":"xxz","qualname":"<Point<N, D>>::xxz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894861,"byte_end":894864,"line_start":47,"line_end":47,"column_start":15,"column_end":18},"name":"xyz","qualname":"<Point<N, D>>::xyz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894901,"byte_end":894904,"line_start":48,"line_end":48,"column_start":15,"column_end":18},"name":"xzx","qualname":"<Point<N, D>>::xzx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894941,"byte_end":894944,"line_start":49,"line_end":49,"column_start":15,"column_end":18},"name":"xzy","qualname":"<Point<N, D>>::xzy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19940},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":894981,"byte_end":894984,"line_start":50,"line_end":50,"column_start":15,"column_end":18},"name":"xzz","qualname":"<Point<N, D>>::xzz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895021,"byte_end":895024,"line_start":51,"line_end":51,"column_start":15,"column_end":18},"name":"yxz","qualname":"<Point<N, D>>::yxz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19942},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895061,"byte_end":895064,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"name":"yyz","qualname":"<Point<N, D>>::yyz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19943},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895101,"byte_end":895104,"line_start":53,"line_end":53,"column_start":15,"column_end":18},"name":"yzx","qualname":"<Point<N, D>>::yzx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19944},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895141,"byte_end":895144,"line_start":54,"line_end":54,"column_start":15,"column_end":18},"name":"yzy","qualname":"<Point<N, D>>::yzy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19945},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895181,"byte_end":895184,"line_start":55,"line_end":55,"column_start":15,"column_end":18},"name":"yzz","qualname":"<Point<N, D>>::yzz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19946},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895221,"byte_end":895224,"line_start":56,"line_end":56,"column_start":15,"column_end":18},"name":"zxx","qualname":"<Point<N, D>>::zxx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19947},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895261,"byte_end":895264,"line_start":57,"line_end":57,"column_start":15,"column_end":18},"name":"zxy","qualname":"<Point<N, D>>::zxy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895301,"byte_end":895304,"line_start":58,"line_end":58,"column_start":15,"column_end":18},"name":"zxz","qualname":"<Point<N, D>>::zxz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19949},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895341,"byte_end":895344,"line_start":59,"line_end":59,"column_start":15,"column_end":18},"name":"zyx","qualname":"<Point<N, D>>::zyx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895381,"byte_end":895384,"line_start":60,"line_end":60,"column_start":15,"column_end":18},"name":"zyy","qualname":"<Point<N, D>>::zyy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19951},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895421,"byte_end":895424,"line_start":61,"line_end":61,"column_start":15,"column_end":18},"name":"zyz","qualname":"<Point<N, D>>::zyz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19952},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895461,"byte_end":895464,"line_start":62,"line_end":62,"column_start":15,"column_end":18},"name":"zzx","qualname":"<Point<N, D>>::zzx","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19953},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895501,"byte_end":895504,"line_start":63,"line_end":63,"column_start":15,"column_end":18},"name":"zzy","qualname":"<Point<N, D>>::zzy","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":19954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":895541,"byte_end":895544,"line_start":64,"line_end":64,"column_start":15,"column_end":18},"name":"zzz","qualname":"<Point<N, D>>::zzz","value":"fn (&self) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Builds a new point from components of `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\swizzle.rs","byte_start":893944,"byte_end":893953,"line_start":16,"line_end":16,"column_start":21,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":6538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896250,"byte_end":896259,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"TCategory","qualname":"::geometry::transform::TCategory","value":"TCategory: Any + Debug + Copy + PartialEq + Send","parent":null,"children":[{"krate":0,"index":6539},{"krate":0,"index":6540}],"decl_id":null,"docs":" Trait implemented by phantom types identifying the projective transformation type.\n\n NOTE: this trait is not intended to be implemented outside of the `nalgebra` crate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6539},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896439,"byte_end":896453,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"has_normalizer","qualname":"::geometry::transform::TCategory::has_normalizer","value":"fn () -> bool","parent":{"krate":0,"index":6538},"children":[],"decl_id":null,"docs":" Indicates whether a `Transform` with the category `Self` has a bottom-row different from\n `0 0 .. 1`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896422,"byte_end":896431,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6540},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896614,"byte_end":896642,"line_start":31,"line_end":31,"column_start":8,"column_end":36},"name":"check_homogeneous_invariants","qualname":"::geometry::transform::TCategory::check_homogeneous_invariants","value":"fn <N, D> (mat: &MatrixN<N, D>) -> bool","parent":{"krate":0,"index":6538},"children":[],"decl_id":null,"docs":" Checks that the given matrix is a valid homogeneous representation of an element of the\n category `Self`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6543},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896956,"byte_end":896968,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"TCategoryMul","qualname":"::geometry::transform::TCategoryMul","value":"TCategoryMul<Other: TCategory>: TCategory","parent":null,"children":[{"krate":0,"index":6545}],"decl_id":null,"docs":" Traits that gives the `Transform` category that is compatible with the result of the\n multiplication of transformations with categories `Self` and `Other`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897225,"byte_end":897239,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"name":"Representative","qualname":"::geometry::transform::TCategoryMul::Representative","value":"type Representative: TCategory;","parent":{"krate":0,"index":6543},"children":[],"decl_id":null,"docs":" The transform category that results from the multiplication of a `Transform<Self>` to a\n `Transform<Other>`. This is usually equal to `Self` or `Other`, whichever is the most\n general category.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6546},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897344,"byte_end":897360,"line_start":47,"line_end":47,"column_start":11,"column_end":27},"name":"SuperTCategoryOf","qualname":"::geometry::transform::SuperTCategoryOf","value":"SuperTCategoryOf<Other: TCategory>: TCategory","parent":null,"children":[],"decl_id":null,"docs":" Indicates that `Self` is a more general `Transform` category than `Other`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897547,"byte_end":897561,"line_start":52,"line_end":52,"column_start":11,"column_end":25},"name":"SubTCategoryOf","qualname":"::geometry::transform::SubTCategoryOf","value":"SubTCategoryOf<Other: TCategory>: TCategory","parent":null,"children":[],"decl_id":null,"docs":" Indicates that `Self` is a more specific `Transform` category than `Other`.\n\n Automatically implemented based on `SuperTCategoryOf`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19955},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897838,"byte_end":897846,"line_start":62,"line_end":62,"column_start":10,"column_end":18},"name":"TGeneral","qualname":"::geometry::transform::TGeneral","value":"TGeneral::{}","parent":null,"children":[],"decl_id":null,"docs":" Tag representing the most general (not necessarily inversible) `Transform` type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19970},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897978,"byte_end":897989,"line_start":66,"line_end":66,"column_start":10,"column_end":21},"name":"TProjective","qualname":"::geometry::transform::TProjective","value":"TProjective::{}","parent":null,"children":[],"decl_id":null,"docs":" Tag representing the most general inversible `Transform` type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":19985},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898144,"byte_end":898151,"line_start":70,"line_end":70,"column_start":10,"column_end":17},"name":"TAffine","qualname":"::geometry::transform::TAffine","value":"TAffine::{}","parent":null,"children":[],"decl_id":null,"docs":" Tag representing an affine `Transform`. Its bottom-row is equal to `(0, 0 ... 0, 1)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20015},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":900358,"byte_end":900367,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"Transform","qualname":"::geometry::transform::Transform","value":"Transform {  }","parent":null,"children":[{"krate":0,"index":20019},{"krate":0,"index":20020}],"decl_id":null,"docs":" A transformation matrix in homogeneous coordinates.\n\n It is stored as a matrix with dimensions `(D + 1, D + 1)`, e.g., it stores a 4x4 matrix for a\n 3D transformation.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":900319,"byte_end":900329,"line_start":158,"line_end":158,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":6596},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903169,"byte_end":903190,"line_start":236,"line_end":236,"column_start":12,"column_end":33},"name":"from_matrix_unchecked","qualname":"<Transform<N, D, C>>::from_matrix_unchecked","value":"fn (matrix: MatrixN<N, DimNameSum<D, U1>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new transformation from the given homogeneous matrix. The transformation category\n of `Self` is not checked to be verified by the given matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903148,"byte_end":903157,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6597},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903738,"byte_end":903748,"line_start":256,"line_end":256,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Transform<N, D, C>>::into_inner","value":"fn (self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying matrix.\n\n # Examples\n ```\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(1.0, 2.0, 0.0,\n                      3.0, 4.0, 0.0,\n                      0.0, 0.0, 1.0);\n let t = Transform2::from_matrix_unchecked(m);\n assert_eq!(t.into_inner(), m);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903717,"byte_end":903726,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6598},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903994,"byte_end":904000,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Transform<N, D, C>>::unwrap","value":"fn (self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying matrix.\n Deprecated: Use [Transform::into_inner] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `.into_inner()` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903919,"byte_end":903968,"line_start":262,"line_end":262,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":903973,"byte_end":903982,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6599},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":904469,"byte_end":904475,"line_start":281,"line_end":281,"column_start":12,"column_end":18},"name":"matrix","qualname":"<Transform<N, D, C>>::matrix","value":"fn (&self) -> &MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying matrix.\n\n # Examples\n ```\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(1.0, 2.0, 0.0,\n                      3.0, 4.0, 0.0,\n                      0.0, 0.0, 1.0);\n let t = Transform2::from_matrix_unchecked(m);\n assert_eq!(*t.matrix(), m);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":904448,"byte_end":904457,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6600},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":905382,"byte_end":905402,"line_start":308,"line_end":308,"column_start":12,"column_end":32},"name":"matrix_mut_unchecked","qualname":"<Transform<N, D, C>>::matrix_mut_unchecked","value":"fn (&mut self) -> &mut MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the underlying matrix.\n\n It is `_unchecked` because direct modifications of this matrix may break invariants\n identified by this transformation category.\n\n # Examples\n ```\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(1.0, 2.0, 0.0,\n                      3.0, 4.0, 0.0,\n                      0.0, 0.0, 1.0);\n let mut t = Transform2::from_matrix_unchecked(m);\n t.matrix_mut_unchecked().m12 = 42.0;\n t.matrix_mut_unchecked().m23 = 90.0;\n\n\n let expected = Matrix3::new(1.0, 42.0, 0.0,\n                             3.0, 4.0,  90.0,\n                             0.0, 0.0,  1.0);\n assert_eq!(*t.matrix(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":905361,"byte_end":905370,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6601},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":905874,"byte_end":905886,"line_start":319,"line_end":319,"column_start":12,"column_end":24},"name":"set_category","qualname":"<Transform<N, D, C>>::set_category","value":"fn <CNew> (self) -> Transform<N, D, CNew>","parent":null,"children":[],"decl_id":null,"docs":" Sets the category of this transform.\n\n This can be done only if the new category is more general than the current one, e.g., a\n transform with category `TProjective` cannot be converted to a transform with category\n `TAffine` because not all projective transformations are affine (the other way-round is\n valid though).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":905853,"byte_end":905862,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6603},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":906248,"byte_end":906259,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"clone_owned","qualname":"<Transform<N, D, C>>::clone_owned","value":"fn (&self) -> Transform<N, D, C>","parent":null,"children":[],"decl_id":null,"docs":" Clones this transform into one that owns its data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":906071,"byte_end":906080,"line_start":324,"line_end":324,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"This method is redundant with automatic `Copy` and the `.clone()` method and will be removed in a future release.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":906085,"byte_end":906236,"line_start":325,"line_end":327,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":6604},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":906810,"byte_end":906824,"line_start":345,"line_end":345,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Transform<N, D, C>>::to_homogeneous","value":"fn (&self) -> MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this transform into its equivalent homogeneous transformation matrix.\n\n # Examples\n ```\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(1.0, 2.0, 0.0,\n                      3.0, 4.0, 0.0,\n                      0.0, 0.0, 1.0);\n let t = Transform2::from_matrix_unchecked(m);\n assert_eq!(t.into_inner(), m);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":906789,"byte_end":906798,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6605},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":907917,"byte_end":907928,"line_start":373,"line_end":373,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<Transform<N, D, C>>::try_inverse","value":"fn (self) -> Option<Transform<N, D, C>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to invert this transformation. You may use `.inverse` instead of this\n transformation has a subcategory of `TProjective` (i.e. if it is a `Projective{2,3}` or `Affine{2,3}`).\n\n # Examples\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(2.0, 2.0, -0.3,\n                      3.0, 4.0, 0.1,\n                      0.0, 0.0, 1.0);\n let t = Transform2::from_matrix_unchecked(m);\n let inv_t = t.try_inverse().unwrap();\n assert_relative_eq!(t * inv_t, Transform2::identity());\n assert_relative_eq!(inv_t * t, Transform2::identity());\n\n // Non-invertible case.\n let m = Matrix3::new(0.0, 2.0, 1.0,\n                      3.0, 0.0, 5.0,\n                      0.0, 0.0, 0.0);\n let t = Transform2::from_matrix_unchecked(m);\n assert!(t.try_inverse().is_none());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":907896,"byte_end":907905,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6606},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":908825,"byte_end":908832,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform<N, D, C>>::inverse","value":"fn (self) -> Transform<N, D, C>","parent":null,"children":[],"decl_id":null,"docs":" Inverts this transformation. Use `.try_inverse` if this transform has the `TGeneral`\n category (i.e., a `Transform{2,3}` may not be invertible).\n\n # Examples\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3, Projective2};\n\n let m = Matrix3::new(2.0, 2.0, -0.3,\n                      3.0, 4.0, 0.1,\n                      0.0, 0.0, 1.0);\n let proj = Projective2::from_matrix_unchecked(m);\n let inv_t = proj.inverse();\n assert_relative_eq!(proj * inv_t, Projective2::identity());\n assert_relative_eq!(inv_t * proj, Projective2::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":908804,"byte_end":908813,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6607},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":910019,"byte_end":910034,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"try_inverse_mut","qualname":"<Transform<N, D, C>>::try_inverse_mut","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to invert this transformation in-place. You may use `.inverse_mut` instead of this\n transformation has a subcategory of `TProjective`.\n\n # Examples\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3, Transform2};\n\n let m = Matrix3::new(2.0, 2.0, -0.3,\n                      3.0, 4.0, 0.1,\n                      0.0, 0.0, 1.0);\n let t = Transform2::from_matrix_unchecked(m);\n let mut inv_t = t;\n assert!(inv_t.try_inverse_mut());\n assert_relative_eq!(t * inv_t, Transform2::identity());\n assert_relative_eq!(inv_t * t, Transform2::identity());\n\n // Non-invertible case.\n let m = Matrix3::new(0.0, 2.0, 1.0,\n                      3.0, 0.0, 5.0,\n                      0.0, 0.0, 0.0);\n let mut t = Transform2::from_matrix_unchecked(m);\n assert!(!t.try_inverse_mut());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":909998,"byte_end":910007,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6608},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":910815,"byte_end":910826,"line_start":451,"line_end":451,"column_start":12,"column_end":23},"name":"inverse_mut","qualname":"<Transform<N, D, C>>::inverse_mut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inverts this transformation in-place. Use `.try_inverse_mut` if this transform has the\n `TGeneral` category (it may not be invertible).\n\n # Examples\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Matrix3, Projective2};\n\n let m = Matrix3::new(2.0, 2.0, -0.3,\n                      3.0, 4.0, 0.1,\n                      0.0, 0.0, 1.0);\n let proj = Projective2::from_matrix_unchecked(m);\n let mut inv_t = proj;\n inv_t.inverse_mut();\n assert_relative_eq!(proj * inv_t, Projective2::identity());\n assert_relative_eq!(inv_t * proj, Projective2::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":910794,"byte_end":910803,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911352,"byte_end":911367,"line_start":470,"line_end":470,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform<N, D, C>>::transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by this transformation.\n\n This is the same as the multiplication `self * pt`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911331,"byte_end":911340,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6614},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911654,"byte_end":911670,"line_start":479,"line_end":479,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform<N, D, C>>::transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by this transformation, ignoring the\n translational component of the transformation.\n\n This is the same as the multiplication `self * v`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911633,"byte_end":911642,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6619},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912222,"byte_end":912245,"line_start":495,"line_end":495,"column_start":12,"column_end":35},"name":"inverse_transform_point","qualname":"<Transform<N, D, C>>::inverse_transform_point","value":"fn (&self, pt: &Point<N, D>) -> Point<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given point by the inverse of this transformation.\n This may be cheaper than inverting the transformation and transforming\n the point.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912201,"byte_end":912210,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912531,"byte_end":912555,"line_start":503,"line_end":503,"column_start":12,"column_end":36},"name":"inverse_transform_vector","qualname":"<Transform<N, D, C>>::inverse_transform_vector","value":"fn (&self, v: &VectorN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Transform the given vector by the inverse of this transformation.\n This may be cheaper than inverting the transformation and transforming\n the vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912510,"byte_end":912519,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912958,"byte_end":912968,"line_start":514,"line_end":514,"column_start":12,"column_end":22},"name":"matrix_mut","qualname":"<Transform<N, D, TGeneral>>::matrix_mut","value":"fn (&mut self) -> &mut MatrixN<N, DimNameSum<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to underlying matrix. Use `.matrix_mut_unchecked` instead if this\n transformation category is not `TGeneral`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912937,"byte_end":912946,"line_start":513,"line_end":513,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":6712},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":919359,"byte_end":919369,"line_start":6,"line_end":6,"column_start":10,"column_end":20},"name":"Transform2","qualname":"::geometry::transform_alias::Transform2","value":"Transform<N, U2, TGeneral>","parent":null,"children":[],"decl_id":null,"docs":" A 2D general transformation that may not be invertible. Stored as an homogeneous 3x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6714},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":919494,"byte_end":919505,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"Projective2","qualname":"::geometry::transform_alias::Projective2","value":"Transform<N, U2, TProjective>","parent":null,"children":[],"decl_id":null,"docs":" An invertible 2D general transformation. Stored as an homogeneous 3x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":919620,"byte_end":919627,"line_start":10,"line_end":10,"column_start":10,"column_end":17},"name":"Affine2","qualname":"::geometry::transform_alias::Affine2","value":"Transform<N, U2, TAffine>","parent":null,"children":[],"decl_id":null,"docs":" A 2D affine transformation. Stored as an homogeneous 3x3 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6718},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":919767,"byte_end":919777,"line_start":13,"line_end":13,"column_start":10,"column_end":20},"name":"Transform3","qualname":"::geometry::transform_alias::Transform3","value":"Transform<N, U3, TGeneral>","parent":null,"children":[],"decl_id":null,"docs":" A 3D general transformation that may not be inversible. Stored as an homogeneous 4x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6720},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":919902,"byte_end":919913,"line_start":15,"line_end":15,"column_start":10,"column_end":21},"name":"Projective3","qualname":"::geometry::transform_alias::Projective3","value":"Transform<N, U3, TProjective>","parent":null,"children":[],"decl_id":null,"docs":" An invertible 3D general transformation. Stored as an homogeneous 4x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6722},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alias.rs","byte_start":920028,"byte_end":920035,"line_start":17,"line_end":17,"column_start":10,"column_end":17},"name":"Affine3","qualname":"::geometry::transform_alias::Affine3","value":"Transform<N, U3, TAffine>","parent":null,"children":[],"decl_id":null,"docs":" A 3D affine transformation. Stored as an homogeneous 4x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6742},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":921294,"byte_end":921302,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform<N, D, C>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new identity transform.\n\n # Example\n\n ```\n # use nalgebra::{Transform2, Projective2, Affine2, Transform3, Projective3, Affine3, Point2, Point3};\n\n let pt = Point2::new(1.0, 2.0);\n let t = Projective2::identity();\n assert_eq!(t * pt, pt);\n\n let aff = Affine2::identity();\n assert_eq!(aff * pt, pt);\n\n let aff = Transform2::identity();\n assert_eq!(aff * pt, pt);\n\n // Also works in 3D.\n let pt = Point3::new(1.0, 2.0, 3.0);\n let t = Projective3::identity();\n assert_eq!(t * pt, pt);\n\n let aff = Affine3::identity();\n assert_eq!(aff * pt, pt);\n\n let aff = Transform3::identity();\n assert_eq!(aff * pt, pt);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":921273,"byte_end":921282,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":947680,"byte_end":947690,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Reflection","qualname":"::geometry::reflection::Reflection","value":"Reflection {  }","parent":null,"children":[{"krate":0,"index":6867},{"krate":0,"index":6868}],"decl_id":null,"docs":" A reflection wrt. a plane.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6873},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":948102,"byte_end":948105,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Reflection<N, D, S>>::new","value":"fn (axis: Unit<Vector<N, D, S>>, bias: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reflection wrt the plane orthogonal to the given axis and bias.\n\n The bias is the position of the plane on the axis. In particular, a bias equal to zero\n represents a plane that passes through the origin.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6874},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":948371,"byte_end":948391,"line_start":30,"line_end":30,"column_start":12,"column_end":32},"name":"new_containing_point","qualname":"<Reflection<N, D, S>>::new_containing_point","value":"fn (axis: Unit<Vector<N, D, S>>, pt: &Point<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reflection wrt. the plane orthogonal to the given axis and that contains the\n point `pt`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":948667,"byte_end":948671,"line_start":43,"line_end":43,"column_start":12,"column_end":16},"name":"axis","qualname":"<Reflection<N, D, S>>::axis","value":"fn (&self) -> &Vector<N, D, S>","parent":null,"children":[],"decl_id":null,"docs":" The reflexion axis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6876},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":948856,"byte_end":948863,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Reflection<N, D, S>>::reflect","value":"fn <R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies the reflection to the columns of `rhs`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6880},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":949652,"byte_end":949669,"line_start":66,"line_end":66,"column_start":12,"column_end":29},"name":"reflect_with_sign","qualname":"<Reflection<N, D, S>>::reflect_with_sign","value":"fn <R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>, sign: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies the reflection to the columns of `rhs`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6884},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":950419,"byte_end":950431,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"reflect_rows","qualname":"<Reflection<N, D, S>>::reflect_rows","value":"fn <R2, C2, S2, S3> (&self, lhs: &mut Matrix<N, R2, C2, S2>, work: &mut Vector<N, R2, S3>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies the reflection to the rows of `lhs`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6889},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":951011,"byte_end":951033,"line_start":102,"line_end":102,"column_start":12,"column_end":34},"name":"reflect_rows_with_sign","qualname":"<Reflection<N, D, S>>::reflect_rows_with_sign","value":"fn <R2, C2, S2, S3> (&self, lhs: &mut Matrix<N, R2, C2, S2>, work: &mut Vector<N, R2, S3>, sign: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies the reflection to the rows of `lhs`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6912},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952126,"byte_end":952139,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"Orthographic3","qualname":"::geometry::orthographic::Orthographic3","value":"Orthographic3 {  }","parent":null,"children":[{"krate":0,"index":6914}],"decl_id":null,"docs":" A 3D orthographic projection stored as an homogeneous 4x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6928},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":955886,"byte_end":955889,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<Orthographic3<N>>::new","value":"fn (left: N, right: N, bottom: N, top: N, znear: N, zfar: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new orthographic projection matrix.\n\n This follows the OpenGL convention, so this will flip the `z` axis.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Point3};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n // Check this projection actually transforms the view cuboid into the double-unit cube.\n // See https://www.nalgebra.org/projections/#orthographic-projection for more details.\n let p1 = Point3::new(1.0, 2.0, -0.1);\n let p2 = Point3::new(1.0, 2.0, -1000.0);\n let p3 = Point3::new(1.0, 20.0, -0.1);\n let p4 = Point3::new(1.0, 20.0, -1000.0);\n let p5 = Point3::new(10.0, 2.0, -0.1);\n let p6 = Point3::new(10.0, 2.0, -1000.0);\n let p7 = Point3::new(10.0, 20.0, -0.1);\n let p8 = Point3::new(10.0, 20.0, -1000.0);\n\n assert_relative_eq!(proj.project_point(&p1), Point3::new(-1.0, -1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p2), Point3::new(-1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p3), Point3::new(-1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p4), Point3::new(-1.0,  1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p5), Point3::new( 1.0, -1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p6), Point3::new( 1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p7), Point3::new( 1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p8), Point3::new( 1.0,  1.0,  1.0));\n\n // This also works with flipped axis. In other words, we allow that\n // `left > right`, `bottom > top`, and/or `znear > zfar`.\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n\n assert_relative_eq!(proj.project_point(&p1), Point3::new( 1.0,  1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p2), Point3::new( 1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p3), Point3::new( 1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p4), Point3::new( 1.0, -1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p5), Point3::new(-1.0,  1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p6), Point3::new(-1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p7), Point3::new(-1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p8), Point3::new(-1.0, -1.0, -1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":955865,"byte_end":955874,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":956976,"byte_end":956997,"line_start":137,"line_end":137,"column_start":12,"column_end":33},"name":"from_matrix_unchecked","qualname":"<Orthographic3<N>>::from_matrix_unchecked","value":"fn (matrix: Matrix4<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given matrix to interpret it as a 3D orthographic matrix.\n\n It is not checked whether or not the given matrix actually represents an orthographic\n projection.\n\n # Example\n ```\n # use nalgebra::{Orthographic3, Point3, Matrix4};\n let mat = Matrix4::new(\n     2.0 / 9.0, 0.0,        0.0,         -11.0 / 9.0,\n     0.0,       2.0 / 18.0, 0.0,         -22.0 / 18.0,\n     0.0,       0.0,       -2.0 / 999.9, -1000.1 / 999.9,\n     0.0,       0.0,        0.0,         1.0\n );\n let proj = Orthographic3::from_matrix_unchecked(mat);\n assert_eq!(proj, Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":956955,"byte_end":956964,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":957198,"byte_end":957206,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"from_fov","qualname":"<Orthographic3<N>>::from_fov","value":"fn (aspect: N, vfov: N, znear: N, zfar: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":957177,"byte_end":957186,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6931},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":958583,"byte_end":958590,"line_start":185,"line_end":185,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Orthographic3<N>>::inverse","value":"fn (&self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the inverse of the underlying homogeneous matrix.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Point3, Matrix4};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n let inv = proj.inverse();\n\n assert_relative_eq!(inv * proj.as_matrix(), Matrix4::identity());\n assert_relative_eq!(proj.as_matrix() * inv, Matrix4::identity());\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n let inv = proj.inverse();\n assert_relative_eq!(inv * proj.as_matrix(), Matrix4::identity());\n assert_relative_eq!(proj.as_matrix() * inv, Matrix4::identity());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":958562,"byte_end":958571,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6932},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":959702,"byte_end":959716,"line_start":218,"line_end":218,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Orthographic3<N>>::to_homogeneous","value":"fn (&self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Computes the corresponding homogeneous matrix.\n\n # Example\n ```\n # use nalgebra::{Orthographic3, Point3, Matrix4};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n let expected = Matrix4::new(\n     2.0 / 9.0, 0.0,        0.0,         -11.0 / 9.0,\n     0.0,       2.0 / 18.0, 0.0,         -22.0 / 18.0,\n     0.0,       0.0,       -2.0 / 999.9, -1000.1 / 999.9,\n     0.0,       0.0,        0.0,         1.0\n );\n assert_eq!(proj.to_homogeneous(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":959681,"byte_end":959690,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6933},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":960384,"byte_end":960393,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"as_matrix","qualname":"<Orthographic3<N>>::as_matrix","value":"fn (&self) -> &Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying homogeneous transformation matrix.\n\n # Example\n ```\n # use nalgebra::{Orthographic3, Point3, Matrix4};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n let expected = Matrix4::new(\n     2.0 / 9.0, 0.0,        0.0,         -11.0 / 9.0,\n     0.0,       2.0 / 18.0, 0.0,         -22.0 / 18.0,\n     0.0,       0.0,       -2.0 / 999.9, -1000.1 / 999.9,\n     0.0,       0.0,        0.0,         1.0\n );\n assert_eq!(*proj.as_matrix(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":960363,"byte_end":960372,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6934},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":960784,"byte_end":960797,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"as_projective","qualname":"<Orthographic3<N>>::as_projective","value":"fn (&self) -> &Projective3<N>","parent":null,"children":[],"decl_id":null,"docs":" A reference to this transformation seen as a `Projective3`.\n\n # Example\n ```\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_eq!(proj.as_projective().to_homogeneous(), proj.to_homogeneous());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":960763,"byte_end":960772,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":961196,"byte_end":961209,"line_start":263,"line_end":263,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<Orthographic3<N>>::to_projective","value":"fn (&self) -> Projective3<N>","parent":null,"children":[],"decl_id":null,"docs":" This transformation seen as a `Projective3`.\n\n # Example\n ```\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_eq!(proj.to_projective().to_homogeneous(), proj.to_homogeneous());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":961175,"byte_end":961184,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":961941,"byte_end":961951,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Orthographic3<N>>::into_inner","value":"fn (self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying homogeneous matrix.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Point3, Matrix4};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n let expected = Matrix4::new(\n     2.0 / 9.0, 0.0,        0.0,         -11.0 / 9.0,\n     0.0,       2.0 / 18.0, 0.0,         -22.0 / 18.0,\n     0.0,       0.0,       -2.0 / 999.9, -1000.1 / 999.9,\n     0.0,       0.0,        0.0,         1.0\n );\n assert_eq!(proj.into_inner(), expected);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":961920,"byte_end":961929,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":962194,"byte_end":962200,"line_start":291,"line_end":291,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Orthographic3<N>>::unwrap","value":"fn (self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying homogeneous matrix.\n Deprecated: Use [Orthographic3::into_inner] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `.into_inner()` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":962119,"byte_end":962168,"line_start":289,"line_end":289,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":962173,"byte_end":962182,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":962721,"byte_end":962725,"line_start":307,"line_end":307,"column_start":12,"column_end":16},"name":"left","qualname":"<Orthographic3<N>>::left","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The left offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.left(), 1.0, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.left(), 10.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":962700,"byte_end":962709,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":963285,"byte_end":963290,"line_start":323,"line_end":323,"column_start":12,"column_end":17},"name":"right","qualname":"<Orthographic3<N>>::right","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The right offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.right(), 10.0, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.right(), 1.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":963264,"byte_end":963273,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6940},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":963852,"byte_end":963858,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"bottom","qualname":"<Orthographic3<N>>::bottom","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The bottom offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.bottom(), 2.0, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.bottom(), 20.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":963831,"byte_end":963840,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":964412,"byte_end":964415,"line_start":355,"line_end":355,"column_start":12,"column_end":15},"name":"top","qualname":"<Orthographic3<N>>::top","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The top offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.top(), 20.0, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.top(), 2.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":964391,"byte_end":964400,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6942},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":964981,"byte_end":964986,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"znear","qualname":"<Orthographic3<N>>::znear","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The near plane offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.znear(), 0.1, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.znear(), 1000.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":964960,"byte_end":964969,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6943},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":965549,"byte_end":965553,"line_start":387,"line_end":387,"column_start":12,"column_end":16},"name":"zfar","qualname":"<Orthographic3<N>>::zfar","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The far plane offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n assert_relative_eq!(proj.zfar(), 1000.0, epsilon = 1.0e-6);\n\n let proj = Orthographic3::new(10.0, 1.0, 20.0, 2.0, 1000.0, 0.1);\n assert_relative_eq!(proj.zfar(), 0.1, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":965528,"byte_end":965537,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6944},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":967101,"byte_end":967114,"line_start":419,"line_end":419,"column_start":12,"column_end":25},"name":"project_point","qualname":"<Orthographic3<N>>::project_point","value":"fn (&self, p: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Projects a point. Faster than matrix multiplication.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Point3};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n\n let p1 = Point3::new(1.0, 2.0, -0.1);\n let p2 = Point3::new(1.0, 2.0, -1000.0);\n let p3 = Point3::new(1.0, 20.0, -0.1);\n let p4 = Point3::new(1.0, 20.0, -1000.0);\n let p5 = Point3::new(10.0, 2.0, -0.1);\n let p6 = Point3::new(10.0, 2.0, -1000.0);\n let p7 = Point3::new(10.0, 20.0, -0.1);\n let p8 = Point3::new(10.0, 20.0, -1000.0);\n\n assert_relative_eq!(proj.project_point(&p1), Point3::new(-1.0, -1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p2), Point3::new(-1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p3), Point3::new(-1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p4), Point3::new(-1.0,  1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p5), Point3::new( 1.0, -1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p6), Point3::new( 1.0, -1.0,  1.0));\n assert_relative_eq!(proj.project_point(&p7), Point3::new( 1.0,  1.0, -1.0));\n assert_relative_eq!(proj.project_point(&p8), Point3::new( 1.0,  1.0,  1.0));\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":967080,"byte_end":967089,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6945},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":968952,"byte_end":968967,"line_start":454,"line_end":454,"column_start":12,"column_end":27},"name":"unproject_point","qualname":"<Orthographic3<N>>::unproject_point","value":"fn (&self, p: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Un-projects a point. Faster than multiplication by the underlying matrix inverse.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Point3};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n\n let p1 = Point3::new(-1.0, -1.0, -1.0);\n let p2 = Point3::new(-1.0, -1.0,  1.0);\n let p3 = Point3::new(-1.0,  1.0, -1.0);\n let p4 = Point3::new(-1.0,  1.0,  1.0);\n let p5 = Point3::new( 1.0, -1.0, -1.0);\n let p6 = Point3::new( 1.0, -1.0,  1.0);\n let p7 = Point3::new( 1.0,  1.0, -1.0);\n let p8 = Point3::new( 1.0,  1.0,  1.0);\n\n assert_relative_eq!(proj.unproject_point(&p1), Point3::new(1.0, 2.0, -0.1), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p2), Point3::new(1.0, 2.0, -1000.0), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p3), Point3::new(1.0, 20.0, -0.1), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p4), Point3::new(1.0, 20.0, -1000.0), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p5), Point3::new(10.0, 2.0, -0.1), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p6), Point3::new(10.0, 2.0, -1000.0), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p7), Point3::new(10.0, 20.0, -0.1), epsilon = 1.0e-6);\n assert_relative_eq!(proj.unproject_point(&p8), Point3::new(10.0, 20.0, -1000.0), epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":968931,"byte_end":968940,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6946},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":970055,"byte_end":970069,"line_start":482,"line_end":482,"column_start":12,"column_end":26},"name":"project_vector","qualname":"<Orthographic3<N>>::project_vector","value":"fn <SB> (&self, p: &Vector<N, U3, SB>) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Projects a vector. Faster than matrix multiplication.\n\n Vectors are not affected by the translation part of the projection.\n\n # Example\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::{Orthographic3, Vector3};\n let proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n\n let v1 = Vector3::x();\n let v2 = Vector3::y();\n let v3 = Vector3::z();\n\n assert_relative_eq!(proj.project_vector(&v1), Vector3::x() * 2.0 / 9.0);\n assert_relative_eq!(proj.project_vector(&v2), Vector3::y() * 2.0 / 18.0);\n assert_relative_eq!(proj.project_vector(&v3), Vector3::z() * -2.0 / 999.9);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":970034,"byte_end":970043,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":970851,"byte_end":970859,"line_start":505,"line_end":505,"column_start":12,"column_end":20},"name":"set_left","qualname":"<Orthographic3<N>>::set_left","value":"fn (&mut self, left: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the left offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_left(2.0);\n assert_relative_eq!(proj.left(), 2.0, epsilon = 1.0e-6);\n\n // It is OK to set a left offset greater than the current right offset.\n proj.set_left(20.0);\n assert_relative_eq!(proj.left(), 20.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":970830,"byte_end":970839,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6949},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":971519,"byte_end":971528,"line_start":524,"line_end":524,"column_start":12,"column_end":21},"name":"set_right","qualname":"<Orthographic3<N>>::set_right","value":"fn (&mut self, right: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the right offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_right(15.0);\n assert_relative_eq!(proj.right(), 15.0, epsilon = 1.0e-6);\n\n // It is OK to set a right offset smaller than the current left offset.\n proj.set_right(-3.0);\n assert_relative_eq!(proj.right(), -3.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":971498,"byte_end":971507,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":972190,"byte_end":972200,"line_start":543,"line_end":543,"column_start":12,"column_end":22},"name":"set_bottom","qualname":"<Orthographic3<N>>::set_bottom","value":"fn (&mut self, bottom: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the bottom offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_bottom(8.0);\n assert_relative_eq!(proj.bottom(), 8.0, epsilon = 1.0e-6);\n\n // It is OK to set a bottom offset greater than the current top offset.\n proj.set_bottom(50.0);\n assert_relative_eq!(proj.bottom(), 50.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":972169,"byte_end":972178,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6951},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":972848,"byte_end":972855,"line_start":562,"line_end":562,"column_start":12,"column_end":19},"name":"set_top","qualname":"<Orthographic3<N>>::set_top","value":"fn (&mut self, top: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the top offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_top(15.0);\n assert_relative_eq!(proj.top(), 15.0, epsilon = 1.0e-6);\n\n // It is OK to set a top offset smaller than the current bottom offset.\n proj.set_top(-3.0);\n assert_relative_eq!(proj.top(), -3.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":972827,"byte_end":972836,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6952},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":973509,"byte_end":973518,"line_start":581,"line_end":581,"column_start":12,"column_end":21},"name":"set_znear","qualname":"<Orthographic3<N>>::set_znear","value":"fn (&mut self, znear: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the near plane offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_znear(8.0);\n assert_relative_eq!(proj.znear(), 8.0, epsilon = 1.0e-6);\n\n // It is OK to set a znear greater than the current zfar.\n proj.set_znear(5000.0);\n assert_relative_eq!(proj.znear(), 5000.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":973488,"byte_end":973497,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6953},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":974163,"byte_end":974171,"line_start":600,"line_end":600,"column_start":12,"column_end":20},"name":"set_zfar","qualname":"<Orthographic3<N>>::set_zfar","value":"fn (&mut self, zfar: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the far plane offset of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_zfar(15.0);\n assert_relative_eq!(proj.zfar(), 15.0, epsilon = 1.0e-6);\n\n // It is OK to set a zfar smaller than the current znear.\n proj.set_zfar(-3.0);\n assert_relative_eq!(proj.zfar(), -3.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":974142,"byte_end":974151,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":974965,"byte_end":974983,"line_start":621,"line_end":621,"column_start":12,"column_end":30},"name":"set_left_and_right","qualname":"<Orthographic3<N>>::set_left_and_right","value":"fn (&mut self, left: N, right: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the view cuboid offsets along the `x` axis.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_left_and_right(7.0, 70.0);\n assert_relative_eq!(proj.left(), 7.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.right(), 70.0, epsilon = 1.0e-6);\n\n // It is also OK to have `left > right`.\n proj.set_left_and_right(70.0, 7.0);\n assert_relative_eq!(proj.left(), 70.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.right(), 7.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":974944,"byte_end":974953,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6955},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":975971,"byte_end":975989,"line_start":646,"line_end":646,"column_start":12,"column_end":30},"name":"set_bottom_and_top","qualname":"<Orthographic3<N>>::set_bottom_and_top","value":"fn (&mut self, bottom: N, top: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the view cuboid offsets along the `y` axis.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_bottom_and_top(7.0, 70.0);\n assert_relative_eq!(proj.bottom(), 7.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.top(), 70.0, epsilon = 1.0e-6);\n\n // It is also OK to have `bottom > top`.\n proj.set_bottom_and_top(70.0, 7.0);\n assert_relative_eq!(proj.bottom(), 70.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.top(), 7.0, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":975950,"byte_end":975959,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":6956},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":976994,"byte_end":977012,"line_start":671,"line_end":671,"column_start":12,"column_end":30},"name":"set_znear_and_zfar","qualname":"<Orthographic3<N>>::set_znear_and_zfar","value":"fn (&mut self, znear: N, zfar: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the near and far plane offsets of the view cuboid.\n\n ```\n # #[macro_use] extern crate approx;\n # use nalgebra::Orthographic3;\n let mut proj = Orthographic3::new(1.0, 10.0, 2.0, 20.0, 0.1, 1000.0);\n proj.set_znear_and_zfar(50.0, 5000.0);\n assert_relative_eq!(proj.znear(), 50.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.zfar(), 5000.0, epsilon = 1.0e-6);\n\n // It is also OK to have `znear > zfar`.\n proj.set_znear_and_zfar(5000.0, 0.5);\n assert_relative_eq!(proj.znear(), 5000.0, epsilon = 1.0e-6);\n assert_relative_eq!(proj.zfar(), 0.5, epsilon = 1.0e-6);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":976973,"byte_end":976982,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979093,"byte_end":979105,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"name":"Perspective3","qualname":"::geometry::perspective::Perspective3","value":"Perspective3 {  }","parent":null,"children":[{"krate":0,"index":6988}],"decl_id":null,"docs":" A 3D perspective projection stored as an homogeneous 4x4 matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":980396,"byte_end":980399,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<Perspective3<N>>::new","value":"fn (aspect: N, fovy: N, znear: N, zfar: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7003},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981252,"byte_end":981273,"line_start":95,"line_end":95,"column_start":12,"column_end":33},"name":"from_matrix_unchecked","qualname":"<Perspective3<N>>::from_matrix_unchecked","value":"fn (matrix: Matrix4<N>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps the given matrix to interpret it as a 3D perspective matrix.\n\n It is not checked whether or not the given matrix actually represents an orthographic\n projection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981231,"byte_end":981240,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981436,"byte_end":981443,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Perspective3<N>>::inverse","value":"fn (&self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the inverse of the underlying homogeneous matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981415,"byte_end":981424,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7005},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981968,"byte_end":981982,"line_start":120,"line_end":120,"column_start":12,"column_end":26},"name":"to_homogeneous","qualname":"<Perspective3<N>>::to_homogeneous","value":"fn (&self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Computes the corresponding homogeneous matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":981947,"byte_end":981956,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7006},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982145,"byte_end":982154,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"as_matrix","qualname":"<Perspective3<N>>::as_matrix","value":"fn (&self) -> &Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying homogeneous transformation matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982124,"byte_end":982133,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7007},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982300,"byte_end":982313,"line_start":132,"line_end":132,"column_start":12,"column_end":25},"name":"as_projective","qualname":"<Perspective3<N>>::as_projective","value":"fn (&self) -> &Projective3<N>","parent":null,"children":[],"decl_id":null,"docs":" A reference to this transformation seen as a `Projective3`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982279,"byte_end":982288,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7008},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982467,"byte_end":982480,"line_start":138,"line_end":138,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<Perspective3<N>>::to_projective","value":"fn (&self) -> Projective3<N>","parent":null,"children":[],"decl_id":null,"docs":" This transformation seen as a `Projective3`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982446,"byte_end":982455,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7009},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982649,"byte_end":982659,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Perspective3<N>>::into_inner","value":"fn (self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying homogeneous matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982628,"byte_end":982637,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982901,"byte_end":982907,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Perspective3<N>>::unwrap","value":"fn (self) -> Matrix4<N>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the underlying homogeneous matrix.\n Deprecated: Use [Perspective3::into_inner] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `.into_inner()` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982826,"byte_end":982875,"line_start":150,"line_end":150,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":982880,"byte_end":982889,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7011},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983050,"byte_end":983056,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"aspect","qualname":"<Perspective3<N>>::aspect","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Gets the `width / height` aspect ratio of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983029,"byte_end":983038,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7012},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983207,"byte_end":983211,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"fovy","qualname":"<Perspective3<N>>::fovy","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Gets the y field of view of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983186,"byte_end":983195,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7013},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983384,"byte_end":983389,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"znear","qualname":"<Perspective3<N>>::znear","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Gets the near plane offset of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983363,"byte_end":983372,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7014},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983687,"byte_end":983691,"line_start":178,"line_end":178,"column_start":12,"column_end":16},"name":"zfar","qualname":"<Perspective3<N>>::zfar","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Gets the far plane offset of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":983666,"byte_end":983675,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7015},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":984119,"byte_end":984132,"line_start":189,"line_end":189,"column_start":12,"column_end":25},"name":"project_point","qualname":"<Perspective3<N>>::project_point","value":"fn (&self, p: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Projects a point. Faster than matrix multiplication.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":984098,"byte_end":984107,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7016},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":984550,"byte_end":984565,"line_start":200,"line_end":200,"column_start":12,"column_end":27},"name":"unproject_point","qualname":"<Perspective3<N>>::unproject_point","value":"fn (&self, p: &Point3<N>) -> Point3<N>","parent":null,"children":[],"decl_id":null,"docs":" Un-projects a point. Faster than multiplication by the matrix inverse.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":984529,"byte_end":984538,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7017},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985024,"byte_end":985038,"line_start":213,"line_end":213,"column_start":12,"column_end":26},"name":"project_vector","qualname":"<Perspective3<N>>::project_vector","value":"fn <SB> (&self, p: &Vector<N, U3, SB>) -> Vector3<N>","parent":null,"children":[],"decl_id":null,"docs":" Projects a vector. Faster than matrix multiplication.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985003,"byte_end":985012,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7019},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985483,"byte_end":985493,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"set_aspect","qualname":"<Perspective3<N>>::set_aspect","value":"fn (&mut self, aspect: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates this perspective matrix with a new `width / height` aspect ratio of the view\n frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985462,"byte_end":985471,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7020},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985814,"byte_end":985822,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"set_fovy","qualname":"<Perspective3<N>>::set_fovy","value":"fn (&mut self, fovy: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates this perspective with a new y field of view of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":985793,"byte_end":985802,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7021},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986172,"byte_end":986181,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"set_znear","qualname":"<Perspective3<N>>::set_znear","value":"fn (&mut self, znear: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates this perspective matrix with a new near plane offset of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986151,"byte_end":986160,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7022},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986404,"byte_end":986412,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"set_zfar","qualname":"<Perspective3<N>>::set_zfar","value":"fn (&mut self, zfar: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates this perspective matrix with a new far plane offset of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986383,"byte_end":986392,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7023},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986644,"byte_end":986662,"line_start":258,"line_end":258,"column_start":12,"column_end":30},"name":"set_znear_and_zfar","qualname":"<Perspective3<N>>::set_znear_and_zfar","value":"fn (&mut self, znear: N, zfar: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates this perspective matrix with new near and far plane offsets of the view frustum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986623,"byte_end":986632,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":7051},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linalg","qualname":"::linalg","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","parent":null,"children":[{"krate":0,"index":7052},{"krate":0,"index":7072},{"krate":0,"index":7120},{"krate":0,"index":7164},{"krate":0,"index":7178},{"krate":0,"index":7233},{"krate":0,"index":7271},{"krate":0,"index":7306},{"krate":0,"index":7337},{"krate":0,"index":7363},{"krate":0,"index":7440},{"krate":0,"index":7489},{"krate":0,"index":7558},{"krate":0,"index":7621},{"krate":0,"index":7720},{"krate":0,"index":7787},{"krate":0,"index":7829},{"krate":0,"index":7864},{"krate":0,"index":7894},{"krate":0,"index":7895},{"krate":0,"index":7896},{"krate":0,"index":7897},{"krate":0,"index":7898},{"krate":0,"index":7899},{"krate":0,"index":7900},{"krate":0,"index":7901},{"krate":0,"index":7902},{"krate":0,"index":7903},{"krate":0,"index":7904},{"krate":0,"index":7905}],"decl_id":null,"docs":" [Reexported at the root of this crate.] Factorization of real matrices.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7052},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\balancing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"balancing","qualname":"::linalg::balancing","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\balancing.rs","parent":null,"children":[{"krate":0,"index":7053},{"krate":0,"index":7054},{"krate":0,"index":7057},{"krate":0,"index":7058},{"krate":0,"index":7061},{"krate":0,"index":7062},{"krate":0,"index":7066},{"krate":0,"index":7069}],"decl_id":null,"docs":" Functions for balancing a matrix.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7066},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\balancing.rs","byte_start":989138,"byte_end":989161,"line_start":15,"line_end":15,"column_start":8,"column_end":31},"name":"balance_parlett_reinsch","qualname":"::linalg::balancing::balance_parlett_reinsch","value":"fn <N, D> (m: &mut MatrixN<N, D>) -> VectorN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Applies in-place a modified Parlett and Reinsch matrix balancing with 2-norm to the matrix `m` and returns\n the corresponding diagonal transformation.\n\n See https://arxiv.org/pdf/1401.5766.pdf\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7069},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\balancing.rs","byte_start":990560,"byte_end":990569,"line_start":67,"line_end":67,"column_start":8,"column_end":17},"name":"unbalance","qualname":"::linalg::balancing::unbalance","value":"fn <N, D> (m: &mut MatrixN<N, D>, d: &VectorN<N, D>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Computes in-place `D * m * D.inverse()`, where `D` is the matrix with diagonal `d`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20728},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":992530,"byte_end":992540,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"Bidiagonal","qualname":"::linalg::bidiagonal::Bidiagonal","value":"Bidiagonal {  }","parent":null,"children":[{"krate":0,"index":20732},{"krate":0,"index":20733},{"krate":0,"index":20734},{"krate":0,"index":20735}],"decl_id":null,"docs":" The bidiagonalization of a general matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":993949,"byte_end":993952,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<Bidiagonal<N, R, C>>::new","value":"fn (mut matrix: MatrixMN<N, R, C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the Bidiagonal decomposition using householder reflections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7101},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":996386,"byte_end":996403,"line_start":153,"line_end":153,"column_start":12,"column_end":29},"name":"is_upper_diagonal","qualname":"<Bidiagonal<N, R, C>>::is_upper_diagonal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether this decomposition contains an upper-diagonal matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":996365,"byte_end":996374,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":996794,"byte_end":996800,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"name":"unpack","qualname":"<Bidiagonal<N, R, C>>::unpack","value":"fn (self) -> (MatrixMN<N, R, DimMinimum<R, C>>, MatrixN<N, DimMinimum<R, C>>,\n MatrixMN<N, DimMinimum<R, C>, C>)","parent":null,"children":[],"decl_id":null,"docs":" Unpacks this decomposition into its three matrix factors `(U, D, V^t)`.\n\n The decomposed matrix `M` is equal to `U * D * V^t`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":996773,"byte_end":996782,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7104},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":997346,"byte_end":997347,"line_start":188,"line_end":188,"column_start":12,"column_end":13},"name":"d","qualname":"<Bidiagonal<N, R, C>>::d","value":"fn (&self) -> MatrixN<N, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the upper trapezoidal submatrix `R` of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":997325,"byte_end":997334,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":998140,"byte_end":998141,"line_start":207,"line_end":207,"column_start":12,"column_end":13},"name":"u","qualname":"<Bidiagonal<N, R, C>>::u","value":"fn (&self) -> MatrixMN<N, R, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal matrix `U` of this `U * D * V` decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7108},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":999131,"byte_end":999134,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"v_t","qualname":"<Bidiagonal<N, R, C>>::v_t","value":"fn (&self) -> MatrixMN<N, DimMinimum<R, C>, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal matrix `V_t` of this `U * D * V_t` decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1000468,"byte_end":1000476,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"diagonal","qualname":"<Bidiagonal<N, R, C>>::diagonal","value":"fn (&self) -> VectorN<N::RealField, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The diagonal part of this decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1000721,"byte_end":1000733,"line_start":274,"line_end":274,"column_start":12,"column_end":24},"name":"off_diagonal","qualname":"<Bidiagonal<N, R, C>>::off_diagonal","value":"fn (&self) -> VectorN<N::RealField, DimDiff<DimMinimum<R, C>, U1>>","parent":null,"children":[],"decl_id":null,"docs":" The off-diagonal part of this decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1000970,"byte_end":1000981,"line_start":280,"line_end":280,"column_start":12,"column_end":23},"name":"uv_internal","qualname":"<Bidiagonal<N, R, C>>::uv_internal","value":"fn (&self) -> &MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1004450,"byte_end":1004463,"line_start":368,"line_end":368,"column_start":12,"column_end":25},"name":"bidiagonalize","qualname":"<Matrix<N, R, C, S>>::bidiagonalize","value":"fn (self) -> Bidiagonal<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bidiagonalization using householder reflections.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1005431,"byte_end":1005439,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"Cholesky","qualname":"::linalg::cholesky::Cholesky","value":"Cholesky {  }","parent":null,"children":[{"krate":0,"index":20749}],"decl_id":null,"docs":" The Cholesky decomposition of a symmetric-definite-positive matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1006023,"byte_end":1006026,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Cholesky<N, D>>::new","value":"fn (mut matrix: MatrixN<N, D>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Cholesky decomposition of `matrix`.\n\n Returns `None` if the input matrix is not definite-positive. The input matrix is assumed\n to be symmetric and only the lower-triangular part is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1007388,"byte_end":1007394,"line_start":87,"line_end":87,"column_start":12,"column_end":18},"name":"unpack","qualname":"<Cholesky<N, D>>::unpack","value":"fn (mut self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly\n upper-triangular part filled with zeros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1007782,"byte_end":1007794,"line_start":97,"line_end":97,"column_start":12,"column_end":24},"name":"unpack_dirty","qualname":"<Cholesky<N, D>>::unpack_dirty","value":"fn (self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out\n its strict upper-triangular part.\n\n The values of the strict upper-triangular part are garbage and should be ignored by further\n computations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7148},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1007999,"byte_end":1008000,"line_start":103,"line_end":103,"column_start":12,"column_end":13},"name":"l","qualname":"<Cholesky<N, D>>::l","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the lower-triangular factor of the Cholesky decomposition with its strictly\n uppen-triangular part filled with zeros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1008399,"byte_end":1008406,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"l_dirty","qualname":"<Cholesky<N, D>>::l_dirty","value":"fn (&self) -> &MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the lower-triangular factor of the Cholesky decomposition, without zeroing-out\n its strict upper-triangular part.\n\n This is an allocation-less version of `self.l()`. The values of the strict upper-triangular\n part are garbage and should be ignored by further computations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7150},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1008616,"byte_end":1008625,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"solve_mut","qualname":"<Cholesky<N, D>>::solve_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.\n\n The result is stored on `b`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7154},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1009047,"byte_end":1009052,"line_start":130,"line_end":130,"column_start":12,"column_end":17},"name":"solve","qualname":"<Cholesky<N, D>>::solve","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> MatrixMN<N, R2, C2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the solution of the system `self * x = b` where `self` is the decomposed matrix and\n `x` the unknown.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7158},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1009439,"byte_end":1009446,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Cholesky<N, D>>::inverse","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1010025,"byte_end":1010033,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"cholesky","qualname":"<SquareMatrix<N, D, S>>::cholesky","value":"fn (self) -> Option<Cholesky<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Cholesky decomposition of this matrix.\n\n Returns `None` if the input matrix is not definite-positive. The input matrix is assumed\n to be symmetric and only the lower-triangular part is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\determinant.rs","byte_start":1010587,"byte_end":1010598,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"determinant","qualname":"<SquareMatrix<N, D, S>>::determinant","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Computes the matrix determinant.\n\n If the matrix has a dimension larger than 3, an LU decomposition is used.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\determinant.rs","byte_start":1010566,"byte_end":1010575,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":20758},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1013449,"byte_end":1013458,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"FullPivLU","qualname":"::linalg::full_piv_lu::FullPivLU","value":"FullPivLU {  }","parent":null,"children":[{"krate":0,"index":20762},{"krate":0,"index":20763},{"krate":0,"index":20764}],"decl_id":null,"docs":" LU decomposition with full row and column pivoting.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1014282,"byte_end":1014285,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<FullPivLU<N, R, C>>::new","value":"fn (mut matrix: MatrixMN<N, R, C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the LU decomposition with full pivoting of `matrix`.\n\n This effectively computes `P, L, U, Q` such that `P * matrix * Q = LU`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1015640,"byte_end":1015651,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"lu_internal","qualname":"<FullPivLU<N, R, C>>::lu_internal","value":"fn (&self) -> &MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1015791,"byte_end":1015792,"line_start":108,"line_end":108,"column_start":12,"column_end":13},"name":"l","qualname":"<FullPivLU<N, R, C>>::l","value":"fn (&self) -> MatrixMN<N, R, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The lower triangular matrix of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1015770,"byte_end":1015779,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7209},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016211,"byte_end":1016212,"line_start":119,"line_end":119,"column_start":12,"column_end":13},"name":"u","qualname":"<FullPivLU<N, R, C>>::u","value":"fn (&self) -> MatrixMN<N, DimMinimum<R, C>, C>","parent":null,"children":[],"decl_id":null,"docs":" The upper triangular matrix of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016190,"byte_end":1016199,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016522,"byte_end":1016523,"line_start":127,"line_end":127,"column_start":12,"column_end":13},"name":"p","qualname":"<FullPivLU<N, R, C>>::p","value":"fn (&self) -> &PermutationSequence<DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The row permutations of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016501,"byte_end":1016510,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7211},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016678,"byte_end":1016679,"line_start":133,"line_end":133,"column_start":12,"column_end":13},"name":"q","qualname":"<FullPivLU<N, R, C>>::q","value":"fn (&self) -> &PermutationSequence<DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The column permutations of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016657,"byte_end":1016666,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7212},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016879,"byte_end":1016885,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"unpack","qualname":"<FullPivLU<N, R, C>>::unpack","value":"fn (self) -> (PermutationSequence<DimMinimum<R, C>>, MatrixMN<N, R, DimMinimum<R, C>>,\n MatrixMN<N, DimMinimum<R, C>, C>, PermutationSequence<DimMinimum<R, C>>)","parent":null,"children":[],"decl_id":null,"docs":" The two matrices of this decomposition and the row and column permutations: `(P, L, U, Q)`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1016858,"byte_end":1016867,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7216},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1017699,"byte_end":1017704,"line_start":165,"line_end":165,"column_start":12,"column_end":17},"name":"solve","qualname":"<FullPivLU<N, D, D>>::solve","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n Returns `None` if the decomposed matrix is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7220},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1018357,"byte_end":1018366,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"solve_mut","qualname":"<FullPivLU<N, D, D>>::solve_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n If the decomposed matrix is not invertible, this returns `false` and its input `b` may\n be overwritten with garbage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1019265,"byte_end":1019276,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<FullPivLU<N, D, D>>::try_inverse","value":"fn (&self) -> Option<MatrixN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the decomposed matrix.\n\n Returns `None` if the decomposed matrix is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1019755,"byte_end":1019768,"line_start":233,"line_end":233,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<FullPivLU<N, D, D>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the decomposed matrix is invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1020089,"byte_end":1020100,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"determinant","qualname":"<FullPivLU<N, D, D>>::determinant","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Computes the determinant of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1020965,"byte_end":1020976,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"full_piv_lu","qualname":"<Matrix<N, R, C, S>>::full_piv_lu","value":"fn (self) -> FullPivLU<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the LU decomposition with full pivoting of `matrix`.\n\n This effectively computes `P, L, U, Q` such that `P * matrix * Q = LU`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"givens","qualname":"::linalg::givens","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","parent":null,"children":[{"krate":0,"index":7234},{"krate":0,"index":7235},{"krate":0,"index":7238},{"krate":0,"index":7241},{"krate":0,"index":7244},{"krate":0,"index":7247},{"krate":0,"index":20775},{"krate":0,"index":20784},{"krate":0,"index":20781},{"krate":0,"index":20779},{"krate":0,"index":7250}],"decl_id":null,"docs":" Construction of givens rotations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20775},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1021397,"byte_end":1021411,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"name":"GivensRotation","qualname":"::linalg::givens::GivensRotation","value":"GivensRotation {  }","parent":null,"children":[{"krate":0,"index":20777},{"krate":0,"index":20778}],"decl_id":null,"docs":" A Givens rotation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1021598,"byte_end":1021606,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"identity","qualname":"<GivensRotation<N>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Givents rotation that does nothing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1021914,"byte_end":1021927,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"new_unchecked","qualname":"<GivensRotation<N>>::new_unchecked","value":"fn (c: N::RealField, s: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initializes a Givens rotation from its components.\n\n The components are copies as-is. It is not checked whether they describe\n an actually valid Givens rotation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1022107,"byte_end":1022110,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<GivensRotation<N>>::new","value":"fn (c: N, s: N) -> (Self, N)","parent":null,"children":[],"decl_id":null,"docs":" Initializes a Givens rotation from its non-normalized cosine an sine components.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1022304,"byte_end":1022311,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"try_new","qualname":"<GivensRotation<N>>::try_new","value":"fn (c: N, s: N, eps: N::RealField) -> Option<(Self, N)>","parent":null,"children":[],"decl_id":null,"docs":" Initializes a Givens rotation form its non-normalized cosine an sine components.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1023010,"byte_end":1023018,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"cancel_y","qualname":"<GivensRotation<N>>::cancel_y","value":"fn <S> (v: &Vector<N, U2, S>) -> Option<(Self, N)>","parent":null,"children":[],"decl_id":null,"docs":" Computes the rotation `R` required such that the `y` component of `R * v` is zero.\n\n Returns `None` if no rotation is needed (i.e. if `v.y == 0`). Otherwise, this returns the norm\n of `v` and the rotation `r` such that `R * v = [ |v|, 0.0 ]^t` where `|v|` is the norm of `v`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1023756,"byte_end":1023764,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"cancel_x","qualname":"<GivensRotation<N>>::cancel_x","value":"fn <S> (v: &Vector<N, U2, S>) -> Option<(Self, N)>","parent":null,"children":[],"decl_id":null,"docs":" Computes the rotation `R` required such that the `x` component of `R * v` is zero.\n\n Returns `None` if no rotation is needed (i.e. if `v.x == 0`). Otherwise, this returns the norm\n of `v` and the rotation `r` such that `R * v = [ 0.0, |v| ]^t` where `|v|` is the norm of `v`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1024251,"byte_end":1024252,"line_start":94,"line_end":94,"column_start":12,"column_end":13},"name":"c","qualname":"<GivensRotation<N>>::c","value":"fn (&self) -> N::RealField","parent":null,"children":[],"decl_id":null,"docs":" The cos part of this roration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1024350,"byte_end":1024351,"line_start":99,"line_end":99,"column_start":12,"column_end":13},"name":"s","qualname":"<GivensRotation<N>>::s","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The sin part of this roration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1024444,"byte_end":1024451,"line_start":104,"line_end":104,"column_start":12,"column_end":19},"name":"inverse","qualname":"<GivensRotation<N>>::inverse","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The inverse of this givens rotation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7263},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1024591,"byte_end":1024597,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"rotate","qualname":"<GivensRotation<N>>::rotate","value":"fn <R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the multiplication `rhs = self * rhs` in-place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7267},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1025377,"byte_end":1025388,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"rotate_rows","qualname":"<GivensRotation<N>>::rotate_rows","value":"fn <R2, C2, S2> (&self, lhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the multiplication `lhs = lhs * self` in-place.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20787},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027220,"byte_end":1027230,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"Hessenberg","qualname":"::linalg::hessenberg::Hessenberg","value":"Hessenberg {  }","parent":null,"children":[{"krate":0,"index":20790},{"krate":0,"index":20791}],"decl_id":null,"docs":" Hessenberg decomposition of a general matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027853,"byte_end":1027856,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Hessenberg<N, D>>::new","value":"fn (hess: MatrixN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the Hessenberg decomposition using householder reflections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7293},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1028257,"byte_end":1028275,"line_start":60,"line_end":60,"column_start":12,"column_end":30},"name":"new_with_workspace","qualname":"<Hessenberg<N, D>>::new_with_workspace","value":"fn (mut hess: MatrixN<N, D>, work: &mut VectorN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the Hessenberg decomposition using householder reflections.\n\n The workspace containing `D` elements must be provided but its content does not have to be\n initialized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7294},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1029306,"byte_end":1029312,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"name":"unpack","qualname":"<Hessenberg<N, D>>::unpack","value":"fn (self) -> (MatrixN<N, D>, MatrixN<N, D>)","parent":null,"children":[],"decl_id":null,"docs":" Retrieves `(q, h)` with `q` the orthogonal matrix of this decomposition and `h` the\n hessenberg matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1029285,"byte_end":1029294,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7295},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1029520,"byte_end":1029528,"line_start":102,"line_end":102,"column_start":12,"column_end":20},"name":"unpack_h","qualname":"<Hessenberg<N, D>>::unpack_h","value":"fn (mut self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the upper trapezoidal submatrix `H` of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1029499,"byte_end":1029508,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7297},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030069,"byte_end":1030070,"line_start":116,"line_end":116,"column_start":12,"column_end":13},"name":"h","qualname":"<Hessenberg<N, D>>::h","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the upper trapezoidal submatrix `H` of this decomposition.\n\n This is less efficient than `.unpack_h()` as it allocates a new matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030048,"byte_end":1030057,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7299},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030459,"byte_end":1030460,"line_start":126,"line_end":126,"column_start":12,"column_end":13},"name":"q","qualname":"<Hessenberg<N, D>>::q","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal matrix `Q` of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7300},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030593,"byte_end":1030606,"line_start":131,"line_end":131,"column_start":12,"column_end":25},"name":"hess_internal","qualname":"<Hessenberg<N, D>>::hess_internal","value":"fn (&self) -> &MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030939,"byte_end":1030949,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"hessenberg","qualname":"<SquareMatrix<N, D, S>>::hessenberg","value":"fn (self) -> Hessenberg<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the Hessenberg decomposition of this matrix using householder reflections.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7306},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"householder","qualname":"::linalg::householder","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","parent":null,"children":[{"krate":0,"index":7307},{"krate":0,"index":7308},{"krate":0,"index":7309},{"krate":0,"index":7310},{"krate":0,"index":7317},{"krate":0,"index":7318},{"krate":0,"index":7321},{"krate":0,"index":7322},{"krate":0,"index":7326},{"krate":0,"index":7330},{"krate":0,"index":7334}],"decl_id":null,"docs":" Construction of householder elementary reflections.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":1031689,"byte_end":1031708,"line_start":19,"line_end":19,"column_start":8,"column_end":27},"name":"reflection_axis_mut","qualname":"::linalg::householder::reflection_axis_mut","value":"fn <N, D, S> (column: &mut Vector<N, D, S>) -> (N, bool)","parent":null,"children":[],"decl_id":null,"docs":" Replaces `column` by the axis of the householder reflection that transforms `column` into\n `(+/-|column|, 0, ..., 0)`.\n\n The unit-length axis is output to `column`. Returns what would be the first component of\n `column` after reflection and `false` if no reflection was necessary.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":1031664,"byte_end":1031681,"line_start":18,"line_end":18,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":7326},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":1032590,"byte_end":1032612,"line_start":47,"line_end":47,"column_start":8,"column_end":30},"name":"clear_column_unchecked","qualname":"::linalg::householder::clear_column_unchecked","value":"fn <N, R, C> (matrix: &mut MatrixMN<N, R, C>, diag_elt: &mut N, icol: usize, shift: usize, bilateral: Option<&mut VectorN<N, R>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Uses an householder reflection to zero out the `icol`-th column, starting with the `shift + 1`-th\n subdiagonal element.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":1033606,"byte_end":1033625,"line_start":75,"line_end":75,"column_start":8,"column_end":27},"name":"clear_row_unchecked","qualname":"::linalg::householder::clear_row_unchecked","value":"fn <N, R, C> (matrix: &mut MatrixMN<N, R, C>, diag_elt: &mut N, axis_packed: &mut VectorN<N, C>, work: &mut VectorN<N, R>, irow: usize, shift: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Uses an householder reflection to zero out the `irow`-th row, ending before the `shift + 1`-th\n superdiagonal element.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7334},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\householder.rs","byte_start":1034954,"byte_end":1034964,"line_start":111,"line_end":111,"column_start":8,"column_end":18},"name":"assemble_q","qualname":"::linalg::householder::assemble_q","value":"fn <N, D> (m: &MatrixN<N, D>, signs: &[N]) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal transformation described by the elementary reflector axii stored on\n the lower-diagonal element of the given matrix.\n matrices.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036035,"byte_end":1036046,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<SquareMatrix<N, D, S>>::try_inverse","value":"fn (self) -> Option<MatrixN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to invert this matrix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036014,"byte_end":1036023,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7358},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036499,"byte_end":1036514,"line_start":28,"line_end":28,"column_start":12,"column_end":27},"name":"try_inverse_mut","qualname":"<SquareMatrix<N, D, S>>::try_inverse_mut","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to invert this matrix in-place. Returns `false` and leaves `self` untouched if\n inversion fails.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036478,"byte_end":1036487,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":20800},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1044805,"byte_end":1044807,"line_start":35,"line_end":35,"column_start":12,"column_end":14},"name":"LU","qualname":"::linalg::lu::LU","value":"LU {  }","parent":null,"children":[{"krate":0,"index":20804},{"krate":0,"index":20805}],"decl_id":null,"docs":" LU decomposition with partial (row) pivoting.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7392},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1045438,"byte_end":1045451,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"try_invert_to","qualname":"::linalg::lu::try_invert_to","value":"fn <N, D, S> (mut matrix: MatrixN<N, D>, out: &mut Matrix<N, D, D, S>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a LU decomposition to overwrite `out` with the inverse of `matrix`.\n\n If `matrix` is not invertible, `false` is returned and `out` may contain invalid data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7400},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1046600,"byte_end":1046603,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<LU<N, R, C>>::new","value":"fn (mut matrix: MatrixMN<N, R, C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the LU decomposition with partial (row) pivoting of `matrix`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7401},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1047559,"byte_end":1047570,"line_start":125,"line_end":125,"column_start":12,"column_end":23},"name":"lu_internal","qualname":"<LU<N, R, C>>::lu_internal","value":"fn (&self) -> &MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1047710,"byte_end":1047711,"line_start":131,"line_end":131,"column_start":12,"column_end":13},"name":"l","qualname":"<LU<N, R, C>>::l","value":"fn (&self) -> MatrixMN<N, R, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The lower triangular matrix of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1047689,"byte_end":1047698,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1048643,"byte_end":1048651,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"l_unpack","qualname":"<LU<N, R, C>>::l_unpack","value":"fn (self) -> MatrixMN<N, R, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The lower triangular matrix of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1048622,"byte_end":1048631,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7405},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049078,"byte_end":1049079,"line_start":168,"line_end":168,"column_start":12,"column_end":13},"name":"u","qualname":"<LU<N, R, C>>::u","value":"fn (&self) -> MatrixMN<N, DimMinimum<R, C>, C>","parent":null,"children":[],"decl_id":null,"docs":" The upper triangular matrix of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049057,"byte_end":1049066,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7406},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049389,"byte_end":1049390,"line_start":176,"line_end":176,"column_start":12,"column_end":13},"name":"p","qualname":"<LU<N, R, C>>::p","value":"fn (&self) -> &PermutationSequence<DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" The row permutations of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049368,"byte_end":1049377,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7407},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049583,"byte_end":1049589,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"unpack","qualname":"<LU<N, R, C>>::unpack","value":"fn (self) -> (PermutationSequence<DimMinimum<R, C>>, MatrixMN<N, R, DimMinimum<R, C>>,\n MatrixMN<N, DimMinimum<R, C>, C>)","parent":null,"children":[],"decl_id":null,"docs":" The row permutations and two triangular matrices of this decomposition: `(P, L, U)`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1049562,"byte_end":1049571,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7411},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1050366,"byte_end":1050371,"line_start":206,"line_end":206,"column_start":12,"column_end":17},"name":"solve","qualname":"<LU<N, D, D>>::solve","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n Returns `None` if `self` is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7415},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1051021,"byte_end":1051030,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"name":"solve_mut","qualname":"<LU<N, D, D>>::solve_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n If the decomposed matrix is not invertible, this returns `false` and its input `b` may\n be overwritten with garbage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7419},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1051746,"byte_end":1051757,"line_start":250,"line_end":250,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<LU<N, D, D>>::try_inverse","value":"fn (&self) -> Option<MatrixN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the decomposed matrix.\n\n Returns `None` if the matrix is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7420},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1052394,"byte_end":1052408,"line_start":269,"line_end":269,"column_start":12,"column_end":26},"name":"try_inverse_to","qualname":"<LU<N, D, D>>::try_inverse_to","value":"fn <S2> (&self, out: &mut Matrix<N, D, D, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the decomposed matrix and outputs the result to `out`.\n\n If the decomposed matrix is not invertible, this returns `false` and `out` may be\n overwritten with garbage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7422},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1052886,"byte_end":1052897,"line_start":284,"line_end":284,"column_start":12,"column_end":23},"name":"determinant","qualname":"<LU<N, D, D>>::determinant","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Computes the determinant of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7423},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1053339,"byte_end":1053352,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<LU<N, D, D>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the decomposed matrix is invertible.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7424},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1053840,"byte_end":1053850,"line_start":319,"line_end":319,"column_start":8,"column_end":18},"name":"gauss_step","qualname":"::linalg::lu::gauss_step","value":"fn <N, R, C, S> (matrix: &mut Matrix<N, R, C, S>, diag: N, i: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes one step of gaussian elimination on the i-th row and column of `matrix`. The diagonal\n element `matrix[(i, i)]` is provided as argument.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7429},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1054624,"byte_end":1054639,"line_start":343,"line_end":343,"column_start":8,"column_end":23},"name":"gauss_step_swap","qualname":"::linalg::lu::gauss_step_swap","value":"fn <N, R, C, S> (matrix: &mut Matrix<N, R, C, S>, diag: N, i: usize, piv: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the rows `i` with the row `piv` and executes one step of gaussian elimination on the i-th\n row and column of `matrix`. The diagonal element `matrix[(i, i)]` is provided as argument.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7439},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1055617,"byte_end":1055619,"line_start":375,"line_end":375,"column_start":12,"column_end":14},"name":"lu","qualname":"<Matrix<N, R, C, S>>::lu","value":"fn (self) -> LU<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the LU decomposition with partial (row) pivoting of `matrix`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20816},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1056596,"byte_end":1056615,"line_start":31,"line_end":31,"column_start":12,"column_end":31},"name":"PermutationSequence","qualname":"::linalg::permutation_sequence::PermutationSequence","value":"PermutationSequence {  }","parent":null,"children":[{"krate":0,"index":20818},{"krate":0,"index":20819}],"decl_id":null,"docs":" A sequence of row or column permutations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7459},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057083,"byte_end":1057091,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"identity","qualname":"<PermutationSequence<D>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new statically-allocated sequence of `D` identity permutations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057062,"byte_end":1057071,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7461},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057406,"byte_end":1057414,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"identity","qualname":"<PermutationSequence<Dynamic>>::identity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new dynamically-allocated sequence of `n` identity permutations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057385,"byte_end":1057394,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7464},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057667,"byte_end":1057683,"line_start":70,"line_end":70,"column_start":12,"column_end":28},"name":"identity_generic","qualname":"<PermutationSequence<D>>::identity_generic","value":"fn (dim: D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new sequence of D identity permutations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057646,"byte_end":1057655,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7465},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1058013,"byte_end":1058031,"line_start":82,"line_end":82,"column_start":12,"column_end":30},"name":"append_permutation","qualname":"<PermutationSequence<D>>::append_permutation","value":"fn (&mut self, i: usize, i2: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds the interchange of the row (or column) `i` with the row (or column) `i2` to this\n sequence of permutations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057992,"byte_end":1058001,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7466},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1058406,"byte_end":1058418,"line_start":95,"line_end":95,"column_start":12,"column_end":24},"name":"permute_rows","qualname":"<PermutationSequence<D>>::permute_rows","value":"fn <N, R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies this sequence of permutations to the rows of `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1058385,"byte_end":1058394,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7471},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1058746,"byte_end":1058762,"line_start":104,"line_end":104,"column_start":12,"column_end":28},"name":"inv_permute_rows","qualname":"<PermutationSequence<D>>::inv_permute_rows","value":"fn <N, R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies this sequence of permutations in reverse to the rows of `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1058725,"byte_end":1058734,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7476},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1059140,"byte_end":1059155,"line_start":118,"line_end":118,"column_start":12,"column_end":27},"name":"permute_columns","qualname":"<PermutationSequence<D>>::permute_columns","value":"fn <N, R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies this sequence of permutations to the columns of `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1059119,"byte_end":1059128,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7481},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1059521,"byte_end":1059540,"line_start":131,"line_end":131,"column_start":12,"column_end":31},"name":"inv_permute_columns","qualname":"<PermutationSequence<D>>::inv_permute_columns","value":"fn <N, R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Applies this sequence of permutations in reverse to the columns of `rhs`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1059500,"byte_end":1059509,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7486},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1059910,"byte_end":1059913,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"len","qualname":"<PermutationSequence<D>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of non-identity permutations applied by this sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7487},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1060054,"byte_end":1060065,"line_start":150,"line_end":150,"column_start":12,"column_end":23},"name":"determinant","qualname":"<PermutationSequence<D>>::determinant","value":"fn <N> (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" The determinant of the matrix corresponding to this permutation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1060033,"byte_end":1060042,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":20826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1061412,"byte_end":1061414,"line_start":36,"line_end":36,"column_start":12,"column_end":14},"name":"QR","qualname":"::linalg::qr::QR","value":"QR {  }","parent":null,"children":[{"krate":0,"index":20830},{"krate":0,"index":20831}],"decl_id":null,"docs":" The QR decomposition of a general matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7523},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1062053,"byte_end":1062056,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<QR<N, R, C>>::new","value":"fn (mut matrix: MatrixMN<N, R, C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the QR decomposition using householder reflections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1062769,"byte_end":1062770,"line_start":79,"line_end":79,"column_start":12,"column_end":13},"name":"r","qualname":"<QR<N, R, C>>::r","value":"fn (&self) -> MatrixMN<N, DimMinimum<R, C>, C>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the upper trapezoidal submatrix `R` of this decomposition.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1062748,"byte_end":1062757,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7526},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1063301,"byte_end":1063309,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"unpack_r","qualname":"<QR<N, R, C>>::unpack_r","value":"fn (self) -> MatrixMN<N, DimMinimum<R, C>, C>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the upper trapezoidal submatrix `R` of this decomposition.\n\n This is usually faster than `r` but consumes `self`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1063280,"byte_end":1063289,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1063800,"byte_end":1063801,"line_start":105,"line_end":105,"column_start":12,"column_end":13},"name":"q","qualname":"<QR<N, R, C>>::q","value":"fn (&self) -> MatrixMN<N, R, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal matrix `Q` of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7529},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1064699,"byte_end":1064705,"line_start":127,"line_end":127,"column_start":12,"column_end":18},"name":"unpack","qualname":"<QR<N, R, C>>::unpack","value":"fn (self) -> (MatrixMN<N, R, DimMinimum<R, C>>, MatrixMN<N, DimMinimum<R, C>, C>)","parent":null,"children":[],"decl_id":null,"docs":" Unpacks this decomposition into its two matrix factors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7530},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1065092,"byte_end":1065103,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"qr_internal","qualname":"<QR<N, R, C>>::qr_internal","value":"fn (&self) -> &MatrixMN<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7531},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1065267,"byte_end":1065275,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"q_tr_mul","qualname":"<QR<N, R, C>>::q_tr_mul","value":"fn <R2, C2, S2> (&self, rhs: &mut Matrix<N, R2, C2, S2>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the provided matrix by the transpose of the `Q` matrix of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7538},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1066091,"byte_end":1066096,"line_start":168,"line_end":168,"column_start":12,"column_end":17},"name":"solve","qualname":"<QR<N, D, D>>::solve","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n Returns `None` if `self` is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7542},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1066746,"byte_end":1066755,"line_start":190,"line_end":190,"column_start":12,"column_end":21},"name":"solve_mut","qualname":"<QR<N, D, D>>::solve_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self * x = b`, where `x` is the unknown to be determined.\n\n If the decomposed matrix is not invertible, this returns `false` and its input `b` is\n overwritten with garbage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1068344,"byte_end":1068355,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"try_inverse","qualname":"<QR<N, D, D>>::try_inverse","value":"fn (&self) -> Option<MatrixN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the inverse of the decomposed matrix.\n\n Returns `None` if the decomposed matrix is not invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7551},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1068876,"byte_end":1068889,"line_start":265,"line_end":265,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<QR<N, D, D>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if the decomposed matrix is invertible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1069892,"byte_end":1069894,"line_start":298,"line_end":298,"column_start":12,"column_end":14},"name":"qr","qualname":"<Matrix<N, R, C, S>>::qr","value":"fn (self) -> QR<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the QR decomposition of this matrix.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20842},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071108,"byte_end":1071113,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Schur","qualname":"::linalg::schur::Schur","value":"Schur {  }","parent":null,"children":[{"krate":0,"index":20845},{"krate":0,"index":20846}],"decl_id":null,"docs":" Schur decomposition of a square matrix.\n\n If this is a real matrix, this will be a RealField Schur decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7593},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071702,"byte_end":1071705,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<Schur<N, D>>::new","value":"fn (m: MatrixN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the Schur decomposition of a square matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7594},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1072386,"byte_end":1072393,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Schur<N, D>>::try_new","value":"fn (m: MatrixN<N, D>, eps: N::RealField, max_niter: usize) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Schur decomposition of a square matrix.\n\n If only eigenvalues are needed, it is more efficient to call the matrix method\n `.eigenvalues()` instead.\n\n # Arguments\n\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7600},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1082229,"byte_end":1082235,"line_start":375,"line_end":375,"column_start":12,"column_end":18},"name":"unpack","qualname":"<Schur<N, D>>::unpack","value":"fn (self) -> (MatrixN<N, D>, MatrixN<N, D>)","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the unitary matrix `Q` and the upper-quasitriangular matrix `T` such that the\n decomposed matrix equals `Q * T * Q.transpose()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7601},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1082448,"byte_end":1082459,"line_start":382,"line_end":382,"column_start":12,"column_end":23},"name":"eigenvalues","qualname":"<Schur<N, D>>::eigenvalues","value":"fn (&self) -> Option<VectorN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the real eigenvalues of the decomposed matrix.\n\n Return `None` if some eigenvalues are complex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7602},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1082794,"byte_end":1082813,"line_start":392,"line_end":392,"column_start":12,"column_end":31},"name":"complex_eigenvalues","qualname":"<Schur<N, D>>::complex_eigenvalues","value":"fn (&self) -> VectorN<NumComplex<N>, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the complex eigenvalues of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7617},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1086279,"byte_end":1086284,"line_start":499,"line_end":499,"column_start":12,"column_end":17},"name":"schur","qualname":"<SquareMatrix<N, D, S>>::schur","value":"fn (self) -> Schur<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the Schur decomposition of a square matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7618},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1086928,"byte_end":1086937,"line_start":514,"line_end":514,"column_start":12,"column_end":21},"name":"try_schur","qualname":"<SquareMatrix<N, D, S>>::try_schur","value":"fn (self, eps: N::RealField, max_niter: usize) -> Option<Schur<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Schur decomposition of a square matrix.\n\n If only eigenvalues are needed, it is more efficient to call the matrix method\n `.eigenvalues()` instead.\n\n # Arguments\n\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7619},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1087131,"byte_end":1087142,"line_start":519,"line_end":519,"column_start":12,"column_end":23},"name":"eigenvalues","qualname":"<SquareMatrix<N, D, S>>::eigenvalues","value":"fn (&self) -> Option<VectorN<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigenvalues of this matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7620},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1088325,"byte_end":1088344,"line_start":559,"line_end":559,"column_start":12,"column_end":31},"name":"complex_eigenvalues","qualname":"<SquareMatrix<N, D, S>>::complex_eigenvalues","value":"fn (&self) -> VectorN<NumComplex<N>, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigenvalues of this matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1089574,"byte_end":1089596,"line_start":13,"line_end":13,"column_start":12,"column_end":34},"name":"solve_lower_triangular","qualname":"<SquareMatrix<N, D, S>>::solve_lower_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self . x = b` where `x` is the unknown and only\n the lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1089553,"byte_end":1089562,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7648},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1090241,"byte_end":1090263,"line_start":33,"line_end":33,"column_start":12,"column_end":34},"name":"solve_upper_triangular","qualname":"<SquareMatrix<N, D, S>>::solve_upper_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self . x = b` where `x` is the unknown and only\n the upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1090220,"byte_end":1090229,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7652},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1090876,"byte_end":1090902,"line_start":52,"line_end":52,"column_start":12,"column_end":38},"name":"solve_lower_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::solve_lower_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self . x = b` where `x` is the unknown and only the\n lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7659},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1092376,"byte_end":1092412,"line_start":103,"line_end":103,"column_start":12,"column_end":48},"name":"solve_lower_triangular_with_diag_mut","qualname":"<SquareMatrix<N, D, S>>::solve_lower_triangular_with_diag_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>, diag: N) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self . x = b` where `x` is the unknown and only the\n lower-triangular part of `self` is considered not-zero. The diagonal is never read as it is\n assumed to be equal to `diag`. Returns `false` and does not modify its inputs if `diag` is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7663},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1093279,"byte_end":1093305,"line_start":134,"line_end":134,"column_start":12,"column_end":38},"name":"solve_upper_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::solve_upper_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self . x = b` where `x` is the unknown and only the\n upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7670},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1094713,"byte_end":1094738,"line_start":189,"line_end":189,"column_start":12,"column_end":37},"name":"tr_solve_lower_triangular","qualname":"<SquareMatrix<N, D, S>>::tr_solve_lower_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only\n the lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1094692,"byte_end":1094701,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7674},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1095414,"byte_end":1095439,"line_start":209,"line_end":209,"column_start":12,"column_end":37},"name":"tr_solve_upper_triangular","qualname":"<SquareMatrix<N, D, S>>::tr_solve_upper_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self.transpose() . x = b` where `x` is the unknown and only\n the upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1095393,"byte_end":1095402,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7678},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1096083,"byte_end":1096112,"line_start":228,"line_end":228,"column_start":12,"column_end":41},"name":"tr_solve_lower_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::tr_solve_lower_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the\n lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7684},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1096754,"byte_end":1096783,"line_start":249,"line_end":249,"column_start":12,"column_end":41},"name":"tr_solve_upper_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::tr_solve_upper_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self.transpose() . x = b` where `x` is the unknown and only the\n upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1097455,"byte_end":1097480,"line_start":271,"line_end":271,"column_start":12,"column_end":37},"name":"ad_solve_lower_triangular","qualname":"<SquareMatrix<N, D, S>>::ad_solve_lower_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self.adjoint() . x = b` where `x` is the unknown and only\n the lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1097434,"byte_end":1097443,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7694},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1098154,"byte_end":1098179,"line_start":291,"line_end":291,"column_start":12,"column_end":37},"name":"ad_solve_upper_triangular","qualname":"<SquareMatrix<N, D, S>>::ad_solve_upper_triangular","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>) -> Option<MatrixMN<N, R2, C2>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the solution of the linear system `self.adjoint() . x = b` where `x` is the unknown and only\n the upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1098133,"byte_end":1098142,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":7698},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1098821,"byte_end":1098850,"line_start":310,"line_end":310,"column_start":12,"column_end":41},"name":"ad_solve_lower_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::ad_solve_lower_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self.adjoint() . x = b` where `x` is the unknown and only the\n lower-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7704},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1099503,"byte_end":1099532,"line_start":331,"line_end":331,"column_start":12,"column_end":41},"name":"ad_solve_upper_triangular_mut","qualname":"<SquareMatrix<N, D, S>>::ad_solve_upper_triangular_mut","value":"fn <R2, C2, S2> (&self, b: &mut Matrix<N, R2, C2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Solves the linear system `self.adjoint() . x = b` where `x` is the unknown and only the\n upper-triangular part of `self` (including the diagonal) is considered not-zero.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20855},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103380,"byte_end":1103383,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"SVD","qualname":"::linalg::svd::SVD","value":"SVD { u, v_t, singular_values }","parent":null,"children":[{"krate":0,"index":20859},{"krate":0,"index":20860},{"krate":0,"index":20861}],"decl_id":null,"docs":" Singular Value Decomposition of a general matrix.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20859},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103638,"byte_end":1103639,"line_start":49,"line_end":49,"column_start":9,"column_end":10},"name":"u","qualname":"::linalg::svd::SVD::u","value":"std::option::Option<base::matrix::Matrix<N, R, <R as base::dimension::DimMin<C>>::Output, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, R, <R as base::dimension::DimMin<C>>::Output>>::Buffer>>","parent":{"krate":0,"index":20855},"children":[],"decl_id":null,"docs":" The left-singular vectors `U` of this SVD.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20860},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103745,"byte_end":1103748,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"v_t","qualname":"::linalg::svd::SVD::v_t","value":"std::option::Option<base::matrix::Matrix<N, <R as base::dimension::DimMin<C>>::Output, C, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, <R as base::dimension::DimMin<C>>::Output, C>>::Buffer>>","parent":{"krate":0,"index":20855},"children":[],"decl_id":null,"docs":" The right-singular vectors `V^t` of this SVD.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20861},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103841,"byte_end":1103856,"line_start":53,"line_end":53,"column_start":9,"column_end":24},"name":"singular_values","qualname":"::linalg::svd::SVD::singular_values","value":"base::matrix::Matrix<<N as alga::general::ComplexField>::RealField, <R as base::dimension::DimMin<C>>::Output, base::dimension::U1, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<<N as alga::general::ComplexField>::RealField, <R as base::dimension::DimMin<C>>::Output>>::Buffer>","parent":{"krate":0,"index":20855},"children":[],"decl_id":null,"docs":" The singular values of this SVD.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7759},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1104877,"byte_end":1104880,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<SVD<N, R, C>>::new","value":"fn (matrix: MatrixMN<N, R, C>, compute_u: bool, compute_v: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the Singular Value Decomposition of `matrix` using implicit shift.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7760},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1105719,"byte_end":1105726,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"name":"try_new","qualname":"<SVD<N, R, C>>::try_new","value":"fn (mut matrix: MatrixMN<N, R, C>, compute_u: bool, compute_v: bool, eps: N::RealField, max_niter: usize) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.\n\n # Arguments\n\n * `compute_u` − set this to `true` to enable the computation of left-singular vectors.\n * `compute_v` − set this to `true` to enable the computation of left-singular vectors.\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1118533,"byte_end":1118537,"line_start":448,"line_end":448,"column_start":12,"column_end":16},"name":"rank","qualname":"<SVD<N, R, C>>::rank","value":"fn (&self, eps: N::RealField) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the rank of the decomposed matrix, i.e., the number of singular values greater\n than `eps`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7768},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1119030,"byte_end":1119039,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"recompose","qualname":"<SVD<N, R, C>>::recompose","value":"fn (self) -> Result<MatrixMN<N, R, C>, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Rebuild the original matrix.\n\n This is useful if some of the singular values have been manually modified.\n Returns `Err` if the right- and left- singular vectors have not been\n computed at construction-time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7769},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1119919,"byte_end":1119933,"line_start":481,"line_end":481,"column_start":12,"column_end":26},"name":"pseudo_inverse","qualname":"<SVD<N, R, C>>::pseudo_inverse","value":"fn (mut self, eps: N::RealField) -> Result<MatrixMN<N, C, R>, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Computes the pseudo-inverse of the decomposed matrix.\n\n Any singular value smaller than `eps` is assumed to be zero.\n Returns `Err` if the right- and left- singular vectors have not\n been computed at construction-time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7771},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1120965,"byte_end":1120970,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"solve","qualname":"<SVD<N, R, C>>::solve","value":"fn <R2, C2, S2> (&self, b: &Matrix<N, R2, C2, S2>, eps: N::RealField) -> Result<MatrixMN<N, C, C2>, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Solves the system `self * x = b` where `self` is the decomposed matrix and `x` the unknown.\n\n Any singular value smaller than `eps` is assumed to be zero.\n Returns `Err` if the singular vectors `U` and `V` have not been computed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1123018,"byte_end":1123021,"line_start":563,"line_end":563,"column_start":12,"column_end":15},"name":"svd","qualname":"<Matrix<N, R, C, S>>::svd","value":"fn (self, compute_u: bool, compute_v: bool) -> SVD<N, R, C>","parent":null,"children":[],"decl_id":null,"docs":" Computes the Singular Value Decomposition using implicit shift.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7781},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1123808,"byte_end":1123815,"line_start":577,"line_end":577,"column_start":12,"column_end":19},"name":"try_svd","qualname":"<Matrix<N, R, C, S>>::try_svd","value":"fn (self, compute_u: bool, compute_v: bool, eps: N::RealField, max_niter: usize) -> Option<SVD<N, R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to compute the Singular Value Decomposition of `matrix` using implicit shift.\n\n # Arguments\n\n * `compute_u` − set this to `true` to enable the computation of left-singular vectors.\n * `compute_v` − set this to `true` to enable the computation of left-singular vectors.\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7782},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1124119,"byte_end":1124134,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"singular_values","qualname":"<Matrix<N, R, C, S>>::singular_values","value":"fn (&self) -> VectorN<N::RealField, DimMinimum<R, C>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the singular values of this matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7783},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1124389,"byte_end":1124393,"line_start":596,"line_end":596,"column_start":12,"column_end":16},"name":"rank","qualname":"<Matrix<N, R, C, S>>::rank","value":"fn (&self, eps: N::RealField) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the rank of this matrix.\n\n All singular values below `eps` are considered equal to 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7784},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1124660,"byte_end":1124674,"line_start":604,"line_end":604,"column_start":12,"column_end":26},"name":"pseudo_inverse","qualname":"<Matrix<N, R, C, S>>::pseudo_inverse","value":"fn (self, eps: N::RealField) -> Result<MatrixMN<N, C, R>, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Computes the pseudo-inverse of this matrix.\n\n All singular values below `eps` are considered equal to 0.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20872},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1127548,"byte_end":1127562,"line_start":37,"line_end":37,"column_start":12,"column_end":26},"name":"SymmetricEigen","qualname":"::linalg::symmetric_eigen::SymmetricEigen","value":"SymmetricEigen { eigenvectors, eigenvalues }","parent":null,"children":[{"krate":0,"index":20875},{"krate":0,"index":20876}],"decl_id":null,"docs":" Eigendecomposition of a symmetric matrix.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1127721,"byte_end":1127733,"line_start":41,"line_end":41,"column_start":9,"column_end":21},"name":"eigenvectors","qualname":"::linalg::symmetric_eigen::SymmetricEigen::eigenvectors","value":"base::matrix::Matrix<N, D, D, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<N, D, D>>::Buffer>","parent":{"krate":0,"index":20872},"children":[],"decl_id":null,"docs":" The eigenvectors of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":20876},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1127818,"byte_end":1127829,"line_start":44,"line_end":44,"column_start":9,"column_end":20},"name":"eigenvalues","qualname":"::linalg::symmetric_eigen::SymmetricEigen::eigenvalues","value":"base::matrix::Matrix<<N as alga::general::ComplexField>::RealField, D, base::dimension::U1, <base::default_allocator::DefaultAllocator as base::allocator::Allocator<<N as alga::general::ComplexField>::RealField, D>>::Buffer>","parent":{"krate":0,"index":20872},"children":[],"decl_id":null,"docs":" The unsorted eigenvalues of the decomposed matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7814},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1128358,"byte_end":1128361,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<SymmetricEigen<N, D>>::new","value":"fn (m: MatrixN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigendecomposition of the given symmetric matrix.\n\n Only the lower-triangular parts (including its diagonal) of `m` is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7815},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1129220,"byte_end":1129227,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"try_new","qualname":"<SymmetricEigen<N, D>>::try_new","value":"fn (m: MatrixN<N, D>, eps: N::RealField, max_niter: usize) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigendecomposition of the given symmetric matrix with user-specified\n convergence parameters.\n\n Only the lower-triangular part (including its diagonal) of `m` is read.\n\n # Arguments\n\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7819},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1135273,"byte_end":1135282,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"recompose","qualname":"<SymmetricEigen<N, D>>::recompose","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Rebuild the original matrix.\n\n This is useful if some of the eigenvalues have been manually modified.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1135778,"byte_end":1135793,"line_start":291,"line_end":291,"column_start":8,"column_end":23},"name":"wilkinson_shift","qualname":"::linalg::symmetric_eigen::wilkinson_shift","value":"fn <N> (tmm: N, tnn: N, tmn: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Computes the wilkinson shift, i.e., the 2x2 symmetric matrix eigenvalue to its tailing\n component `tnn`.\n\n The inputs are interpreted as the 2x2 matrix:\n     tmm  tmn\n     tmn  tnn\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1136601,"byte_end":1136616,"line_start":314,"line_end":314,"column_start":12,"column_end":27},"name":"symmetric_eigen","qualname":"<SquareMatrix<N, D, S>>::symmetric_eigen","value":"fn (self) -> SymmetricEigen<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigendecomposition of this symmetric matrix.\n\n Only the lower-triangular part (including the diagonal) of `m` is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7827},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1137287,"byte_end":1137306,"line_start":329,"line_end":329,"column_start":12,"column_end":31},"name":"try_symmetric_eigen","qualname":"<SquareMatrix<N, D, S>>::try_symmetric_eigen","value":"fn (self, eps: N::RealField, max_niter: usize) -> Option<SymmetricEigen<N, D>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigendecomposition of the given symmetric matrix with user-specified\n convergence parameters.\n\n Only the lower-triangular part (including the diagonal) of `m` is read.\n\n # Arguments\n\n * `eps`       − tolerance used to determine when a value converged to 0.\n * `max_niter` − maximum total number of iterations performed by the algorithm. If this\n number of iteration is exceeded, `None` is returned. If `niter == 0`, then the algorithm\n continues indefinitely until convergence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1137598,"byte_end":1137619,"line_start":336,"line_end":336,"column_start":12,"column_end":33},"name":"symmetric_eigenvalues","qualname":"<SquareMatrix<N, D, S>>::symmetric_eigenvalues","value":"fn (&self) -> VectorN<N::RealField, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the eigenvalues of this symmetric matrix.\n\n Only the lower-triangular part of the matrix is read.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20885},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1140947,"byte_end":1140967,"line_start":33,"line_end":33,"column_start":12,"column_end":32},"name":"SymmetricTridiagonal","qualname":"::linalg::symmetric_tridiagonal::SymmetricTridiagonal","value":"SymmetricTridiagonal {  }","parent":null,"children":[{"krate":0,"index":20888},{"krate":0,"index":20889}],"decl_id":null,"docs":" Tridiagonalization of a symmetric matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1141676,"byte_end":1141679,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<SymmetricTridiagonal<N, D>>::new","value":"fn (mut m: MatrixN<N, D>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the tridiagonalization of the symmetric matrix `m`.\n\n Only the lower-triangular part (including the diagonal) of `m` is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7851},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1143051,"byte_end":1143063,"line_start":95,"line_end":95,"column_start":12,"column_end":24},"name":"internal_tri","qualname":"<SymmetricTridiagonal<N, D>>::internal_tri","value":"fn (&self) -> &MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1143242,"byte_end":1143248,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"name":"unpack","qualname":"<SymmetricTridiagonal<N, D>>::unpack","value":"fn (self) -> (MatrixN<N, D>, VectorN<N::RealField, D>,\n VectorN<N::RealField, DimDiff<D, U1>>)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the orthogonal transformation, diagonal, and off diagonal elements of this\n decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7853},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1143678,"byte_end":1143696,"line_start":111,"line_end":111,"column_start":12,"column_end":30},"name":"unpack_tridiagonal","qualname":"<SymmetricTridiagonal<N, D>>::unpack_tridiagonal","value":"fn (self) -> (VectorN<N::RealField, D>, VectorN<N::RealField, DimDiff<D, U1>>)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the diagonal, and off diagonal elements of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7854},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1144039,"byte_end":1144047,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"diagonal","qualname":"<SymmetricTridiagonal<N, D>>::diagonal","value":"fn (&self) -> VectorN<N::RealField, D>","parent":null,"children":[],"decl_id":null,"docs":" The diagonal components of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7856},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1144249,"byte_end":1144261,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"name":"off_diagonal","qualname":"<SymmetricTridiagonal<N, D>>::off_diagonal","value":"fn (&self) -> VectorN<N::RealField, DimDiff<D, U1>>","parent":null,"children":[],"decl_id":null,"docs":" The off-diagonal components of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7857},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1144506,"byte_end":1144507,"line_start":128,"line_end":128,"column_start":12,"column_end":13},"name":"q","qualname":"<SymmetricTridiagonal<N, D>>::q","value":"fn (&self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the orthogonal matrix `Q` of this decomposition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7858},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1144675,"byte_end":1144684,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"recompose","qualname":"<SymmetricTridiagonal<N, D>>::recompose","value":"fn (mut self) -> MatrixN<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Recomputes the original symmetric matrix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7863},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1145416,"byte_end":1145440,"line_start":154,"line_end":154,"column_start":12,"column_end":36},"name":"symmetric_tridiagonalize","qualname":"<SquareMatrix<N, D, S>>::symmetric_tridiagonalize","value":"fn (self) -> SymmetricTridiagonal<N, D>","parent":null,"children":[],"decl_id":null,"docs":" Computes the tridiagonalization of this symmetric matrix.\n\n Only the lower-triangular part (including the diagonal) of `m` is read.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7885},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\convolution.rs","byte_start":1146121,"byte_end":1146134,"line_start":19,"line_end":19,"column_start":12,"column_end":25},"name":"convolve_full","qualname":"<Vector<N, D1, S1>>::convolve_full","value":"fn <D2, S2> (&self, kernel: Vector<N, D2, S2>) -> VectorN<N, DimDiff<DimSum<D1, D2>, U1>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the convolution of the target vector and a kernel.\n\n # Arguments\n\n * `kernel` - A Vector with size > 0\n\n # Errors\n Inputs must satisfy `vector.len() >= kernel.len() > 0`.\n\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7888},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\convolution.rs","byte_start":1147672,"byte_end":1147686,"line_start":67,"line_end":67,"column_start":12,"column_end":26},"name":"convolve_valid","qualname":"<Vector<N, D1, S1>>::convolve_valid","value":"fn <D2, S2> (&self, kernel: Vector<N, D2, S2>) -> VectorN<N, DimDiff<DimSum<D1, U1>, D2>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the convolution of the target vector and a kernel.\n\n The output convolution consists only of those elements that do not rely on the zero-padding.\n # Arguments\n\n * `kernel` - A Vector with size > 0\n\n\n # Errors\n Inputs must satisfy `self.len() >= kernel.len() > 0`.\n\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7891},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\convolution.rs","byte_start":1148863,"byte_end":1148876,"line_start":102,"line_end":102,"column_start":12,"column_end":25},"name":"convolve_same","qualname":"<Vector<N, D1, S1>>::convolve_same","value":"fn <D2, S2> (&self, kernel: Vector<N, D2, S2>) -> VectorN<N, D1>","parent":null,"children":[],"decl_id":null,"docs":" Returns the convolution of the target vector and a kernel.\n\n The output convolution is the same size as vector, centered with respect to the ‘full’ output.\n # Arguments\n\n * `kernel` - A Vector with size > 0\n\n # Errors\n Inputs must satisfy `self.len() >= kernel.len() > 0`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":7937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5479,"byte_end":5481,"line_start":180,"line_end":180,"column_start":8,"column_end":10},"name":"id","qualname":"::id","value":"fn () -> Id","parent":null,"children":[],"decl_id":null,"docs":" Gets the ubiquitous multiplicative identity element.\n\n Same as `Id::new()`.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Id::new()` instead.\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5413,"byte_end":5461,"line_start":178,"line_end":178,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5462,"byte_end":5471,"line_start":179,"line_end":179,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5670,"byte_end":5673,"line_start":191,"line_end":191,"column_start":8,"column_end":11},"name":"one","qualname":"::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the multiplicative identity element.\n\n # See also:\n\n * [`origin`](../nalgebra/fn.origin.html)\n * [`zero`](fn.zero.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5653,"byte_end":5662,"line_start":190,"line_end":190,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7940},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5886,"byte_end":5890,"line_start":202,"line_end":202,"column_start":8,"column_end":12},"name":"zero","qualname":"::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the additive identity element.\n\n # See also:\n\n * [`one`](fn.one.html)\n * [`origin`](../nalgebra/fn.origin.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":5869,"byte_end":5878,"line_start":201,"line_end":201,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7942},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6311,"byte_end":6317,"line_start":219,"line_end":219,"column_start":8,"column_end":14},"name":"origin","qualname":"::origin","value":"fn <P> () -> P","parent":null,"children":[],"decl_id":null,"docs":" Gets the origin of the given point.\n\n # See also:\n\n * [`one`](fn.one.html)\n * [`zero`](fn.zero.html)\n\n # Deprecated\n Use [Point::origin] instead.\n\n Or, use [EuclideanSpace::origin](https://docs.rs/alga/0.7.2/alga/linear/trait.EuclideanSpace.html#tymethod.origin).\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Point::origin` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6242,"byte_end":6293,"line_start":217,"line_end":217,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6294,"byte_end":6303,"line_start":218,"line_end":218,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7944},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6480,"byte_end":6489,"line_start":230,"line_end":230,"column_start":8,"column_end":17},"name":"dimension","qualname":"::dimension","value":"fn <V> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" The dimension of the given algebraic entity seen as a vector space.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6463,"byte_end":6472,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7946},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6927,"byte_end":6931,"line_start":246,"line_end":246,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"fn <T> (mut val: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Wraps `val` into the range `[min, max]` using modular arithmetics.\n\n The range must not be empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":6910,"byte_end":6919,"line_start":245,"line_end":245,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7633,"byte_end":7638,"line_start":279,"line_end":279,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (val: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the input value clamped to the interval `[min, max]`.\n\n In particular:\n     * If `min < val < max`, this returns `val`.\n     * If `val <= min`, this returns `min`.\n     * If `val >= max`, this returns `max`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7616,"byte_end":7625,"line_start":278,"line_end":278,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7861,"byte_end":7864,"line_start":293,"line_end":293,"column_start":8,"column_end":11},"name":"max","qualname":"::max","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Same as `cmp::max`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7844,"byte_end":7853,"line_start":292,"line_end":292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7952},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7955,"byte_end":7958,"line_start":299,"line_end":299,"column_start":8,"column_end":11},"name":"min","qualname":"::min","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Same as `cmp::min`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":7938,"byte_end":7947,"line_start":298,"line_end":298,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8193,"byte_end":8196,"line_start":308,"line_end":308,"column_start":8,"column_end":11},"name":"abs","qualname":"::abs","value":"fn <T> (a: &T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The absolute value of `a`.\n\n Deprecated: Use [Matrix::abs] or [RealField::abs] instead.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Matrix::abs` or `RealField::abs` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8106,"byte_end":8175,"line_start":306,"line_end":306,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8176,"byte_end":8185,"line_start":307,"line_end":307,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7956},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8294,"byte_end":8297,"line_start":314,"line_end":314,"column_start":8,"column_end":11},"name":"inf","qualname":"::inf","value":"fn <T> (a: &T, b: &T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the infimum of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8277,"byte_end":8286,"line_start":313,"line_end":313,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7958},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8414,"byte_end":8417,"line_start":320,"line_end":320,"column_start":8,"column_end":11},"name":"sup","qualname":"::sup","value":"fn <T> (a: &T, b: &T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the supremum of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8397,"byte_end":8406,"line_start":319,"line_end":319,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7960},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8561,"byte_end":8568,"line_start":326,"line_end":326,"column_start":8,"column_end":15},"name":"inf_sup","qualname":"::inf_sup","value":"fn <T> (a: &T, b: &T) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns simultaneously the infimum and supremum of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8544,"byte_end":8553,"line_start":325,"line_end":325,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7962},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8705,"byte_end":8716,"line_start":332,"line_end":332,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::partial_cmp","value":"fn <T> (a: &T, b: &T) -> Option<Ordering>","parent":null,"children":[],"decl_id":null,"docs":" Compare `a` and `b` using a partial ordering relation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8688,"byte_end":8697,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7964},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8872,"byte_end":8882,"line_start":338,"line_end":338,"column_start":8,"column_end":18},"name":"partial_lt","qualname":"::partial_lt","value":"fn <T> (a: &T, b: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` iff `a` and `b` are comparable and `a < b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":8855,"byte_end":8864,"line_start":337,"line_end":337,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7966},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9018,"byte_end":9028,"line_start":344,"line_end":344,"column_start":8,"column_end":18},"name":"partial_le","qualname":"::partial_le","value":"fn <T> (a: &T, b: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` iff `a` and `b` are comparable and `a <= b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9001,"byte_end":9010,"line_start":343,"line_end":343,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7968},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9163,"byte_end":9173,"line_start":350,"line_end":350,"column_start":8,"column_end":18},"name":"partial_gt","qualname":"::partial_gt","value":"fn <T> (a: &T, b: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` iff `a` and `b` are comparable and `a > b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9146,"byte_end":9155,"line_start":349,"line_end":349,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7970},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9309,"byte_end":9319,"line_start":356,"line_end":356,"column_start":8,"column_end":18},"name":"partial_ge","qualname":"::partial_ge","value":"fn <T> (a: &T, b: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` iff `a` and `b` are comparable and `a >= b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9292,"byte_end":9301,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7972},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9453,"byte_end":9464,"line_start":362,"line_end":362,"column_start":8,"column_end":19},"name":"partial_min","qualname":"::partial_min","value":"fn <'a, T> (a: &'a T, b: &'a T) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum of `a` and `b` if they are comparable.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9436,"byte_end":9445,"line_start":361,"line_end":361,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7975},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9777,"byte_end":9788,"line_start":375,"line_end":375,"column_start":8,"column_end":19},"name":"partial_max","qualname":"::partial_max","value":"fn <'a, T> (a: &'a T, b: &'a T) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum of `a` and `b` if they are comparable.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":9760,"byte_end":9769,"line_start":374,"line_end":374,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7978},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":10146,"byte_end":10159,"line_start":389,"line_end":389,"column_start":8,"column_end":21},"name":"partial_clamp","qualname":"::partial_clamp","value":"fn <'a, T> (value: &'a T, min: &'a T, max: &'a T) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n `min` or `max`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":10129,"byte_end":10138,"line_start":388,"line_end":388,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7981},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":10633,"byte_end":10646,"line_start":405,"line_end":405,"column_start":8,"column_end":21},"name":"partial_sort2","qualname":"::partial_sort2","value":"fn <'a, T> (a: &'a T, b: &'a T) -> Option<(&'a T, &'a T)>","parent":null,"children":[],"decl_id":null,"docs":" Sorts two values in increasing order using a partial ordering.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":10616,"byte_end":10625,"line_start":404,"line_end":404,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7984},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11110,"byte_end":11121,"line_start":427,"line_end":427,"column_start":8,"column_end":19},"name":"try_inverse","qualname":"::try_inverse","value":"fn <M> (m: &M) -> Option<M>","parent":null,"children":[],"decl_id":null,"docs":" Tries to gets an inverted copy of a square matrix.\n\n # See also:\n\n * [`inverse`](fn.inverse.html)\n","sig":null,"attributes":[{"value":"deprecated(note = \"use the `.try_inverse()` method instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11029,"byte_end":11092,"line_start":425,"line_end":425,"column_start":1,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11093,"byte_end":11102,"line_start":426,"line_end":426,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11416,"byte_end":11423,"line_start":438,"line_end":438,"column_start":8,"column_end":15},"name":"inverse","qualname":"::inverse","value":"fn <M> (m: &M) -> M","parent":null,"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of an (always invertible) algebraic entity.\n\n # See also:\n\n * [`try_inverse`](fn.try_inverse.html)\n","sig":null,"attributes":[{"value":"deprecated(note = \"use the `.inverse()` method instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11339,"byte_end":11398,"line_start":436,"line_end":436,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11399,"byte_end":11408,"line_start":437,"line_end":437,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7988},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11897,"byte_end":11900,"line_start":456,"line_end":456,"column_start":8,"column_end":11},"name":"dot","qualname":"::dot","value":"fn <V> (a: &V, b: &V) -> V::Field","parent":null,"children":[],"decl_id":null,"docs":" Computes the dot product of two vectors.\n\n ## Deprecated\n Use these methods instead:\n   - [Matrix::dot]\n   - [Quaternion::dot]\n\n Or, use [FiniteDimVectorSpace::dot](https://docs.rs/alga/0.7.2/alga/linear/trait.FiniteDimVectorSpace.html#tymethod.dot).\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Matrix::dot` or `Quaternion::dot` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11809,"byte_end":11879,"line_start":454,"line_end":454,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":11880,"byte_end":11889,"line_start":455,"line_end":455,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7990},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12259,"byte_end":12264,"line_start":468,"line_end":468,"column_start":8,"column_end":13},"name":"angle","qualname":"::angle","value":"fn <V> (a: &V, b: &V) -> V::RealField","parent":null,"children":[],"decl_id":null,"docs":" Computes the smallest angle between two vectors.\n\n ## Deprecated\n Use [Matrix::angle] instead.\n\n Or, use [InnerSpace::angle](https://docs.rs/alga/0.7.2/alga/linear/trait.InnerSpace.html#method.angle).\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Matrix::angle` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12190,"byte_end":12241,"line_start":466,"line_end":466,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12242,"byte_end":12251,"line_start":467,"line_end":467,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7992},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12869,"byte_end":12873,"line_start":492,"line_end":492,"column_start":8,"column_end":12},"name":"norm","qualname":"::norm","value":"fn <V> (v: &V) -> V::RealField","parent":null,"children":[],"decl_id":null,"docs":" Computes the L2 (Euclidean) norm of a vector.\n\n # See also:\n\n * [`magnitude`](fn.magnitude.html)\n * [`magnitude_squared`](fn.magnitude_squared.html)\n * [`norm_squared`](fn.norm_squared.html)\n\n # Deprecated\n Use these methods instead:\n * [Matrix::norm]\n * [Quaternion::norm]\n\n Or, use [NormedSpace::norm](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.norm).\n","sig":null,"attributes":[{"value":"deprecated(note = \"use `Matrix::norm` or `Quaternion::norm` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12779,"byte_end":12851,"line_start":490,"line_end":490,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":12852,"byte_end":12861,"line_start":491,"line_end":491,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7994},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":13492,"byte_end":13504,"line_start":512,"line_end":512,"column_start":8,"column_end":20},"name":"norm_squared","qualname":"::norm_squared","value":"fn <V> (v: &V) -> V::RealField","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared L2 (Euclidean) norm of the vector `v`.\n\n # See also:\n\n * [`magnitude`](fn.magnitude.html)\n * [`magnitude_squared`](fn.magnitude_squared.html)\n * [`norm`](fn.norm.html)\n\n # Deprecated\n Use these methods instead:\n * [Matrix::norm_squared]\n * [Quaternion::norm_squared]\n\n Or, use [NormedSpace::norm_squared](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.norm_squared).\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"use `Matrix::norm_squared` or `Quaternion::norm_squared` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":13386,"byte_end":13474,"line_start":510,"line_end":510,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":13475,"byte_end":13484,"line_start":511,"line_end":511,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7996},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":14099,"byte_end":14108,"line_start":532,"line_end":532,"column_start":8,"column_end":17},"name":"magnitude","qualname":"::magnitude","value":"fn <V> (v: &V) -> V::RealField","parent":null,"children":[],"decl_id":null,"docs":" A synonym for [`norm`](fn.norm.html), aka length.\n\n # See also:\n\n * [`magnitude_squared`](fn.magnitude_squared.html)\n * [`norm`](fn.norm.html)\n * [`norm_squared`](fn.norm_squared.html)\n\n # Deprecated\n Use these methods instead:\n * [Matrix::magnitude]\n * [Quaternion::magnitude]\n\n Or, use [NormedSpace::norm](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.norm).\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"use `Matrix::magnitude` or `Quaternion::magnitude` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":13999,"byte_end":14081,"line_start":530,"line_end":530,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":14082,"byte_end":14091,"line_start":531,"line_end":531,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":7998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":14756,"byte_end":14773,"line_start":553,"line_end":553,"column_start":8,"column_end":25},"name":"magnitude_squared","qualname":"::magnitude_squared","value":"fn <V> (v: &V) -> V::RealField","parent":null,"children":[],"decl_id":null,"docs":" A synonym for [`norm_squared`](fn.norm_squared.html),\n  aka length squared.\n\n # See also:\n\n * [`magnitude`](fn.magnitude.html)\n * [`norm`](fn.norm.html)\n * [`norm_squared`](fn.norm_squared.html)\n\n # Deprecated\n Use these methods instead:\n * [Matrix::magnitude_squared]\n * [Quaternion::magnitude_squared]\n\n Or, use [NormedSpace::norm_squared](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.norm_squared).\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"use `Matrix::magnitude_squared` or `Quaternion::magnitude_squared` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":14640,"byte_end":14738,"line_start":551,"line_end":551,"column_start":1,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":14739,"byte_end":14748,"line_start":552,"line_end":552,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8000},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15226,"byte_end":15235,"line_start":567,"line_end":567,"column_start":8,"column_end":17},"name":"normalize","qualname":"::normalize","value":"fn <V> (v: &V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Computes the normalized version of the vector `v`.\n\n # Deprecated\n Use these methods instead:\n * [Matrix::normalize]\n * [Quaternion::normalize]\n\n Or, use [NormedSpace::normalize](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.normalize).\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"use `Matrix::normalize` or `Quaternion::normalize` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15126,"byte_end":15208,"line_start":565,"line_end":565,"column_start":1,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15209,"byte_end":15218,"line_start":566,"line_end":566,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8002},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15755,"byte_end":15768,"line_start":581,"line_end":581,"column_start":8,"column_end":21},"name":"try_normalize","qualname":"::try_normalize","value":"fn <V> (v: &V, min_norm: V::RealField) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Computes the normalized version of the vector `v` or returns `None` if its norm is smaller than `min_norm`.\n\n # Deprecated\n Use these methods instead:\n * [Matrix::try_normalize]\n * [Quaternion::try_normalize]\n\n Or, use [NormedSpace::try_normalize](https://docs.rs/alga/0.7.2/alga/linear/trait.NormedSpace.html#tymethod.try_normalize).\n","sig":null,"attributes":[{"value":"deprecated(note =\n             \"use `Matrix::try_normalize` or `Quaternion::try_normalize` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15647,"byte_end":15737,"line_start":579,"line_end":579,"column_start":1,"column_end":91}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":15738,"byte_end":15747,"line_start":580,"line_end":580,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8004},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16055,"byte_end":16061,"line_start":597,"line_end":597,"column_start":8,"column_end":14},"name":"center","qualname":"::center","value":"fn <P> (p1: &P, p2: &P) -> P","parent":null,"children":[],"decl_id":null,"docs":" The center of two points.\n\n # See also:\n\n * [distance](fn.distance.html)\n * [distance_squared](fn.distance_squared.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16038,"byte_end":16047,"line_start":596,"line_end":596,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8006},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16345,"byte_end":16353,"line_start":608,"line_end":608,"column_start":8,"column_end":16},"name":"distance","qualname":"::distance","value":"fn <P> (p1: &P, p2: &P) -> P::RealField","parent":null,"children":[],"decl_id":null,"docs":" The distance between two points.\n\n # See also:\n\n * [center](fn.center.html)\n * [distance_squared](fn.distance_squared.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16328,"byte_end":16337,"line_start":607,"line_end":607,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8008},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16611,"byte_end":16627,"line_start":619,"line_end":619,"column_start":8,"column_end":24},"name":"distance_squared","qualname":"::distance_squared","value":"fn <P> (p1: &P, p2: &P) -> P::RealField","parent":null,"children":[],"decl_id":null,"docs":" The squared distance between two points.\n\n # See also:\n\n * [center](fn.center.html)\n * [distance](fn.distance.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":16594,"byte_end":16603,"line_start":618,"line_end":618,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8010},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":17216,"byte_end":17223,"line_start":638,"line_end":638,"column_start":8,"column_end":15},"name":"convert","qualname":"::convert","value":"fn <From, To> (t: From) -> To","parent":null,"children":[],"decl_id":null,"docs":" Converts an object from one type to an equivalent or more general one.\n\n See also [`try_convert`](fn.try_convert.html) for conversion to more specific types.\n\n # See also:\n\n * [convert_ref](fn.convert_ref.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert](fn.try_convert.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":17199,"byte_end":17208,"line_start":637,"line_end":637,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8013},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":17722,"byte_end":17733,"line_start":654,"line_end":654,"column_start":8,"column_end":19},"name":"try_convert","qualname":"::try_convert","value":"fn <From, To> (t: From) -> Option<To>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to convert an object to a more specific one.\n\n See also [`convert`](fn.convert.html) for conversion to more general types.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref](fn.convert_ref.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":17705,"byte_end":17714,"line_start":653,"line_end":653,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8016},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":18187,"byte_end":18201,"line_start":669,"line_end":669,"column_start":8,"column_end":22},"name":"is_convertible","qualname":"::is_convertible","value":"fn <From, To> (t: &From) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates if [`try_convert`](fn.try_convert.html) will succeed without\n actually performing the conversion.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref](fn.convert_ref.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [try_convert](fn.try_convert.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":18170,"byte_end":18179,"line_start":668,"line_end":668,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8019},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":18705,"byte_end":18722,"line_start":685,"line_end":685,"column_start":15,"column_end":32},"name":"convert_unchecked","qualname":"::convert_unchecked","value":"fn <From, To> (t: From) -> To","parent":null,"children":[],"decl_id":null,"docs":" Use with care! Same as [`try_convert`](fn.try_convert.html) but\n without any property checks.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref](fn.convert_ref.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert](fn.try_convert.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":18681,"byte_end":18690,"line_start":684,"line_end":684,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8022},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":19156,"byte_end":19167,"line_start":699,"line_end":699,"column_start":8,"column_end":19},"name":"convert_ref","qualname":"::convert_ref","value":"fn <From, To> (t: &From) -> To","parent":null,"children":[],"decl_id":null,"docs":" Converts an object from one type to an equivalent or more general one.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert](fn.try_convert.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":19139,"byte_end":19148,"line_start":698,"line_end":698,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8025},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":19574,"byte_end":19589,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"try_convert_ref","qualname":"::try_convert_ref","value":"fn <From, To> (t: &From) -> Option<To>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to convert an object to a more specific one.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref](fn.convert_ref.html)\n * [convert_ref_unchecked](fn.convert_ref_unchecked.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert](fn.try_convert.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":19557,"byte_end":19566,"line_start":712,"line_end":712,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8028},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":20035,"byte_end":20056,"line_start":728,"line_end":728,"column_start":15,"column_end":36},"name":"convert_ref_unchecked","qualname":"::convert_ref_unchecked","value":"fn <From, To> (t: &From) -> To","parent":null,"children":[],"decl_id":null,"docs":" Use with care! Same as [`try_convert`](fn.try_convert.html) but\n without any property checks.\n\n # See also:\n\n * [convert](fn.convert.html)\n * [convert_ref](fn.convert_ref.html)\n * [is_convertible](../nalgebra/fn.is_convertible.html)\n * [try_convert](fn.try_convert.html)\n * [try_convert_ref](fn.try_convert_ref.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":20011,"byte_end":20020,"line_start":727,"line_end":727,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24195,"byte_end":24211,"line_start":73,"line_end":73,"column_start":67,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24833,"byte_end":24849,"line_start":96,"line_end":96,"column_start":57,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":25696,"byte_end":25702,"line_start":18,"line_end":18,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26672,"byte_end":26678,"line_start":51,"line_end":51,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":30409,"byte_end":30415,"line_start":196,"line_end":196,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":31625,"byte_end":31631,"line_start":233,"line_end":233,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":32572,"byte_end":32578,"line_start":266,"line_end":266,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":142},{"krate":0,"index":147},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":40956,"byte_end":40962,"line_start":490,"line_end":490,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":172},{"krate":0,"index":178},{"krate":0,"index":183},{"krate":0,"index":189},{"krate":0,"index":195},{"krate":0,"index":202},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":53408,"byte_end":53414,"line_start":864,"line_end":864,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":227},{"krate":0,"index":233},{"krate":0,"index":238},{"krate":0,"index":246},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":66483,"byte_end":66489,"line_start":1227,"line_end":1227,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":271},{"krate":0,"index":276},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":71752,"byte_end":71764,"line_start":1374,"line_end":1374,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":299},{"krate":0,"index":305},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79858,"byte_end":79873,"line_start":11,"line_end":11,"column_start":78,"column_end":93},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80180,"byte_end":80195,"line_start":21,"line_end":21,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80269,"byte_end":80284,"line_start":25,"line_end":25,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80358,"byte_end":80373,"line_start":29,"line_end":29,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81972,"byte_end":81987,"line_start":78,"line_end":78,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":82069,"byte_end":82084,"line_start":82,"line_end":82,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":82166,"byte_end":82181,"line_start":86,"line_end":86,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":90368,"byte_end":90384,"line_start":37,"line_end":37,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":91364,"byte_end":91380,"line_start":79,"line_end":79,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":92308,"byte_end":92324,"line_start":110,"line_end":110,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":93271,"byte_end":93287,"line_start":145,"line_end":145,"column_start":84,"column_end":100},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":94180,"byte_end":94196,"line_start":176,"line_end":176,"column_start":83,"column_end":99},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":95043,"byte_end":95059,"line_start":205,"line_end":205,"column_start":83,"column_end":99},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":95939,"byte_end":95955,"line_start":235,"line_end":235,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":96386,"byte_end":96402,"line_start":251,"line_end":251,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":96833,"byte_end":96849,"line_start":267,"line_end":267,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":97284,"byte_end":97300,"line_start":283,"line_end":283,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98144,"byte_end":98151,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98939,"byte_end":98946,"line_start":51,"line_end":51,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98974,"byte_end":98981,"line_start":52,"line_end":52,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99846,"byte_end":99853,"line_start":75,"line_end":75,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":100108,"byte_end":100115,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":100264,"byte_end":100271,"line_start":101,"line_end":101,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103473,"byte_end":103475,"line_start":213,"line_end":213,"column_start":14,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103761,"byte_end":103763,"line_start":231,"line_end":231,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103882,"byte_end":103884,"line_start":240,"line_end":240,"column_start":28,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":106263,"byte_end":106267,"line_start":307,"line_end":307,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":106830,"byte_end":106834,"line_start":320,"line_end":320,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":107696,"byte_end":107700,"line_start":347,"line_end":347,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108344,"byte_end":108348,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108528,"byte_end":108532,"line_start":371,"line_end":371,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108667,"byte_end":108671,"line_start":377,"line_end":377,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":109099,"byte_end":109103,"line_start":397,"line_end":397,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":109315,"byte_end":109319,"line_start":408,"line_end":408,"column_start":9,"column_end":13},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":113193,"byte_end":113200,"line_start":113,"line_end":113,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":113418,"byte_end":113425,"line_start":122,"line_end":122,"column_start":76,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114085,"byte_end":114092,"line_start":147,"line_end":147,"column_start":85,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114506,"byte_end":114516,"line_start":162,"line_end":162,"column_start":66,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114887,"byte_end":114897,"line_start":179,"line_end":179,"column_start":79,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":115565,"byte_end":115575,"line_start":204,"line_end":204,"column_start":88,"column_end":98},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":115970,"byte_end":115980,"line_start":224,"line_end":224,"column_start":63,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":116201,"byte_end":116211,"line_start":233,"line_end":233,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":116874,"byte_end":116884,"line_start":258,"line_end":258,"column_start":85,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":117304,"byte_end":117317,"line_start":273,"line_end":273,"column_start":66,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":117691,"byte_end":117704,"line_start":290,"line_end":290,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":118375,"byte_end":118388,"line_start":315,"line_end":315,"column_start":88,"column_end":101},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":119315,"byte_end":119321,"line_start":23,"line_end":23,"column_start":71,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":119550,"byte_end":119556,"line_start":33,"line_end":33,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120021,"byte_end":120027,"line_start":53,"line_end":53,"column_start":77,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120242,"byte_end":120248,"line_start":61,"line_end":61,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120657,"byte_end":120663,"line_start":83,"line_end":83,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":121265,"byte_end":121271,"line_start":113,"line_end":113,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":132899,"byte_end":132907,"line_start":377,"line_end":377,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":133174,"byte_end":133182,"line_start":387,"line_end":387,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":134251,"byte_end":134259,"line_start":417,"line_end":417,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":134563,"byte_end":134571,"line_start":427,"line_end":427,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":140082,"byte_end":140088,"line_start":600,"line_end":600,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":140555,"byte_end":140561,"line_start":617,"line_end":617,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":141159,"byte_end":141165,"line_start":636,"line_end":636,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":141652,"byte_end":141658,"line_start":653,"line_end":653,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142212,"byte_end":142218,"line_start":672,"line_end":672,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":923},{"krate":0,"index":927},{"krate":0,"index":935},{"krate":0,"index":943},{"krate":0,"index":951},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147393,"byte_end":147399,"line_start":829,"line_end":829,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147912,"byte_end":147919,"line_start":849,"line_end":849,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":148227,"byte_end":148234,"line_start":859,"line_end":859,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":148538,"byte_end":148544,"line_start":869,"line_end":869,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186292,"byte_end":186299,"line_start":24,"line_end":24,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187546,"byte_end":187553,"line_start":68,"line_end":68,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187776,"byte_end":187783,"line_start":76,"line_end":76,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191086,"byte_end":191098,"line_start":156,"line_end":156,"column_start":57,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193787,"byte_end":193799,"line_start":243,"line_end":243,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":196663,"byte_end":196675,"line_start":324,"line_end":324,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":198260,"byte_end":198267,"line_start":368,"line_end":368,"column_start":88,"column_end":95},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":199409,"byte_end":199415,"line_start":17,"line_end":17,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1948}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":207839,"byte_end":207847,"line_start":30,"line_end":30,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2011},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":217047,"byte_end":217054,"line_start":287,"line_end":287,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":236540,"byte_end":236548,"line_start":722,"line_end":722,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2032},{"krate":0,"index":2033}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":236849,"byte_end":236856,"line_start":738,"line_end":738,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":237080,"byte_end":237088,"line_start":749,"line_end":749,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2043},{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":237429,"byte_end":237437,"line_start":765,"line_end":765,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":238503,"byte_end":238511,"line_start":800,"line_end":800,"column_start":70,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246222,"byte_end":246229,"line_start":991,"line_end":991,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":249886,"byte_end":249899,"line_start":12,"line_end":12,"column_start":5,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":251911,"byte_end":251927,"line_start":65,"line_end":65,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":254870,"byte_end":254883,"line_start":136,"line_end":136,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":256038,"byte_end":256054,"line_start":162,"line_end":162,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":263881,"byte_end":263889,"line_start":26,"line_end":26,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2192}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":274448,"byte_end":274454,"line_start":341,"line_end":341,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":274920,"byte_end":274926,"line_start":358,"line_end":358,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2229}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":275313,"byte_end":275319,"line_start":372,"line_end":372,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2236}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":275662,"byte_end":275668,"line_start":385,"line_end":385,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2244}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":276140,"byte_end":276146,"line_start":402,"line_end":402,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":276539,"byte_end":276545,"line_start":416,"line_end":416,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":277597,"byte_end":277603,"line_start":21,"line_end":21,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2307}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280205,"byte_end":280211,"line_start":95,"line_end":95,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2325},{"krate":0,"index":2328},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":285779,"byte_end":285785,"line_start":256,"line_end":256,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2339},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":286992,"byte_end":286998,"line_start":294,"line_end":294,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2378}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":304145,"byte_end":304152,"line_start":800,"line_end":800,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2383}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":304932,"byte_end":304940,"line_start":817,"line_end":817,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2387}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":305886,"byte_end":305894,"line_start":838,"line_end":838,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2391}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":308910,"byte_end":308916,"line_start":939,"line_end":939,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2400}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":310426,"byte_end":310432,"line_start":987,"line_end":987,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2405}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":311044,"byte_end":311050,"line_start":1008,"line_end":1008,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":314347,"byte_end":314352,"line_start":50,"line_end":50,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":315423,"byte_end":315432,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":316385,"byte_end":316394,"line_start":113,"line_end":113,"column_start":43,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":316921,"byte_end":316930,"line_start":140,"line_end":140,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":317431,"byte_end":317445,"line_start":166,"line_end":166,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":318841,"byte_end":318848,"line_start":205,"line_end":205,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":319753,"byte_end":319769,"line_start":237,"line_end":237,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2485}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":325629,"byte_end":325635,"line_start":435,"line_end":435,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2524},{"krate":0,"index":2527}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":338088,"byte_end":338094,"line_start":84,"line_end":84,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2662}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339476,"byte_end":339482,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2668}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339884,"byte_end":339890,"line_start":151,"line_end":151,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685},{"krate":0,"index":2690},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2703},{"krate":0,"index":2706},{"krate":0,"index":2709},{"krate":0,"index":2714},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2731},{"krate":0,"index":2735}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354289,"byte_end":354295,"line_start":626,"line_end":626,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":2760},{"krate":0,"index":2766}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362060,"byte_end":362066,"line_start":862,"line_end":862,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2780}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362447,"byte_end":362453,"line_start":872,"line_end":872,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2785}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362876,"byte_end":362882,"line_start":882,"line_end":882,"column_start":64,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363141,"byte_end":363147,"line_start":890,"line_end":890,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2797}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363412,"byte_end":363418,"line_start":898,"line_end":898,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363892,"byte_end":363898,"line_start":916,"line_end":916,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2808},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366581,"byte_end":366587,"line_start":999,"line_end":999,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2831},{"krate":0,"index":2833}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367216,"byte_end":367222,"line_start":1019,"line_end":1019,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":368331,"byte_end":368343,"line_start":1055,"line_end":1055,"column_start":46,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2845},{"krate":0,"index":2847},{"krate":0,"index":2850}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369811,"byte_end":369823,"line_start":1106,"line_end":1106,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2855},{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370748,"byte_end":370754,"line_start":1131,"line_end":1131,"column_start":83,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":2861}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371469,"byte_end":371475,"line_start":1147,"line_end":1147,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2866},{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":372410,"byte_end":372416,"line_start":1173,"line_end":1173,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373022,"byte_end":373028,"line_start":1189,"line_end":1189,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373492,"byte_end":373498,"line_start":1210,"line_end":1210,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2888},{"krate":0,"index":2889}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373960,"byte_end":373966,"line_start":1233,"line_end":1233,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2895},{"krate":0,"index":2896}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":374452,"byte_end":374458,"line_start":1253,"line_end":1253,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2903},{"krate":0,"index":2904},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2910}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":377078,"byte_end":377084,"line_start":1341,"line_end":1341,"column_start":35,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":377193,"byte_end":377199,"line_start":1347,"line_end":1347,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":380988,"byte_end":380994,"line_start":1457,"line_end":1457,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2930},{"krate":0,"index":2934}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384353,"byte_end":384359,"line_start":1548,"line_end":1548,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384881,"byte_end":384887,"line_start":1568,"line_end":1568,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2947}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":385744,"byte_end":385750,"line_start":1597,"line_end":1597,"column_start":5,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2955}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":386491,"byte_end":386495,"line_start":1619,"line_end":1619,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2961},{"krate":0,"index":2963}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":388769,"byte_end":388773,"line_start":1684,"line_end":1684,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":389200,"byte_end":389204,"line_start":1703,"line_end":1703,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2979}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":389705,"byte_end":389709,"line_start":1727,"line_end":1727,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2985},{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":390094,"byte_end":390100,"line_start":1744,"line_end":1744,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2992}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391363,"byte_end":391371,"line_start":26,"line_end":26,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391602,"byte_end":391610,"line_start":37,"line_end":37,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3048}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391849,"byte_end":391857,"line_start":48,"line_end":48,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3053},{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":392872,"byte_end":392880,"line_start":81,"line_end":81,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3060},{"krate":0,"index":3061}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393126,"byte_end":393134,"line_start":94,"line_end":94,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3066}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393297,"byte_end":393305,"line_start":102,"line_end":102,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3071}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393468,"byte_end":393476,"line_start":110,"line_end":110,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3076},{"krate":0,"index":3077},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3080}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":394320,"byte_end":394328,"line_start":148,"line_end":148,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3085},{"krate":0,"index":3086},{"krate":0,"index":3087},{"krate":0,"index":3088},{"krate":0,"index":3089},{"krate":0,"index":3090},{"krate":0,"index":3091},{"krate":0,"index":3092}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":395137,"byte_end":395145,"line_start":185,"line_end":185,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":3097},{"krate":0,"index":3098}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":395680,"byte_end":395688,"line_start":203,"line_end":203,"column_start":71,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":3103},{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":399906,"byte_end":399913,"line_start":330,"line_end":330,"column_start":50,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":400128,"byte_end":400135,"line_start":341,"line_end":341,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3113}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":400878,"byte_end":400886,"line_start":370,"line_end":370,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3119}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":401136,"byte_end":401144,"line_start":381,"line_end":381,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3125}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":401386,"byte_end":401394,"line_start":392,"line_end":392,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3131}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403734,"byte_end":403746,"line_start":51,"line_end":51,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3173}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403998,"byte_end":404010,"line_start":64,"line_end":64,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3179},{"krate":0,"index":3180}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404305,"byte_end":404317,"line_start":79,"line_end":79,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3185}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404563,"byte_end":404575,"line_start":92,"line_end":92,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404843,"byte_end":404855,"line_start":106,"line_end":106,"column_start":24,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405072,"byte_end":405084,"line_start":116,"line_end":116,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3199}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405367,"byte_end":405379,"line_start":132,"line_end":132,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405545,"byte_end":405557,"line_start":141,"line_end":141,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405838,"byte_end":405850,"line_start":155,"line_end":155,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3213},{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3221}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":406945,"byte_end":406957,"line_start":207,"line_end":207,"column_start":46,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3226},{"krate":0,"index":3227}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":407385,"byte_end":407397,"line_start":227,"line_end":227,"column_start":53,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":407651,"byte_end":407663,"line_start":237,"line_end":237,"column_start":56,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415442,"byte_end":415454,"line_start":93,"line_end":93,"column_start":9,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415569,"byte_end":415581,"line_start":98,"line_end":98,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3277}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418236,"byte_end":418251,"line_start":182,"line_end":182,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3286},{"krate":0,"index":3287}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418841,"byte_end":418853,"line_start":201,"line_end":201,"column_start":82,"column_end":94},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418966,"byte_end":418981,"line_start":202,"line_end":202,"column_start":82,"column_end":97},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419097,"byte_end":419112,"line_start":203,"line_end":203,"column_start":85,"column_end":100},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419240,"byte_end":419252,"line_start":205,"line_end":205,"column_start":96,"column_end":108},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419372,"byte_end":419387,"line_start":206,"line_end":206,"column_start":96,"column_end":111},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419510,"byte_end":419525,"line_start":207,"line_end":207,"column_start":99,"column_end":114},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419604,"byte_end":419610,"line_start":209,"line_end":209,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3323}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":439691,"byte_end":439696,"line_start":713,"line_end":713,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3339},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440045,"byte_end":440054,"line_start":732,"line_end":732,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3345},{"krate":0,"index":3346},{"krate":0,"index":3347},{"krate":0,"index":3348}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440413,"byte_end":440420,"line_start":751,"line_end":751,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440747,"byte_end":440756,"line_start":770,"line_end":770,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441080,"byte_end":441086,"line_start":789,"line_end":789,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3366},{"krate":0,"index":3369},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":442338,"byte_end":442344,"line_start":830,"line_end":830,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3378},{"krate":0,"index":3381},{"krate":0,"index":3383}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443672,"byte_end":443683,"line_start":872,"line_end":872,"column_start":5,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3392}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445230,"byte_end":445240,"line_start":36,"line_end":36,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446792,"byte_end":446802,"line_start":92,"line_end":92,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3430}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446987,"byte_end":446997,"line_start":105,"line_end":105,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":447919,"byte_end":447929,"line_start":149,"line_end":149,"column_start":63,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":448891,"byte_end":448901,"line_start":198,"line_end":198,"column_start":62,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":3458},{"krate":0,"index":3459}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449236,"byte_end":449246,"line_start":212,"line_end":212,"column_start":69,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449401,"byte_end":449411,"line_start":215,"line_end":215,"column_start":72,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449560,"byte_end":449570,"line_start":218,"line_end":218,"column_start":66,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":3469},{"krate":0,"index":3470}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450335,"byte_end":450345,"line_start":247,"line_end":247,"column_start":73,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450504,"byte_end":450514,"line_start":250,"line_end":250,"column_start":76,"column_end":86},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450628,"byte_end":450638,"line_start":253,"line_end":253,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3480}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":451345,"byte_end":451355,"line_start":271,"line_end":271,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3487}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":452255,"byte_end":452265,"line_start":300,"line_end":300,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3491}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":452927,"byte_end":452933,"line_start":12,"line_end":12,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3518},{"krate":0,"index":3519},{"krate":0,"index":3520}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455172,"byte_end":455178,"line_start":87,"line_end":87,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455754,"byte_end":455766,"line_start":104,"line_end":104,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3531},{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456921,"byte_end":456922,"line_start":17,"line_end":17,"column_start":52,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":460719,"byte_end":460723,"line_start":56,"line_end":56,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3570},{"krate":0,"index":3571},{"krate":0,"index":3572},{"krate":0,"index":3573}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462893,"byte_end":462897,"line_start":113,"line_end":113,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3579},{"krate":0,"index":3580},{"krate":0,"index":3581}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463927,"byte_end":463931,"line_start":149,"line_end":149,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3584}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":464075,"byte_end":464079,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3589}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":465707,"byte_end":465711,"line_start":220,"line_end":220,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3592},{"krate":0,"index":3593}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":465878,"byte_end":465882,"line_start":229,"line_end":229,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3596},{"krate":0,"index":3597}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":466248,"byte_end":466254,"line_start":6,"line_end":6,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3618},{"krate":0,"index":3620},{"krate":0,"index":3622}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":468159,"byte_end":468165,"line_start":57,"line_end":57,"column_start":80,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":3629},{"krate":0,"index":3631},{"krate":0,"index":3633},{"krate":0,"index":3635},{"krate":0,"index":3637},{"krate":0,"index":3639},{"krate":0,"index":3641},{"krate":0,"index":3643},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3651}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476938,"byte_end":476951,"line_start":32,"line_end":32,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3693},{"krate":0,"index":3697}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":477659,"byte_end":477665,"line_start":51,"line_end":51,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3712}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":478525,"byte_end":478536,"line_start":72,"line_end":72,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3722},{"krate":0,"index":3727}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479515,"byte_end":479521,"line_start":98,"line_end":98,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3740},{"krate":0,"index":3741},{"krate":0,"index":3742},{"krate":0,"index":3746},{"krate":0,"index":3748},{"krate":0,"index":3753},{"krate":0,"index":3754},{"krate":0,"index":3755},{"krate":0,"index":3756},{"krate":0,"index":3757}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483264,"byte_end":483270,"line_start":216,"line_end":216,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3763},{"krate":0,"index":3764}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":495983,"byte_end":495988,"line_start":30,"line_end":30,"column_start":70,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":3820}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":496236,"byte_end":496241,"line_start":40,"line_end":40,"column_start":38,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":497661,"byte_end":497666,"line_start":94,"line_end":94,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3828},{"krate":0,"index":3829},{"krate":0,"index":3830},{"krate":0,"index":3831},{"krate":0,"index":3832},{"krate":0,"index":3833},{"krate":0,"index":3834},{"krate":0,"index":3835},{"krate":0,"index":3836}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501288,"byte_end":501293,"line_start":213,"line_end":213,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3840},{"krate":0,"index":3841},{"krate":0,"index":3842}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501704,"byte_end":501709,"line_start":231,"line_end":231,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3846},{"krate":0,"index":3847}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502189,"byte_end":502194,"line_start":254,"line_end":254,"column_start":49,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3851},{"krate":0,"index":3852}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502566,"byte_end":502571,"line_start":270,"line_end":270,"column_start":41,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502664,"byte_end":502669,"line_start":272,"line_end":272,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3859}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502874,"byte_end":502879,"line_start":281,"line_end":281,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3863},{"krate":0,"index":3864},{"krate":0,"index":3865},{"krate":0,"index":3866},{"krate":0,"index":3867}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":503544,"byte_end":503549,"line_start":315,"line_end":315,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3871}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504226,"byte_end":504231,"line_start":10,"line_end":10,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3892}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504399,"byte_end":504404,"line_start":18,"line_end":18,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3900},{"krate":0,"index":3901}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504937,"byte_end":504942,"line_start":50,"line_end":50,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3905}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":505187,"byte_end":505192,"line_start":61,"line_end":61,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3909}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":505429,"byte_end":505434,"line_start":72,"line_end":72,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3913}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":506735,"byte_end":506740,"line_start":15,"line_end":15,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3964},{"krate":0,"index":3965},{"krate":0,"index":3966},{"krate":0,"index":3967}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":509904,"byte_end":509909,"line_start":115,"line_end":115,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3971},{"krate":0,"index":3972}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":510200,"byte_end":510208,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3976}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":513522,"byte_end":513527,"line_start":27,"line_end":27,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4020}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":514221,"byte_end":514226,"line_start":52,"line_end":52,"column_start":62,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4027}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":516608,"byte_end":516615,"line_start":133,"line_end":133,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4032}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":516882,"byte_end":516887,"line_start":144,"line_end":144,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4036}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":518853,"byte_end":518858,"line_start":21,"line_end":21,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4107},{"krate":0,"index":4108}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":519073,"byte_end":519078,"line_start":32,"line_end":32,"column_start":49,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4112}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":519308,"byte_end":519313,"line_start":46,"line_end":46,"column_start":49,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4116},{"krate":0,"index":4117}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527229,"byte_end":527237,"line_start":33,"line_end":33,"column_start":70,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":4153}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527491,"byte_end":527499,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527657,"byte_end":527665,"line_start":50,"line_end":50,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4161}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":529172,"byte_end":529180,"line_start":108,"line_end":108,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4165},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170},{"krate":0,"index":4171},{"krate":0,"index":4172},{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4175}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":538409,"byte_end":538417,"line_start":355,"line_end":355,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181},{"krate":0,"index":4182}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541417,"byte_end":541425,"line_start":435,"line_end":435,"column_start":41,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541533,"byte_end":541541,"line_start":437,"line_end":437,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4189}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541727,"byte_end":541735,"line_start":446,"line_end":446,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4193},{"krate":0,"index":4194},{"krate":0,"index":4195}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":542155,"byte_end":542163,"line_start":465,"line_end":465,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4199},{"krate":0,"index":4200}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":542657,"byte_end":542665,"line_start":489,"line_end":489,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4204},{"krate":0,"index":4205}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":543085,"byte_end":543093,"line_start":511,"line_end":511,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4209}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":544594,"byte_end":544602,"line_start":21,"line_end":21,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":544797,"byte_end":544805,"line_start":30,"line_end":30,"column_start":68,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":4247},{"krate":0,"index":4248}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":545104,"byte_end":545112,"line_start":44,"line_end":44,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":4252}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":545822,"byte_end":545830,"line_start":73,"line_end":73,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":4257},{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":546217,"byte_end":546225,"line_start":87,"line_end":87,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":4262},{"krate":0,"index":4263}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":546640,"byte_end":546648,"line_start":101,"line_end":101,"column_start":70,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4270},{"krate":0,"index":4271},{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4276}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":547635,"byte_end":547643,"line_start":144,"line_end":144,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":548400,"byte_end":548408,"line_start":176,"line_end":176,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":4288},{"krate":0,"index":4289},{"krate":0,"index":4290}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551115,"byte_end":551123,"line_start":11,"line_end":11,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4317}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551710,"byte_end":551718,"line_start":33,"line_end":33,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4321}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":552809,"byte_end":552817,"line_start":33,"line_end":33,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":553445,"byte_end":553454,"line_start":55,"line_end":55,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":554054,"byte_end":554063,"line_start":78,"line_end":78,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4372},{"krate":0,"index":4373},{"krate":0,"index":4374}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":554663,"byte_end":554671,"line_start":101,"line_end":101,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4382}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":555339,"byte_end":555347,"line_start":124,"line_end":124,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":4388},{"krate":0,"index":4389},{"krate":0,"index":4390}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":556072,"byte_end":556080,"line_start":147,"line_end":147,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4396},{"krate":0,"index":4397},{"krate":0,"index":4398}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":557037,"byte_end":557045,"line_start":176,"line_end":176,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":4403},{"krate":0,"index":4404},{"krate":0,"index":4407}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558466,"byte_end":558475,"line_start":214,"line_end":214,"column_start":67,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":4410}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558658,"byte_end":558665,"line_start":220,"line_end":220,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4413}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558801,"byte_end":558808,"line_start":227,"line_end":227,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4416}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558941,"byte_end":558948,"line_start":234,"line_end":234,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4419}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":559085,"byte_end":559092,"line_start":241,"line_end":241,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4422}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_ops.rs","byte_start":559992,"byte_end":560000,"line_start":33,"line_end":33,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4459},{"krate":0,"index":4460}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":565804,"byte_end":565813,"line_start":23,"line_end":23,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4499},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573243,"byte_end":573251,"line_start":233,"line_end":233,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4510}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573788,"byte_end":573797,"line_start":258,"line_end":258,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4515},{"krate":0,"index":4517},{"krate":0,"index":4518},{"krate":0,"index":4519},{"krate":0,"index":4521},{"krate":0,"index":4523},{"krate":0,"index":4524},{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4527},{"krate":0,"index":4530},{"krate":0,"index":4533},{"krate":0,"index":4536},{"krate":0,"index":4539},{"krate":0,"index":4542},{"krate":0,"index":4545},{"krate":0,"index":4546},{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549},{"krate":0,"index":4550},{"krate":0,"index":4551}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":594957,"byte_end":594965,"line_start":820,"line_end":820,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4554}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597841,"byte_end":597851,"line_start":50,"line_end":50,"column_start":32,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597892,"byte_end":597902,"line_start":52,"line_end":52,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4588}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598187,"byte_end":598197,"line_start":60,"line_end":60,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4592}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598325,"byte_end":598335,"line_start":66,"line_end":66,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598372,"byte_end":598382,"line_start":68,"line_end":68,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4598}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599101,"byte_end":599111,"line_start":97,"line_end":97,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4604},{"krate":0,"index":4605},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4608},{"krate":0,"index":4609},{"krate":0,"index":4610},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4613},{"krate":0,"index":4614},{"krate":0,"index":4615},{"krate":0,"index":4616},{"krate":0,"index":4617},{"krate":0,"index":4618},{"krate":0,"index":4619},{"krate":0,"index":4620},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":4625},{"krate":0,"index":4626},{"krate":0,"index":4627},{"krate":0,"index":4628},{"krate":0,"index":4629},{"krate":0,"index":4630},{"krate":0,"index":4631},{"krate":0,"index":4632},{"krate":0,"index":4633},{"krate":0,"index":4634},{"krate":0,"index":4635},{"krate":0,"index":4637},{"krate":0,"index":4639},{"krate":0,"index":4640},{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643},{"krate":0,"index":4644},{"krate":0,"index":4645},{"krate":0,"index":4646},{"krate":0,"index":4647},{"krate":0,"index":4648},{"krate":0,"index":4649},{"krate":0,"index":4650}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":623113,"byte_end":623123,"line_start":854,"line_end":854,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4653},{"krate":0,"index":4654},{"krate":0,"index":4655}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":623639,"byte_end":623649,"line_start":870,"line_end":870,"column_start":61,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4659},{"krate":0,"index":4660}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":624244,"byte_end":624254,"line_start":890,"line_end":890,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4664},{"krate":0,"index":4665}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":624754,"byte_end":624764,"line_start":904,"line_end":904,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4669}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625103,"byte_end":625117,"line_start":917,"line_end":917,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4674},{"krate":0,"index":4675},{"krate":0,"index":4676},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4683},{"krate":0,"index":4684},{"krate":0,"index":4685},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4693},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696},{"krate":0,"index":4697},{"krate":0,"index":4698},{"krate":0,"index":4699},{"krate":0,"index":4700},{"krate":0,"index":4701},{"krate":0,"index":4702},{"krate":0,"index":4703}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":643040,"byte_end":643054,"line_start":1425,"line_end":1425,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":4706}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":643669,"byte_end":643683,"line_start":1447,"line_end":1447,"column_start":59,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4711}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":644022,"byte_end":644036,"line_start":1461,"line_end":1461,"column_start":61,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":4714},{"krate":0,"index":4715}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":644453,"byte_end":644467,"line_start":1480,"line_end":1480,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4718},{"krate":0,"index":4719}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645364,"byte_end":645374,"line_start":17,"line_end":17,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4759}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645498,"byte_end":645508,"line_start":24,"line_end":24,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4762}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645639,"byte_end":645649,"line_start":31,"line_end":31,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4765}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645788,"byte_end":645798,"line_start":38,"line_end":38,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4768}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645939,"byte_end":645949,"line_start":45,"line_end":45,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4771}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646593,"byte_end":646603,"line_start":76,"line_end":76,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4775},{"krate":0,"index":4776}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646749,"byte_end":646759,"line_start":85,"line_end":85,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4779}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646822,"byte_end":646832,"line_start":89,"line_end":89,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4782}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646905,"byte_end":646915,"line_start":93,"line_end":93,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4787},{"krate":0,"index":4788},{"krate":0,"index":4789}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":647508,"byte_end":647518,"line_start":120,"line_end":120,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795},{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4799}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648413,"byte_end":648427,"line_start":165,"line_end":165,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4802}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648562,"byte_end":648576,"line_start":172,"line_end":172,"column_start":54,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4805}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648723,"byte_end":648737,"line_start":179,"line_end":179,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":4808},{"krate":0,"index":4809}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649195,"byte_end":649209,"line_start":200,"line_end":200,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4812},{"krate":0,"index":4813}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649508,"byte_end":649522,"line_start":212,"line_end":212,"column_start":60,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":4816},{"krate":0,"index":4817}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649849,"byte_end":649863,"line_start":224,"line_end":224,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":4820},{"krate":0,"index":4821},{"krate":0,"index":4822},{"krate":0,"index":4823},{"krate":0,"index":4824},{"krate":0,"index":4825},{"krate":0,"index":4826},{"krate":0,"index":4827},{"krate":0,"index":4828},{"krate":0,"index":4829}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":650772,"byte_end":650786,"line_start":265,"line_end":265,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4832},{"krate":0,"index":4833},{"krate":0,"index":4834},{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":651286,"byte_end":651300,"line_start":292,"line_end":292,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4839},{"krate":0,"index":4840},{"krate":0,"index":4841}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":652229,"byte_end":652239,"line_start":20,"line_end":20,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4867},{"krate":0,"index":4868},{"krate":0,"index":4869},{"krate":0,"index":4870},{"krate":0,"index":4872},{"krate":0,"index":4873},{"krate":0,"index":4875}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655144,"byte_end":655154,"line_start":108,"line_end":108,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4878}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655259,"byte_end":655269,"line_start":115,"line_end":115,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4881},{"krate":0,"index":4882}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655492,"byte_end":655500,"line_start":127,"line_end":127,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4885}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":656052,"byte_end":656066,"line_start":151,"line_end":151,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4890},{"krate":0,"index":4891},{"krate":0,"index":4893},{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":4904},{"krate":0,"index":4907},{"krate":0,"index":4910},{"krate":0,"index":4913},{"krate":0,"index":4916},{"krate":0,"index":4919},{"krate":0,"index":4922},{"krate":0,"index":4924},{"krate":0,"index":4926},{"krate":0,"index":4928},{"krate":0,"index":4930}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":678936,"byte_end":678950,"line_start":733,"line_end":733,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4936}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":679082,"byte_end":679090,"line_start":740,"line_end":740,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4939}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":681606,"byte_end":681616,"line_start":35,"line_end":35,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":4970},{"krate":0,"index":4971},{"krate":0,"index":4972}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":682147,"byte_end":682161,"line_start":58,"line_end":58,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4976},{"krate":0,"index":4977},{"krate":0,"index":4978}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":682718,"byte_end":682732,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4982},{"krate":0,"index":4983},{"krate":0,"index":4984}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":683323,"byte_end":683337,"line_start":102,"line_end":102,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4991}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":683930,"byte_end":683944,"line_start":124,"line_end":124,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4996},{"krate":0,"index":4997},{"krate":0,"index":4998}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":684572,"byte_end":684586,"line_start":146,"line_end":146,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5003},{"krate":0,"index":5004},{"krate":0,"index":5005}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685197,"byte_end":685211,"line_start":168,"line_end":168,"column_start":79,"column_end":93},"value":"","parent":null,"children":[{"krate":0,"index":5009},{"krate":0,"index":5010},{"krate":0,"index":5011}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685716,"byte_end":685726,"line_start":187,"line_end":187,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5014}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685905,"byte_end":685915,"line_start":194,"line_end":194,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5017}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686238,"byte_end":686252,"line_start":208,"line_end":208,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5020}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686548,"byte_end":686555,"line_start":221,"line_end":221,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5023}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686702,"byte_end":686711,"line_start":228,"line_end":228,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5026}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686857,"byte_end":686871,"line_start":235,"line_end":235,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5029}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":687025,"byte_end":687032,"line_start":242,"line_end":242,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5032}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":687189,"byte_end":687199,"line_start":249,"line_end":249,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5035}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_coordinates.rs","byte_start":687473,"byte_end":687483,"line_start":10,"line_end":10,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5046},{"krate":0,"index":5047}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_coordinates.rs","byte_start":687651,"byte_end":687661,"line_start":19,"line_end":19,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5050}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":689329,"byte_end":689339,"line_start":66,"line_end":66,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5083},{"krate":0,"index":5084}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":689502,"byte_end":689512,"line_start":75,"line_end":75,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5087}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":702926,"byte_end":702936,"line_start":550,"line_end":550,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5093},{"krate":0,"index":5094}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707109,"byte_end":707120,"line_start":12,"line_end":12,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5124},{"krate":0,"index":5125},{"krate":0,"index":5126},{"krate":0,"index":5127},{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5133},{"krate":0,"index":5134},{"krate":0,"index":5135},{"krate":0,"index":5136},{"krate":0,"index":5137},{"krate":0,"index":5138},{"krate":0,"index":5139},{"krate":0,"index":5140}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717098,"byte_end":717109,"line_start":326,"line_end":326,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5143}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717273,"byte_end":717284,"line_start":332,"line_end":332,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5148}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717629,"byte_end":717640,"line_start":346,"line_end":346,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5151},{"krate":0,"index":5152}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":718080,"byte_end":718091,"line_start":365,"line_end":365,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5155},{"krate":0,"index":5156}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719023,"byte_end":719034,"line_start":20,"line_end":20,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5189}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719169,"byte_end":719180,"line_start":27,"line_end":27,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5192}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719327,"byte_end":719338,"line_start":34,"line_end":34,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":5195},{"krate":0,"index":5196}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719952,"byte_end":719963,"line_start":61,"line_end":61,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5200},{"krate":0,"index":5201}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":720303,"byte_end":720314,"line_start":75,"line_end":75,"column_start":60,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":5204},{"krate":0,"index":5205}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":720682,"byte_end":720693,"line_start":89,"line_end":89,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5210},{"krate":0,"index":5211},{"krate":0,"index":5212},{"krate":0,"index":5213},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5216},{"krate":0,"index":5217}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":721643,"byte_end":721654,"line_start":132,"line_end":132,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5220},{"krate":0,"index":5221},{"krate":0,"index":5222},{"krate":0,"index":5223}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":722241,"byte_end":722252,"line_start":162,"line_end":162,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5227},{"krate":0,"index":5228},{"krate":0,"index":5229}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723089,"byte_end":723100,"line_start":15,"line_end":15,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5252},{"krate":0,"index":5253},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5256},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5262},{"krate":0,"index":5263},{"krate":0,"index":5266},{"krate":0,"index":5269},{"krate":0,"index":5272}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":732290,"byte_end":732301,"line_start":271,"line_end":271,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5277}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":732430,"byte_end":732438,"line_start":278,"line_end":278,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5280}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":733696,"byte_end":733707,"line_start":29,"line_end":29,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5308},{"krate":0,"index":5309},{"krate":0,"index":5310}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":734246,"byte_end":734257,"line_start":50,"line_end":50,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":734856,"byte_end":734867,"line_start":73,"line_end":73,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5321},{"krate":0,"index":5322},{"krate":0,"index":5323}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":735460,"byte_end":735471,"line_start":95,"line_end":95,"column_start":53,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5328},{"krate":0,"index":5329},{"krate":0,"index":5330}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":736099,"byte_end":736110,"line_start":117,"line_end":117,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5335},{"krate":0,"index":5336},{"krate":0,"index":5337}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":736721,"byte_end":736732,"line_start":139,"line_end":139,"column_start":79,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737208,"byte_end":737217,"line_start":158,"line_end":158,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5346}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737360,"byte_end":737371,"line_start":165,"line_end":165,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5349}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737522,"byte_end":737529,"line_start":172,"line_end":172,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5352}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737676,"byte_end":737683,"line_start":179,"line_end":179,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5355}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":738994,"byte_end":739005,"line_start":47,"line_end":47,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5382},{"krate":0,"index":5383}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":739459,"byte_end":739470,"line_start":65,"line_end":65,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5392},{"krate":0,"index":5393}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":739964,"byte_end":739975,"line_start":84,"line_end":84,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5402},{"krate":0,"index":5403}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":740461,"byte_end":740472,"line_start":102,"line_end":102,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5412},{"krate":0,"index":5413}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747136,"byte_end":747147,"line_start":303,"line_end":303,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5424}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747314,"byte_end":747325,"line_start":310,"line_end":310,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5428}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747518,"byte_end":747529,"line_start":318,"line_end":318,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5431}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747696,"byte_end":747707,"line_start":325,"line_end":325,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5435}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747899,"byte_end":747910,"line_start":333,"line_end":333,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5438}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748124,"byte_end":748135,"line_start":342,"line_end":342,"column_start":59,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":5442}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748373,"byte_end":748384,"line_start":352,"line_end":352,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5445}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748598,"byte_end":748609,"line_start":361,"line_end":361,"column_start":59,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":5449}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748846,"byte_end":748854,"line_start":371,"line_end":371,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5452}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749091,"byte_end":749099,"line_start":380,"line_end":380,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5456}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749360,"byte_end":749368,"line_start":390,"line_end":390,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5459}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749605,"byte_end":749613,"line_start":399,"line_end":399,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5463}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":750803,"byte_end":750814,"line_start":34,"line_end":34,"column_start":70,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":5495}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":751028,"byte_end":751039,"line_start":44,"line_end":44,"column_start":38,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":751156,"byte_end":751167,"line_start":50,"line_end":50,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5503}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":752608,"byte_end":752619,"line_start":108,"line_end":108,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5507},{"krate":0,"index":5508},{"krate":0,"index":5509},{"krate":0,"index":5510}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":755582,"byte_end":755593,"line_start":195,"line_end":195,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5514}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756186,"byte_end":756197,"line_start":214,"line_end":214,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5518}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756773,"byte_end":756784,"line_start":231,"line_end":231,"column_start":41,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756889,"byte_end":756900,"line_start":233,"line_end":233,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5525}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":757116,"byte_end":757127,"line_start":242,"line_end":242,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5529},{"krate":0,"index":5530},{"krate":0,"index":5531}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":757538,"byte_end":757549,"line_start":260,"line_end":260,"column_start":57,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":5535},{"krate":0,"index":5536}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":758029,"byte_end":758040,"line_start":283,"line_end":283,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5540},{"krate":0,"index":5541}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":758459,"byte_end":758470,"line_start":304,"line_end":304,"column_start":64,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5545}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759419,"byte_end":759430,"line_start":22,"line_end":22,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":5578}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759622,"byte_end":759633,"line_start":31,"line_end":31,"column_start":68,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":5582},{"krate":0,"index":5583}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759925,"byte_end":759936,"line_start":45,"line_end":45,"column_start":66,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":5587}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":760643,"byte_end":760654,"line_start":74,"line_end":74,"column_start":64,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5592},{"krate":0,"index":5593}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":761005,"byte_end":761016,"line_start":88,"line_end":88,"column_start":74,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":5597},{"krate":0,"index":5598}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":761387,"byte_end":761398,"line_start":102,"line_end":102,"column_start":70,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":5602},{"krate":0,"index":5603},{"krate":0,"index":5604},{"krate":0,"index":5605},{"krate":0,"index":5606},{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5609},{"krate":0,"index":5610},{"krate":0,"index":5611}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":762355,"byte_end":762366,"line_start":145,"line_end":145,"column_start":60,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":5615},{"krate":0,"index":5616},{"krate":0,"index":5617},{"krate":0,"index":5618}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":763031,"byte_end":763042,"line_start":176,"line_end":176,"column_start":65,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":5623},{"krate":0,"index":5624},{"krate":0,"index":5625},{"krate":0,"index":5626}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":764579,"byte_end":764590,"line_start":18,"line_end":18,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5674}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765258,"byte_end":765269,"line_start":41,"line_end":41,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":5678}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765453,"byte_end":765461,"line_start":50,"line_end":50,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":5682}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":768510,"byte_end":768521,"line_start":23,"line_end":23,"column_start":59,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":5718},{"krate":0,"index":5719},{"krate":0,"index":5720}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":769154,"byte_end":769165,"line_start":47,"line_end":47,"column_start":62,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":5726},{"krate":0,"index":5727},{"krate":0,"index":5728}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":769792,"byte_end":769803,"line_start":70,"line_end":70,"column_start":64,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5734},{"krate":0,"index":5735},{"krate":0,"index":5736}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":770487,"byte_end":770498,"line_start":93,"line_end":93,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5742},{"krate":0,"index":5743},{"krate":0,"index":5744}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":771306,"byte_end":771317,"line_start":120,"line_end":120,"column_start":62,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":5749},{"krate":0,"index":5750},{"krate":0,"index":5752}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":772456,"byte_end":772463,"line_start":156,"line_end":156,"column_start":70,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":5756}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":772755,"byte_end":772766,"line_start":167,"line_end":167,"column_start":53,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":5760}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783192,"byte_end":783200,"line_start":80,"line_end":80,"column_start":88,"column_end":96},"value":"","parent":null,"children":[{"krate":0,"index":5841}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783501,"byte_end":783509,"line_start":91,"line_end":91,"column_start":81,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783667,"byte_end":783675,"line_start":98,"line_end":98,"column_start":76,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":5851}],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783911,"byte_end":783919,"line_start":107,"line_end":107,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":5856},{"krate":0,"index":5857},{"krate":0,"index":5858},{"krate":0,"index":5859},{"krate":0,"index":5860},{"krate":0,"index":5861},{"krate":0,"index":5862},{"krate":0,"index":5863},{"krate":0,"index":5864},{"krate":0,"index":5865},{"krate":0,"index":5866}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":793119,"byte_end":793127,"line_start":354,"line_end":354,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5871}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794298,"byte_end":794306,"line_start":387,"line_end":387,"column_start":42,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794449,"byte_end":794457,"line_start":394,"line_end":394,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5880}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794749,"byte_end":794757,"line_start":405,"line_end":405,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":5885},{"krate":0,"index":5886},{"krate":0,"index":5887}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":795305,"byte_end":795313,"line_start":425,"line_end":425,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5892},{"krate":0,"index":5893}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":795983,"byte_end":795991,"line_start":452,"line_end":452,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5898},{"krate":0,"index":5899}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":796573,"byte_end":796581,"line_start":476,"line_end":476,"column_start":67,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5904}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":797623,"byte_end":797631,"line_start":22,"line_end":22,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":5939}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":797864,"byte_end":797872,"line_start":33,"line_end":33,"column_start":71,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":5944},{"krate":0,"index":5945}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":798205,"byte_end":798213,"line_start":49,"line_end":49,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":5950}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799008,"byte_end":799016,"line_start":81,"line_end":81,"column_start":67,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5956},{"krate":0,"index":5957}],"docs":"","sig":null,"attributes":[]},{"id":593,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799423,"byte_end":799431,"line_start":97,"line_end":97,"column_start":77,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":5962},{"krate":0,"index":5963}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799866,"byte_end":799874,"line_start":113,"line_end":113,"column_start":73,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":5968},{"krate":0,"index":5969},{"krate":0,"index":5970},{"krate":0,"index":5971},{"krate":0,"index":5972},{"krate":0,"index":5973},{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5976},{"krate":0,"index":5977},{"krate":0,"index":5978}],"docs":"","sig":null,"attributes":[]},{"id":595,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":801332,"byte_end":801340,"line_start":171,"line_end":171,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":5983},{"krate":0,"index":5984},{"krate":0,"index":5985},{"krate":0,"index":5986}],"docs":"","sig":null,"attributes":[]},{"id":596,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":803604,"byte_end":803612,"line_start":22,"line_end":22,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":6039},{"krate":0,"index":6040}],"docs":"","sig":null,"attributes":[]},{"id":597,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":805126,"byte_end":805134,"line_start":68,"line_end":68,"column_start":70,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":6045}],"docs":"","sig":null,"attributes":[]},{"id":598,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":805368,"byte_end":805376,"line_start":78,"line_end":78,"column_start":71,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":6050}],"docs":"","sig":null,"attributes":[]},{"id":599,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806153,"byte_end":806161,"line_start":111,"line_end":111,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6055},{"krate":0,"index":6056},{"krate":0,"index":6057}],"docs":"","sig":null,"attributes":[]},{"id":600,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807213,"byte_end":807221,"line_start":146,"line_end":146,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6060},{"krate":0,"index":6061},{"krate":0,"index":6062}],"docs":"","sig":null,"attributes":[]},{"id":601,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":818239,"byte_end":818247,"line_start":20,"line_end":20,"column_start":68,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":6094},{"krate":0,"index":6095},{"krate":0,"index":6096}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":819140,"byte_end":819148,"line_start":48,"line_end":48,"column_start":70,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":6103},{"krate":0,"index":6104},{"krate":0,"index":6105}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":819889,"byte_end":819897,"line_start":72,"line_end":72,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":6112},{"krate":0,"index":6113},{"krate":0,"index":6114}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":821067,"byte_end":821075,"line_start":106,"line_end":106,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":6120},{"krate":0,"index":6121},{"krate":0,"index":6124}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":822782,"byte_end":822789,"line_start":152,"line_end":152,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":6129}],"docs":"","sig":null,"attributes":[]},{"id":650,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":840546,"byte_end":840556,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6189}],"docs":"","sig":null,"attributes":[]},{"id":651,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":840853,"byte_end":840863,"line_start":83,"line_end":83,"column_start":81,"column_end":91},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":652,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841020,"byte_end":841030,"line_start":89,"line_end":89,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":6199}],"docs":"","sig":null,"attributes":[]},{"id":653,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841240,"byte_end":841250,"line_start":98,"line_end":98,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6204},{"krate":0,"index":6205},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":6208},{"krate":0,"index":6209},{"krate":0,"index":6210},{"krate":0,"index":6211},{"krate":0,"index":6212},{"krate":0,"index":6213},{"krate":0,"index":6214},{"krate":0,"index":6215},{"krate":0,"index":6216},{"krate":0,"index":6217},{"krate":0,"index":6218},{"krate":0,"index":6219},{"krate":0,"index":6220},{"krate":0,"index":6221},{"krate":0,"index":6222}],"docs":"","sig":null,"attributes":[]},{"id":654,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849369,"byte_end":849379,"line_start":328,"line_end":328,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6227}],"docs":"","sig":null,"attributes":[]},{"id":655,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849995,"byte_end":850005,"line_start":349,"line_end":349,"column_start":42,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":656,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850147,"byte_end":850157,"line_start":355,"line_end":355,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6236}],"docs":"","sig":null,"attributes":[]},{"id":657,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850441,"byte_end":850451,"line_start":366,"line_end":366,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6241},{"krate":0,"index":6242},{"krate":0,"index":6243}],"docs":"","sig":null,"attributes":[]},{"id":658,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850991,"byte_end":851001,"line_start":386,"line_end":386,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":6248},{"krate":0,"index":6249}],"docs":"","sig":null,"attributes":[]},{"id":659,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":851663,"byte_end":851673,"line_start":413,"line_end":413,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6254},{"krate":0,"index":6255}],"docs":"","sig":null,"attributes":[]},{"id":660,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":852208,"byte_end":852218,"line_start":436,"line_end":436,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6260}],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853287,"byte_end":853297,"line_start":19,"line_end":19,"column_start":64,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":6292}],"docs":"","sig":null,"attributes":[]},{"id":662,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853530,"byte_end":853540,"line_start":30,"line_end":30,"column_start":71,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":6297},{"krate":0,"index":6298}],"docs":"","sig":null,"attributes":[]},{"id":663,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853873,"byte_end":853883,"line_start":46,"line_end":46,"column_start":69,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":6303}],"docs":"","sig":null,"attributes":[]},{"id":664,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":854680,"byte_end":854690,"line_start":78,"line_end":78,"column_start":67,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":6309},{"krate":0,"index":6310}],"docs":"","sig":null,"attributes":[]},{"id":665,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":855097,"byte_end":855107,"line_start":94,"line_end":94,"column_start":77,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":6315},{"krate":0,"index":6316}],"docs":"","sig":null,"attributes":[]},{"id":666,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":855542,"byte_end":855552,"line_start":110,"line_end":110,"column_start":73,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":6321},{"krate":0,"index":6322},{"krate":0,"index":6323},{"krate":0,"index":6324},{"krate":0,"index":6325},{"krate":0,"index":6326},{"krate":0,"index":6327},{"krate":0,"index":6328},{"krate":0,"index":6329},{"krate":0,"index":6330},{"krate":0,"index":6331}],"docs":"","sig":null,"attributes":[]},{"id":667,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":856986,"byte_end":856996,"line_start":167,"line_end":167,"column_start":67,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":6336},{"krate":0,"index":6337},{"krate":0,"index":6338},{"krate":0,"index":6339}],"docs":"","sig":null,"attributes":[]},{"id":668,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":858572,"byte_end":858582,"line_start":22,"line_end":22,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6389}],"docs":"","sig":null,"attributes":[]},{"id":669,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859254,"byte_end":859264,"line_start":48,"line_end":48,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":6394}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859541,"byte_end":859549,"line_start":60,"line_end":60,"column_start":73,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":6399}],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859976,"byte_end":859986,"line_start":77,"line_end":77,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6406}],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":861523,"byte_end":861533,"line_start":130,"line_end":130,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6409}],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862295,"byte_end":862305,"line_start":153,"line_end":153,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6412}],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":872037,"byte_end":872047,"line_start":19,"line_end":19,"column_start":70,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":6444},{"krate":0,"index":6445},{"krate":0,"index":6446}],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":872953,"byte_end":872963,"line_start":47,"line_end":47,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":6453},{"krate":0,"index":6454},{"krate":0,"index":6455}],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":874123,"byte_end":874133,"line_start":81,"line_end":81,"column_start":65,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":6461},{"krate":0,"index":6462},{"krate":0,"index":6465}],"docs":"","sig":null,"attributes":[]},{"id":677,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":877515,"byte_end":877522,"line_start":166,"line_end":166,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":6470}],"docs":"","sig":null,"attributes":[]},{"id":724,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897630,"byte_end":897632,"line_start":53,"line_end":53,"column_start":37,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":725,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898175,"byte_end":898183,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6554}],"docs":"","sig":null,"attributes":[]},{"id":726,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898418,"byte_end":898429,"line_start":83,"line_end":83,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6558}],"docs":"","sig":null,"attributes":[]},{"id":727,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898681,"byte_end":898688,"line_start":94,"line_end":94,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6562},{"krate":0,"index":6563}],"docs":"","sig":null,"attributes":[]},{"id":728,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":899399,"byte_end":899400,"line_start":122,"line_end":122,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6570}],"docs":"","sig":null,"attributes":[]},{"id":729,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":900017,"byte_end":900018,"line_start":146,"line_end":146,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":730,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":901024,"byte_end":901033,"line_start":176,"line_end":176,"column_start":69,"column_end":78},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":731,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":901248,"byte_end":901257,"line_start":183,"line_end":183,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":6582}],"docs":"","sig":null,"attributes":[]},{"id":732,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902467,"byte_end":902476,"line_start":218,"line_end":218,"column_start":65,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":733,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902631,"byte_end":902640,"line_start":221,"line_end":221,"column_start":67,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":6591}],"docs":"","sig":null,"attributes":[]},{"id":734,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902879,"byte_end":902888,"line_start":230,"line_end":230,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":6596},{"krate":0,"index":6597},{"krate":0,"index":6598},{"krate":0,"index":6599},{"krate":0,"index":6600},{"krate":0,"index":6601},{"krate":0,"index":6603},{"krate":0,"index":6604},{"krate":0,"index":6605},{"krate":0,"index":6606},{"krate":0,"index":6607},{"krate":0,"index":6608}],"docs":"","sig":null,"attributes":[]},{"id":735,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":910967,"byte_end":910976,"line_start":457,"line_end":457,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6613},{"krate":0,"index":6614}],"docs":"","sig":null,"attributes":[]},{"id":736,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911794,"byte_end":911803,"line_start":484,"line_end":484,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":6619},{"krate":0,"index":6620}],"docs":"","sig":null,"attributes":[]},{"id":737,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912685,"byte_end":912694,"line_start":508,"line_end":508,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6624}],"docs":"","sig":null,"attributes":[]},{"id":738,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":913131,"byte_end":913140,"line_start":519,"line_end":519,"column_start":67,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":6629},{"krate":0,"index":6630},{"krate":0,"index":6631}],"docs":"","sig":null,"attributes":[]},{"id":739,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":913600,"byte_end":913609,"line_start":537,"line_end":537,"column_start":68,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":6636},{"krate":0,"index":6637}],"docs":"","sig":null,"attributes":[]},{"id":740,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":914142,"byte_end":914151,"line_start":560,"line_end":560,"column_start":64,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":6642},{"krate":0,"index":6643}],"docs":"","sig":null,"attributes":[]},{"id":741,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":915372,"byte_end":915381,"line_start":18,"line_end":18,"column_start":71,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":6677}],"docs":"","sig":null,"attributes":[]},{"id":742,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":915644,"byte_end":915653,"line_start":29,"line_end":29,"column_start":78,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":6682},{"krate":0,"index":6683}],"docs":"","sig":null,"attributes":[]},{"id":743,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":916042,"byte_end":916051,"line_start":45,"line_end":45,"column_start":76,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":6688}],"docs":"","sig":null,"attributes":[]},{"id":744,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":917301,"byte_end":917310,"line_start":88,"line_end":88,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":6695},{"krate":0,"index":6696}],"docs":"","sig":null,"attributes":[]},{"id":745,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":917851,"byte_end":917860,"line_start":108,"line_end":108,"column_start":73,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":6701},{"krate":0,"index":6702}],"docs":"","sig":null,"attributes":[]},{"id":746,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":920357,"byte_end":920366,"line_start":11,"line_end":11,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":6742}],"docs":"","sig":null,"attributes":[]},{"id":747,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":921465,"byte_end":921474,"line_start":48,"line_end":48,"column_start":61,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":6747}],"docs":"","sig":null,"attributes":[]},{"id":748,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":922002,"byte_end":922011,"line_start":9,"line_end":9,"column_start":69,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":6771},{"krate":0,"index":6772},{"krate":0,"index":6773}],"docs":"","sig":null,"attributes":[]},{"id":749,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":922843,"byte_end":922852,"line_start":37,"line_end":37,"column_start":74,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":6779},{"krate":0,"index":6780},{"krate":0,"index":6781}],"docs":"","sig":null,"attributes":[]},{"id":750,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":923636,"byte_end":923643,"line_start":64,"line_end":64,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":6786}],"docs":"","sig":null,"attributes":[]},{"id":751,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_ops.rs","byte_start":925946,"byte_end":925955,"line_start":82,"line_end":82,"column_start":63,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":6835},{"krate":0,"index":6836}],"docs":"","sig":null,"attributes":[]},{"id":752,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_ops.rs","byte_start":926311,"byte_end":926320,"line_start":96,"line_end":96,"column_start":52,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":6840}],"docs":"","sig":null,"attributes":[]},{"id":813,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":947821,"byte_end":947831,"line_start":16,"line_end":16,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":6873},{"krate":0,"index":6874},{"krate":0,"index":6875},{"krate":0,"index":6876},{"krate":0,"index":6880},{"krate":0,"index":6884},{"krate":0,"index":6889}],"docs":"","sig":null,"attributes":[]},{"id":814,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952211,"byte_end":952224,"line_start":24,"line_end":24,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":815,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952261,"byte_end":952274,"line_start":26,"line_end":26,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6919}],"docs":"","sig":null,"attributes":[]},{"id":816,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952424,"byte_end":952437,"line_start":33,"line_end":33,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6922}],"docs":"","sig":null,"attributes":[]},{"id":817,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952582,"byte_end":952595,"line_start":39,"line_end":39,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6925}],"docs":"","sig":null,"attributes":[]},{"id":818,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":953308,"byte_end":953321,"line_start":64,"line_end":64,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6928},{"krate":0,"index":6929},{"krate":0,"index":6930},{"krate":0,"index":6931},{"krate":0,"index":6932},{"krate":0,"index":6933},{"krate":0,"index":6934},{"krate":0,"index":6935},{"krate":0,"index":6936},{"krate":0,"index":6937},{"krate":0,"index":6938},{"krate":0,"index":6939},{"krate":0,"index":6940},{"krate":0,"index":6941},{"krate":0,"index":6942},{"krate":0,"index":6943},{"krate":0,"index":6944},{"krate":0,"index":6945},{"krate":0,"index":6946},{"krate":0,"index":6948},{"krate":0,"index":6949},{"krate":0,"index":6950},{"krate":0,"index":6951},{"krate":0,"index":6952},{"krate":0,"index":6953},{"krate":0,"index":6954},{"krate":0,"index":6955},{"krate":0,"index":6956}],"docs":"","sig":null,"attributes":[]},{"id":819,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":977373,"byte_end":977381,"line_start":681,"line_end":681,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":6959}],"docs":"","sig":null,"attributes":[]},{"id":820,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":978424,"byte_end":978431,"line_start":712,"line_end":712,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6966}],"docs":"","sig":null,"attributes":[]},{"id":821,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979174,"byte_end":979186,"line_start":25,"line_end":25,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":822,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979223,"byte_end":979235,"line_start":27,"line_end":27,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6993}],"docs":"","sig":null,"attributes":[]},{"id":823,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979385,"byte_end":979397,"line_start":34,"line_end":34,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":6996}],"docs":"","sig":null,"attributes":[]},{"id":824,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979542,"byte_end":979554,"line_start":40,"line_end":40,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6999}],"docs":"","sig":null,"attributes":[]},{"id":825,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":980265,"byte_end":980277,"line_start":65,"line_end":65,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":7002},{"krate":0,"index":7003},{"krate":0,"index":7004},{"krate":0,"index":7005},{"krate":0,"index":7006},{"krate":0,"index":7007},{"krate":0,"index":7008},{"krate":0,"index":7009},{"krate":0,"index":7010},{"krate":0,"index":7011},{"krate":0,"index":7012},{"krate":0,"index":7013},{"krate":0,"index":7014},{"krate":0,"index":7015},{"krate":0,"index":7016},{"krate":0,"index":7017},{"krate":0,"index":7019},{"krate":0,"index":7020},{"krate":0,"index":7021},{"krate":0,"index":7022},{"krate":0,"index":7023}],"docs":"","sig":null,"attributes":[]},{"id":826,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986903,"byte_end":986911,"line_start":264,"line_end":264,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":7026}],"docs":"","sig":null,"attributes":[]},{"id":827,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":987699,"byte_end":987706,"line_start":287,"line_end":287,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":7033}],"docs":"","sig":null,"attributes":[]},{"id":828,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":993243,"byte_end":993253,"line_start":57,"line_end":57,"column_start":54,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":829,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":993610,"byte_end":993620,"line_start":68,"line_end":68,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":7100},{"krate":0,"index":7101},{"krate":0,"index":7102},{"krate":0,"index":7103},{"krate":0,"index":7104},{"krate":0,"index":7107},{"krate":0,"index":7108},{"krate":0,"index":7109},{"krate":0,"index":7111},{"krate":0,"index":7113}],"docs":"","sig":null,"attributes":[]},{"id":830,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1004119,"byte_end":1004125,"line_start":358,"line_end":358,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":7119}],"docs":"","sig":null,"attributes":[]},{"id":831,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1005577,"byte_end":1005585,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":832,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1005711,"byte_end":1005719,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":7145},{"krate":0,"index":7146},{"krate":0,"index":7147},{"krate":0,"index":7148},{"krate":0,"index":7149},{"krate":0,"index":7150},{"krate":0,"index":7154},{"krate":0,"index":7158}],"docs":"","sig":null,"attributes":[]},{"id":833,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1009703,"byte_end":1009715,"line_start":151,"line_end":151,"column_start":64,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":7163}],"docs":"","sig":null,"attributes":[]},{"id":834,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\determinant.rs","byte_start":1010407,"byte_end":1010419,"line_start":10,"line_end":10,"column_start":70,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":7177}],"docs":"","sig":null,"attributes":[]},{"id":835,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1013764,"byte_end":1013773,"line_start":43,"line_end":43,"column_start":54,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":836,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1014003,"byte_end":1014012,"line_start":50,"line_end":50,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":7206},{"krate":0,"index":7207},{"krate":0,"index":7208},{"krate":0,"index":7209},{"krate":0,"index":7210},{"krate":0,"index":7211},{"krate":0,"index":7212}],"docs":"","sig":null,"attributes":[]},{"id":837,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1017426,"byte_end":1017435,"line_start":159,"line_end":159,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":7216},{"krate":0,"index":7220},{"krate":0,"index":7224},{"krate":0,"index":7225},{"krate":0,"index":7226}],"docs":"","sig":null,"attributes":[]},{"id":838,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1020686,"byte_end":1020692,"line_start":264,"line_end":264,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":7232}],"docs":"","sig":null,"attributes":[]},{"id":839,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1021519,"byte_end":1021533,"line_start":20,"line_end":20,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7252},{"krate":0,"index":7253},{"krate":0,"index":7254},{"krate":0,"index":7255},{"krate":0,"index":7256},{"krate":0,"index":7258},{"krate":0,"index":7260},{"krate":0,"index":7261},{"krate":0,"index":7262},{"krate":0,"index":7263},{"krate":0,"index":7267}],"docs":"","sig":null,"attributes":[]},{"id":840,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027454,"byte_end":1027464,"line_start":40,"line_end":40,"column_start":47,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":841,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027654,"byte_end":1027664,"line_start":47,"line_end":47,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":7292},{"krate":0,"index":7293},{"krate":0,"index":7294},{"krate":0,"index":7295},{"krate":0,"index":7297},{"krate":0,"index":7299},{"krate":0,"index":7300}],"docs":"","sig":null,"attributes":[]},{"id":842,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030720,"byte_end":1030732,"line_start":136,"line_end":136,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":7305}],"docs":"","sig":null,"attributes":[]},{"id":843,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1035946,"byte_end":1035958,"line_start":10,"line_end":10,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":7353}],"docs":"","sig":null,"attributes":[]},{"id":844,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036329,"byte_end":1036341,"line_start":24,"line_end":24,"column_start":55,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":7358}],"docs":"","sig":null,"attributes":[]},{"id":845,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1045067,"byte_end":1045069,"line_start":42,"line_end":42,"column_start":54,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":846,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1046407,"byte_end":1046409,"line_start":89,"line_end":89,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":7400},{"krate":0,"index":7401},{"krate":0,"index":7402},{"krate":0,"index":7403},{"krate":0,"index":7404},{"krate":0,"index":7405},{"krate":0,"index":7406},{"krate":0,"index":7407}],"docs":"","sig":null,"attributes":[]},{"id":847,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1050115,"byte_end":1050117,"line_start":200,"line_end":200,"column_start":49,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":7411},{"krate":0,"index":7415},{"krate":0,"index":7419},{"krate":0,"index":7420},{"krate":0,"index":7422},{"krate":0,"index":7423}],"docs":"","sig":null,"attributes":[]},{"id":848,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1055417,"byte_end":1055423,"line_start":371,"line_end":371,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":7439}],"docs":"","sig":null,"attributes":[]},{"id":849,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1056758,"byte_end":1056777,"line_start":38,"line_end":38,"column_start":23,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":850,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1056898,"byte_end":1056917,"line_start":44,"line_end":44,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7459}],"docs":"","sig":null,"attributes":[]},{"id":851,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057208,"byte_end":1057227,"line_start":55,"line_end":55,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":7461}],"docs":"","sig":null,"attributes":[]},{"id":852,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057505,"byte_end":1057524,"line_start":65,"line_end":65,"column_start":14,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":7464},{"krate":0,"index":7465},{"krate":0,"index":7466},{"krate":0,"index":7471},{"krate":0,"index":7476},{"krate":0,"index":7481},{"krate":0,"index":7486},{"krate":0,"index":7487}],"docs":"","sig":null,"attributes":[]},{"id":853,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1061655,"byte_end":1061657,"line_start":43,"line_end":43,"column_start":54,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":854,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1061865,"byte_end":1061867,"line_start":50,"line_end":50,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":7523},{"krate":0,"index":7524},{"krate":0,"index":7526},{"krate":0,"index":7528},{"krate":0,"index":7529},{"krate":0,"index":7530},{"krate":0,"index":7531}],"docs":"","sig":null,"attributes":[]},{"id":855,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1065853,"byte_end":1065855,"line_start":162,"line_end":162,"column_start":49,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":7538},{"krate":0,"index":7542},{"krate":0,"index":7546},{"krate":0,"index":7550},{"krate":0,"index":7551}],"docs":"","sig":null,"attributes":[]},{"id":856,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1069712,"byte_end":1069718,"line_start":294,"line_end":294,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":7557}],"docs":"","sig":null,"attributes":[]},{"id":857,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071270,"byte_end":1071275,"line_start":45,"line_end":45,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":858,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071389,"byte_end":1071394,"line_start":51,"line_end":51,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":7593},{"krate":0,"index":7594},{"krate":0,"index":7596},{"krate":0,"index":7597},{"krate":0,"index":7598},{"krate":0,"index":7599},{"krate":0,"index":7600},{"krate":0,"index":7601},{"krate":0,"index":7602}],"docs":"","sig":null,"attributes":[]},{"id":859,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1085956,"byte_end":1085968,"line_start":490,"line_end":490,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":7617},{"krate":0,"index":7618},{"krate":0,"index":7619},{"krate":0,"index":7620}],"docs":"","sig":null,"attributes":[]},{"id":860,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1089332,"byte_end":1089344,"line_start":9,"line_end":9,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":7644},{"krate":0,"index":7648},{"krate":0,"index":7652},{"krate":0,"index":7656},{"krate":0,"index":7659},{"krate":0,"index":7663},{"krate":0,"index":7667},{"krate":0,"index":7670},{"krate":0,"index":7674},{"krate":0,"index":7678},{"krate":0,"index":7684},{"krate":0,"index":7690},{"krate":0,"index":7694},{"krate":0,"index":7698},{"krate":0,"index":7704},{"krate":0,"index":7710},{"krate":0,"index":7715}],"docs":"","sig":null,"attributes":[]},{"id":861,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103955,"byte_end":1103958,"line_start":56,"line_end":56,"column_start":54,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":862,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1104314,"byte_end":1104317,"line_start":66,"line_end":66,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":7759},{"krate":0,"index":7760},{"krate":0,"index":7763},{"krate":0,"index":7764},{"krate":0,"index":7765},{"krate":0,"index":7766},{"krate":0,"index":7768},{"krate":0,"index":7769},{"krate":0,"index":7771}],"docs":"","sig":null,"attributes":[]},{"id":863,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1122461,"byte_end":1122467,"line_start":549,"line_end":549,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":7780},{"krate":0,"index":7781},{"krate":0,"index":7782},{"krate":0,"index":7783},{"krate":0,"index":7784}],"docs":"","sig":null,"attributes":[]},{"id":864,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1127899,"byte_end":1127913,"line_start":47,"line_end":47,"column_start":40,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":865,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1128092,"byte_end":1128106,"line_start":54,"line_end":54,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":7814},{"krate":0,"index":7815},{"krate":0,"index":7817},{"krate":0,"index":7818},{"krate":0,"index":7819}],"docs":"","sig":null,"attributes":[]},{"id":866,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1136243,"byte_end":1136255,"line_start":307,"line_end":307,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":7826},{"krate":0,"index":7827},{"krate":0,"index":7828}],"docs":"","sig":null,"attributes":[]},{"id":867,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1141195,"byte_end":1141215,"line_start":40,"line_end":40,"column_start":47,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":868,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1141405,"byte_end":1141425,"line_start":47,"line_end":47,"column_start":38,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":7850},{"krate":0,"index":7851},{"krate":0,"index":7852},{"krate":0,"index":7853},{"krate":0,"index":7854},{"krate":0,"index":7856},{"krate":0,"index":7857},{"krate":0,"index":7858}],"docs":"","sig":null,"attributes":[]},{"id":869,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1145153,"byte_end":1145165,"line_start":148,"line_end":148,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":7863}],"docs":"","sig":null,"attributes":[]},{"id":870,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\convolution.rs","byte_start":1145846,"byte_end":1145852,"line_start":9,"line_end":9,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":7885},{"krate":0,"index":7888},{"krate":0,"index":7891}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4343,"byte_end":4347,"line_start":134,"line_end":134,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20237,"byte_end":20246,"line_start":3,"line_end":3,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":15}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20266,"byte_end":20276,"line_start":5,"line_end":5,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":319}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20286,"byte_end":20297,"line_start":6,"line_end":6,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":363}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20307,"byte_end":20324,"line_start":7,"line_end":7,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":383}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20334,"byte_end":20343,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":466}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20353,"byte_end":20357,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":587}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20376,"byte_end":20383,"line_start":11,"line_end":11,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1002}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20520,"byte_end":20528,"line_start":21,"line_end":21,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2415}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\mod.rs","byte_start":20762,"byte_end":20768,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3765}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4398,"byte_end":4406,"line_start":137,"line_end":137,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":3787}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src/lib.rs","byte_start":4451,"byte_end":4457,"line_start":140,"line_end":140,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":7051}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":987891,"byte_end":987900,"line_start":3,"line_end":3,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":7052}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":987974,"byte_end":987980,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":7233}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\mod.rs","byte_start":988006,"byte_end":988017,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":7306}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":21902,"byte_end":21905,"line_start":19,"line_end":19,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":2349},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":21908,"byte_end":21913,"line_start":19,"line_end":19,"column_start":60,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":22666,"byte_end":22675,"line_start":37,"line_end":37,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":22695,"byte_end":22704,"line_start":37,"line_end":37,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23898,"byte_end":23907,"line_start":62,"line_end":62,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":49}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":23921,"byte_end":23930,"line_start":62,"line_end":62,"column_start":28,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":49}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24195,"byte_end":24211,"line_start":73,"line_end":73,"column_start":67,"column_end":83},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":49}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24586,"byte_end":24595,"line_start":87,"line_end":87,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24605,"byte_end":24614,"line_start":87,"line_end":87,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24640,"byte_end":24658,"line_start":87,"line_end":87,"column_start":59,"column_end":77},"kind":"SuperTrait","from":{"krate":0,"index":49},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\allocator.rs","byte_start":24833,"byte_end":24849,"line_start":96,"line_end":96,"column_start":57,"column_end":73},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":25696,"byte_end":25702,"line_start":18,"line_end":18,"column_start":49,"column_end":55},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":26672,"byte_end":26678,"line_start":51,"line_end":51,"column_start":56,"column_end":62},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":30409,"byte_end":30415,"line_start":196,"line_end":196,"column_start":60,"column_end":66},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":31625,"byte_end":31631,"line_start":233,"line_end":233,"column_start":76,"column_end":82},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":32572,"byte_end":32578,"line_start":266,"line_end":266,"column_start":46,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":40956,"byte_end":40962,"line_start":490,"line_end":490,"column_start":20,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":53408,"byte_end":53414,"line_start":864,"line_end":864,"column_start":53,"column_end":59},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":66483,"byte_end":66489,"line_start":1227,"line_end":1227,"column_start":53,"column_end":59},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\blas.rs","byte_start":71752,"byte_end":71764,"line_start":1374,"line_end":1374,"column_start":44,"column_end":56},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79763,"byte_end":79768,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":336},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":79858,"byte_end":79873,"line_start":11,"line_end":11,"column_start":78,"column_end":93},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80180,"byte_end":80195,"line_start":21,"line_end":21,"column_start":30,"column_end":45},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":336}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80269,"byte_end":80284,"line_start":25,"line_end":25,"column_start":40,"column_end":55},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":336}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":80358,"byte_end":80373,"line_start":29,"line_end":29,"column_start":40,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":336}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81726,"byte_end":81742,"line_start":71,"line_end":71,"column_start":5,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":8031},"to":{"krate":0,"index":350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81753,"byte_end":81772,"line_start":71,"line_end":71,"column_start":32,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":8044},"to":{"krate":0,"index":350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":81972,"byte_end":81987,"line_start":78,"line_end":78,"column_start":38,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":82069,"byte_end":82084,"line_start":82,"line_end":82,"column_start":48,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\constraint.rs","byte_start":82166,"byte_end":82181,"line_start":86,"line_end":86,"column_start":48,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":324},"to":{"krate":0,"index":350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":90368,"byte_end":90384,"line_start":37,"line_end":37,"column_start":38,"column_end":54},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":91364,"byte_end":91380,"line_start":79,"line_end":79,"column_start":54,"column_end":70},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":92308,"byte_end":92324,"line_start":110,"line_end":110,"column_start":58,"column_end":74},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":28}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":93271,"byte_end":93287,"line_start":145,"line_end":145,"column_start":84,"column_end":100},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":94180,"byte_end":94196,"line_start":176,"line_end":176,"column_start":83,"column_end":99},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":95043,"byte_end":95059,"line_start":205,"line_end":205,"column_start":83,"column_end":99},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":95939,"byte_end":95955,"line_start":235,"line_end":235,"column_start":9,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":96386,"byte_end":96402,"line_start":251,"line_end":251,"column_start":9,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":96833,"byte_end":96849,"line_start":267,"line_end":267,"column_start":9,"column_end":25},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\default_allocator.rs","byte_start":97284,"byte_end":97300,"line_start":283,"line_end":283,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":36}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98144,"byte_end":98151,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":9606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98939,"byte_end":98946,"line_start":51,"line_end":51,"column_start":20,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":9606},"to":{"krate":0,"index":494}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":98974,"byte_end":98981,"line_start":52,"line_end":52,"column_start":25,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":9606},"to":{"krate":0,"index":495}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99164,"byte_end":99167,"line_start":56,"line_end":56,"column_start":16,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2349},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99170,"byte_end":99175,"line_start":56,"line_end":56,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":7643},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99178,"byte_end":99182,"line_start":56,"line_end":56,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99185,"byte_end":99194,"line_start":56,"line_end":56,"column_start":37,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99197,"byte_end":99201,"line_start":56,"line_end":56,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1533},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99204,"byte_end":99208,"line_start":56,"line_end":56,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1545},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":99846,"byte_end":99853,"line_start":75,"line_end":75,"column_start":14,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":9606},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":100108,"byte_end":100115,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":9606},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":100264,"byte_end":100271,"line_start":101,"line_end":101,"column_start":21,"column_end":28},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":9606},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":102873,"byte_end":102876,"line_start":189,"line_end":189,"column_start":20,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":498},"to":{"krate":0,"index":515}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103206,"byte_end":103211,"line_start":204,"line_end":204,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103214,"byte_end":103217,"line_start":204,"line_end":204,"column_start":29,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2349},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103220,"byte_end":103228,"line_start":204,"line_end":204,"column_start":35,"column_end":43},"kind":"SuperTrait","from":{"krate":18,"index":502},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103473,"byte_end":103475,"line_start":213,"line_end":213,"column_start":14,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":9812},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103761,"byte_end":103763,"line_start":231,"line_end":231,"column_start":18,"column_end":20},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":9812},"to":{"krate":0,"index":515}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":103882,"byte_end":103884,"line_start":240,"line_end":240,"column_start":28,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":18,"index":2015},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":106263,"byte_end":106267,"line_start":307,"line_end":307,"column_start":20,"column_end":24},"kind":{"Impl":{"id":37}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":106830,"byte_end":106834,"line_start":320,"line_end":320,"column_start":15,"column_end":19},"kind":{"Impl":{"id":38}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":107696,"byte_end":107700,"line_start":347,"line_end":347,"column_start":19,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":515}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108344,"byte_end":108348,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"kind":{"Impl":{"id":40}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":495}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108528,"byte_end":108532,"line_start":371,"line_end":371,"column_start":9,"column_end":13},"kind":{"Impl":{"id":41}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":519}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":108667,"byte_end":108671,"line_start":377,"line_end":377,"column_start":9,"column_end":13},"kind":{"Impl":{"id":42}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":498}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":109099,"byte_end":109103,"line_start":397,"line_end":397,"column_start":9,"column_end":13},"kind":{"Impl":{"id":43}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":515}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\dimension.rs","byte_start":109315,"byte_end":109319,"line_start":408,"line_end":408,"column_start":9,"column_end":13},"kind":{"Impl":{"id":44}},"from":{"krate":18,"index":5877},"to":{"krate":0,"index":495}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":113193,"byte_end":113200,"line_start":113,"line_end":113,"column_start":63,"column_end":70},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":13202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":113418,"byte_end":113425,"line_start":122,"line_end":122,"column_start":76,"column_end":83},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":13202},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114085,"byte_end":114092,"line_start":147,"line_end":147,"column_start":85,"column_end":92},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":13202},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114506,"byte_end":114516,"line_start":162,"line_end":162,"column_start":66,"column_end":76},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":114887,"byte_end":114897,"line_start":179,"line_end":179,"column_start":79,"column_end":89},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":115565,"byte_end":115575,"line_start":204,"line_end":204,"column_start":88,"column_end":98},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":115970,"byte_end":115980,"line_start":224,"line_end":224,"column_start":63,"column_end":73},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":13217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":116201,"byte_end":116211,"line_start":233,"line_end":233,"column_start":76,"column_end":86},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":13217},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":116874,"byte_end":116884,"line_start":258,"line_end":258,"column_start":85,"column_end":95},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":13217},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":117304,"byte_end":117317,"line_start":273,"line_end":273,"column_start":66,"column_end":79},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":117691,"byte_end":117704,"line_start":290,"line_end":290,"column_start":79,"column_end":92},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\iter.rs","byte_start":118375,"byte_end":118388,"line_start":315,"line_end":315,"column_start":88,"column_end":101},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":684},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":119315,"byte_end":119321,"line_start":23,"line_end":23,"column_start":71,"column_end":77},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":119550,"byte_end":119556,"line_start":33,"line_end":33,"column_start":54,"column_end":60},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120021,"byte_end":120027,"line_start":53,"line_end":53,"column_start":77,"column_end":83},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120242,"byte_end":120248,"line_start":61,"line_end":61,"column_start":57,"column_end":63},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":120657,"byte_end":120663,"line_start":83,"line_end":83,"column_start":36,"column_end":42},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1623}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":121265,"byte_end":121271,"line_start":113,"line_end":113,"column_start":28,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":132899,"byte_end":132907,"line_start":377,"line_end":377,"column_start":47,"column_end":55},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3973}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":133174,"byte_end":133182,"line_start":387,"line_end":387,"column_start":31,"column_end":39},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3973}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":134251,"byte_end":134259,"line_start":417,"line_end":417,"column_start":74,"column_end":82},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3973}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":134563,"byte_end":134571,"line_start":427,"line_end":427,"column_start":64,"column_end":72},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3973}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":140082,"byte_end":140088,"line_start":600,"line_end":600,"column_start":9,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":140555,"byte_end":140561,"line_start":617,"line_end":617,"column_start":9,"column_end":15},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":141159,"byte_end":141165,"line_start":636,"line_end":636,"column_start":66,"column_end":72},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":141652,"byte_end":141658,"line_start":653,"line_end":653,"column_start":74,"column_end":80},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":142212,"byte_end":142218,"line_start":672,"line_end":672,"column_start":31,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147393,"byte_end":147399,"line_start":829,"line_end":829,"column_start":66,"column_end":72},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":147912,"byte_end":147919,"line_start":849,"line_end":849,"column_start":39,"column_end":46},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":3977}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":148227,"byte_end":148234,"line_start":859,"line_end":859,"column_start":62,"column_end":69},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":3977}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\ops.rs","byte_start":148538,"byte_end":148544,"line_start":869,"line_end":869,"column_start":54,"column_end":60},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153370,"byte_end":153375,"line_start":39,"line_end":39,"column_start":59,"column_end":64},"kind":"SuperTrait","from":{"krate":2,"index":7643},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":153378,"byte_end":153383,"line_start":39,"line_end":39,"column_start":67,"column_end":72},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":156577,"byte_end":156584,"line_start":120,"line_end":120,"column_start":62,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":1032},"to":{"krate":0,"index":1050}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":158949,"byte_end":158956,"line_start":179,"line_end":179,"column_start":5,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":1032},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":159368,"byte_end":159385,"line_start":189,"line_end":189,"column_start":5,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":1062},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\storage.rs","byte_start":159397,"byte_end":159407,"line_start":189,"line_end":189,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":1050},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":186292,"byte_end":186299,"line_start":24,"line_end":24,"column_start":21,"column_end":28},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187546,"byte_end":187553,"line_start":68,"line_end":68,"column_start":20,"column_end":27},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1099},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":187776,"byte_end":187783,"line_start":76,"line_end":76,"column_start":20,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":191086,"byte_end":191098,"line_start":156,"line_end":156,"column_start":57,"column_end":69},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":193787,"byte_end":193799,"line_start":243,"line_end":243,"column_start":60,"column_end":72},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":196663,"byte_end":196675,"line_start":324,"line_end":324,"column_start":60,"column_end":72},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\cg.rs","byte_start":198260,"byte_end":198267,"line_start":368,"line_end":368,"column_start":88,"column_end":95},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1090},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\componentwise.rs","byte_start":199409,"byte_end":199415,"line_start":17,"line_end":17,"column_start":54,"column_end":60},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":207839,"byte_end":207847,"line_start":30,"line_end":30,"column_start":33,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":217047,"byte_end":217054,"line_start":287,"line_end":287,"column_start":17,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":236540,"byte_end":236548,"line_start":722,"line_end":722,"column_start":42,"column_end":50},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1086},"to":{"krate":16,"index":295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":236849,"byte_end":236856,"line_start":738,"line_end":738,"column_start":29,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1090},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":237080,"byte_end":237088,"line_start":749,"line_end":749,"column_start":45,"column_end":53},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1086},"to":{"krate":16,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":237429,"byte_end":237437,"line_start":765,"line_end":765,"column_start":69,"column_end":77},"kind":{"Impl":{"id":113}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":238503,"byte_end":238511,"line_start":800,"line_end":800,"column_start":70,"column_end":78},"kind":{"Impl":{"id":114}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction.rs","byte_start":246222,"byte_end":246229,"line_start":991,"line_end":991,"column_start":21,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":249886,"byte_end":249899,"line_start":12,"line_end":12,"column_start":5,"column_end":18},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":251911,"byte_end":251927,"line_start":65,"line_end":65,"column_start":5,"column_end":21},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":254870,"byte_end":254883,"line_start":136,"line_end":136,"column_start":37,"column_end":50},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\construction_slice.rs","byte_start":256038,"byte_end":256054,"line_start":162,"line_end":162,"column_start":37,"column_end":53},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":263881,"byte_end":263889,"line_start":26,"line_end":26,"column_start":65,"column_end":73},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":274448,"byte_end":274454,"line_start":341,"line_end":341,"column_start":9,"column_end":15},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":274920,"byte_end":274926,"line_start":358,"line_end":358,"column_start":9,"column_end":15},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":275313,"byte_end":275319,"line_start":372,"line_end":372,"column_start":9,"column_end":15},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":275662,"byte_end":275668,"line_start":385,"line_end":385,"column_start":9,"column_end":15},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":276140,"byte_end":276146,"line_start":402,"line_end":402,"column_start":9,"column_end":15},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\conversion.rs","byte_start":276539,"byte_end":276545,"line_start":416,"line_end":416,"column_start":9,"column_end":15},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":277597,"byte_end":277603,"line_start":21,"line_end":21,"column_start":61,"column_end":67},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":280205,"byte_end":280211,"line_start":95,"line_end":95,"column_start":57,"column_end":63},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":285779,"byte_end":285785,"line_start":256,"line_end":256,"column_start":49,"column_end":55},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":286992,"byte_end":286998,"line_start":294,"line_end":294,"column_start":54,"column_end":60},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":304145,"byte_end":304152,"line_start":800,"line_end":800,"column_start":17,"column_end":24},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":304932,"byte_end":304940,"line_start":817,"line_end":817,"column_start":25,"column_end":33},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":305886,"byte_end":305894,"line_start":838,"line_end":838,"column_start":25,"column_end":33},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":308910,"byte_end":308916,"line_start":939,"line_end":939,"column_start":29,"column_end":35},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":310426,"byte_end":310432,"line_start":987,"line_end":987,"column_start":26,"column_end":32},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\edition.rs","byte_start":311044,"byte_end":311050,"line_start":1008,"line_end":1008,"column_start":53,"column_end":59},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":314347,"byte_end":314352,"line_start":50,"line_end":50,"column_start":35,"column_end":40},"kind":{"Impl":{"id":138}},"from":{"krate":2,"index":26866},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":315423,"byte_end":315432,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"kind":{"Impl":{"id":139}},"from":{"krate":2,"index":26888},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":316385,"byte_end":316394,"line_start":113,"line_end":113,"column_start":43,"column_end":52},"kind":{"Impl":{"id":140}},"from":{"krate":2,"index":26888},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":316921,"byte_end":316930,"line_start":140,"line_end":140,"column_start":35,"column_end":44},"kind":{"Impl":{"id":141}},"from":{"krate":2,"index":26852},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":317431,"byte_end":317445,"line_start":166,"line_end":166,"column_start":35,"column_end":49},"kind":{"Impl":{"id":142}},"from":{"krate":2,"index":26932},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":318841,"byte_end":318848,"line_start":205,"line_end":205,"column_start":35,"column_end":42},"kind":{"Impl":{"id":143}},"from":{"krate":2,"index":26909},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":319753,"byte_end":319769,"line_start":237,"line_end":237,"column_start":35,"column_end":51},"kind":{"Impl":{"id":144}},"from":{"krate":2,"index":26940},"to":{"krate":0,"index":2431}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":320775,"byte_end":320780,"line_start":270,"line_end":270,"column_start":76,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":2486}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":321985,"byte_end":321996,"line_start":306,"line_end":306,"column_start":82,"column_end":93},"kind":"SuperTrait","from":{"krate":0,"index":2486},"to":{"krate":0,"index":2497}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\indexing.rs","byte_start":325629,"byte_end":325635,"line_start":435,"line_end":435,"column_start":54,"column_end":60},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":338088,"byte_end":338094,"line_start":84,"line_end":84,"column_start":63,"column_end":69},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339476,"byte_end":339482,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":339884,"byte_end":339890,"line_start":151,"line_end":151,"column_start":54,"column_end":60},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":354289,"byte_end":354295,"line_start":626,"line_end":626,"column_start":57,"column_end":63},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362060,"byte_end":362066,"line_start":862,"line_end":862,"column_start":43,"column_end":49},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362447,"byte_end":362453,"line_start":872,"line_end":872,"column_start":46,"column_end":52},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":362876,"byte_end":362882,"line_start":882,"line_end":882,"column_start":64,"column_end":70},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363141,"byte_end":363147,"line_start":890,"line_end":890,"column_start":67,"column_end":73},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363412,"byte_end":363418,"line_start":898,"line_end":898,"column_start":49,"column_end":55},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":363892,"byte_end":363898,"line_start":916,"line_end":916,"column_start":60,"column_end":66},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":366581,"byte_end":366587,"line_start":999,"line_end":999,"column_start":63,"column_end":69},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":367216,"byte_end":367222,"line_start":1019,"line_end":1019,"column_start":55,"column_end":61},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":368331,"byte_end":368343,"line_start":1055,"line_end":1055,"column_start":46,"column_end":58},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":369811,"byte_end":369823,"line_start":1106,"line_end":1106,"column_start":52,"column_end":64},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":370748,"byte_end":370754,"line_start":1131,"line_end":1131,"column_start":83,"column_end":89},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":371469,"byte_end":371475,"line_start":1147,"line_end":1147,"column_start":57,"column_end":63},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":372410,"byte_end":372416,"line_start":1173,"line_end":1173,"column_start":57,"column_end":63},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373022,"byte_end":373028,"line_start":1189,"line_end":1189,"column_start":42,"column_end":48},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":16855},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373492,"byte_end":373498,"line_start":1210,"line_end":1210,"column_start":43,"column_end":49},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":16855},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":373960,"byte_end":373966,"line_start":1233,"line_end":1233,"column_start":39,"column_end":45},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":16855},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":374452,"byte_end":374458,"line_start":1253,"line_end":1253,"column_start":43,"column_end":49},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":377078,"byte_end":377084,"line_start":1341,"line_end":1341,"column_start":35,"column_end":41},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":377193,"byte_end":377199,"line_start":1347,"line_end":1347,"column_start":42,"column_end":48},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":380988,"byte_end":380994,"line_start":1457,"line_end":1457,"column_start":61,"column_end":67},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384353,"byte_end":384359,"line_start":1548,"line_end":1548,"column_start":44,"column_end":50},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":384881,"byte_end":384887,"line_start":1568,"line_end":1568,"column_start":60,"column_end":66},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":385744,"byte_end":385750,"line_start":1597,"line_end":1597,"column_start":5,"column_end":11},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":386491,"byte_end":386495,"line_start":1619,"line_end":1619,"column_start":49,"column_end":53},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":17307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":388769,"byte_end":388773,"line_start":1684,"line_end":1684,"column_start":42,"column_end":46},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":17307},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":389200,"byte_end":389204,"line_start":1703,"line_end":1703,"column_start":43,"column_end":47},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":17307},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":389705,"byte_end":389709,"line_start":1727,"line_end":1727,"column_start":39,"column_end":43},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":17307},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix.rs","byte_start":390094,"byte_end":390100,"line_start":1744,"line_end":1744,"column_start":27,"column_end":33},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":16855},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391363,"byte_end":391371,"line_start":26,"line_end":26,"column_start":56,"column_end":64},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391602,"byte_end":391610,"line_start":37,"line_end":37,"column_start":61,"column_end":69},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":391849,"byte_end":391857,"line_start":48,"line_end":48,"column_start":63,"column_end":71},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":392872,"byte_end":392880,"line_start":81,"line_end":81,"column_start":52,"column_end":60},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":417}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393126,"byte_end":393134,"line_start":94,"line_end":94,"column_start":44,"column_end":52},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":547}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393297,"byte_end":393305,"line_start":102,"line_end":102,"column_start":49,"column_end":57},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":997}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":393468,"byte_end":393476,"line_start":110,"line_end":110,"column_start":58,"column_end":66},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":1011}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":394320,"byte_end":394328,"line_start":148,"line_end":148,"column_start":63,"column_end":71},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":999}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":395137,"byte_end":395145,"line_start":185,"line_end":185,"column_start":62,"column_end":70},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":1008}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":395680,"byte_end":395688,"line_start":203,"line_end":203,"column_start":71,"column_end":79},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":1019}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":399906,"byte_end":399913,"line_start":330,"line_end":330,"column_start":50,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1090},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":400128,"byte_end":400135,"line_start":341,"line_end":341,"column_start":55,"column_end":62},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1090},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":400878,"byte_end":400886,"line_start":370,"line_end":370,"column_start":45,"column_end":53},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":389}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":401136,"byte_end":401144,"line_start":381,"line_end":381,"column_start":45,"column_end":53},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":391}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_alga.rs","byte_start":401386,"byte_end":401394,"line_start":392,"line_end":392,"column_start":37,"column_end":45},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1086},"to":{"krate":32,"index":393}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403734,"byte_end":403746,"line_start":51,"line_end":51,"column_start":24,"column_end":36},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":403998,"byte_end":404010,"line_start":64,"line_end":64,"column_start":25,"column_end":37},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404305,"byte_end":404317,"line_start":79,"line_end":79,"column_start":28,"column_end":40},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404563,"byte_end":404575,"line_start":92,"line_end":92,"column_start":25,"column_end":37},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":404843,"byte_end":404855,"line_start":106,"line_end":106,"column_start":24,"column_end":36},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405072,"byte_end":405084,"line_start":116,"line_end":116,"column_start":25,"column_end":37},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405367,"byte_end":405379,"line_start":132,"line_end":132,"column_start":22,"column_end":34},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405545,"byte_end":405557,"line_start":141,"line_end":141,"column_start":29,"column_end":41},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3160},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":405838,"byte_end":405850,"line_start":155,"line_end":155,"column_start":43,"column_end":55},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3160},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":406945,"byte_end":406957,"line_start":207,"line_end":207,"column_start":46,"column_end":58},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3160},"to":{"krate":0,"index":1050}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":407385,"byte_end":407397,"line_start":227,"line_end":227,"column_start":53,"column_end":65},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3160},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\array_storage.rs","byte_start":407651,"byte_end":407663,"line_start":237,"line_end":237,"column_start":56,"column_end":68},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3160},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415442,"byte_end":415454,"line_start":93,"line_end":93,"column_start":9,"column_end":21},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":17004},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":415569,"byte_end":415581,"line_start":98,"line_end":98,"column_start":9,"column_end":21},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":17004},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418236,"byte_end":418251,"line_start":182,"line_end":182,"column_start":9,"column_end":24},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":17060},"to":{"krate":0,"index":1050}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418841,"byte_end":418853,"line_start":201,"line_end":201,"column_start":82,"column_end":94},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":17004},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":418966,"byte_end":418981,"line_start":202,"line_end":202,"column_start":82,"column_end":97},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":17060},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419097,"byte_end":419112,"line_start":203,"line_end":203,"column_start":85,"column_end":100},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":17060},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419240,"byte_end":419252,"line_start":205,"line_end":205,"column_start":96,"column_end":108},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":17004},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419372,"byte_end":419387,"line_start":206,"line_end":206,"column_start":96,"column_end":111},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":17060},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419510,"byte_end":419525,"line_start":207,"line_end":207,"column_start":99,"column_end":114},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":17060},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":419604,"byte_end":419610,"line_start":209,"line_end":209,"column_start":54,"column_end":60},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":439691,"byte_end":439696,"line_start":713,"line_end":713,"column_start":32,"column_end":37},"kind":{"Impl":{"id":218}},"from":{"krate":2,"index":26866},"to":{"krate":0,"index":3325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440045,"byte_end":440054,"line_start":732,"line_end":732,"column_start":32,"column_end":41},"kind":{"Impl":{"id":219}},"from":{"krate":2,"index":26888},"to":{"krate":0,"index":3325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440413,"byte_end":440420,"line_start":751,"line_end":751,"column_start":32,"column_end":39},"kind":{"Impl":{"id":220}},"from":{"krate":2,"index":26909},"to":{"krate":0,"index":3325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":440747,"byte_end":440756,"line_start":770,"line_end":770,"column_start":32,"column_end":41},"kind":{"Impl":{"id":221}},"from":{"krate":2,"index":26852},"to":{"krate":0,"index":3325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":441080,"byte_end":441086,"line_start":789,"line_end":789,"column_start":54,"column_end":60},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":442338,"byte_end":442344,"line_start":830,"line_end":830,"column_start":57,"column_end":63},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\matrix_slice.rs","byte_start":443672,"byte_end":443683,"line_start":872,"line_end":872,"column_start":5,"column_end":16},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":17111},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":445230,"byte_end":445240,"line_start":36,"line_end":36,"column_start":25,"column_end":35},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":17223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446792,"byte_end":446802,"line_start":92,"line_end":92,"column_start":42,"column_end":52},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":17223},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":446987,"byte_end":446997,"line_start":105,"line_end":105,"column_start":59,"column_end":69},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":447919,"byte_end":447929,"line_start":149,"line_end":149,"column_start":63,"column_end":73},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1032}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":448891,"byte_end":448901,"line_start":198,"line_end":198,"column_start":62,"column_end":72},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1050}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449236,"byte_end":449246,"line_start":212,"line_end":212,"column_start":69,"column_end":79},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449401,"byte_end":449411,"line_start":215,"line_end":215,"column_start":72,"column_end":82},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":449560,"byte_end":449570,"line_start":218,"line_end":218,"column_start":66,"column_end":76},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1050}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450335,"byte_end":450345,"line_start":247,"line_end":247,"column_start":73,"column_end":83},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1062}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450504,"byte_end":450514,"line_start":250,"line_end":250,"column_start":76,"column_end":86},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":17223},"to":{"krate":0,"index":1066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":450628,"byte_end":450638,"line_start":253,"line_end":253,"column_start":31,"column_end":41},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":17223},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":451345,"byte_end":451355,"line_start":271,"line_end":271,"column_start":50,"column_end":60},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":17223},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\vec_storage.rs","byte_start":452255,"byte_end":452265,"line_start":300,"line_end":300,"column_start":23,"column_end":33},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":17223},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":452927,"byte_end":452933,"line_start":12,"line_end":12,"column_start":54,"column_end":60},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455172,"byte_end":455178,"line_start":87,"line_end":87,"column_start":60,"column_end":66},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\properties.rs","byte_start":455754,"byte_end":455766,"line_start":104,"line_end":104,"column_start":49,"column_end":61},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456593,"byte_end":456597,"line_start":8,"line_end":8,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":3537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456600,"byte_end":456609,"line_start":8,"line_end":8,"column_start":26,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":3537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456612,"byte_end":456617,"line_start":8,"line_end":8,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":7643},"to":{"krate":0,"index":3537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456620,"byte_end":456623,"line_start":8,"line_end":8,"column_start":46,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2349},"to":{"krate":0,"index":3537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\scalar.rs","byte_start":456921,"byte_end":456922,"line_start":17,"line_end":17,"column_start":52,"column_end":53},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3541},"to":{"krate":0,"index":3537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":460719,"byte_end":460723,"line_start":56,"line_end":56,"column_start":22,"column_end":26},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":17307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":462893,"byte_end":462897,"line_start":113,"line_end":113,"column_start":9,"column_end":13},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":17307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":463927,"byte_end":463931,"line_start":149,"line_end":149,"column_start":22,"column_end":26},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":17307},"to":{"krate":2,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":464075,"byte_end":464079,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":17307},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":465707,"byte_end":465711,"line_start":220,"line_end":220,"column_start":22,"column_end":26},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":17307},"to":{"krate":2,"index":1623}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\unit.rs","byte_start":465878,"byte_end":465882,"line_start":229,"line_end":229,"column_start":19,"column_end":23},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":17307},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":466248,"byte_end":466254,"line_start":6,"line_end":6,"column_start":54,"column_end":60},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\statistics.rs","byte_start":468159,"byte_end":468165,"line_start":57,"line_end":57,"column_start":80,"column_end":86},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":476938,"byte_end":476951,"line_start":32,"line_end":32,"column_start":35,"column_end":48},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3684},"to":{"krate":0,"index":3671}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":477659,"byte_end":477665,"line_start":51,"line_end":51,"column_start":35,"column_end":41},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3686},"to":{"krate":0,"index":3671}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":478525,"byte_end":478536,"line_start":72,"line_end":72,"column_start":35,"column_end":46},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":3689},"to":{"krate":0,"index":3671}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":479515,"byte_end":479521,"line_start":98,"line_end":98,"column_start":60,"column_end":66},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\base\\norm.rs","byte_start":483264,"byte_end":483270,"line_start":216,"line_end":216,"column_start":63,"column_end":69},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":495983,"byte_end":495988,"line_start":30,"line_end":30,"column_start":70,"column_end":75},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":496236,"byte_end":496241,"line_start":40,"line_end":40,"column_start":38,"column_end":43},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":497661,"byte_end":497666,"line_start":94,"line_end":94,"column_start":29,"column_end":34},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":17333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501288,"byte_end":501293,"line_start":213,"line_end":213,"column_start":55,"column_end":60},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":17333},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":501704,"byte_end":501709,"line_start":231,"line_end":231,"column_start":57,"column_end":62},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":17333},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502189,"byte_end":502194,"line_start":254,"line_end":254,"column_start":49,"column_end":54},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":17333},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502566,"byte_end":502571,"line_start":270,"line_end":270,"column_start":41,"column_end":46},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502664,"byte_end":502669,"line_start":272,"line_end":272,"column_start":43,"column_end":48},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":502874,"byte_end":502879,"line_start":281,"line_end":281,"column_start":57,"column_end":62},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point.rs","byte_start":503544,"byte_end":503549,"line_start":315,"line_end":315,"column_start":61,"column_end":66},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504226,"byte_end":504231,"line_start":10,"line_end":10,"column_start":53,"column_end":58},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":1023}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504399,"byte_end":504404,"line_start":18,"line_end":18,"column_start":51,"column_end":56},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":1027}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":504937,"byte_end":504942,"line_start":50,"line_end":50,"column_start":41,"column_end":46},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":389}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":505187,"byte_end":505192,"line_start":61,"line_end":61,"column_start":41,"column_end":46},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":391}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_alga.rs","byte_start":505429,"byte_end":505434,"line_start":72,"line_end":72,"column_start":33,"column_end":38},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":393}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":506735,"byte_end":506740,"line_start":15,"line_end":15,"column_start":29,"column_end":34},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":17333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":509904,"byte_end":509909,"line_start":115,"line_end":115,"column_start":51,"column_end":56},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":17333},"to":{"krate":16,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_construction.rs","byte_start":510200,"byte_end":510208,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"kind":{"Impl":{"id":272}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":513522,"byte_end":513527,"line_start":27,"line_end":27,"column_start":44,"column_end":49},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":514221,"byte_end":514226,"line_start":52,"line_end":52,"column_start":62,"column_end":67},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":17333},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":516608,"byte_end":516615,"line_start":133,"line_end":133,"column_start":64,"column_end":71},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_conversion.rs","byte_start":516882,"byte_end":516887,"line_start":144,"line_end":144,"column_start":53,"column_end":58},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":518853,"byte_end":518858,"line_start":21,"line_end":21,"column_start":46,"column_end":51},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":519073,"byte_end":519078,"line_start":32,"line_end":32,"column_start":49,"column_end":54},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\point_ops.rs","byte_start":519308,"byte_end":519313,"line_start":46,"line_end":46,"column_start":49,"column_end":54},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":17333},"to":{"krate":2,"index":1623}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527229,"byte_end":527237,"line_start":33,"line_end":33,"column_start":70,"column_end":78},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527491,"byte_end":527499,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":527657,"byte_end":527665,"line_start":50,"line_end":50,"column_start":39,"column_end":47},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":529172,"byte_end":529180,"line_start":108,"line_end":108,"column_start":29,"column_end":37},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":17747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":538409,"byte_end":538417,"line_start":355,"line_end":355,"column_start":32,"column_end":40},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":17747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541417,"byte_end":541425,"line_start":435,"line_end":435,"column_start":41,"column_end":49},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541533,"byte_end":541541,"line_start":437,"line_end":437,"column_start":55,"column_end":63},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":541727,"byte_end":541735,"line_start":446,"line_end":446,"column_start":35,"column_end":43},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":17747},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":542155,"byte_end":542163,"line_start":465,"line_end":465,"column_start":36,"column_end":44},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":17747},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":542657,"byte_end":542665,"line_start":489,"line_end":489,"column_start":32,"column_end":40},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":17747},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation.rs","byte_start":543085,"byte_end":543093,"line_start":511,"line_end":511,"column_start":38,"column_end":46},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":544594,"byte_end":544602,"line_start":21,"line_end":21,"column_start":61,"column_end":69},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":544797,"byte_end":544805,"line_start":30,"line_end":30,"column_start":68,"column_end":76},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":545104,"byte_end":545112,"line_start":44,"line_end":44,"column_start":66,"column_end":74},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":545822,"byte_end":545830,"line_start":73,"line_end":73,"column_start":64,"column_end":72},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":546217,"byte_end":546225,"line_start":87,"line_end":87,"column_start":74,"column_end":82},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":546640,"byte_end":546648,"line_start":101,"line_end":101,"column_start":70,"column_end":78},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":547635,"byte_end":547643,"line_start":144,"line_end":144,"column_start":60,"column_end":68},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_alga.rs","byte_start":548400,"byte_end":548408,"line_start":176,"line_end":176,"column_start":66,"column_end":74},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":932}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551115,"byte_end":551123,"line_start":11,"line_end":11,"column_start":21,"column_end":29},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":17747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_construction.rs","byte_start":551710,"byte_end":551718,"line_start":33,"line_end":33,"column_start":29,"column_end":37},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":17747},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":552809,"byte_end":552817,"line_start":33,"line_end":33,"column_start":56,"column_end":64},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":553445,"byte_end":553454,"line_start":55,"line_end":55,"column_start":47,"column_end":56},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":4298},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":554054,"byte_end":554063,"line_start":78,"line_end":78,"column_start":44,"column_end":53},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":4296},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":554663,"byte_end":554671,"line_start":101,"line_end":101,"column_start":62,"column_end":70},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":555339,"byte_end":555347,"line_start":124,"line_end":124,"column_start":64,"column_end":72},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":556072,"byte_end":556080,"line_start":147,"line_end":147,"column_start":54,"column_end":62},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":557037,"byte_end":557045,"line_start":176,"line_end":176,"column_start":62,"column_end":70},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":17747},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558466,"byte_end":558475,"line_start":214,"line_end":214,"column_start":67,"column_end":76},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4298},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558658,"byte_end":558665,"line_start":220,"line_end":220,"column_start":43,"column_end":50},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558801,"byte_end":558808,"line_start":227,"line_end":227,"column_start":43,"column_end":50},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":558941,"byte_end":558948,"line_start":234,"line_end":234,"column_start":43,"column_end":50},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_conversion.rs","byte_start":559085,"byte_end":559092,"line_start":241,"line_end":241,"column_start":43,"column_end":50},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_ops.rs","byte_start":559992,"byte_end":560000,"line_start":33,"line_end":33,"column_start":55,"column_end":63},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":565804,"byte_end":565813,"line_start":23,"line_end":23,"column_start":20,"column_end":29},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573243,"byte_end":573251,"line_start":233,"line_end":233,"column_start":51,"column_end":59},"kind":{"Impl":{"id":369}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":573788,"byte_end":573797,"line_start":258,"line_end":258,"column_start":20,"column_end":29},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\rotation_specialization.rs","byte_start":594957,"byte_end":594965,"line_start":820,"line_end":820,"column_start":51,"column_end":59},"kind":{"Impl":{"id":371}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597841,"byte_end":597851,"line_start":50,"line_end":50,"column_start":32,"column_end":42},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":597892,"byte_end":597902,"line_start":52,"line_end":52,"column_start":34,"column_end":44},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598187,"byte_end":598197,"line_start":60,"line_end":60,"column_start":48,"column_end":58},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598325,"byte_end":598335,"line_start":66,"line_end":66,"column_start":29,"column_end":39},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":598372,"byte_end":598382,"line_start":68,"line_end":68,"column_start":30,"column_end":40},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":599101,"byte_end":599111,"line_start":97,"line_end":97,"column_start":20,"column_end":30},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":18027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":623113,"byte_end":623123,"line_start":854,"line_end":854,"column_start":59,"column_end":69},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":18027},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":623639,"byte_end":623649,"line_start":870,"line_end":870,"column_start":61,"column_end":71},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":18027},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":624244,"byte_end":624254,"line_start":890,"line_end":890,"column_start":53,"column_end":63},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":18027},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":624754,"byte_end":624764,"line_start":904,"line_end":904,"column_start":52,"column_end":62},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":625103,"byte_end":625117,"line_start":917,"line_end":917,"column_start":20,"column_end":34},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":4670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":643040,"byte_end":643054,"line_start":1425,"line_end":1425,"column_start":52,"column_end":66},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":4670},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":643669,"byte_end":643683,"line_start":1447,"line_end":1447,"column_start":59,"column_end":73},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":4670},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":644022,"byte_end":644036,"line_start":1461,"line_end":1461,"column_start":61,"column_end":75},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":4670},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion.rs","byte_start":644453,"byte_end":644467,"line_start":1480,"line_end":1480,"column_start":53,"column_end":67},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":4670},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645364,"byte_end":645374,"line_start":17,"line_end":17,"column_start":49,"column_end":59},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645498,"byte_end":645508,"line_start":24,"line_end":24,"column_start":43,"column_end":53},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645639,"byte_end":645649,"line_start":31,"line_end":31,"column_start":54,"column_end":64},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645788,"byte_end":645798,"line_start":38,"line_end":38,"column_start":48,"column_end":58},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":645939,"byte_end":645949,"line_start":45,"line_end":45,"column_start":50,"column_end":60},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646593,"byte_end":646603,"line_start":76,"line_end":76,"column_start":39,"column_end":49},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":417}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646749,"byte_end":646759,"line_start":85,"line_end":85,"column_start":31,"column_end":41},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":547}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646822,"byte_end":646832,"line_start":89,"line_end":89,"column_start":36,"column_end":46},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":997}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":646905,"byte_end":646915,"line_start":93,"line_end":93,"column_start":45,"column_end":55},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":1011}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":647508,"byte_end":647518,"line_start":120,"line_end":120,"column_start":36,"column_end":46},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":999}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648413,"byte_end":648427,"line_start":165,"line_end":165,"column_start":49,"column_end":63},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648562,"byte_end":648576,"line_start":172,"line_end":172,"column_start":54,"column_end":68},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":648723,"byte_end":648737,"line_start":179,"line_end":179,"column_start":56,"column_end":70},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649195,"byte_end":649209,"line_start":200,"line_end":200,"column_start":50,"column_end":64},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649508,"byte_end":649522,"line_start":212,"line_end":212,"column_start":60,"column_end":74},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":649849,"byte_end":649863,"line_start":224,"line_end":224,"column_start":56,"column_end":70},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":650772,"byte_end":650786,"line_start":265,"line_end":265,"column_start":46,"column_end":60},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_alga.rs","byte_start":651286,"byte_end":651300,"line_start":292,"line_end":292,"column_start":44,"column_end":58},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":932}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":652229,"byte_end":652239,"line_start":20,"line_end":20,"column_start":20,"column_end":30},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":18027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655144,"byte_end":655154,"line_start":108,"line_end":108,"column_start":28,"column_end":38},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":18027},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655259,"byte_end":655269,"line_start":115,"line_end":115,"column_start":29,"column_end":39},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":18027},"to":{"krate":16,"index":295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":655492,"byte_end":655500,"line_start":127,"line_end":127,"column_start":52,"column_end":60},"kind":{"Impl":{"id":408}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":656052,"byte_end":656066,"line_start":151,"line_end":151,"column_start":20,"column_end":34},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":4670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":678936,"byte_end":678950,"line_start":733,"line_end":733,"column_start":28,"column_end":42},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":4670},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_construction.rs","byte_start":679082,"byte_end":679090,"line_start":740,"line_end":740,"column_start":56,"column_end":64},"kind":{"Impl":{"id":411}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":681606,"byte_end":681616,"line_start":35,"line_end":35,"column_start":43,"column_end":53},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":18027},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":682147,"byte_end":682161,"line_start":58,"line_end":58,"column_start":47,"column_end":61},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":682718,"byte_end":682732,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":683323,"byte_end":683337,"line_start":102,"line_end":102,"column_start":51,"column_end":65},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":683930,"byte_end":683944,"line_start":124,"line_end":124,"column_start":53,"column_end":67},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":684572,"byte_end":684586,"line_start":146,"line_end":146,"column_start":52,"column_end":66},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685197,"byte_end":685211,"line_start":168,"line_end":168,"column_start":79,"column_end":93},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":4670},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685716,"byte_end":685726,"line_start":187,"line_end":187,"column_start":50,"column_end":60},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":685905,"byte_end":685915,"line_start":194,"line_end":194,"column_start":50,"column_end":60},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686238,"byte_end":686252,"line_start":208,"line_end":208,"column_start":50,"column_end":64},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":4670},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686548,"byte_end":686555,"line_start":221,"line_end":221,"column_start":48,"column_end":55},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686702,"byte_end":686711,"line_start":228,"line_end":228,"column_start":48,"column_end":57},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":4298},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":686857,"byte_end":686871,"line_start":235,"line_end":235,"column_start":43,"column_end":57},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":4670},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":687025,"byte_end":687032,"line_start":242,"line_end":242,"column_start":48,"column_end":55},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_conversion.rs","byte_start":687189,"byte_end":687199,"line_start":249,"line_end":249,"column_start":41,"column_end":51},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_coordinates.rs","byte_start":687473,"byte_end":687483,"line_start":10,"line_end":10,"column_start":30,"column_end":40},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_coordinates.rs","byte_start":687651,"byte_end":687661,"line_start":19,"line_end":19,"column_start":33,"column_end":43},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":689329,"byte_end":689339,"line_start":66,"line_end":66,"column_start":37,"column_end":47},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":689502,"byte_end":689512,"line_start":75,"line_end":75,"column_start":40,"column_end":50},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\quaternion_ops.rs","byte_start":702926,"byte_end":702936,"line_start":550,"line_end":550,"column_start":28,"column_end":38},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":18027},"to":{"krate":2,"index":1623}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":707109,"byte_end":707120,"line_start":12,"line_end":12,"column_start":20,"column_end":31},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":5118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717098,"byte_end":717109,"line_start":326,"line_end":326,"column_start":52,"column_end":63},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717273,"byte_end":717284,"line_start":332,"line_end":332,"column_start":34,"column_end":45},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":5118},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":717629,"byte_end":717640,"line_start":346,"line_end":346,"column_start":35,"column_end":46},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":5118},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex.rs","byte_start":718080,"byte_end":718091,"line_start":365,"line_end":365,"column_start":31,"column_end":42},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":5118},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719023,"byte_end":719034,"line_start":20,"line_end":20,"column_start":49,"column_end":60},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719169,"byte_end":719180,"line_start":27,"line_end":27,"column_start":54,"column_end":65},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719327,"byte_end":719338,"line_start":34,"line_end":34,"column_start":56,"column_end":67},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":719952,"byte_end":719963,"line_start":61,"line_end":61,"column_start":50,"column_end":61},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":720303,"byte_end":720314,"line_start":75,"line_end":75,"column_start":60,"column_end":71},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":720682,"byte_end":720693,"line_start":89,"line_end":89,"column_start":56,"column_end":67},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":721643,"byte_end":721654,"line_start":132,"line_end":132,"column_start":46,"column_end":57},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_alga.rs","byte_start":722241,"byte_end":722252,"line_start":162,"line_end":162,"column_start":44,"column_end":55},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":932}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":723089,"byte_end":723100,"line_start":15,"line_end":15,"column_start":20,"column_end":31},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":5118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":732290,"byte_end":732301,"line_start":271,"line_end":271,"column_start":28,"column_end":39},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":5118},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_construction.rs","byte_start":732430,"byte_end":732438,"line_start":278,"line_end":278,"column_start":53,"column_end":61},"kind":{"Impl":{"id":489}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":733696,"byte_end":733707,"line_start":29,"line_end":29,"column_start":44,"column_end":55},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":734246,"byte_end":734257,"line_start":50,"line_end":50,"column_start":42,"column_end":53},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":734856,"byte_end":734867,"line_start":73,"line_end":73,"column_start":51,"column_end":62},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":735460,"byte_end":735471,"line_start":95,"line_end":95,"column_start":53,"column_end":64},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":736099,"byte_end":736110,"line_start":117,"line_end":117,"column_start":52,"column_end":63},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":736721,"byte_end":736732,"line_start":139,"line_end":139,"column_start":79,"column_end":90},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":5118},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737208,"byte_end":737217,"line_start":158,"line_end":158,"column_start":45,"column_end":54},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":4296},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737360,"byte_end":737371,"line_start":165,"line_end":165,"column_start":43,"column_end":54},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737522,"byte_end":737529,"line_start":172,"line_end":172,"column_start":45,"column_end":52},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":1099},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_conversion.rs","byte_start":737676,"byte_end":737683,"line_start":179,"line_end":179,"column_start":45,"column_end":52},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":738994,"byte_end":739005,"line_start":47,"line_end":47,"column_start":34,"column_end":45},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":739459,"byte_end":739470,"line_start":65,"line_end":65,"column_start":52,"column_end":63},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":739964,"byte_end":739975,"line_start":84,"line_end":84,"column_start":34,"column_end":45},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1611}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":740461,"byte_end":740472,"line_start":102,"line_end":102,"column_start":52,"column_end":63},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1611}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747136,"byte_end":747147,"line_start":303,"line_end":303,"column_start":50,"column_end":61},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747314,"byte_end":747325,"line_start":310,"line_end":310,"column_start":58,"column_end":69},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747518,"byte_end":747529,"line_start":318,"line_end":318,"column_start":50,"column_end":61},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747696,"byte_end":747707,"line_start":325,"line_end":325,"column_start":58,"column_end":69},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":747899,"byte_end":747910,"line_start":333,"line_end":333,"column_start":51,"column_end":62},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748124,"byte_end":748135,"line_start":342,"line_end":342,"column_start":59,"column_end":70},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748373,"byte_end":748384,"line_start":352,"line_end":352,"column_start":51,"column_end":62},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748598,"byte_end":748609,"line_start":361,"line_end":361,"column_start":59,"column_end":70},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":748846,"byte_end":748854,"line_start":371,"line_end":371,"column_start":50,"column_end":58},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749091,"byte_end":749099,"line_start":380,"line_end":380,"column_start":58,"column_end":66},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749360,"byte_end":749368,"line_start":390,"line_end":390,"column_start":50,"column_end":58},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\unit_complex_ops.rs","byte_start":749605,"byte_end":749613,"line_start":399,"line_end":399,"column_start":58,"column_end":66},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":17747},"to":{"krate":2,"index":1641}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":750803,"byte_end":750814,"line_start":34,"line_end":34,"column_start":70,"column_end":81},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":751028,"byte_end":751039,"line_start":44,"line_end":44,"column_start":38,"column_end":49},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":751156,"byte_end":751167,"line_start":50,"line_end":50,"column_start":39,"column_end":50},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":752608,"byte_end":752619,"line_start":108,"line_end":108,"column_start":29,"column_end":40},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":18644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":755582,"byte_end":755593,"line_start":195,"line_end":195,"column_start":41,"column_end":52},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":18644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756186,"byte_end":756197,"line_start":214,"line_end":214,"column_start":41,"column_end":52},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":18644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756773,"byte_end":756784,"line_start":231,"line_end":231,"column_start":41,"column_end":52},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":756889,"byte_end":756900,"line_start":233,"line_end":233,"column_start":55,"column_end":66},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":757116,"byte_end":757127,"line_start":242,"line_end":242,"column_start":55,"column_end":66},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":18644},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":757538,"byte_end":757549,"line_start":260,"line_end":260,"column_start":57,"column_end":68},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":18644},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":758029,"byte_end":758040,"line_start":283,"line_end":283,"column_start":49,"column_end":60},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":18644},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation.rs","byte_start":758459,"byte_end":758470,"line_start":304,"line_end":304,"column_start":64,"column_end":75},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759419,"byte_end":759430,"line_start":22,"line_end":22,"column_start":61,"column_end":72},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759622,"byte_end":759633,"line_start":31,"line_end":31,"column_start":68,"column_end":79},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":759925,"byte_end":759936,"line_start":45,"line_end":45,"column_start":66,"column_end":77},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":760643,"byte_end":760654,"line_start":74,"line_end":74,"column_start":64,"column_end":75},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":761005,"byte_end":761016,"line_start":88,"line_end":88,"column_start":74,"column_end":85},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":761387,"byte_end":761398,"line_start":102,"line_end":102,"column_start":70,"column_end":81},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":762355,"byte_end":762366,"line_start":145,"line_end":145,"column_start":60,"column_end":71},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_alga.rs","byte_start":763031,"byte_end":763042,"line_start":176,"line_end":176,"column_start":65,"column_end":76},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":926}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":764579,"byte_end":764590,"line_start":18,"line_end":18,"column_start":36,"column_end":47},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":18644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765258,"byte_end":765269,"line_start":41,"line_end":41,"column_start":56,"column_end":67},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":18644},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_construction.rs","byte_start":765453,"byte_end":765461,"line_start":50,"line_end":50,"column_start":65,"column_end":73},"kind":{"Impl":{"id":560}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":768510,"byte_end":768521,"line_start":23,"line_end":23,"column_start":59,"column_end":70},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":769154,"byte_end":769165,"line_start":47,"line_end":47,"column_start":62,"column_end":73},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":769792,"byte_end":769803,"line_start":70,"line_end":70,"column_start":64,"column_end":75},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":770487,"byte_end":770498,"line_start":93,"line_end":93,"column_start":54,"column_end":65},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":771306,"byte_end":771317,"line_start":120,"line_end":120,"column_start":62,"column_end":73},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":18644},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":772456,"byte_end":772463,"line_start":156,"line_end":156,"column_start":70,"column_end":77},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\translation_conversion.rs","byte_start":772755,"byte_end":772766,"line_start":167,"line_end":167,"column_start":53,"column_end":64},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":18644},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783192,"byte_end":783200,"line_start":80,"line_end":80,"column_start":88,"column_end":96},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783501,"byte_end":783509,"line_start":91,"line_end":91,"column_start":81,"column_end":89},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783667,"byte_end":783675,"line_start":98,"line_end":98,"column_start":76,"column_end":84},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":783911,"byte_end":783919,"line_start":107,"line_end":107,"column_start":58,"column_end":66},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":18823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":793119,"byte_end":793127,"line_start":354,"line_end":354,"column_start":35,"column_end":43},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":18823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794298,"byte_end":794306,"line_start":387,"line_end":387,"column_start":42,"column_end":50},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794449,"byte_end":794457,"line_start":394,"line_end":394,"column_start":49,"column_end":57},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":794749,"byte_end":794757,"line_start":405,"line_end":405,"column_start":49,"column_end":57},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":18823},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":795305,"byte_end":795313,"line_start":425,"line_end":425,"column_start":50,"column_end":58},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":18823},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":795983,"byte_end":795991,"line_start":452,"line_end":452,"column_start":46,"column_end":54},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":18823},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry.rs","byte_start":796573,"byte_end":796581,"line_start":476,"line_end":476,"column_start":67,"column_end":75},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":18823},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":797623,"byte_end":797631,"line_start":22,"line_end":22,"column_start":64,"column_end":72},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":797864,"byte_end":797872,"line_start":33,"line_end":33,"column_start":71,"column_end":79},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":798205,"byte_end":798213,"line_start":49,"line_end":49,"column_start":69,"column_end":77},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799008,"byte_end":799016,"line_start":81,"line_end":81,"column_start":67,"column_end":75},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799423,"byte_end":799431,"line_start":97,"line_end":97,"column_start":77,"column_end":85},"kind":{"Impl":{"id":593}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":799866,"byte_end":799874,"line_start":113,"line_end":113,"column_start":73,"column_end":81},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_alga.rs","byte_start":801332,"byte_end":801340,"line_start":171,"line_end":171,"column_start":63,"column_end":71},"kind":{"Impl":{"id":595}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":803604,"byte_end":803612,"line_start":22,"line_end":22,"column_start":62,"column_end":70},"kind":{"Impl":{"id":596}},"from":{"krate":0,"index":18823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":805126,"byte_end":805134,"line_start":68,"line_end":68,"column_start":70,"column_end":78},"kind":{"Impl":{"id":597}},"from":{"krate":0,"index":18823},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":805368,"byte_end":805376,"line_start":78,"line_end":78,"column_start":71,"column_end":79},"kind":{"Impl":{"id":598}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":806153,"byte_end":806161,"line_start":111,"line_end":111,"column_start":20,"column_end":28},"kind":{"Impl":{"id":599}},"from":{"krate":0,"index":18823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_construction.rs","byte_start":807213,"byte_end":807221,"line_start":146,"line_end":146,"column_start":20,"column_end":28},"kind":{"Impl":{"id":600}},"from":{"krate":0,"index":18823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":818239,"byte_end":818247,"line_start":20,"line_end":20,"column_start":68,"column_end":76},"kind":{"Impl":{"id":601}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":819140,"byte_end":819148,"line_start":48,"line_end":48,"column_start":70,"column_end":78},"kind":{"Impl":{"id":602}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":819889,"byte_end":819897,"line_start":72,"line_end":72,"column_start":57,"column_end":65},"kind":{"Impl":{"id":603}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":821067,"byte_end":821075,"line_start":106,"line_end":106,"column_start":65,"column_end":73},"kind":{"Impl":{"id":604}},"from":{"krate":0,"index":18823},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\isometry_conversion.rs","byte_start":822782,"byte_end":822789,"line_start":152,"line_end":152,"column_start":63,"column_end":70},"kind":{"Impl":{"id":605}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":840546,"byte_end":840556,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"kind":{"Impl":{"id":650}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":840853,"byte_end":840863,"line_start":83,"line_end":83,"column_start":81,"column_end":91},"kind":{"Impl":{"id":651}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841020,"byte_end":841030,"line_start":89,"line_end":89,"column_start":76,"column_end":86},"kind":{"Impl":{"id":652}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":841240,"byte_end":841250,"line_start":98,"line_end":98,"column_start":35,"column_end":45},"kind":{"Impl":{"id":653}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849369,"byte_end":849379,"line_start":328,"line_end":328,"column_start":35,"column_end":45},"kind":{"Impl":{"id":654}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":849995,"byte_end":850005,"line_start":349,"line_end":349,"column_start":42,"column_end":52},"kind":{"Impl":{"id":655}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850147,"byte_end":850157,"line_start":355,"line_end":355,"column_start":49,"column_end":59},"kind":{"Impl":{"id":656}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850441,"byte_end":850451,"line_start":366,"line_end":366,"column_start":49,"column_end":59},"kind":{"Impl":{"id":657}},"from":{"krate":0,"index":19364},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":850991,"byte_end":851001,"line_start":386,"line_end":386,"column_start":50,"column_end":60},"kind":{"Impl":{"id":658}},"from":{"krate":0,"index":19364},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":851663,"byte_end":851673,"line_start":413,"line_end":413,"column_start":46,"column_end":56},"kind":{"Impl":{"id":659}},"from":{"krate":0,"index":19364},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity.rs","byte_start":852208,"byte_end":852218,"line_start":436,"line_end":436,"column_start":41,"column_end":51},"kind":{"Impl":{"id":660}},"from":{"krate":0,"index":19364},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853287,"byte_end":853297,"line_start":19,"line_end":19,"column_start":64,"column_end":74},"kind":{"Impl":{"id":661}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853530,"byte_end":853540,"line_start":30,"line_end":30,"column_start":71,"column_end":81},"kind":{"Impl":{"id":662}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":853873,"byte_end":853883,"line_start":46,"line_end":46,"column_start":69,"column_end":79},"kind":{"Impl":{"id":663}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":854680,"byte_end":854690,"line_start":78,"line_end":78,"column_start":67,"column_end":77},"kind":{"Impl":{"id":664}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":855097,"byte_end":855107,"line_start":94,"line_end":94,"column_start":77,"column_end":87},"kind":{"Impl":{"id":665}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":855542,"byte_end":855552,"line_start":110,"line_end":110,"column_start":73,"column_end":83},"kind":{"Impl":{"id":666}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":885}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_alga.rs","byte_start":856986,"byte_end":856996,"line_start":167,"line_end":167,"column_start":67,"column_end":77},"kind":{"Impl":{"id":667}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":898}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":858572,"byte_end":858582,"line_start":22,"line_end":22,"column_start":35,"column_end":45},"kind":{"Impl":{"id":668}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859254,"byte_end":859264,"line_start":48,"line_end":48,"column_start":43,"column_end":53},"kind":{"Impl":{"id":669}},"from":{"krate":0,"index":19364},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859541,"byte_end":859549,"line_start":60,"line_end":60,"column_start":73,"column_end":81},"kind":{"Impl":{"id":670}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":859976,"byte_end":859986,"line_start":77,"line_end":77,"column_start":35,"column_end":45},"kind":{"Impl":{"id":671}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":861523,"byte_end":861533,"line_start":130,"line_end":130,"column_start":20,"column_end":30},"kind":{"Impl":{"id":672}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_construction.rs","byte_start":862295,"byte_end":862305,"line_start":153,"line_end":153,"column_start":20,"column_end":30},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":19364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":872037,"byte_end":872047,"line_start":19,"line_end":19,"column_start":70,"column_end":80},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":872953,"byte_end":872963,"line_start":47,"line_end":47,"column_start":57,"column_end":67},"kind":{"Impl":{"id":675}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":874123,"byte_end":874133,"line_start":81,"line_end":81,"column_start":65,"column_end":75},"kind":{"Impl":{"id":676}},"from":{"krate":0,"index":19364},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\similarity_conversion.rs","byte_start":877515,"byte_end":877522,"line_start":166,"line_end":166,"column_start":65,"column_end":72},"kind":{"Impl":{"id":677}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896261,"byte_end":896264,"line_start":21,"line_end":21,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2349},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896267,"byte_end":896272,"line_start":21,"line_end":21,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":7643},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896275,"byte_end":896279,"line_start":21,"line_end":21,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896282,"byte_end":896291,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896294,"byte_end":896298,"line_start":21,"line_end":21,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":1533},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":896988,"byte_end":896997,"line_start":39,"line_end":39,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":6538},"to":{"krate":0,"index":6543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897380,"byte_end":897389,"line_start":47,"line_end":47,"column_start":47,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":6538},"to":{"krate":0,"index":6546}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897581,"byte_end":897590,"line_start":52,"line_end":52,"column_start":45,"column_end":54},"kind":"SuperTrait","from":{"krate":0,"index":6538},"to":{"krate":0,"index":6548}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":897630,"byte_end":897632,"line_start":53,"line_end":53,"column_start":37,"column_end":39},"kind":{"Impl":{"id":724}},"from":{"krate":0,"index":6551},"to":{"krate":0,"index":6548}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898175,"byte_end":898183,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":725}},"from":{"krate":0,"index":19955},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898418,"byte_end":898429,"line_start":83,"line_end":83,"column_start":20,"column_end":31},"kind":{"Impl":{"id":726}},"from":{"krate":0,"index":19970},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":898681,"byte_end":898688,"line_start":94,"line_end":94,"column_start":20,"column_end":27},"kind":{"Impl":{"id":727}},"from":{"krate":0,"index":19985},"to":{"krate":0,"index":6538}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":899399,"byte_end":899400,"line_start":122,"line_end":122,"column_start":40,"column_end":41},"kind":{"Impl":{"id":728}},"from":{"krate":0,"index":6569},"to":{"krate":0,"index":6543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":900017,"byte_end":900018,"line_start":146,"line_end":146,"column_start":44,"column_end":45},"kind":{"Impl":{"id":729}},"from":{"krate":0,"index":6573},"to":{"krate":0,"index":6546}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":901024,"byte_end":901033,"line_start":176,"line_end":176,"column_start":69,"column_end":78},"kind":{"Impl":{"id":730}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":901248,"byte_end":901257,"line_start":183,"line_end":183,"column_start":63,"column_end":72},"kind":{"Impl":{"id":731}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902467,"byte_end":902476,"line_start":218,"line_end":218,"column_start":65,"column_end":74},"kind":{"Impl":{"id":732}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902631,"byte_end":902640,"line_start":221,"line_end":221,"column_start":67,"column_end":76},"kind":{"Impl":{"id":733}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":902879,"byte_end":902888,"line_start":230,"line_end":230,"column_start":53,"column_end":62},"kind":{"Impl":{"id":734}},"from":{"krate":0,"index":20015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":910967,"byte_end":910976,"line_start":457,"line_end":457,"column_start":31,"column_end":40},"kind":{"Impl":{"id":735}},"from":{"krate":0,"index":20015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":911794,"byte_end":911803,"line_start":484,"line_end":484,"column_start":53,"column_end":62},"kind":{"Impl":{"id":736}},"from":{"krate":0,"index":20015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":912685,"byte_end":912694,"line_start":508,"line_end":508,"column_start":39,"column_end":48},"kind":{"Impl":{"id":737}},"from":{"krate":0,"index":20015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":913131,"byte_end":913140,"line_start":519,"line_end":519,"column_start":67,"column_end":76},"kind":{"Impl":{"id":738}},"from":{"krate":0,"index":20015},"to":{"krate":15,"index":9}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":913600,"byte_end":913609,"line_start":537,"line_end":537,"column_start":68,"column_end":77},"kind":{"Impl":{"id":739}},"from":{"krate":0,"index":20015},"to":{"krate":15,"index":52}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform.rs","byte_start":914142,"byte_end":914151,"line_start":560,"line_end":560,"column_start":64,"column_end":73},"kind":{"Impl":{"id":740}},"from":{"krate":0,"index":20015},"to":{"krate":15,"index":87}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":915372,"byte_end":915381,"line_start":18,"line_end":18,"column_start":71,"column_end":80},"kind":{"Impl":{"id":741}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":287}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":915644,"byte_end":915653,"line_start":29,"line_end":29,"column_start":78,"column_end":87},"kind":{"Impl":{"id":742}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":444}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":916042,"byte_end":916051,"line_start":45,"line_end":45,"column_start":76,"column_end":85},"kind":{"Impl":{"id":743}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":78}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":917301,"byte_end":917310,"line_start":88,"line_end":88,"column_start":63,"column_end":72},"kind":{"Impl":{"id":744}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":877}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_alga.rs","byte_start":917851,"byte_end":917860,"line_start":108,"line_end":108,"column_start":73,"column_end":82},"kind":{"Impl":{"id":745}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":881}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":920357,"byte_end":920366,"line_start":11,"line_end":11,"column_start":53,"column_end":62},"kind":{"Impl":{"id":746}},"from":{"krate":0,"index":20015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_construction.rs","byte_start":921465,"byte_end":921474,"line_start":48,"line_end":48,"column_start":61,"column_end":70},"kind":{"Impl":{"id":747}},"from":{"krate":0,"index":20015},"to":{"krate":16,"index":305}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":922002,"byte_end":922011,"line_start":9,"line_end":9,"column_start":69,"column_end":78},"kind":{"Impl":{"id":748}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":922843,"byte_end":922852,"line_start":37,"line_end":37,"column_start":74,"column_end":83},"kind":{"Impl":{"id":749}},"from":{"krate":0,"index":20015},"to":{"krate":32,"index":556}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_conversion.rs","byte_start":923636,"byte_end":923643,"line_start":64,"line_end":64,"column_start":64,"column_end":71},"kind":{"Impl":{"id":750}},"from":{"krate":0,"index":1090},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_ops.rs","byte_start":925946,"byte_end":925955,"line_start":82,"line_end":82,"column_start":63,"column_end":72},"kind":{"Impl":{"id":751}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\transform_ops.rs","byte_start":926311,"byte_end":926320,"line_start":96,"line_end":96,"column_start":52,"column_end":61},"kind":{"Impl":{"id":752}},"from":{"krate":0,"index":20015},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\reflection.rs","byte_start":947821,"byte_end":947831,"line_start":16,"line_end":16,"column_start":49,"column_end":59},"kind":{"Impl":{"id":813}},"from":{"krate":0,"index":6863},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952211,"byte_end":952224,"line_start":24,"line_end":24,"column_start":29,"column_end":42},"kind":{"Impl":{"id":814}},"from":{"krate":0,"index":6912},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952261,"byte_end":952274,"line_start":26,"line_end":26,"column_start":30,"column_end":43},"kind":{"Impl":{"id":815}},"from":{"krate":0,"index":6912},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952424,"byte_end":952437,"line_start":33,"line_end":33,"column_start":35,"column_end":48},"kind":{"Impl":{"id":816}},"from":{"krate":0,"index":6912},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":952582,"byte_end":952595,"line_start":39,"line_end":39,"column_start":34,"column_end":47},"kind":{"Impl":{"id":817}},"from":{"krate":0,"index":6912},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":953308,"byte_end":953321,"line_start":64,"line_end":64,"column_start":20,"column_end":33},"kind":{"Impl":{"id":818}},"from":{"krate":0,"index":6912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":977373,"byte_end":977381,"line_start":681,"line_end":681,"column_start":55,"column_end":63},"kind":{"Impl":{"id":819}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\orthographic.rs","byte_start":978424,"byte_end":978431,"line_start":712,"line_end":712,"column_start":47,"column_end":54},"kind":{"Impl":{"id":820}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979174,"byte_end":979186,"line_start":25,"line_end":25,"column_start":29,"column_end":41},"kind":{"Impl":{"id":821}},"from":{"krate":0,"index":6986},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979223,"byte_end":979235,"line_start":27,"line_end":27,"column_start":30,"column_end":42},"kind":{"Impl":{"id":822}},"from":{"krate":0,"index":6986},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979385,"byte_end":979397,"line_start":34,"line_end":34,"column_start":35,"column_end":47},"kind":{"Impl":{"id":823}},"from":{"krate":0,"index":6986},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":979542,"byte_end":979554,"line_start":40,"line_end":40,"column_start":34,"column_end":46},"kind":{"Impl":{"id":824}},"from":{"krate":0,"index":6986},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":980265,"byte_end":980277,"line_start":65,"line_end":65,"column_start":20,"column_end":32},"kind":{"Impl":{"id":825}},"from":{"krate":0,"index":6986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":986903,"byte_end":986911,"line_start":264,"line_end":264,"column_start":54,"column_end":62},"kind":{"Impl":{"id":826}},"from":{"krate":24,"index":1972},"to":{"krate":24,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\geometry\\perspective.rs","byte_start":987699,"byte_end":987706,"line_start":287,"line_end":287,"column_start":46,"column_end":53},"kind":{"Impl":{"id":827}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":993243,"byte_end":993253,"line_start":57,"line_end":57,"column_start":54,"column_end":64},"kind":{"Impl":{"id":828}},"from":{"krate":0,"index":20728},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":993610,"byte_end":993620,"line_start":68,"line_end":68,"column_start":45,"column_end":55},"kind":{"Impl":{"id":829}},"from":{"krate":0,"index":20728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\bidiagonal.rs","byte_start":1004119,"byte_end":1004125,"line_start":358,"line_end":358,"column_start":66,"column_end":72},"kind":{"Impl":{"id":830}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1005577,"byte_end":1005585,"line_start":35,"line_end":35,"column_start":40,"column_end":48},"kind":{"Impl":{"id":831}},"from":{"krate":0,"index":20746},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1005711,"byte_end":1005719,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"kind":{"Impl":{"id":832}},"from":{"krate":0,"index":20746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\cholesky.rs","byte_start":1009703,"byte_end":1009715,"line_start":151,"line_end":151,"column_start":64,"column_end":76},"kind":{"Impl":{"id":833}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\determinant.rs","byte_start":1010407,"byte_end":1010419,"line_start":10,"line_end":10,"column_start":70,"column_end":82},"kind":{"Impl":{"id":834}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1013764,"byte_end":1013773,"line_start":43,"line_end":43,"column_start":54,"column_end":63},"kind":{"Impl":{"id":835}},"from":{"krate":0,"index":20758},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1014003,"byte_end":1014012,"line_start":50,"line_end":50,"column_start":45,"column_end":54},"kind":{"Impl":{"id":836}},"from":{"krate":0,"index":20758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1017426,"byte_end":1017435,"line_start":159,"line_end":159,"column_start":49,"column_end":58},"kind":{"Impl":{"id":837}},"from":{"krate":0,"index":20758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\full_piv_lu.rs","byte_start":1020686,"byte_end":1020692,"line_start":264,"line_end":264,"column_start":66,"column_end":72},"kind":{"Impl":{"id":838}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\givens.rs","byte_start":1021519,"byte_end":1021533,"line_start":20,"line_end":20,"column_start":23,"column_end":37},"kind":{"Impl":{"id":839}},"from":{"krate":0,"index":20775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027454,"byte_end":1027464,"line_start":40,"line_end":40,"column_start":47,"column_end":57},"kind":{"Impl":{"id":840}},"from":{"krate":0,"index":20787},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1027654,"byte_end":1027664,"line_start":47,"line_end":47,"column_start":38,"column_end":48},"kind":{"Impl":{"id":841}},"from":{"krate":0,"index":20787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\hessenberg.rs","byte_start":1030720,"byte_end":1030732,"line_start":136,"line_end":136,"column_start":59,"column_end":71},"kind":{"Impl":{"id":842}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1035946,"byte_end":1035958,"line_start":10,"line_end":10,"column_start":52,"column_end":64},"kind":{"Impl":{"id":843}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\inverse.rs","byte_start":1036329,"byte_end":1036341,"line_start":24,"line_end":24,"column_start":55,"column_end":67},"kind":{"Impl":{"id":844}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1045067,"byte_end":1045069,"line_start":42,"line_end":42,"column_start":54,"column_end":56},"kind":{"Impl":{"id":845}},"from":{"krate":0,"index":20800},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1046407,"byte_end":1046409,"line_start":89,"line_end":89,"column_start":45,"column_end":47},"kind":{"Impl":{"id":846}},"from":{"krate":0,"index":20800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1050115,"byte_end":1050117,"line_start":200,"line_end":200,"column_start":49,"column_end":51},"kind":{"Impl":{"id":847}},"from":{"krate":0,"index":20800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\lu.rs","byte_start":1055417,"byte_end":1055423,"line_start":371,"line_end":371,"column_start":66,"column_end":72},"kind":{"Impl":{"id":848}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1056758,"byte_end":1056777,"line_start":38,"line_end":38,"column_start":23,"column_end":42},"kind":{"Impl":{"id":849}},"from":{"krate":0,"index":20816},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1056898,"byte_end":1056917,"line_start":44,"line_end":44,"column_start":18,"column_end":37},"kind":{"Impl":{"id":850}},"from":{"krate":0,"index":20816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057208,"byte_end":1057227,"line_start":55,"line_end":55,"column_start":6,"column_end":25},"kind":{"Impl":{"id":851}},"from":{"krate":0,"index":20816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\permutation_sequence.rs","byte_start":1057505,"byte_end":1057524,"line_start":65,"line_end":65,"column_start":14,"column_end":33},"kind":{"Impl":{"id":852}},"from":{"krate":0,"index":20816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1061655,"byte_end":1061657,"line_start":43,"line_end":43,"column_start":54,"column_end":56},"kind":{"Impl":{"id":853}},"from":{"krate":0,"index":20826},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1061865,"byte_end":1061867,"line_start":50,"line_end":50,"column_start":45,"column_end":47},"kind":{"Impl":{"id":854}},"from":{"krate":0,"index":20826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1065853,"byte_end":1065855,"line_start":162,"line_end":162,"column_start":49,"column_end":51},"kind":{"Impl":{"id":855}},"from":{"krate":0,"index":20826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\qr.rs","byte_start":1069712,"byte_end":1069718,"line_start":294,"line_end":294,"column_start":66,"column_end":72},"kind":{"Impl":{"id":856}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071270,"byte_end":1071275,"line_start":45,"line_end":45,"column_start":40,"column_end":45},"kind":{"Impl":{"id":857}},"from":{"krate":0,"index":20842},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1071389,"byte_end":1071394,"line_start":51,"line_end":51,"column_start":31,"column_end":36},"kind":{"Impl":{"id":858}},"from":{"krate":0,"index":20842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\schur.rs","byte_start":1085956,"byte_end":1085968,"line_start":490,"line_end":490,"column_start":52,"column_end":64},"kind":{"Impl":{"id":859}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\solve.rs","byte_start":1089332,"byte_end":1089344,"line_start":9,"line_end":9,"column_start":52,"column_end":64},"kind":{"Impl":{"id":860}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1103955,"byte_end":1103958,"line_start":56,"line_end":56,"column_start":54,"column_end":57},"kind":{"Impl":{"id":861}},"from":{"krate":0,"index":20855},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1104314,"byte_end":1104317,"line_start":66,"line_end":66,"column_start":45,"column_end":48},"kind":{"Impl":{"id":862}},"from":{"krate":0,"index":20855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\svd.rs","byte_start":1122461,"byte_end":1122467,"line_start":549,"line_end":549,"column_start":66,"column_end":72},"kind":{"Impl":{"id":863}},"from":{"krate":0,"index":16855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1127899,"byte_end":1127913,"line_start":47,"line_end":47,"column_start":40,"column_end":54},"kind":{"Impl":{"id":864}},"from":{"krate":0,"index":20872},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1128092,"byte_end":1128106,"line_start":54,"line_end":54,"column_start":31,"column_end":45},"kind":{"Impl":{"id":865}},"from":{"krate":0,"index":20872},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_eigen.rs","byte_start":1136243,"byte_end":1136255,"line_start":307,"line_end":307,"column_start":59,"column_end":71},"kind":{"Impl":{"id":866}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1141195,"byte_end":1141215,"line_start":40,"line_end":40,"column_start":47,"column_end":67},"kind":{"Impl":{"id":867}},"from":{"krate":0,"index":20885},"to":{"krate":2,"index":1543}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1141405,"byte_end":1141425,"line_start":47,"line_end":47,"column_start":38,"column_end":58},"kind":{"Impl":{"id":868}},"from":{"krate":0,"index":20885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\symmetric_tridiagonal.rs","byte_start":1145153,"byte_end":1145165,"line_start":148,"line_end":148,"column_start":59,"column_end":71},"kind":{"Impl":{"id":869}},"from":{"krate":0,"index":2629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nalgebra-0.19.0\\src\\linalg\\convolution.rs","byte_start":1145846,"byte_end":1145852,"line_start":9,"line_end":9,"column_start":49,"column_end":55},"kind":{"Impl":{"id":870}},"from":{"krate":0,"index":2633},"to":{"krate":4294967295,"index":4294967295}}]}