{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","num_cpus","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=097f01fe18cb2379","-C","extra-filename=-097f01fe18cb2379","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","libc=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblibc-bdc370f3966ce084.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_cpus-097f01fe18cb2379.rmeta"},"prelude":{"crate_id":{"name":"num_cpus","disambiguator":[15898470444742567229,11826811419716725877]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":0,"byte_end":14597,"line_start":1,"line_end":526,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":0,"byte_end":14597,"line_start":1,"line_end":526,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":18}],"decl_id":null,"docs":" A crate with utilities to determine the number of CPUs available on the\n current system.\n\n Sometimes the CPU will exaggerate the number of CPUs it contains, because it can use\n [processor tricks] to deliver increased performance when there are more threads. This \n crate provides methods to get both the logical and physical numbers of cores.\n\n This information can be used as a guide to how many tasks can be run in parallel.\n There are many properties of the system architecture that will affect parallelism,\n for example memory access speeds (for all the caches and RAM) and the physical\n architecture of the processor, so the number of CPUs should be used as a rough guide\n only.\n\n\n ## Examples\n\n Fetch the number of logical CPUs.\n\n ```\n let cpus = num_cpus::get();\n ```\n\n See [`rayon::Threadpool`] for an example of where the number of CPUs could be\n used when setting up parallel jobs (Where the threadpool example uses a fixed\n number 8, it could use the number of CPUs).\n\n [processor tricks]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n [`rayon::ThreadPool`]: https://docs.rs/rayon/1.*/rayon/struct.ThreadPool.html\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":1258,"byte_end":1280,"line_start":30,"line_end":30,"column_start":1,"column_end":23}},{"value":"allow(non_snake_case)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":1340,"byte_end":1365,"line_start":32,"line_end":32,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":2384,"byte_end":2387,"line_start":71,"line_end":71,"column_start":8,"column_end":11},"name":"get","qualname":"::get","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of available CPUs of the current system.\n\n This function will get the number of logical cores. Sometimes this is different from the number\n of physical cores (See [Simultaneous multithreading on Wikipedia][smt]).\n\n # Examples\n\n ```\n let cpus = num_cpus::get();\n if cpus > 1 {\n     println!(\"We are on a multicore system with {} CPUs\", cpus);\n } else {\n     println!(\"We are on a single core system\");\n }\n ```\n\n # Note\n\n This will check [sched affinity] on Linux, showing a lower number of CPUs if the current \n thread does not have access to all the computer's CPUs. \n\n [smt]: https://en.wikipedia.org/wiki/Simultaneous_multithreading\n [sched affinity]: http://www.gnu.org/software/libc/manual/html_node/CPU-Affinity.html\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":2367,"byte_end":2376,"line_start":70,"line_end":70,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":3533,"byte_end":3545,"line_start":104,"line_end":104,"column_start":8,"column_end":20},"name":"get_physical","qualname":"::get_physical","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of physical cores of the current system.\n\n # Note\n\n Physical count is supported only on Linux, mac OS and Windows platforms.\n On other platforms, or if the physical count fails on supported platforms,\n this function returns the same as [`get()`], which is the number of logical\n CPUS.\n\n # Examples\n\n ```\n let logical_cpus = num_cpus::get();\n let physical_cpus = num_cpus::get_physical();\n if logical_cpus > physical_cpus {\n     println!(\"We have simultaneous multithreading with about {:.2} \\\n               logical cores to 1 physical core.\", \n               (logical_cpus as f64) / (physical_cpus as f64));\n } else if logical_cpus == physical_cpus {\n     println!(\"Either we don't have simultaneous multithreading, or our \\\n               system doesn't support getting the number of physical CPUs.\");\n } else {\n     println!(\"We have less logical CPUs than physical CPUs, maybe we only have access to \\\n               some of the CPUs on our system.\");\n }\n ```\n\n [`get()`]: fn.get.html\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num_cpus-1.12.0\\src\\lib.rs","byte_start":3516,"byte_end":3525,"line_start":103,"line_end":103,"column_start":1,"column_end":10}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}