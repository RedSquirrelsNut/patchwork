{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ogg","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=41811ebef7053d1e","-C","extra-filename=-41811ebef7053d1e","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbyteorder-64f7b87f82657a23.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libogg-41811ebef7053d1e.rmeta"},"prelude":{"crate_id":{"name":"ogg","disambiguator":[8090993522682251113,15880347833297962562]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","num":14,"id":{"name":"byteorder","disambiguator":[373764108737062493,6998070977021925776]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":259,"byte_end":3078,"line_start":9,"line_end":95,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":716,"byte_end":728,"line_start":35,"line_end":35,"column_start":19,"column_end":31},"alias_span":null,"name":"PacketWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":730,"byte_end":748,"line_start":35,"line_end":35,"column_start":33,"column_end":51},"alias_span":null,"name":"PacketWriteEndInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":769,"byte_end":781,"line_start":36,"line_end":36,"column_start":19,"column_end":31},"alias_span":null,"name":"PacketReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":783,"byte_end":795,"line_start":36,"line_end":36,"column_start":33,"column_end":45},"alias_span":null,"name":"OggReadError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":259,"byte_end":3078,"line_start":9,"line_end":95,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":142},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":194}],"decl_id":null,"docs":"Ogg container decoder and encoder\n\nThe most interesting structures for in this\nmod are `PacketReader` and `PacketWriter`.\n","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":259,"byte_end":282,"line_start":9,"line_end":9,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reading","qualname":"::reading","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":201},{"krate":0,"index":216},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":68},{"krate":0,"index":73},{"krate":0,"index":77},{"krate":0,"index":218},{"krate":0,"index":230},{"krate":0,"index":229},{"krate":0,"index":82},{"krate":0,"index":91},{"krate":0,"index":97},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":139}],"decl_id":null,"docs":"Reading logic\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":8735,"byte_end":8756,"line_start":30,"line_end":30,"column_start":2,"column_end":23},"name":"NoCapturePatternFound","qualname":"::reading::OggReadError::NoCapturePatternFound","value":"OggReadError::NoCapturePatternFound","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" The capture pattern for a new page was not found\n where one was expected.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":8832,"byte_end":8854,"line_start":33,"line_end":33,"column_start":2,"column_end":24},"name":"InvalidStreamStructVer","qualname":"::reading::OggReadError::InvalidStreamStructVer","value":"OggReadError::InvalidStreamStructVer(u8)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Invalid stream structure version, with the given one\n attached.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":8928,"byte_end":8940,"line_start":35,"line_end":35,"column_start":2,"column_end":14},"name":"HashMismatch","qualname":"::reading::OggReadError::HashMismatch","value":"OggReadError::HashMismatch(u32, u32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Mismatch of the hash value with (expected, calculated) value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":8977,"byte_end":8986,"line_start":37,"line_end":37,"column_start":2,"column_end":11},"name":"ReadError","qualname":"::reading::OggReadError::ReadError","value":"OggReadError::ReadError(io::Error)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" I/O error occured.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9055,"byte_end":9066,"line_start":39,"line_end":39,"column_start":2,"column_end":13},"name":"InvalidData","qualname":"::reading::OggReadError::InvalidData","value":"OggReadError::InvalidData","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Some constraint required by the spec was not met.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":8636,"byte_end":8648,"line_start":27,"line_end":27,"column_start":10,"column_end":22},"name":"OggReadError","qualname":"::reading::OggReadError","value":"OggReadError::{NoCapturePatternFound, InvalidStreamStructVer, HashMismatch, ReadError, InvalidData}","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":214}],"decl_id":null,"docs":" Error that can be raised when decoding an Ogg transport.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":12049,"byte_end":12056,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"OggPage","qualname":"::reading::OggPage","value":"","parent":null,"children":[],"decl_id":null,"docs":" Contains a fully parsed OGG page.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":13040,"byte_end":13050,"line_start":160,"line_end":160,"column_start":12,"column_end":22},"name":"PageParser","qualname":"::reading::PageParser","value":"PageParser {  }","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67}],"decl_id":null,"docs":"Helper struct for parsing pages\n\nIts created using the `new` function and then its fed more data via the `parse_segments`\nand `parse_packet_data` functions, each called exactly once and in that precise order.\n\nThen later code uses the `OggPage` returned by the `parse_packet_data` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":14111,"byte_end":14114,"line_start":187,"line_end":187,"column_start":9,"column_end":12},"name":"new","qualname":"<PageParser>::new","value":"fn (header_buf: [u8; 27]) -> Result<(PageParser, usize), OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Page parser\n\n The `header_buf` param contains the first 27 bytes of a new OGG page.\n Determining when one begins is your responsibility. Usually they\n begin directly after the end of a previous OGG page, but\n after you've performed a seek you might end up within the middle of a page\n and need to recapture.\n\n Returns a page parser, and the requested size of the segments array.\n You should allocate and fill such an array, in order to pass it to the `parse_segments`\n function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":15496,"byte_end":15510,"line_start":226,"line_end":226,"column_start":9,"column_end":23},"name":"parse_segments","qualname":"<PageParser>::parse_segments","value":"fn (&mut self, segments_buf: Vec<u8>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Parses the segments buffer, and returns the requested size\n of the packets content array.\n\n You should allocate and fill such an array, in order to pass it to the `parse_packet_data`\n function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":16902,"byte_end":16919,"line_start":268,"line_end":268,"column_start":9,"column_end":26},"name":"parse_packet_data","qualname":"<PageParser>::parse_packet_data","value":"fn (mut self, packet_data: Vec<u8>) -> Result<OggPage, OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the packets data and verifies the checksum.\n\n Returns an `OggPage` to be used by later code.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":18535,"byte_end":18551,"line_start":315,"line_end":315,"column_start":12,"column_end":28},"name":"BasePacketReader","qualname":"::reading::BasePacketReader","value":"BasePacketReader {  }","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":"Low level struct for reading from an Ogg stream.\n\nNote that most times you'll want the higher level `PacketReader` struct.\n\nIt takes care of most of the internal parsing and logic, you\nwill only have to take care of handing over your data.\n\nEssentially, it manages a cache of package data for each logical\nbitstream, and when the cache of every logical bistream is empty,\nit asks for a fresh page. You will then need to feed the struct\none via the `push_page` function.\n\nAll functions on this struct are async ready.\nThey get their data fed, instead of calling and blocking\nin order to get it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":19557,"byte_end":19560,"line_start":338,"line_end":338,"column_start":9,"column_end":12},"name":"new","qualname":"<BasePacketReader>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new blank `BasePacketReader`.\n\n You can feed it data using the `push_page` function, and\n obtain data using the `read_packet` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":19917,"byte_end":19928,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"name":"read_packet","qualname":"<BasePacketReader>::read_packet","value":"fn (&mut self) -> Option<Packet>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a packet from the cache, if the cache contains valid packet data,\n otherwise it returns `None`.\n\n If this function returns `None`, you'll need to add a page to the cache\n by using the `push_page` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":22607,"byte_end":22616,"line_start":418,"line_end":418,"column_start":9,"column_end":18},"name":"push_page","qualname":"<BasePacketReader>::push_page","value":"fn (&mut self, page: OggPage) -> Result<(), OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Pushes a given Ogg page, updating the internal structures\n with its contents.\n\n If you want the code to function properly, you should first call\n `parse_segments`, then `parse_packet_data` on a `PageParser`\n before passing the resulting `OggPage` to this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":26125,"byte_end":26142,"line_start":518,"line_end":518,"column_start":9,"column_end":26},"name":"update_after_seek","qualname":"<BasePacketReader>::update_after_seek","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the internal state after a seek\n\n It flushes the cache so that no partial data is left inside.\n It also tells the parsing logic to expect little inconsistencies\n due to the read position not being at the start.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":31832,"byte_end":31844,"line_start":709,"line_end":709,"column_start":12,"column_end":24},"name":"PacketReader","qualname":"::reading::PacketReader","value":"PacketReader {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"decl_id":null,"docs":"Reader for packets from an Ogg stream.\n\nThis reads codec packets belonging to several different logical streams from one physical Ogg container stream.\n\nThis reader is not async ready. It does not keep its internal state\nconsistent when it encounters the `WouldBlock` error kind.\nIf you desire async functionality, consider enabling the `async` feature\nand look into the async module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":32030,"byte_end":32033,"line_start":717,"line_end":717,"column_start":9,"column_end":12},"name":"new","qualname":"<PacketReader<T>>::new","value":"fn (rdr: T) -> PacketReader<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `PacketReader` with a given `Read`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":32205,"byte_end":32215,"line_start":721,"line_end":721,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<PacketReader<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the wrapped reader, consuming the `PacketReader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":32364,"byte_end":32375,"line_start":727,"line_end":727,"column_start":9,"column_end":20},"name":"read_packet","qualname":"<PacketReader<T>>::read_packet","value":"fn (&mut self) -> Result<Option<Packet>, OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Reads a packet, and returns it on success.\n\n Ok(None) is returned if the physical stream has ended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":33103,"byte_end":33123,"line_start":747,"line_end":747,"column_start":9,"column_end":29},"name":"read_packet_expected","qualname":"<PacketReader<T>>::read_packet_expected","value":"fn (&mut self) -> Result<Packet, OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Reads a packet, and returns it on success.\n\n The difference to the `read_packet` function is that this function\n returns an Err(_) if the physical stream has ended.\n This function is useful if you expect a new packet to come.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":35381,"byte_end":35391,"line_start":807,"line_end":807,"column_start":9,"column_end":19},"name":"seek_bytes","qualname":"<PacketReader<T>>::seek_bytes","value":"fn (&mut self, pos: SeekFrom) -> Result<u64, Error>","parent":null,"children":[],"decl_id":null,"docs":" Seeks the underlying reader\n\n Seeks the reader that this PacketReader bases on by the specified\n number of bytes. All new pages will be read from the new position.\n\n This also flushes all the unread packets in the queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":36376,"byte_end":36386,"line_start":830,"line_end":830,"column_start":9,"column_end":19},"name":"seek_absgp","qualname":"<PacketReader<T>>::seek_absgp","value":"fn (&mut self, stream_serial: Option<u32>, pos_goal: u64) -> Result<bool, OggReadError>","parent":null,"children":[],"decl_id":null,"docs":" Seeks to absolute granule pos\n\n More specifically, it seeks to the first Ogg page\n that has an `absgp` greater or equal to the specified one.\n In the case of continued packets, the seek operation may also end up\n at the last page that comes before such a page and has a packet start.\n\n The passed `stream_serial` parameter controls the stream\n serial number to filter our search for. If its `None`, no\n filtering is applied, but if it is `Some(n)`, we filter for\n streams with the serial number `n`.\n Note that the `None` case is only intended for streams\n where only one logical stream exists, the seek may misbehave\n if `Ǹone` gets passed when multiple streams exist.\n\n The returned bool indicates whether the seek was successful.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":41687,"byte_end":41708,"line_start":996,"line_end":996,"column_start":9,"column_end":30},"name":"delete_unread_packets","qualname":"<PacketReader<T>>::delete_unread_packets","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the internal state by deleting all\n unread packets.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writing","qualname":"::writing","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":232},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":240},{"krate":0,"index":239},{"krate":0,"index":170},{"krate":0,"index":177}],"decl_id":null,"docs":"Writing logic\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":46111,"byte_end":46123,"line_start":32,"line_end":32,"column_start":12,"column_end":24},"name":"PacketWriter","qualname":"::writing::PacketWriter","value":"PacketWriter {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":"Writer for packets into an Ogg stream.\n\nNote that the functionality of this struct isn't as well tested as for\nthe `PacketReader` struct.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47733,"byte_end":47745,"line_start":85,"line_end":85,"column_start":2,"column_end":14},"name":"NormalPacket","qualname":"::writing::PacketWriteEndInfo::NormalPacket","value":"PacketWriteEndInfo::NormalPacket","parent":{"krate":0,"index":232},"children":[],"decl_id":null,"docs":" No ends here, just a normal packet\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47780,"byte_end":47787,"line_start":87,"line_end":87,"column_start":2,"column_end":9},"name":"EndPage","qualname":"::writing::PacketWriteEndInfo::EndPage","value":"PacketWriteEndInfo::EndPage","parent":{"krate":0,"index":232},"children":[],"decl_id":null,"docs":" Force-end the current page\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47825,"byte_end":47834,"line_start":89,"line_end":89,"column_start":2,"column_end":11},"name":"EndStream","qualname":"::writing::PacketWriteEndInfo::EndStream","value":"PacketWriteEndInfo::EndStream","parent":{"krate":0,"index":232},"children":[],"decl_id":null,"docs":" End the whole logical stream.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47671,"byte_end":47689,"line_start":83,"line_end":83,"column_start":10,"column_end":28},"name":"PacketWriteEndInfo","qualname":"::writing::PacketWriteEndInfo","value":"PacketWriteEndInfo::{NormalPacket, EndPage, EndStream}","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237}],"decl_id":null,"docs":" Specifies whether to end something with the write of the packet.\n\n If you want to end a stream you need to inform the Ogg `PacketWriter`\n about this. This is the enum to do so.\n\n Also, Codecs sometimes have special requirements to put\n the first packet of the whole stream into its own page.\n The `EndPage` variant can be used for this.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47885,"byte_end":47888,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"new","qualname":"<PacketWriter<T>>::new","value":"fn (wtr: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47992,"byte_end":48002,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<PacketWriter<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":48068,"byte_end":48080,"line_start":105,"line_end":105,"column_start":9,"column_end":21},"name":"write_packet","qualname":"<PacketWriter<T>>::write_packet","value":"fn (&mut self, pck_cont: Box<[u8]>, serial: u32, inf: PacketWriteEndInfo, absgp: u64) -> IoResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a packet\n\n\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":53852,"byte_end":53868,"line_start":285,"line_end":285,"column_start":9,"column_end":25},"name":"get_current_offs","qualname":"<PacketWriter<T>>::get_current_offs","value":"fn (&mut self) -> Result<u64, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":1297,"byte_end":1303,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"Packet","qualname":"::Packet","value":"Packet { data }","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":"Ogg packet representation.\n\nFor the Ogg format, packets are the logically smallest subdivision it handles.\n\nEvery packet belongs to a *logical* bitstream. The *logical* bitstreams then form a *physical* bitstream, with the data combined in multiple different ways.\n\nEvery logical bitstream is identified by the serial number its pages have stored. The Packet struct contains a field for that number as well, so that one can find out which logical bitstream the Packet belongs to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":1347,"byte_end":1351,"line_start":49,"line_end":49,"column_start":6,"column_end":10},"name":"data","qualname":"::Packet::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" The data the `Packet` contains\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2256,"byte_end":2269,"line_start":70,"line_end":70,"column_start":9,"column_end":22},"name":"first_in_page","qualname":"<Packet>::first_in_page","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the packet is the first one starting in the page\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2391,"byte_end":2406,"line_start":74,"line_end":74,"column_start":9,"column_end":24},"name":"first_in_stream","qualname":"<Packet>::first_in_stream","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the packet is the first one of the entire stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2531,"byte_end":2543,"line_start":78,"line_end":78,"column_start":9,"column_end":21},"name":"last_in_page","qualname":"<Packet>::last_in_page","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the packet is the last one starting in the page\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2663,"byte_end":2677,"line_start":82,"line_end":82,"column_start":9,"column_end":23},"name":"last_in_stream","qualname":"<Packet>::last_in_stream","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the packet is the last one of the entire stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2888,"byte_end":2898,"line_start":88,"line_end":88,"column_start":9,"column_end":19},"name":"absgp_page","qualname":"<Packet>::absgp_page","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute granule position of the page the packet ended in.\n\n The meaning of the absolute granule position is defined by the codec.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":3023,"byte_end":3036,"line_start":92,"line_end":92,"column_start":9,"column_end":22},"name":"stream_serial","qualname":"<Packet>::stream_serial","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the serial number that uniquely identifies the logical bitstream.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9093,"byte_end":9105,"line_start":42,"line_end":42,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9673,"byte_end":9685,"line_start":62,"line_end":62,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9834,"byte_end":9846,"line_start":68,"line_end":68,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":11437,"byte_end":11445,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":12076,"byte_end":12083,"line_start":132,"line_end":132,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":13552,"byte_end":13562,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":19364,"byte_end":19380,"line_start":333,"line_end":333,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":26749,"byte_end":26770,"line_start":551,"line_end":551,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":108},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":31946,"byte_end":31958,"line_start":715,"line_end":715,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47859,"byte_end":47871,"line_start":92,"line_end":92,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":53826,"byte_end":53838,"line_start":284,"line_end":284,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2169,"byte_end":2175,"line_start":68,"line_end":68,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":671,"byte_end":678,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":688,"byte_end":695,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":142}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9093,"byte_end":9105,"line_start":42,"line_end":42,"column_start":23,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":201},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9673,"byte_end":9685,"line_start":62,"line_end":62,"column_start":18,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":9834,"byte_end":9846,"line_start":68,"line_end":68,"column_start":26,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":11437,"byte_end":11445,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":12076,"byte_end":12083,"line_start":132,"line_end":132,"column_start":6,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":13552,"byte_end":13562,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":19364,"byte_end":19380,"line_start":333,"line_end":333,"column_start":6,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":26749,"byte_end":26770,"line_start":551,"line_end":551,"column_start":6,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\reading.rs","byte_start":31946,"byte_end":31958,"line_start":715,"line_end":715,"column_start":30,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":47859,"byte_end":47871,"line_start":92,"line_end":92,"column_start":21,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\writing.rs","byte_start":53826,"byte_end":53838,"line_start":284,"line_end":284,"column_start":31,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ogg-0.7.0\\src\\lib.rs","byte_start":2169,"byte_end":2175,"line_start":68,"line_end":68,"column_start":6,"column_end":12},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}}]}