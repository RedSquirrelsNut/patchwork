{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"rand_os\"","--cfg","feature=\"std\"","-C","metadata=28581bae796721ea","-C","extra-filename=-28581bae796721ea","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","rand_chacha=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_chacha-579ff2fed45b3f45.rmeta","--extern","rand_core=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_core-06a57dc5bb0d8681.rmeta","--extern","rand_hc=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_hc-b222e1f041f2e574.rmeta","--extern","rand_isaac=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_isaac-4dc558820479016f.rmeta","--extern","rand_jitter=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_jitter-b62f77c4042fa9c3.rmeta","--extern","rand_os=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_os-478acd954324cc1a.rmeta","--extern","rand_pcg=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_pcg-b790e08cbf01863d.rmeta","--extern","rand_xorshift=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_xorshift-7b759f18bd97d034.rmeta","--extern","winapi=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libwinapi-978bfab176c482d4.rmeta","--cap-lints","allow","--cfg","rustc_1_25","--cfg","rustc_1_26","--cfg","rustc_1_27","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand-28581bae796721ea.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[9579956090989077561,6016763311634218399]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":14,"id":{"name":"rand_jitter","disambiguator":[4145674164928602445,12080024616770491715]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[6148462046942665598,5228056350340481722]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":16,"id":{"name":"winapi","disambiguator":[5636639422687459420,15773350436437932257]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":17,"id":{"name":"rand_os","disambiguator":[1691320983053905964,6841747347442227322]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":18,"id":{"name":"rand_isaac","disambiguator":[10987227229343033978,15292630220743628822]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":19,"id":{"name":"rand_core","disambiguator":[13259434164603681883,13108105096199166138]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":20,"id":{"name":"rand_chacha","disambiguator":[6423863964024767013,15153009560095560849]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":21,"id":{"name":"rand_hc","disambiguator":[525673919022150445,12109758691319754134]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":22,"id":{"name":"rand_pcg","disambiguator":[16317637656073445515,2097876810658516840]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","num":23,"id":{"name":"rand_xorshift","disambiguator":[9102452492388754499,9181983382554261667]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":408,"byte_end":25968,"line_start":10,"line_end":830,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3058,"byte_end":3065,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3067,"byte_end":3076,"line_start":86,"line_end":86,"column_start":30,"column_end":39},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3078,"byte_end":3089,"line_start":86,"line_end":86,"column_start":41,"column_end":52},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3112,"byte_end":3121,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3123,"byte_end":3128,"line_start":87,"line_end":87,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3194,"byte_end":3204,"line_start":90,"line_end":90,"column_start":45,"column_end":55},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33210,"byte_end":33222,"line_start":180,"line_end":180,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33262,"byte_end":33269,"line_start":181,"line_end":181,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33293,"byte_end":33305,"line_start":182,"line_end":182,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1629},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33307,"byte_end":33313,"line_start":182,"line_end":182,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33341,"byte_end":33350,"line_start":183,"line_end":183,"column_start":26,"column_end":35},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33401,"byte_end":33414,"line_start":184,"line_end":184,"column_start":50,"column_end":63},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33416,"byte_end":33429,"line_start":184,"line_end":184,"column_start":65,"column_end":78},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33481,"byte_end":33498,"line_start":185,"line_end":185,"column_start":50,"column_end":67},"alias_span":null,"name":"UnitSphereSurface","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33549,"byte_end":33559,"line_start":186,"line_end":186,"column_start":50,"column_end":60},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33605,"byte_end":33610,"line_start":187,"line_end":187,"column_start":45,"column_end":50},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1485},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33612,"byte_end":33622,"line_start":187,"line_end":187,"column_start":52,"column_end":62},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33624,"byte_end":33631,"line_start":187,"line_end":187,"column_start":64,"column_end":71},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1512},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33637,"byte_end":33645,"line_start":188,"line_end":188,"column_start":5,"column_end":13},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33647,"byte_end":33651,"line_start":188,"line_end":188,"column_start":15,"column_end":19},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33699,"byte_end":33705,"line_start":189,"line_end":189,"column_start":46,"column_end":52},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33707,"byte_end":33716,"line_start":189,"line_end":189,"column_start":54,"column_end":63},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33718,"byte_end":33732,"line_start":189,"line_end":189,"column_start":65,"column_end":79},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33785,"byte_end":33788,"line_start":190,"line_end":190,"column_start":51,"column_end":54},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33790,"byte_end":33794,"line_start":190,"line_end":190,"column_start":56,"column_end":60},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33841,"byte_end":33847,"line_start":191,"line_end":191,"column_start":45,"column_end":51},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33894,"byte_end":33901,"line_start":192,"line_end":192,"column_start":46,"column_end":53},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1583},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":33949,"byte_end":33957,"line_start":193,"line_end":193,"column_start":47,"column_end":55},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34003,"byte_end":34009,"line_start":194,"line_end":194,"column_start":45,"column_end":51},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34058,"byte_end":34067,"line_start":195,"line_end":195,"column_start":48,"column_end":57},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1605},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34117,"byte_end":34127,"line_start":196,"line_end":196,"column_start":49,"column_end":59},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34174,"byte_end":34181,"line_start":197,"line_end":197,"column_start":46,"column_end":53},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":230979,"byte_end":230991,"line_start":22,"line_end":22,"column_start":42,"column_end":54},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231026,"byte_end":231034,"line_start":23,"line_end":23,"column_start":34,"column_end":42},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231036,"byte_end":231042,"line_start":23,"line_end":23,"column_start":44,"column_end":50},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231099,"byte_end":231108,"line_start":24,"line_end":24,"column_start":55,"column_end":64},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231137,"byte_end":231140,"line_start":25,"line_end":25,"column_start":28,"column_end":31},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":15,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231142,"byte_end":231149,"line_start":25,"line_end":25,"column_start":33,"column_end":40},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":15,"index":128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231151,"byte_end":231160,"line_start":25,"line_end":25,"column_start":42,"column_end":51},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":15,"index":129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231162,"byte_end":231173,"line_start":25,"line_end":25,"column_start":53,"column_end":64},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":1106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231225,"byte_end":231236,"line_start":26,"line_end":26,"column_start":50,"column_end":61},"alias_span":null,"name":"FromEntropy","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231238,"byte_end":231244,"line_start":26,"line_end":26,"column_start":63,"column_end":69},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231246,"byte_end":231256,"line_start":26,"line_end":26,"column_start":71,"column_end":81},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231291,"byte_end":231302,"line_start":27,"line_end":27,"column_start":33,"column_end":44},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":231304,"byte_end":231318,"line_start":27,"line_end":27,"column_start":46,"column_end":60},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":515}},{"kind":"Use","ref_id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232009,"byte_end":232020,"line_start":19,"line_end":19,"column_start":21,"column_end":32},"alias_span":null,"name":"XorShiftRng","value":"","parent":{"krate":0,"index":533}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232162,"byte_end":232170,"line_start":22,"line_end":22,"column_start":46,"column_end":54},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":535}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232252,"byte_end":232262,"line_start":25,"line_end":25,"column_start":46,"column_end":56},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":537}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232323,"byte_end":232331,"line_start":27,"line_end":27,"column_start":58,"column_end":66},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":533}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232333,"byte_end":232343,"line_start":27,"line_end":27,"column_start":68,"column_end":78},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":533}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232488,"byte_end":232497,"line_start":30,"line_end":30,"column_start":46,"column_end":55},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":542}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232557,"byte_end":232566,"line_start":32,"line_end":32,"column_start":57,"column_end":66},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":533}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232708,"byte_end":232716,"line_start":35,"line_end":35,"column_start":46,"column_end":54},"alias_span":null,"name":"Hc128Rng","value":"","parent":{"krate":0,"index":545}},{"kind":"Use","ref_id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232776,"byte_end":232784,"line_start":37,"line_end":37,"column_start":57,"column_end":65},"alias_span":null,"name":"Hc128Rng","value":"","parent":{"krate":0,"index":533}},{"kind":"Use","ref_id":{"krate":0,"index":2095},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":240392,"byte_end":240399,"line_start":14,"line_end":14,"column_start":43,"column_end":50},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":549}},{"kind":"Use","ref_id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":240426,"byte_end":240438,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":549}},{"kind":"Use","ref_id":{"krate":14,"index":46},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239642,"byte_end":239651,"line_start":159,"line_end":159,"column_start":23,"column_end":32},"alias_span":null,"name":"JitterRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":14,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239653,"byte_end":239663,"line_start":159,"line_end":159,"column_start":34,"column_end":44},"alias_span":null,"name":"TimerError","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239711,"byte_end":239721,"line_start":160,"line_end":160,"column_start":46,"column_end":56},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239745,"byte_end":239753,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239774,"byte_end":239780,"line_start":163,"line_end":163,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239826,"byte_end":239835,"line_start":164,"line_end":164,"column_start":45,"column_end":54},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":17,"index":40},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239881,"byte_end":239886,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3588,"byte_end":3600,"line_start":106,"line_end":106,"column_start":36,"column_end":48},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3681,"byte_end":3691,"line_start":109,"line_end":109,"column_start":58,"column_end":68},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3776,"byte_end":3781,"line_start":114,"line_end":114,"column_start":21,"column_end":26},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3841,"byte_end":3850,"line_start":117,"line_end":117,"column_start":37,"column_end":46},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3852,"byte_end":3860,"line_start":117,"line_end":117,"column_start":48,"column_end":56},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3862,"byte_end":3872,"line_start":117,"line_end":117,"column_start":58,"column_end":68},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3874,"byte_end":3885,"line_start":117,"line_end":117,"column_start":70,"column_end":81},"alias_span":null,"name":"XorShiftRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3944,"byte_end":3950,"line_start":119,"line_end":119,"column_start":36,"column_end":42},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4031,"byte_end":4040,"line_start":125,"line_end":125,"column_start":25,"column_end":34},"alias_span":null,"name":"JitterRng","value":"","parent":{"krate":0,"index":1041}},{"kind":"Use","ref_id":{"krate":14,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4060,"byte_end":4070,"line_start":126,"line_end":126,"column_start":19,"column_end":29},"alias_span":null,"name":"TimerError","value":"","parent":{"krate":0,"index":1041}},{"kind":"Use","ref_id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4173,"byte_end":4178,"line_start":132,"line_end":132,"column_start":25,"column_end":30},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":1044}},{"kind":"Use","ref_id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4259,"byte_end":4268,"line_start":137,"line_end":137,"column_start":25,"column_end":34},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":1046}},{"kind":"Use","ref_id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4349,"byte_end":4357,"line_start":142,"line_end":142,"column_start":26,"column_end":34},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4359,"byte_end":4369,"line_start":142,"line_end":142,"column_start":36,"column_end":46},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4471,"byte_end":4478,"line_start":148,"line_end":148,"column_start":25,"column_end":32},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":1052}},{"kind":"Use","ref_id":{"krate":0,"index":2298},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4561,"byte_end":4570,"line_start":152,"line_end":152,"column_start":58,"column_end":67},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":408,"byte_end":25968,"line_start":10,"line_end":830,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":515},{"krate":0,"index":533},{"krate":0,"index":548},{"krate":0,"index":734},{"krate":0,"index":889},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1065},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":2325},{"krate":0,"index":2328},{"krate":0,"index":2331},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2349},{"krate":0,"index":2352},{"krate":0,"index":2355},{"krate":0,"index":1105},{"krate":0,"index":2518},{"krate":0,"index":2513},{"krate":0,"index":2508},{"krate":0,"index":2503},{"krate":0,"index":2498},{"krate":0,"index":2493},{"krate":0,"index":2488},{"krate":0,"index":2483},{"krate":0,"index":2478},{"krate":0,"index":2473},{"krate":0,"index":2468},{"krate":0,"index":2463},{"krate":0,"index":2458},{"krate":0,"index":2453},{"krate":0,"index":2448},{"krate":0,"index":2443},{"krate":0,"index":2438},{"krate":0,"index":2433},{"krate":0,"index":2428},{"krate":0,"index":2423},{"krate":0,"index":2418},{"krate":0,"index":2413},{"krate":0,"index":2408},{"krate":0,"index":2403},{"krate":0,"index":2398},{"krate":0,"index":2393},{"krate":0,"index":2388},{"krate":0,"index":2383},{"krate":0,"index":2378},{"krate":0,"index":2373},{"krate":0,"index":2368},{"krate":0,"index":2363},{"krate":0,"index":2358},{"krate":0,"index":2553},{"krate":0,"index":2548},{"krate":0,"index":2543},{"krate":0,"index":2538},{"krate":0,"index":2533},{"krate":0,"index":2528},{"krate":0,"index":2523},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1112}],"decl_id":null,"docs":" Utilities for random number generation\n\n Rand provides utilities to generate random numbers, to convert them to\n useful types and distributions, and some randomness-related algorithms.\n\n # Quick Start\n\n To get you started quickly, the easiest and highest-level way to get\n a random value is to use [`random()`]; alternatively you can use\n [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while\n the [`distributions`] and [`seq`] modules provide further\n functionality on top of RNGs.\n\n ```\n use rand::prelude::*;\n\n if rand::random() { // generates a boolean\n     // Try printing a random unicode code point (probably a bad idea)!\n     println!(\"char: {}\", rand::random::<char>());\n }\n\n let mut rng = rand::thread_rng();\n let y: f64 = rng.gen(); // generates a float between 0 and 1\n\n let mut nums: Vec<i32> = (1..100).collect();\n nums.shuffle(&mut rng);\n ```\n\n # The Book\n\n For the user guide and futher documentation, please read\n [The Rust Rand Book](https://rust-random.github.io/book).\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1734,"byte_end":1756,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":1757,"byte_end":1796,"line_start":49,"line_end":49,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":128},{"krate":0,"index":139},{"krate":0,"index":166},{"krate":0,"index":178},{"krate":0,"index":190},{"krate":0,"index":234},{"krate":0,"index":257},{"krate":0,"index":275},{"krate":0,"index":285},{"krate":0,"index":296},{"krate":0,"index":308},{"krate":0,"index":317},{"krate":0,"index":328},{"krate":0,"index":338},{"krate":0,"index":348},{"krate":0,"index":359},{"krate":0,"index":384},{"krate":0,"index":418},{"krate":0,"index":467},{"krate":0,"index":480},{"krate":0,"index":487},{"krate":0,"index":2053},{"krate":0,"index":2061},{"krate":0,"index":493},{"krate":0,"index":501},{"krate":0,"index":2067},{"krate":0,"index":2072},{"krate":0,"index":2071},{"krate":0,"index":2069},{"krate":0,"index":2074},{"krate":0,"index":2084},{"krate":0,"index":2081},{"krate":0,"index":2078},{"krate":0,"index":2086},{"krate":0,"index":2091},{"krate":0,"index":506},{"krate":0,"index":510}],"decl_id":null,"docs":" Generating random samples from probability distributions.\n\n This module is the home of the [`Distribution`] trait and several of its\n implementations. It is the workhorse behind some of the convenient\n functionality of the [`Rng`] trait, including [`gen`], [`gen_range`] and\n of course [`sample`].\n\n Abstractly, a [probability distribution] describes the probability of\n occurance of each value in its sample space.\n\n More concretely, an implementation of `Distribution<T>` for type `X` is an\n algorithm for choosing values from the sample space (a subset of `T`)\n according to the distribution `X` represents, using an external source of\n randomness (an RNG supplied to the `sample` function).\n\n A type `X` may implement `Distribution<T>` for multiple types `T`.\n Any type implementing [`Distribution`] is stateless (i.e. immutable),\n but it may have internal parameters set at construction time (for example,\n [`Uniform`] allows specification of its sample space as a range within `T`).\n\n\n # The `Standard` distribution\n\n The [`Standard`] distribution is important to mention. This is the\n distribution used by [`Rng::gen()`] and represents the \"default\" way to\n produce a random value for many different types, including most primitive\n types, tuples, arrays, and a few derived types. See the documentation of\n [`Standard`] for more details.\n\n Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it\n possible to generate type `T` with [`Rng::gen()`], and by extension also\n with the [`random()`] function.\n\n\n # Distribution to sample from a `Uniform` range\n\n The [`Uniform`] distribution is more flexible than [`Standard`], but also\n more specialised: it supports fewer target types, but allows the sample\n space to be specified as an arbitrary range within its target type `T`.\n Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.\n\n Values may be sampled from this distribution using [`Rng::gen_range`] or\n by creating a distribution object with [`Uniform::new`],\n [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not\n known at compile time it is typically faster to reuse an existing\n distribution object than to call [`Rng::gen_range`].\n\n User types `T` may also implement `Distribution<T>` for [`Uniform`],\n although this is less straightforward than for [`Standard`] (see the\n documentation in the [`uniform`] module. Doing so enables generation of\n values of type `T` with  [`Rng::gen_range`].\n\n\n # Other distributions\n\n There are surprisingly many ways to uniformly generate random floats. A\n range between 0 and 1 is standard, but the exact bounds (open vs closed)\n and accuracy differ. In addition to the [`Standard`] distribution Rand offers\n [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of\n [`Standard`] documentation for more details.\n\n [`Alphanumeric`] is a simple distribution to sample random letters and\n numbers of the `char` type; in contrast [`Standard`] may sample any valid\n `char`.\n\n [`WeightedIndex`] can be used to do weighted sampling from a set of items,\n such as from an array.\n\n # Non-uniform probability distributions\n\n Rand currently provides the following probability distributions:\n\n - Related to real-valued quantities that grow linearly\n   (e.g. errors, offsets):\n   - [`Normal`] distribution, and [`StandardNormal`] as a primitive\n   - [`Cauchy`] distribution\n - Related to Bernoulli trials (yes/no events, with a given probability):\n   - [`Binomial`] distribution\n   - [`Bernoulli`] distribution, similar to [`Rng::gen_bool`].\n - Related to positive real-valued quantities that grow exponentially\n   (e.g. prices, incomes, populations):\n   - [`LogNormal`] distribution\n - Related to the occurrence of independent events at a given rate:\n   - [`Pareto`] distribution\n   - [`Poisson`] distribution\n   - [`Exp`]onential distribution, and [`Exp1`] as a primitive\n   - [`Weibull`] distribution\n - Gamma and derived distributions:\n   - [`Gamma`] distribution\n   - [`ChiSquared`] distribution\n   - [`StudentT`] distribution\n   - [`FisherF`] distribution\n - Triangular distribution:\n   - [`Beta`] distribution\n   - [`Triangular`] distribution\n - Multivariate probability distributions\n   - [`Dirichlet`] distribution\n   - [`UnitSphereSurface`] distribution\n   - [`UnitCircle`] distribution\n\n # Examples\n\n Sampling from a distribution:\n\n ```\n use rand::{thread_rng, Rng};\n use rand::distributions::Exp;\n\n let exp = Exp::new(2.0);\n let v = thread_rng().sample(exp);\n println!(\"{} is from an Exp(2) distribution\", v);\n ```\n\n Implementing the [`Standard`] distribution for a user type:\n\n ```\n # #![allow(dead_code)]\n use rand::Rng;\n use rand::distributions::{Distribution, Standard};\n\n struct MyF32 {\n     x: f32,\n }\n\n impl Distribution<MyF32> for Standard {\n     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {\n         MyF32 { x: rng.gen() }\n     }\n }\n ```\n\n\n [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution\n [`gen_range`]: Rng::gen_range\n [`gen`]: Rng::gen\n [`sample`]: Rng::sample\n [`new_inclusive`]: Uniform::new_inclusive\n [`Alphanumeric`]: distributions::Alphanumeric\n [`Bernoulli`]: distributions::Bernoulli\n [`Beta`]: distributions::Beta\n [`Binomial`]: distributions::Binomial\n [`Cauchy`]: distributions::Cauchy\n [`ChiSquared`]: distributions::ChiSquared\n [`Dirichlet`]: distributions::Dirichlet\n [`Exp`]: distributions::Exp\n [`Exp1`]: distributions::Exp1\n [`FisherF`]: distributions::FisherF\n [`Gamma`]: distributions::Gamma\n [`LogNormal`]: distributions::LogNormal\n [`Normal`]: distributions::Normal\n [`Open01`]: distributions::Open01\n [`OpenClosed01`]: distributions::OpenClosed01\n [`Pareto`]: distributions::Pareto\n [`Poisson`]: distributions::Poisson\n [`Standard`]: distributions::Standard\n [`StandardNormal`]: distributions::StandardNormal\n [`StudentT`]: distributions::StudentT\n [`Triangular`]: distributions::Triangular\n [`Uniform`]: distributions::Uniform\n [`Uniform::new`]: distributions::Uniform::new\n [`Uniform::new_inclusive`]: distributions::Uniform::new_inclusive\n [`UnitSphereSurface`]: distributions::UnitSphereSurface\n [`UnitCircle`]: distributions::UnitCircle\n [`Weibull`]: distributions::Weibull\n [`WeightedIndex`]: distributions::WeightedIndex\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":1114},{"krate":0,"index":1122},{"krate":0,"index":1120},{"krate":0,"index":1117},{"krate":0,"index":69},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":1125},{"krate":0,"index":1135},{"krate":0,"index":1133},{"krate":0,"index":1130},{"krate":0,"index":113},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1330},{"krate":0,"index":1339},{"krate":0,"index":1337},{"krate":0,"index":1334},{"krate":0,"index":114},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1374},{"krate":0,"index":1380},{"krate":0,"index":1379},{"krate":0,"index":1377},{"krate":0,"index":1382},{"krate":0,"index":1395},{"krate":0,"index":1394},{"krate":0,"index":1392},{"krate":0,"index":115},{"krate":0,"index":117}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.\n\n [`Uniform`] is the standard distribution to sample uniformly from a range;\n e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a\n standard die. [`Rng::gen_range`] supports any type supported by\n [`Uniform`].\n\n This distribution is provided with support for several primitive types\n (all integer and floating-point types) as well as [`std::time::Duration`],\n and supports extension to user-defined types via a type-specific *back-end*\n implementation.\n\n The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the\n back-ends supporting sampling from primitive integer and floating-point\n ranges as well as from [`std::time::Duration`]; these types do not normally\n need to be used directly (unless implementing a derived back-end).\n\n # Example usage\n\n ```\n use rand::{Rng, thread_rng};\n use rand::distributions::Uniform;\n\n let mut rng = thread_rng();\n let side = Uniform::new(-10.0, 10.0);\n\n // sample between 1 and 10 points\n for _ in 0..rng.gen_range(1, 11) {\n     // sample a point from the square with sides -10 - 10 in two dimensions\n     let (x, y) = (rng.sample(side), rng.sample(side));\n     println!(\"Point: {}, {}\", x, y);\n }\n ```\n\n # Extending `Uniform` to support a custom type\n\n To extend [`Uniform`] to support your own types, write a back-end which\n implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]\n helper trait to \"register\" your back-end. See the `MyF32` example below.\n\n At a minimum, the back-end needs to store any parameters needed for sampling\n (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.\n Those methods should include an assert to check the range is valid (i.e.\n `low < high`). The example below merely wraps another back-end.\n\n The `new`, `new_inclusive` and `sample_single` functions use arguments of\n type SampleBorrow<X> in order to support passing in values by reference or\n by value. In the implementation of these functions, you can choose to\n simply use the reference returned by [`SampleBorrow::borrow`], or you can choose\n to copy or clone the value, whatever is appropriate for your type.\n\n ```\n use rand::prelude::*;\n use rand::distributions::uniform::{Uniform, SampleUniform,\n         UniformSampler, UniformFloat, SampleBorrow};\n\n struct MyF32(f32);\n\n #[derive(Clone, Copy, Debug)]\n struct UniformMyF32 {\n     inner: UniformFloat<f32>,\n }\n\n impl UniformSampler for UniformMyF32 {\n     type X = MyF32;\n     fn new<B1, B2>(low: B1, high: B2) -> Self\n         where B1: SampleBorrow<Self::X> + Sized,\n               B2: SampleBorrow<Self::X> + Sized\n     {\n         UniformMyF32 {\n             inner: UniformFloat::<f32>::new(low.borrow().0, high.borrow().0),\n         }\n     }\n     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self\n         where B1: SampleBorrow<Self::X> + Sized,\n               B2: SampleBorrow<Self::X> + Sized\n     {\n         UniformSampler::new(low, high)\n     }\n     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {\n         MyF32(self.inner.sample(rng))\n     }\n }\n\n impl SampleUniform for MyF32 {\n     type Sampler = UniformMyF32;\n }\n\n let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));\n let uniform = Uniform::new(low, high);\n let x = uniform.sample(&mut thread_rng());\n ```\n\n [`SampleUniform`]: crate::distributions::uniform::SampleUniform\n [`UniformSampler`]: crate::distributions::uniform::UniformSampler\n [`UniformInt`]: crate::distributions::uniform::UniformInt\n [`UniformFloat`]: crate::distributions::uniform::UniformFloat\n [`UniformDuration`]: crate::distributions::uniform::UniformDuration\n [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55432,"byte_end":55439,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"Uniform {  }","parent":null,"children":[{"krate":0,"index":1116}],"decl_id":null,"docs":" Sample values uniformly between two bounds.\n\n [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform\n distribution sampling from the given range; these functions may do extra\n work up front to make sampling of multiple values faster.\n\n When sampling from a constant range, many calculations can happen at\n compile-time and all methods should be fast; for floating-point ranges and\n the full range of integer types this should have comparable performance to\n the `Standard` distribution.\n\n Steps are taken to avoid bias which might be present in naive\n implementations; for example `rng.gen::<u8>() % 170` samples from the range\n `[0, 169]` but is twice as likely to select numbers less than 85 than other\n values. Further, the implementations here give more weight to the high-bits\n generated by the RNG than the low bits, since with some RNGs the low-bits\n are of lower quality than the high bits.\n\n Implementations must sample in `[low, high)` range for\n `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must\n be taken to ensure that rounding never results values `< low` or `>= high`.\n\n # Example\n\n ```\n use rand::distributions::{Distribution, Uniform};\n\n fn main() {\n     let between = Uniform::from(10..10000);\n     let mut rng = rand::thread_rng();\n     let mut sum = 0;\n     for _ in 0..1000 {\n         sum += between.sample(&mut rng);\n     }\n     println!(\"{}\", sum);\n }\n ```\n\n [`new`]: Uniform::new\n [`new_inclusive`]: Uniform::new_inclusive\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55689,"byte_end":55692,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56042,"byte_end":56055,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56716,"byte_end":56729,"line_start":206,"line_end":206,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":82}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.\n\n See the [module documentation] on how to implement [`Uniform`] range\n sampling for a custom type.\n\n [module documentation]: crate::distributions::uniform\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56813,"byte_end":56820,"line_start":208,"line_end":208,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57295,"byte_end":57309,"line_start":221,"line_end":221,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.\n\n See the [module documentation] on how to implement [`Uniform`] range\n sampling for a custom type.\n\n Implementation of [`sample_single`] is optional, and is only useful when\n the implementation can be faster than `Self::new(low, high).sample(rng)`.\n\n [module documentation]: crate::distributions::uniform\n [`sample_single`]: UniformSampler::sample_single\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57377,"byte_end":57378,"line_start":223,"line_end":223,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57641,"byte_end":57644,"line_start":230,"line_end":230,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.\n\n Usually users should not call this directly but instead use\n `Uniform::new`, which asserts that `low < high` before calling this.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58019,"byte_end":58032,"line_start":239,"line_end":239,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.\n\n Usually users should not call this directly but instead use\n `Uniform::new_inclusive`, which asserts that `low <= high` before\n calling this.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58198,"byte_end":58204,"line_start":244,"line_end":244,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":58816,"byte_end":58829,"line_start":257,"line_end":257,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.\n\n Usually users should not call this directly but instead use\n `Uniform::sample_single`, which asserts that `low < high` before calling\n this.\n\n Via this method, implementations can provide a method optimized for\n sampling only a single value from the specified range. The default\n implementation simply calls `UniformSampler::new` then `sample` on the\n result.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59699,"byte_end":59711,"line_start":285,"line_end":285,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":105}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.\n\n [`Borrow`]: std::borrow::Borrow\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59865,"byte_end":59871,"line_start":289,"line_end":289,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]\n\n [`Borrow::borrow`]: std::borrow::Borrow::borrow\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":62425,"byte_end":62435,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.\n\n Unless you are implementing [`UniformSampler`] for your own type, this type\n should not be used directly, use [`Uniform`] instead.\n\n # Implementation notes\n\n For a closed range, the number of possible numbers we should generate is\n `range = (high - low + 1)`. It is not possible to end up with a uniform\n distribution if we map *all* the random integers that can be generated to\n this range. We have to map integers from a `zone` that is a multiple of the\n range. The rest of the integers, that cause a bias, are rejected.\n\n The problem with `range` is that to cover the full range of the type, it has\n to store `unsigned_max + 1`, which can't be represented. But if the range\n covers the full range of the type, no modulus is needed. A range of size 0\n can't exist, so we use that to represent this special case. Wrapping\n arithmetic even makes representing `unsigned_max + 1` as 0 simple.\n\n We don't calculate `zone` directly, but first calculate the number of\n integers to reject. To handle `unsigned_max + 1` not fitting in the type,\n we use:\n `ints_to_reject = (unsigned_max + 1) % range;`\n `ints_to_reject = (unsigned_max - range + 1) % range;`\n\n The smallest integer PRNGs generate is `u32`. That is why for small integer\n sizes (`i8`/`u8` and `i16`/`u16`) there is an optimization: don't pick the\n largest zone that can fit in the small type, but pick the largest zone that\n can fit in an `u32`. `ints_to_reject` is always less than half the size of\n the small integer. This means the first bit of `zone` is always 1, and so\n are all the other preceding bits of a larger integer. The easiest way to\n grow the `zone` for the larger type is to simply sign extend it.\n\n An alternative to using a modulus is widening multiply: After a widening\n multiply by `range`, the result is in the high word. Then comparing the low\n word against `zone` makes sure our distribution is uniform.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":74801,"byte_end":74813,"line_start":643,"line_end":643,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1333}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.\n\n Unless you are implementing [`UniformSampler`] for your own type, this type\n should not be used directly, use [`Uniform`] instead.\n\n # Implementation notes\n\n Instead of generating a float in the `[0, 1)` range using [`Standard`], the\n `UniformFloat` implementation converts the output of an PRNG itself. This\n way one or two steps can be optimized out.\n\n The floats are first converted to a value in the `[1, 2)` interval using a\n transmute-based method, and then mapped to the expected range with a\n multiply and addition. Values produced this way have what equals 22 bits of\n random digits for an `f32`, and 52 for an `f64`.\n\n [`new`]: UniformSampler::new\n [`new_inclusive`]: UniformSampler::new_inclusive\n [`Standard`]: crate::distributions::Standard\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1374},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82802,"byte_end":82817,"line_start":826,"line_end":826,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.\n\n Unless you are implementing [`UniformSampler`] for your own types, this type\n should not be used directly, use [`Uniform`] instead.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", rustc_1_25))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":82720,"byte_end":82760,"line_start":824,"line_end":824,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1397},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":100931,"byte_end":100940,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1398}],"decl_id":null,"docs":" The Bernoulli distribution.\n\n This is a special case of the Binomial distribution where `n = 1`.\n\n # Example\n\n ```rust\n use rand::distributions::{Bernoulli, Distribution};\n\n let d = Bernoulli::new(0.3);\n let v = d.sample(&mut rand::thread_rng());\n println!(\"{} is from a Bernoulli distribution\", v);\n ```\n\n # Precision\n\n This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),\n so only probabilities that are multiples of 2<sup>-64</sup> can be\n represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102867,"byte_end":102870,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Bernoulli","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.\n\n # Panics\n\n If `p < 0` or `p > 1`.\n\n # Precision\n\n For `p = 1.0`, the resulting distribution will always generate true.\n For `p = 0.0`, the resulting distribution will always generate false.\n\n This method is accurate for any input `p` in the range `[0, 1]` which is\n a multiple of 2<sup>-64</sup>. (Note that not all multiples of\n 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102846,"byte_end":102855,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103641,"byte_end":103651,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Bernoulli","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.\n\n If `numerator == denominator` then the returned `Bernoulli` will always\n return `true`. If `numerator == 0` it will always return `false`.\n\n # Panics\n\n If `denominator == 0` or `numerator > denominator`.\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103620,"byte_end":103629,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":108586,"byte_end":108599,"line_start":73,"line_end":73,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected\n item.\n\n Sampling a `WeightedIndex` distribution returns the index of a randomly\n selected element from the iterator used when the `WeightedIndex` was\n created. The chance of a given element being picked is proportional to the\n value of the element. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.\n\n # Performance\n\n A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its\n size is the sum of the size of those objects, possibly plus some alignment.\n\n Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`\n weights of type `X`, where `N` is the number of weights. However, since\n `Vec` doesn't guarantee a particular growth strategy, additional memory\n might be allocated but not used. Since the `WeightedIndex` object also\n contains, this might cause additional allocations, though for primitive\n types, ['Uniform<X>`] doesn't allocate any memory.\n\n Time complexity of sampling from `WeightedIndex` is `O(log N)` where\n `N` is the number of weights.\n\n Sampling from `WeightedIndex` will result in a single call to\n `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically\n will request a single value from the underlying [`RngCore`], though the\n exact number depends on the implementaiton of `Uniform<X>::sample`.\n\n # Example\n\n ```\n use rand::prelude::*;\n use rand::distributions::WeightedIndex;\n\n let choices = ['a', 'b', 'c'];\n let weights = [2,   1,   1];\n let dist = WeightedIndex::new(&weights).unwrap();\n let mut rng = thread_rng();\n for _ in 0..100 {\n     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'\n     println!(\"{}\", choices[dist.sample(&mut rng)]);\n }\n\n let items = [('a', 0), ('b', 3), ('c', 7)];\n let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();\n for _ in 0..100 {\n     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'\n     println!(\"{}\", items[dist2.sample(&mut rng)].0);\n }\n ```\n\n [`Uniform<X>`]: crate::distributions::uniform::Uniform\n [`RngCore`]: rand_core::RngCore\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":109152,"byte_end":109155,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.\n\n Returns an error if the iterator is empty, if any weight is `< 0`, or\n if its total value is 0.\n\n [`Uniform<X>`]: crate::distributions::uniform::Uniform\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113193,"byte_end":113199,"line_start":197,"line_end":197,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" The provided iterator contained no items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113249,"byte_end":113263,"line_start":200,"line_end":200,"column_start":5,"column_end":19},"name":"NegativeWeight","qualname":"::distributions::weighted::WeightedError::NegativeWeight","value":"WeightedError::NegativeWeight","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" A weight lower than zero was used.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113335,"byte_end":113349,"line_start":203,"line_end":203,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" All items in the provided iterator had a weight of zero.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113123,"byte_end":113136,"line_start":195,"line_end":195,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted::WeightedError","value":"WeightedError::{NoItem, NegativeWeight, AllWeightsZero}","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1419}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115028,"byte_end":115045,"line_start":31,"line_end":31,"column_start":12,"column_end":29},"name":"UnitSphereSurface","qualname":"::distributions::unit_sphere::UnitSphereSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.\n\n Implemented via a method by Marsaglia[^1].\n\n\n # Example\n\n ```\n use rand::distributions::{UnitSphereSurface, Distribution};\n\n let sphere = UnitSphereSurface::new();\n let v = sphere.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit sphere surface.\", v)\n ```\n\n [^1]: Marsaglia, George (1972). [*Choosing a Point from the Surface of a\n       Sphere.*](https://doi.org/10.1214/aoms/1177692644)\n       Ann. Math. Statist. 43, no. 2, 645--646.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115156,"byte_end":115159,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitSphereSurface>::new","value":"fn () -> UnitSphereSurface","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitSphereSurface` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115135,"byte_end":115144,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118258,"byte_end":118268,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::distributions::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.\n\n Implemented via a method by von Neumann[^1].\n\n\n # Example\n\n ```\n use rand::distributions::{UnitCircle, Distribution};\n\n let circle = UnitCircle::new();\n let v = circle.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit circle.\", v)\n ```\n\n [^1]: von Neumann, J. (1951) [*Various Techniques Used in Connection with\n       Random Digits.*](https://mcnp.lanl.gov/pdf_files/nbs_vonneumann.pdf)\n       NBS Appl. Math. Ser., No. 12. Washington, DC: U.S. Government Printing\n       Office, pp. 36-38.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118365,"byte_end":118368,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitCircle>::new","value":"fn () -> UnitCircle","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitCircle` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118344,"byte_end":118353,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":121921,"byte_end":121926,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":1447}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.\n\n The density function of this distribution is\n\n ```text\n f(x) =  x^(k - 1) * exp(-x / θ) / (Γ(k) * θ^k)\n ```\n\n where `Γ` is the Gamma function, `k` is the shape and `θ` is the\n scale and both `k` and `θ` are strictly positive.\n\n The algorithm used is that described by Marsaglia & Tsang 2000[^1],\n falling back to directly sampling from an Exponential for `shape\n == 1`, and using the boosting technique described in that paper for\n `shape < 1`.\n\n # Example\n\n ```\n use rand::distributions::{Distribution, Gamma};\n\n let gamma = Gamma::new(2.0, 5.0);\n let v = gamma.sample(&mut rand::thread_rng());\n println!(\"{} is from a Gamma(2, 5) distribution\", v);\n ```\n\n [^1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method for\n       Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3\n       (September 2000), 363-372.\n       DOI:[10.1145/358407.358414](https://doi.acm.org/10.1145/358407.358414)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123211,"byte_end":123214,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"fn (shape: f64, scale: f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.\n\n Panics if `shape <= 0` or `scale <= 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123190,"byte_end":123199,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1485},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":125832,"byte_end":125842,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":1486}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.\n\n For `k > 0` integral, this distribution is the sum of the squares\n of `k` independent standard normal random variables. For other\n `k`, this uses the equivalent characterisation\n `χ²(k) = Gamma(k/2, 2)`.\n\n # Example\n\n ```\n use rand::distributions::{ChiSquared, Distribution};\n\n let chi = ChiSquared::new(11.0);\n let v = chi.sample(&mut rand::thread_rng());\n println!(\"{} is from a χ²(11) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":126308,"byte_end":126311,"line_start":204,"line_end":204,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"fn (k: f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":127415,"byte_end":127422,"line_start":243,"line_end":243,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.\n\n This distribution is equivalent to the ratio of two normalised\n chi-squared distributions, that is, `F(m,n) = (χ²(m)/m) /\n (χ²(n)/n)`.\n\n # Example\n\n ```\n use rand::distributions::{FisherF, Distribution};\n\n let f = FisherF::new(2.0, 32.0);\n let v = f.sample(&mut rand::thread_rng());\n println!(\"{} is from an F(2, 32) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":127757,"byte_end":127760,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"fn (m: f64, n: f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1512},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128589,"byte_end":128597,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1514}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n\n # Example\n\n ```\n use rand::distributions::{StudentT, Distribution};\n\n let t = StudentT::new(11.0);\n let v = t.sample(&mut rand::thread_rng());\n println!(\"{} is from a t(11) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128765,"byte_end":128768,"line_start":292,"line_end":292,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"fn (n: f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129503,"byte_end":129507,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"name":"Beta","qualname":"::distributions::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":1521},{"krate":0,"index":1522}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n\n # Example\n\n ```\n use rand::distributions::{Distribution, Beta};\n\n let beta = Beta::new(2.0, 5.0);\n let v = beta.sample(&mut rand::thread_rng());\n println!(\"{} is from a Beta(2, 5) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129719,"byte_end":129722,"line_start":329,"line_end":329,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta>::new","value":"fn (alpha: f64, beta: f64) -> Beta","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.\n\n Panics if `shape <= 0` or `scale <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":132949,"byte_end":132963,"line_start":38,"line_end":38,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.\n\n See `Normal` for the general normal distribution.\n\n Implemented via the ZIGNOR variant[^1] of the Ziggurat method.\n\n [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n       Generate Normal Random Samples*](\n       https://www.doornik.com/research/ziggurat.pdf).\n       Nuffield College, Oxford\n\n # Example\n ```\n use rand::prelude::*;\n use rand::distributions::StandardNormal;\n\n let val: f64 = SmallRng::from_entropy().sample(StandardNormal);\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":134785,"byte_end":134791,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.\n\n This uses the ZIGNOR variant of the Ziggurat method, see [`StandardNormal`]\n for more details.\n \n Note that [`StandardNormal`] is an optimised implementation for mean 0, and\n standard deviation 1.\n\n # Example\n\n ```\n use rand::distributions::{Normal, Distribution};\n\n // mean 2, standard deviation 3\n let normal = Normal::new(2.0, 3.0);\n let v = normal.sample(&mut rand::thread_rng());\n println!(\"{} is from a N(2, 9) distribution\", v)\n ```\n\n [`StandardNormal`]: crate::distributions::StandardNormal\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135033,"byte_end":135036,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"fn (mean: f64, std_dev: f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.\n\n # Panics\n\n Panics if `std_dev < 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135012,"byte_end":135021,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135898,"byte_end":135907,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":1544}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.\n\n If `X` is log-normal distributed, then `ln(X)` is `N(mean, std_dev**2)`\n distributed.\n\n # Example\n\n ```\n use rand::distributions::{LogNormal, Distribution};\n\n // mean 2, standard deviation 3\n let log_normal = LogNormal::new(2.0, 3.0);\n let v = log_normal.sample(&mut rand::thread_rng());\n println!(\"{} is from an ln N(2, 9) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":136139,"byte_end":136142,"line_start":153,"line_end":153,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"fn (mean: f64, std_dev: f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.\n\n # Panics\n\n Panics if `std_dev < 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":136118,"byte_end":136127,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":138625,"byte_end":138629,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.\n\n See `Exp` for the general exponential distribution.\n\n Implemented via the ZIGNOR variant[^1] of the Ziggurat method. The exact\n description in the paper was adjusted to use tables for the exponential\n distribution rather than normal.\n\n [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n       Generate Normal Random Samples*](\n       https://www.doornik.com/research/ziggurat.pdf).\n       Nuffield College, Oxford\n\n # Example\n ```\n use rand::prelude::*;\n use rand::distributions::Exp1;\n\n let val: f64 = SmallRng::from_entropy().sample(Exp1);\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":139735,"byte_end":139738,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":1558}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.\n\n This distribution has density function: `f(x) = lambda * exp(-lambda * x)`\n for `x > 0`.\n \n Note that [`Exp1`][crate::distributions::Exp1] is an optimised implementation for `lambda = 1`.\n\n # Example\n\n ```\n use rand::distributions::{Exp, Distribution};\n\n let exp = Exp::new(2.0);\n let v = exp.sample(&mut rand::thread_rng());\n println!(\"{} is from a Exp(2) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":139979,"byte_end":139982,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"fn (lambda: f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":139958,"byte_end":139967,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1564},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":141545,"byte_end":141551,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::distributions::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n\n # Example\n ```\n use rand::prelude::*;\n use rand::distributions::Pareto;\n\n let val: f64 = SmallRng::from_entropy().sample(Pareto::new(1., 2.));\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":141922,"byte_end":141925,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto>::new","value":"fn (scale: f64, shape: f64) -> Pareto","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.\n\n In the literature, `scale` is commonly written as x<sub>m</sub> or k and\n `shape` is often written as α.\n\n # Panics\n\n `scale` and `shape` have to be non-zero and positive.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":143683,"byte_end":143690,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::distributions::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.\n\n This distribution has a density function:\n `f(k) = lambda^k * exp(-lambda) / k!` for `k >= 0`.\n\n # Example\n\n ```\n use rand::distributions::{Poisson, Distribution};\n\n let poi = Poisson::new(2.0);\n let v = poi.sample(&mut rand::thread_rng());\n println!(\"{} is from a Poisson(2) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":143960,"byte_end":143963,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson>::new","value":"fn (lambda: f64) -> Poisson","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1583},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":148833,"byte_end":148841,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::distributions::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.\n\n This distribution has density function:\n `f(k) = n!/(k! (n-k)!) p^k (1-p)^(n-k)` for `k >= 0`.\n\n # Example\n\n ```\n use rand::distributions::{Binomial, Distribution};\n\n let bin = Binomial::new(20, 0.3);\n let v = bin.sample(&mut rand::thread_rng());\n println!(\"{} is from a binomial distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":149134,"byte_end":149137,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Binomial","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).\n\n Panics if `p < 0` or `p > 1`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":154700,"byte_end":154706,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::distributions::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.\n\n This distribution has a density function:\n `f(x) = 1 / (pi * scale * (1 + ((x - median) / scale)^2))`\n\n # Example\n\n ```\n use rand::distributions::{Cauchy, Distribution};\n\n let cau = Cauchy::new(2.0, 5.0);\n let v = cau.sample(&mut rand::thread_rng());\n println!(\"{} is from a Cauchy(2, 5) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":154931,"byte_end":154934,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy>::new","value":"fn (median: f64, scale: f64) -> Cauchy","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n Panics if `scale <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158188,"byte_end":158197,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::distributions::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":1600}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.\n\n The Dirichlet distribution is a family of continuous multivariate\n probability distributions parameterized by a vector alpha of positive reals.\n It is a multivariate generalization of the beta distribution.\n\n # Example\n\n ```\n use rand::prelude::*;\n use rand::distributions::Dirichlet;\n\n let dirichlet = Dirichlet::new(vec![1.0, 2.0, 3.0]);\n let samples = dirichlet.sample(&mut rand::thread_rng());\n println!(\"{:?} is from a Dirichlet([1.0, 2.0, 3.0]) distribution\", samples);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158447,"byte_end":158450,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet>::new","value":"fn <V> (alpha: V) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.\n\n # Panics\n - if `alpha.len() < 2`\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158426,"byte_end":158435,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158864,"byte_end":158878,"line_start":63,"line_end":63,"column_start":12,"column_end":26},"name":"new_with_param","qualname":"<Dirichlet>::new_with_param","value":"fn (alpha: f64, size: usize) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.\n\n # Panics\n - if `alpha <= 0.0`\n - if `size < 2`\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158843,"byte_end":158852,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1605},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161430,"byte_end":161440,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::distributions::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608}],"decl_id":null,"docs":" The triangular distribution.\n\n # Example\n\n ```rust\n use rand::distributions::{Triangular, Distribution};\n\n let d = Triangular::new(0., 5., 2.5);\n let v = d.sample(&mut rand::thread_rng());\n println!(\"{} is from a triangular distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161724,"byte_end":161727,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular>::new","value":"fn (min: f64, max: f64, mode: f64) -> Triangular","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Triangular` with minimum `min`, maximum `max` and mode\n `mode`.\n\n # Panics\n\n If `max < mode`, `mode < max` or `max == min`.\n\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161703,"byte_end":161712,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":163792,"byte_end":163799,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::distributions::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1616}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n\n # Example\n ```\n use rand::prelude::*;\n use rand::distributions::Weibull;\n\n let val: f64 = SmallRng::from_entropy().sample(Weibull::new(1., 10.));\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":164041,"byte_end":164044,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull>::new","value":"fn (scale: f64, shape: f64) -> Weibull","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.\n\n # Panics\n\n `scale` and `shape` have to be non-zero and positive.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":166361,"byte_end":166373,"line_start":43,"line_end":43,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.\n\n All values that can be generated are of the form `n * ε/2`. For `f32`\n the 23 most significant random bits of a `u32` are used and for `f64` the\n 53 most significant bits of a `u64` are used. The conversion uses the\n multiplicative method.\n\n See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]\n which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary\n ranges.\n\n # Example\n ```\n use rand::{thread_rng, Rng};\n use rand::distributions::OpenClosed01;\n\n let val: f32 = thread_rng().sample(OpenClosed01);\n println!(\"f32 from (0, 1): {}\", val);\n ```\n\n [`Standard`]: crate::distributions::Standard\n [`Open01`]: crate::distributions::Open01\n [`Uniform`]: crate::distributions::uniform::Uniform\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1629},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":167304,"byte_end":167310,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.\n\n All values that can be generated are of the form `n * ε + ε/2`. For `f32`\n the 22 most significant random bits of an `u32` are used, for `f64` 52 from\n an `u64`. The conversion uses a transmute-based method.\n\n See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]\n which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary\n ranges.\n\n # Example\n ```\n use rand::{thread_rng, Rng};\n use rand::distributions::Open01;\n\n let val: f32 = thread_rng().sample(Open01);\n println!(\"f32 from (0, 1): {}\", val);\n ```\n\n [`Standard`]: crate::distributions::Standard\n [`OpenClosed01`]: crate::distributions::OpenClosed01\n [`Uniform`]: crate::distributions::uniform::Uniform\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\float.rs","byte_start":167352,"byte_end":167353,"line_start":73,"line_end":73,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":355},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1680},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":181519,"byte_end":181531,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.\n \n # Example\n\n ```\n use std::iter;\n use rand::{Rng, thread_rng};\n use rand::distributions::Alphanumeric;\n \n let mut rng = thread_rng();\n let chars: String = iter::repeat(())\n         .map(|()| rng.sample(Alphanumeric))\n         .take(7)\n         .collect();\n println!(\"Random chars: {}\", chars);\n ```\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":187987,"byte_end":187993,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":195317,"byte_end":195321,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":195836,"byte_end":195840,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":428},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":196030,"byte_end":196034,"line_start":252,"line_end":252,"column_start":10,"column_end":14},"name":"Bits","qualname":"::distributions::utils::Float::Bits","value":"type Bits;","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35434,"byte_end":35446,"line_start":233,"line_end":233,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":484}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.\n\n It is possible to sample from a distribution through both the\n `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and\n `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which\n produces an iterator that samples from the distribution.\n\n All implementations are expected to be immutable; this has the significant\n advantage of not needing to consider thread safety, and for most\n distributions efficient state-less sampling algorithms are available.\n\n [`sample_iter`]: Distribution::method.sample_iter\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":35540,"byte_end":35546,"line_start":235,"line_end":235,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":36395,"byte_end":36406,"line_start":261,"line_end":261,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <'a, R> (&'a self, rng: &'a mut R) -> DistIter<'a, Self, R, T>","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.\n\n # Example\n\n ```\n use rand::thread_rng;\n use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};\n\n let mut rng = thread_rng();\n\n // Vec of 16 x f32:\n let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();\n\n // String:\n let s: String = Alphanumeric.sample_iter(&mut rng).take(7).collect();\n\n // Dice-rolling:\n let die_range = Uniform::new_inclusive(1, 6);\n let mut roll_die = die_range.sample_iter(&mut rng);\n while roll_die.next().unwrap() != 6 {\n     println!(\"Not a 6; rolling again!\");\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2053},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37116,"byte_end":37124,"line_start":287,"line_end":287,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2060}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.\n\n This `struct` is created by the [`sample_iter`] method on [`Distribution`].\n See its documentation for more.\n\n [`sample_iter`]: Distribution::sample_iter\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2067},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40498,"byte_end":40506,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.\n\n ## Built-in Implementations\n\n Assuming the provided `Rng` is well-behaved, these implementations\n generate values with the following ranges and distributions:\n\n * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed\n   over all values of the type.\n * `char`: Uniformly distributed over all Unicode scalar values, i.e. all\n   code points in the range `0...0x10_FFFF`, except for the range\n   `0xD800...0xDFFF` (the surrogate code points). This includes\n   unassigned/reserved code points.\n * `bool`: Generates `false` or `true`, each with probability 0.5.\n * Floating point types (`f32` and `f64`): Uniformly distributed in the\n   half-open range `[0, 1)`. See notes below.\n * Wrapping integers (`Wrapping<T>`), besides the type identical to their\n   normal integer variants.\n\n The following aggregate types also implement the distribution `Standard` as\n long as their component types implement it:\n\n * Tuples and arrays: Each element of the tuple or array is generated\n   independently, using the `Standard` distribution recursively.\n * `Option<T>` where `Standard` is implemented for `T`: Returns `None` with\n   probability 0.5; otherwise generates a random `x: T` and returns `Some(x)`.\n\n # Example\n ```\n use rand::prelude::*;\n use rand::distributions::Standard;\n\n let val: f32 = SmallRng::from_entropy().sample(Standard);\n println!(\"f32 from [0, 1): {}\", val);\n ```\n\n # Floating point implementation\n The floating point implementations for `Standard` generate a random value in\n the half-open interval `[0, 1)`, i.e. including 0 but not 1.\n\n All values that can be generated are of the form `n * ε/2`. For `f32`\n the 23 most significant random bits of a `u32` are used and for `f64` the\n 53 most significant bits of a `u64` are used. The conversion uses the\n multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.\n\n See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which\n samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from\n `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use\n transmute-based methods which yield 1 bit less precision but may perform\n faster on some architectures (on modern Intel CPUs all methods have\n approximately equal performance).\n\n [`Uniform`]: uniform::Uniform\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40703,"byte_end":40711,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::distributions::Weighted","value":"Weighted { weight, item }","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077}],"decl_id":null,"docs":" A value with a particular weight for use with `WeightedChoice`.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"use WeightedIndex instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40578,"byte_end":40640,"line_start":377,"line_end":377,"column_start":1,"column_end":63}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40641,"byte_end":40661,"line_start":378,"line_end":378,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2076},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40767,"byte_end":40773,"line_start":382,"line_end":382,"column_start":9,"column_end":15},"name":"weight","qualname":"::distributions::Weighted::weight","value":"u32","parent":{"krate":0,"index":2074},"children":[],"decl_id":null,"docs":" The numerical weight of this item\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":40836,"byte_end":40840,"line_start":384,"line_end":384,"column_start":9,"column_end":13},"name":"item","qualname":"::distributions::Weighted::item","value":"T","parent":{"krate":0,"index":2074},"children":[],"decl_id":null,"docs":" The actual item which is being weighted\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2086},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41128,"byte_end":41142,"line_start":395,"line_end":395,"column_start":12,"column_end":26},"name":"WeightedChoice","qualname":"::distributions::WeightedChoice","value":"WeightedChoice {  }","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090}],"decl_id":null,"docs":" A distribution that selects from a finite collection of weighted items.\n\n Deprecated: use [`WeightedIndex`] instead.\n\n [`WeightedIndex`]: WeightedIndex\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"use WeightedIndex instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41016,"byte_end":41078,"line_start":392,"line_end":392,"column_start":1,"column_end":63}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41079,"byte_end":41099,"line_start":393,"line_end":393,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41558,"byte_end":41561,"line_start":410,"line_end":410,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedChoice>::new","value":"fn (items: &'a mut [Weighted<T>]) -> WeightedChoice<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WeightedChoice`.\n\n Panics if:\n\n - `items` is empty\n - the total weight is 0\n - the total weight is larger than a `u32` can contain.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":526},{"krate":0,"index":530}],"decl_id":null,"docs":" Convenience re-export of common members\n\n Like the standard library's prelude, this module simplifies importing of\n common items. Unlike the standard prelude, the contents of this module must\n be imported manually:\n\n ```\n use rand::prelude::*;\n # let _ = StdRng::from_entropy();\n # let mut r = SmallRng::from_rng(thread_rng()).unwrap();\n # let _: f32 = r.gen();\n ```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prng","qualname":"::prng","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":547}],"decl_id":null,"docs":" Pseudo-random number generators.\n\n This module is deprecated:\n \n -   documentation has moved to\n     [The Book](https://rust-random.github.io/book/guide-rngs.html),\n -   PRNGs have moved to other `rand_*` crates.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3265,"byte_end":3293,"line_start":95,"line_end":95,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232045,"byte_end":232050,"line_start":20,"line_end":20,"column_start":24,"column_end":29},"name":"isaac","qualname":"::prng::isaac","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":536}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232197,"byte_end":232204,"line_start":24,"line_end":24,"column_start":24,"column_end":31},"name":"isaac64","qualname":"::prng::isaac64","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":538}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232369,"byte_end":232375,"line_start":28,"line_end":28,"column_start":24,"column_end":30},"name":"chacha","qualname":"::prng::chacha","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":543}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","byte_start":232591,"byte_end":232596,"line_start":33,"line_end":33,"column_start":24,"column_end":29},"name":"hc128","qualname":"::prng::hc128","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\prng\\mod.rs","parent":null,"children":[{"krate":0,"index":546}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":625},{"krate":0,"index":659},{"krate":0,"index":671},{"krate":0,"index":687},{"krate":0,"index":705},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733}],"decl_id":null,"docs":" Random number generators and adapters for common usage:\n\n - [`ThreadRng`], a fast, secure, auto-seeded thread-local generator\n - [`StdRng`] and [`SmallRng`], algorithms to cover typical usage\n - [`EntropyRng`], [`OsRng`] and [`JitterRng`] as entropy sources\n - [`mock::StepRng`] as a simple counter for tests\n - [`adapter::ReadRng`] to read from a file/stream\n - [`adapter::ReseedingRng`] to reseed a PRNG on clone / process fork etc.\n\n # Background — Random number generators (RNGs)\n\n Computers are inherently deterministic, so to get *random* numbers one\n either has to use a hardware generator or collect bits of *entropy* from\n various sources (e.g. event timestamps, or jitter). This is a relatively\n slow and complicated operation.\n\n Generally the operating system will collect some entropy, remove bias, and\n use that to seed its own PRNG; [`OsRng`] provides an interface to this.\n [`JitterRng`] is an entropy collector included with Rand that measures\n jitter in the CPU execution time, and jitter in memory access time.\n [`EntropyRng`] is a wrapper that uses the best entropy source that is\n available.\n\n ## Pseudo-random number generators\n\n What is commonly used instead of \"true\" random number renerators, are\n *pseudo-random number generators* (PRNGs), deterministic algorithms that\n produce an infinite stream of pseudo-random numbers from a small random\n seed. PRNGs are faster, and have better provable properties. The numbers\n produced can be statistically of very high quality and can be impossible to\n predict. (They can also have obvious correlations and be trivial to predict;\n quality varies.)\n\n There are two different types of PRNGs: those developed for simulations\n and statistics, and those developed for use in cryptography; the latter are\n called Cryptographically Secure PRNGs (CSPRNG or CPRNG). Both types can\n have good statistical quality but the latter also have to be impossible to\n predict, even after seeing many previous output values. Rand provides a good\n default algorithm from each class:\n\n - [`SmallRng`] is a PRNG chosen for low memory usage, high performance and\n   good statistical quality.\n - [`StdRng`] is a CSPRNG chosen for good performance and trust of security\n   (based on reviews, maturity and usage). The current algorithm is HC-128,\n   which is one of the recommendations by ECRYPT's eSTREAM project.\n\n The above PRNGs do not cover all use-cases; more algorithms can be found in\n the [`prng`][crate::prng] module, as well as in several other crates. For example, you\n may wish a CSPRNG with significantly lower memory usage than [`StdRng`]\n while being less concerned about performance, in which case [`ChaChaRng`]\n is a good choice.\n\n One complexity is that the internal state of a PRNG must change with every\n generated number. For APIs this generally means a mutable reference to the\n state of the PRNG has to be passed around.\n\n A solution is [`ThreadRng`]. This is a thread-local implementation of\n [`StdRng`] with automatic seeding on first use. It is the best choice if you\n \"just\" want a convenient, secure, fast random number source. Use via the\n [`thread_rng`] function, which gets a reference to the current thread's\n local instance.\n\n ## Seeding\n\n As mentioned above, PRNGs require a random seed in order to produce random\n output. This is especially important for CSPRNGs, which are still\n deterministic algorithms, thus can only be secure if their seed value is\n also secure. To seed a PRNG, use one of:\n\n - [`FromEntropy::from_entropy`]; this is the most convenient way to seed\n   with fresh, secure random data.\n - [`SeedableRng::from_rng`]; this allows seeding from another PRNG or\n   from an entropy source such as [`EntropyRng`].\n - [`SeedableRng::from_seed`]; this is mostly useful if you wish to be able\n   to reproduce the output sequence by using a fixed seed. (Don't use\n   [`StdRng`] or [`SmallRng`] in this case since different algorithms may be\n   used by future versions of Rand; use an algorithm from the\n   [`prng`] module.)\n\n ## Conclusion\n\n - [`thread_rng`] is what you often want to use.\n - If you want more control, flexibility, or better performance, use\n   [`StdRng`], [`SmallRng`] or an algorithm from the [`prng`] module.\n - Use [`FromEntropy::from_entropy`] to seed new PRNGs.\n - If you need reproducibility, use [`SeedableRng::from_seed`] combined with\n   a named PRNG.\n\n More information and notes on cryptographic security can be found\n in the [`prng`] module.\n\n ## Examples\n\n Examples of seeding PRNGs:\n\n ```\n use rand::prelude::*;\n # use rand::Error;\n\n // StdRng seeded securely by the OS or local entropy collector:\n let mut rng = StdRng::from_entropy();\n # let v: u32 = rng.gen();\n\n // SmallRng seeded from thread_rng:\n # fn try_inner() -> Result<(), Error> {\n let mut rng = SmallRng::from_rng(thread_rng())?;\n # let v: u32 = rng.gen();\n # Ok(())\n # }\n # try_inner().unwrap();\n\n // SmallRng seeded by a constant, for deterministic results:\n let seed = [1,2,3,4, 5,6,7,8, 9,10,11,12, 13,14,15,16]; // byte array\n let mut rng = SmallRng::from_seed(seed);\n # let v: u32 = rng.gen();\n ```\n\n\n # Implementing custom RNGs\n\n If you want to implement custom RNG, see the [`rand_core`] crate. The RNG\n will have to implement the [`RngCore`] trait, where the [`Rng`] trait is\n build on top of.\n\n If the RNG needs seeding, also implement the [`SeedableRng`] trait.\n\n [`CryptoRng`] is a marker trait cryptographically secure PRNGs can\n implement.\n\n [`OsRng`]: rand_os::OsRng\n [`SmallRng`]: rngs::SmallRng\n [`StdRng`]: rngs::StdRng\n [`ThreadRng`]: rngs::ThreadRng\n [`EntropyRng`]: rngs::EntropyRng\n [`JitterRng`]: rngs::JitterRng\n [`mock::StepRng`]: rngs::mock::StepRng\n [`adapter::ReadRng`]: rngs::adapter::ReadRng\n [`adapter::ReseedingRng`]: rngs::adapter::ReseedingRng\n [`ChaChaRng`]: rand_chacha::ChaChaRng\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":568},{"krate":0,"index":623},{"krate":0,"index":624}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::rngs::adapter::read","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":557},{"krate":0,"index":560}],"decl_id":null,"docs":" A wrapper around any Read to treat it as an RNG.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":240283,"byte_end":240304,"line_start":11,"line_end":11,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":2095},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":241917,"byte_end":241924,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":2097}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.\n\n This will work best with an infinite reader, but that is not required.\n\n This can be used with `/dev/urandom` on Unix but it is recommended to use\n [`OsRng`] instead.\n\n # Panics\n\n `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.\n All other errors from the underlying reader, including when it does not\n have enough data, will only be reported through [`try_fill_bytes`].\n The other [`RngCore`] methods will panic in case of an error.\n\n # Example\n\n ```\n use rand::Rng;\n use rand::rngs::adapter::ReadRng;\n\n let data = vec![1, 2, 3, 4, 5, 6, 7, 8];\n let mut rng = ReadRng::new(&data[..]);\n println!(\"{:x}\", rng.gen::<u32>());\n ```\n\n [`OsRng`]: rand_os::OsRng\n [`try_fill_bytes`]: RngCore::try_fill_bytes\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":242031,"byte_end":242034,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":248090,"byte_end":248102,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.\n\n `ReseedingRng` reseeds the underlying PRNG in the following cases:\n\n - On a manual call to [`reseed()`].\n - After `clone()`, the clone will be reseeded on first use.\n - After a process is forked, the RNG in the child process is reseeded within\n   the next few generated values, depending on the block size of the\n   underlying PRNG. For [`ChaChaCore`] and [`Hc128Core`] this is a maximum of\n   15 `u32` values before reseeding.\n - After the PRNG has generated a configurable number of random bytes.\n\n # When should reseeding after a fixed number of generated bytes be used?\n\n Reseeding after a fixed number of generated bytes is never strictly\n *necessary*. Cryptographic PRNGs don't have a limited number of bytes they\n can output, or at least not a limit reachable in any practical way. There is\n no such thing as 'running out of entropy'.\n\n Occasionally reseeding can be seen as some form of 'security in depth'. Even\n if in the future a cryptographic weakness is found in the CSPRNG being used,\n or a flaw in the implementation, occasionally reseeding should make\n exploiting it much more difficult or even impossible.\n\n Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding\n after a fixed number of generated bytes.\n\n # Error handling\n\n Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will\n never panic but try to handle the error intelligently through some\n combination of retrying and delaying reseeding until later.\n If handling the source error fails `ReseedingRng` will continue generating\n data from the wrapped PRNG without reseeding.\n\n Manually calling [`reseed()`] will not have this retry or delay logic, but\n reports the error.\n\n # Example\n\n ```\n # extern crate rand;\n # extern crate rand_chacha;\n # fn main() {\n use rand::prelude::*;\n use rand_chacha::ChaChaCore; // Internal part of ChaChaRng that\n                              // implements BlockRngCore\n use rand::rngs::OsRng;\n use rand::rngs::adapter::ReseedingRng;\n\n let prng = ChaChaCore::from_entropy();\n let reseeder = OsRng::new().unwrap();\n let mut reseeding_rng = ReseedingRng::new(prng, 0, reseeder);\n\n println!(\"{}\", reseeding_rng.gen::<u64>());\n\n let mut cloned_rng = reseeding_rng.clone();\n assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());\n # }\n ```\n\n [`ChaChaCore`]: rand_chacha::ChaChaCore\n [`Hc128Core`]: rand_hc::Hc128Core\n [`BlockRngCore`]: rand_core::block::BlockRngCore\n [`ReseedingRng::new`]: ReseedingRng::new\n [`reseed()`]: ReseedingRng::reseed\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":248601,"byte_end":248604,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.\n\n `threshold` sets the number of generated bytes after which to reseed the\n PRNG. Set it to zero to never reseed based on the number of generated\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":248789,"byte_end":248795,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":259518,"byte_end":259528,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::rngs::entropy::EntropyRng","value":"EntropyRng {  }","parent":null,"children":[{"krate":0,"index":2123}],"decl_id":null,"docs":" An interface returning random data from external source(s), provided\n specifically for securely seeding algorithmic generators (PRNGs).\n\n Where possible, `EntropyRng` retrieves random data from the operating\n system's interface for random numbers ([`OsRng`]); if that fails it will\n fall back to the [`JitterRng`] entropy collector. In the latter case it will\n still try to use [`OsRng`] on the next usage.\n\n If no secure source of entropy is available `EntropyRng` will panic on use;\n i.e. it should never output predictable data.\n\n This is either a little slow ([`OsRng`] requires a system call) or extremely\n slow ([`JitterRng`] must use significant CPU time to generate sufficient\n jitter); for better performance it is common to seed a local PRNG from\n external entropy then primarily use the local PRNG ([`thread_rng`] is\n provided as a convenient, local, automatically-seeded CSPRNG).\n\n # Panics\n\n On most systems, like Windows, Linux, macOS and *BSD on common hardware, it\n is highly unlikely for both [`OsRng`] and [`JitterRng`] to fail. But on\n combinations like webassembly without Emscripten or stdweb both sources are\n unavailable. If both sources fail, only [`try_fill_bytes`] is able to\n report the error, and only the one from `OsRng`. The other [`RngCore`]\n methods will panic in case of an error.\n\n [`OsRng`]: rand_os::OsRng\n [`thread_rng`]: crate::thread_rng\n [`JitterRng`]: crate::rngs::JitterRng\n [`try_fill_bytes`]: RngCore::try_fill_bytes\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":259938,"byte_end":259941,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EntropyRng`.\n\n This method will do no system calls or other initialization routines,\n those are done on first use. This is done to make `new` infallible,\n and `try_fill_bytes` the only place to report errors.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":2160},{"krate":0,"index":2165},{"krate":0,"index":2163},{"krate":0,"index":664},{"krate":0,"index":666}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266015,"byte_end":266022,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2161},{"krate":0,"index":2162}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.\n \n This generates an arithmetic sequence (i.e. adds a constant each step)\n over a `u64` number, using wrapping arithmetic. If the increment is 0\n the generator yields a constant.\n \n ```\n use rand::Rng;\n use rand::rngs::mock::StepRng;\n \n let mut my_rng = StepRng::new(2, 1);\n let sample: [u64; 3] = my_rng.gen();\n assert_eq!(sample, [2, 3, 4]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266212,"byte_end":266215,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":269654,"byte_end":269662,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"SmallRng","qualname":"::rngs::small::SmallRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" An RNG recommended when small state, cheap initialization and good\n performance are required. The PRNG algorithm in `SmallRng` is chosen to be\n efficient on the current platform, **without consideration for cryptography\n or security**. The size of its state is much smaller than for [`StdRng`].\n\n Reproducibility of output from this generator is however not required, thus\n future library versions may use a different internal generator with\n different output. Further, this generator may not be portable and can\n produce different output depending on the architecture. If you require\n reproducible output, use a named RNG.\n Refer to [The Book](https://rust-random.github.io/book/guide-rngs.html).\n \n\n The current algorithm is [`Pcg64Mcg`][rand_pcg::Pcg64Mcg] on 64-bit platforms with Rust version\n 1.26 and later, or [`Pcg32`][rand_pcg::Pcg32] otherwise. Both are found in\n the [rand_pcg] crate.\n\n # Examples\n\n Initializing `SmallRng` with a random seed can be done using [`FromEntropy`]:\n\n ```\n # use rand::Rng;\n use rand::FromEntropy;\n use rand::rngs::SmallRng;\n\n // Create small, cheap to initialize and fast RNG with a random seed.\n // The randomness is supplied by the operating system.\n let mut small_rng = SmallRng::from_entropy();\n # let v: u32 = small_rng.gen();\n ```\n\n When initializing a lot of `SmallRng`'s, using [`thread_rng`] can be more\n efficient:\n\n ```\n use std::iter;\n use rand::{SeedableRng, thread_rng};\n use rand::rngs::SmallRng;\n\n // Create a big, expensive to initialize and slower, but unpredictable RNG.\n // This is cached and done only once per thread.\n let mut thread_rng = thread_rng();\n // Create small, cheap to initialize and fast RNGs with random seeds.\n // One can generally assume this won't fail.\n let rngs: Vec<SmallRng> = iter::repeat(())\n     .map(|()| SmallRng::from_rng(&mut thread_rng).unwrap())\n     .take(10)\n     .collect();\n ```\n\n [`FromEntropy`]: crate::FromEntropy\n [`StdRng`]: crate::rngs::StdRng\n [`thread_rng`]: crate::thread_rng\n [rand_pcg]: https://crates.io/crates/rand_pcg\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":271736,"byte_end":271742,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).\n\n The current algorithm used on all platforms is [HC-128], found in the\n [rand_hc] crate.\n\n Reproducibility of output from this generator is however not required, thus\n future library versions may use a different internal generator with\n different output. Further, this generator may not be portable and can\n produce different output depending on the architecture. If you require\n reproducible output, use a named RNG, for example [`ChaChaRng`] from the\n [rand_chacha] crate.\n\n [HC-128]: rand_hc::Hc128Rng\n [`ChaChaRng`]: rand_chacha::ChaChaRng\n [rand_hc]: https://crates.io/crates/rand_hc\n [rand_chacha]: https://crates.io/crates/rand_chacha\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":276233,"byte_end":276242,"line_start":71,"line_end":71,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2182}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.\n\n `ThreadRng` uses [`ReseedingRng`] wrapping the same PRNG as [`StdRng`],\n which is reseeded after generating 32 MiB of random data. A single instance\n is cached per thread and the returned `ThreadRng` is a reference to this\n instance — hence `ThreadRng` is neither `Send` nor `Sync` but is safe to use\n within a single thread. This RNG is seeded and reseeded via [`EntropyRng`]\n as required.\n\n Note that the reseeding is done as an extra precaution against entropy\n leaks and is in theory unnecessary — to predict `ThreadRng`'s output, an\n attacker would have to either determine most of the RNG's seed or internal\n state, or crack the algorithm used.\n\n Like [`StdRng`], `ThreadRng` is a cryptographically secure PRNG. The current\n algorithm used is [HC-128], which is an array-based PRNG that trades memory\n usage for better performance. This makes it similar to ISAAC, the algorithm\n used in `ThreadRng` before rand 0.5.\n\n Cloning this handle just produces a new reference to the same thread-local\n generator.\n \n [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng\n [`StdRng`]: crate::rngs::StdRng\n [HC-128]: rand_hc::Hc128Rng\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277229,"byte_end":277239,"line_start":95,"line_end":95,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivelent.\n\n For more information see [`ThreadRng`].\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":822},{"krate":0,"index":829},{"krate":0,"index":860},{"krate":0,"index":2225},{"krate":0,"index":2232},{"krate":0,"index":862},{"krate":0,"index":870},{"krate":0,"index":875},{"krate":0,"index":880},{"krate":0,"index":884}],"decl_id":null,"docs":" Functions for randomly accessing and sampling sequences.\n \n TODO: module doc\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":2192},{"krate":0,"index":2201},{"krate":0,"index":2199},{"krate":0,"index":744},{"krate":0,"index":752},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":2203},{"krate":0,"index":2211},{"krate":0,"index":761},{"krate":0,"index":768},{"krate":0,"index":2214},{"krate":0,"index":2223},{"krate":0,"index":2221},{"krate":0,"index":770},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":790}],"decl_id":null,"docs":" Index sampling\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":278568,"byte_end":278591,"line_start":14,"line_end":14,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2193},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308420,"byte_end":308423,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308454,"byte_end":308459,"line_start":28,"line_end":28,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308390,"byte_end":308398,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2196}],"decl_id":null,"docs":" A vector of indices.\n\n Multiple internal representations are possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308541,"byte_end":308544,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308859,"byte_end":308864,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.\n\n (Note: we cannot implement [`std::ops::Index`] because of lifetime\n restrictions.)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":309130,"byte_end":309138,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":309389,"byte_end":309393,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn <'a> (&'a self) -> IndexVecIter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":309697,"byte_end":309706,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310797,"byte_end":310800,"line_start":105,"line_end":105,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310843,"byte_end":310848,"line_start":106,"line_end":106,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":2203},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310759,"byte_end":310771,"line_start":104,"line_end":104,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2205},{"krate":0,"index":2208}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311561,"byte_end":311564,"line_start":132,"line_end":132,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311605,"byte_end":311610,"line_start":133,"line_end":133,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2214},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2214},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311523,"byte_end":311539,"line_start":131,"line_end":131,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2215},{"krate":0,"index":2218}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":313269,"byte_end":313275,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).\n\n This method is used internally by the slice sampling methods, but it can\n sometimes be useful to have the indices themselves so this is provided as\n an alternative.\n\n The implementation used is not specified; we automatically select the\n fastest available algorithm for the `length` and `amount` parameters\n (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,\n complexity is `O(amount)`, except that when `amount` is small, performance\n is closer to `O(amount^2)`, and when `length` is close to `amount` then\n `O(length)`.\n\n Note that performance is significantly better over `u32` indices than over\n `u64` indices. Because of this we hide the underlying type behind an\n abstraction, `IndexVec`.\n \n If an allocation-free `no_std` function is required, it is suggested\n to adapt the internal `sample_floyd` implementation.\n\n Panics if `amount > length`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":279069,"byte_end":279080,"line_start":28,"line_end":28,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":818},{"krate":0,"index":820}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.\n \n An implementation is provided for slices. This may also be implementable for\n other types.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":279118,"byte_end":279122,"line_start":30,"line_end":30,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":279645,"byte_end":279651,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.\n \n Depending on the implementation, complexity is expected to be `O(1)`.\n\n # Example\n\n ```\n use rand::thread_rng;\n use rand::seq::SliceRandom;\n\n let choices = [1, 2, 4, 8, 16, 32];\n let mut rng = thread_rng();\n println!(\"{:?}\", choices.choose(&mut rng));\n assert_eq!(choices[..0].choose(&mut rng), None);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":279937,"byte_end":279947,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.\n \n Depending on the implementation, complexity is expected to be `O(1)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":280952,"byte_end":280967,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Produces an iterator that chooses `amount` elements from the slice at\n random without repeating any, and returns them in random order.\n \n In case this API is not sufficiently flexible, use `index::sample` then\n apply the indices to the slice.\n \n Complexity is expected to be the same as `index::sample`.\n \n # Example\n ```\n use rand::seq::SliceRandom;\n \n let mut rng = &mut rand::thread_rng();\n let sample = \"Hello, audience!\".as_bytes();\n \n // collect the results into a vector:\n let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();\n \n // store in a buffer:\n let mut buf = [0u8; 5];\n for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {\n     *slot = *b;\n }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":280919,"byte_end":280944,"line_start":82,"line_end":82,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":281820,"byte_end":281835,"line_start":103,"line_end":103,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Similar to [`choose`], where the likelihood of each outcome may be\n specified. The specified function `weight` maps items `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.\n\n # Example\n\n ```\n use rand::prelude::*;\n\n let choices = [('a', 2), ('b', 1), ('c', 1)];\n let mut rng = thread_rng();\n // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'\n println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);\n ```\n [`choose`]: SliceRandom::choose\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":281787,"byte_end":281812,"line_start":102,"line_end":102,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":282720,"byte_end":282739,"line_start":123,"line_end":123,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], where the likelihood of each outcome may be\n specified. The specified function `weight` maps items `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.\n\n See also [`choose_weighted`].\n\n [`choose_mut`]: SliceRandom::choose_mut\n [`choose_weighted`]: SliceRandom::choose_weighted\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":282687,"byte_end":282712,"line_start":122,"line_end":122,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":283573,"byte_end":283580,"line_start":149,"line_end":149,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.\n \n Depending on the implementation, complexity is expected to be `O(1)`.\n\n # Example\n\n ```\n use rand::thread_rng;\n use rand::seq::SliceRandom;\n\n let mut rng = thread_rng();\n let mut y = [1, 2, 3, 4, 5];\n println!(\"Unshuffled: {:?}\", y);\n y.shuffle(&mut rng);\n println!(\"Shuffled:   {:?}\", y);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":284444,"byte_end":284459,"line_start":168,"line_end":168,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.\n\n Returns two mutable slices from the source slice. The first contains\n `amount` elements randomly permuted. The second has the remaining\n elements that are not fully shuffled.\n\n This is an efficient method to select `amount` elements at random from\n the slice, provided the slice may be mutated.\n\n If you only need to choose elements randomly and `amount > self.len()/2`\n then you may improve performance by taking\n `amount = values.len() - amount` and using only the second slice.\n\n If `amount` is greater than the number of elements in the slice, this\n will perform a full shuffle.\n\n Complexity is expected to be `O(m)` where `m = amount`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":284657,"byte_end":284671,"line_start":173,"line_end":173,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":827}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":285245,"byte_end":285251,"line_start":186,"line_end":186,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator. If you have a slice,\n it's significantly faster to call the [`choose`] or [`choose_mut`]\n functions using the slice instead.\n\n Returns `None` if and only if the iterator is empty.\n \n Complexity is `O(n)`, where `n` is the length of the iterator.\n This likely consumes multiple random numbers, but the exact number\n is unspecified.\n\n [`choose`]: SliceRandom::method.choose\n [`choose_mut`]: SliceRandom::choose_mut\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":287262,"byte_end":287282,"line_start":245,"line_end":245,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a supplied\n buffer.\n \n Although the elements are selected randomly, the order of elements in\n the buffer is neither stable nor fully random. If random ordering is\n desired, shuffle the result.\n \n Returns the number of elements added to the buffer. This equals `amount`\n unless the iterator contains insufficient elements, in which case this\n equals the number of elements available.\n \n Complexity is `O(n)` where `n` is the length of the iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":288645,"byte_end":288660,"line_start":284,"line_end":284,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.\n\n This is equivalent to `choose_multiple_fill` except for the result type.\n\n Although the elements are selected randomly, the order of elements in\n the buffer is neither stable nor fully random. If random ordering is\n desired, shuffle the result.\n \n The length of the returned vector equals `amount` unless the iterator\n contains insufficient elements, in which case it equals the number of\n elements available.\n \n Complexity is `O(n)` where `n` is the length of the iterator.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":288612,"byte_end":288637,"line_start":283,"line_end":283,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":292956,"byte_end":292971,"line_start":412,"line_end":412,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231}],"decl_id":null,"docs":" Iterator over multiple choices, as returned by [`SliceRandom::choose_multiple]\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":292902,"byte_end":292927,"line_start":410,"line_end":410,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":294014,"byte_end":294025,"line_start":447,"line_end":447,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::seq::sample_iter","value":"fn <T, I, R> (rng: &mut R, iterable: I, amount: usize) -> Result<Vec<T>, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample `amount` elements from a finite iterator.\n\n Deprecated: use [`IteratorRandom::choose_multiple`] instead.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293900,"byte_end":293925,"line_start":445,"line_end":445,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"use IteratorRandom::choose_multiple instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293926,"byte_end":294006,"line_start":446,"line_end":446,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":294773,"byte_end":294785,"line_start":472,"line_end":472,"column_start":8,"column_end":20},"name":"sample_slice","qualname":"::seq::sample_slice","value":"fn <R, T> (rng: &mut R, slice: &[T], amount: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` values from `slice`.\n\n The values are non-repeating and in random order.\n\n This implementation uses `O(amount)` time and memory.\n\n Panics if `amount > slice.len()`\n\n Deprecated: use [`SliceRandom::choose_multiple`] instead.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":294662,"byte_end":294687,"line_start":470,"line_end":470,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"use SliceRandom::choose_multiple instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":294688,"byte_end":294765,"line_start":471,"line_end":471,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":295475,"byte_end":295491,"line_start":494,"line_end":494,"column_start":8,"column_end":24},"name":"sample_slice_ref","qualname":"::seq::sample_slice_ref","value":"fn <'a, R, T> (rng: &mut R, slice: &'a [T], amount: usize) -> Vec<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` references from `slice`.\n\n The references are non-repeating and in random order.\n\n This implementation uses `O(amount)` time and memory.\n\n Panics if `amount > slice.len()`\n\n Deprecated: use [`SliceRandom::choose_multiple`] instead.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":295364,"byte_end":295389,"line_start":492,"line_end":492,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"use SliceRandom::choose_multiple instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":295390,"byte_end":295467,"line_start":493,"line_end":493,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":321617,"byte_end":321625,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"IsaacRng","qualname":"::deprecated::IsaacRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_isaac crate instead, or use the newer Hc128Rng\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":321501,"byte_end":321605,"line_start":24,"line_end":25,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322467,"byte_end":322479,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"new_from_u64","qualname":"<IsaacRng>::new_from_u64","value":"fn (seed: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322706,"byte_end":322716,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"Isaac64Rng","qualname":"::deprecated::Isaac64Rng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_isaac crate instead, or use newer Hc128Rng\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322594,"byte_end":322694,"line_start":70,"line_end":71,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323576,"byte_end":323588,"line_start":109,"line_end":109,"column_start":12,"column_end":24},"name":"new_from_u64","qualname":"<Isaac64Rng>::new_from_u64","value":"fn (seed: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2251},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323793,"byte_end":323802,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"ChaChaRng","qualname":"::deprecated::ChaChaRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"import from rand_chacha crate instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323707,"byte_end":323781,"line_start":116,"line_end":116,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324716,"byte_end":324728,"line_start":155,"line_end":155,"column_start":12,"column_end":24},"name":"get_word_pos","qualname":"<ChaChaRng>::get_word_pos","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all (rustc_1_26, not (target_os = \"emscripten\")))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324650,"byte_end":324704,"line_start":154,"line_end":154,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324853,"byte_end":324865,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"set_word_pos","qualname":"<ChaChaRng>::set_word_pos","value":"fn (&mut self, word_offset: u128) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all (rustc_1_26, not (target_os = \"emscripten\")))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324787,"byte_end":324841,"line_start":159,"line_end":159,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324957,"byte_end":324967,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"set_stream","qualname":"<ChaChaRng>::set_stream","value":"fn (&mut self, stream: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325177,"byte_end":325185,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"Hc128Rng","qualname":"::deprecated::Hc128Rng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"import from rand_hc crate instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325095,"byte_end":325165,"line_start":173,"line_end":173,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326133,"byte_end":326144,"line_start":215,"line_end":215,"column_start":12,"column_end":23},"name":"XorShiftRng","qualname":"::deprecated::XorShiftRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import from rand_xorshift crate instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326045,"byte_end":326121,"line_start":214,"line_end":214,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327139,"byte_end":327145,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::deprecated::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::prelude::* or rand::rngs::StdRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327028,"byte_end":327127,"line_start":253,"line_end":254,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328087,"byte_end":328092,"line_start":297,"line_end":297,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::deprecated::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"rand_os\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327951,"byte_end":327976,"line_start":294,"line_end":294,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"0.6.0\", note = \"import with rand::rngs::OsRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328001,"byte_end":328075,"line_start":296,"line_end":296,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328641,"byte_end":328644,"line_start":324,"line_end":324,"column_start":12,"column_end":15},"name":"new","qualname":"<OsRng>::new","value":"fn () -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328905,"byte_end":328915,"line_start":336,"line_end":336,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::deprecated::EntropyRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328775,"byte_end":328796,"line_start":333,"line_end":333,"column_start":1,"column_end":22}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::rngs::EntropyRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328814,"byte_end":328893,"line_start":335,"line_end":335,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329471,"byte_end":329474,"line_start":363,"line_end":363,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329825,"byte_end":329834,"line_start":381,"line_end":381,"column_start":12,"column_end":21},"name":"JitterRng","qualname":"::deprecated::JitterRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::rngs::JitterRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329735,"byte_end":329813,"line_start":380,"line_end":380,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330403,"byte_end":330406,"line_start":407,"line_end":407,"column_start":12,"column_end":15},"name":"new","qualname":"<JitterRng>::new","value":"fn () -> Result<JitterRng, rngs::TimerError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(all (feature = \"std\", not (target_arch = \"wasm32\")))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330336,"byte_end":330391,"line_start":406,"line_end":406,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330514,"byte_end":330528,"line_start":411,"line_end":411,"column_start":12,"column_end":26},"name":"new_with_timer","qualname":"<JitterRng>::new_with_timer","value":"fn (timer: fn() -> u64) -> JitterRng","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330640,"byte_end":330650,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"set_rounds","qualname":"<JitterRng>::set_rounds","value":"fn (&mut self, rounds: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330728,"byte_end":330738,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"test_timer","qualname":"<JitterRng>::test_timer","value":"fn (&mut self) -> Result<u8, rngs::TimerError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330856,"byte_end":330867,"line_start":424,"line_end":424,"column_start":12,"column_end":23},"name":"timer_stats","qualname":"<JitterRng>::timer_stats","value":"fn (&mut self, var_rounds: bool) -> i64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330823,"byte_end":330844,"line_start":423,"line_end":423,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2298},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331148,"byte_end":331157,"line_start":436,"line_end":436,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::deprecated::ThreadRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330988,"byte_end":331009,"line_start":432,"line_end":432,"column_start":1,"column_end":22}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::prelude::* or rand::rngs::ThreadRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331034,"byte_end":331136,"line_start":434,"line_end":435,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":2305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331852,"byte_end":331859,"line_start":468,"line_end":468,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::deprecated::ReadRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331716,"byte_end":331737,"line_start":465,"line_end":465,"column_start":1,"column_end":22}},{"value":"deprecated(since = \"0.6.0\", note =\n             \"import with rand::rngs::adapter::ReadRng instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331755,"byte_end":331840,"line_start":467,"line_end":467,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332445,"byte_end":332448,"line_start":495,"line_end":495,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2312},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332564,"byte_end":332576,"line_start":502,"line_end":502,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::deprecated::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333346,"byte_end":333349,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333499,"byte_end":333505,"line_start":537,"line_end":537,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3998,"byte_end":4004,"line_start":124,"line_end":124,"column_start":9,"column_end":15},"name":"jitter","qualname":"::jitter","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3954,"byte_end":3974,"line_start":122,"line_end":122,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4144,"byte_end":4146,"line_start":131,"line_end":131,"column_start":9,"column_end":11},"name":"os","qualname":"::os","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1045}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4074,"byte_end":4094,"line_start":128,"line_end":128,"column_start":1,"column_end":21}},{"value":"cfg(feature = \"rand_os\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4095,"byte_end":4120,"line_start":129,"line_end":129,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1046},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4226,"byte_end":4232,"line_start":136,"line_end":136,"column_start":9,"column_end":15},"name":"chacha","qualname":"::chacha","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1047}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4182,"byte_end":4202,"line_start":134,"line_end":134,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4316,"byte_end":4321,"line_start":141,"line_end":141,"column_start":9,"column_end":14},"name":"isaac","qualname":"::isaac","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1049}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4272,"byte_end":4292,"line_start":139,"line_end":139,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1052},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4440,"byte_end":4444,"line_start":147,"line_end":147,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1053}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4374,"byte_end":4394,"line_start":144,"line_end":144,"column_start":1,"column_end":21}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":4395,"byte_end":4416,"line_start":145,"line_end":145,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6329,"byte_end":6332,"line_start":198,"line_end":198,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1089},{"krate":0,"index":1093}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.\n\n This is the primary trait to use when generating random values.\n\n # Generic usage\n\n The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some\n things are worth noting here:\n\n - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no\n   difference whether we use `R: Rng` or `R: RngCore`.\n - The `+ ?Sized` un-bounding allows functions to be called directly on\n   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without\n   this it would be necessary to write `foo(&mut r)`.\n\n An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some\n trade-offs. It allows the argument to be consumed directly without a `&mut`\n (which is how `from_rng(thread_rng())` works); also it still works directly\n on references (including type-erased references). Unfortunately within the\n function `foo` it is not known whether `rng` is a reference type or not,\n hence many uses of `rng` require an extra reference, either explicitly\n (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the\n optimiser can remove redundant references later.\n\n Example:\n\n ```\n # use rand::thread_rng;\n use rand::Rng;\n\n fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {\n     rng.gen()\n }\n\n # let v = foo(&mut thread_rng());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6741,"byte_end":6744,"line_start":214,"line_end":214,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.\n\n [`Standard`]: distributions::Standard\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n\n let mut rng = thread_rng();\n let x: u32 = rng.gen();\n println!(\"{}\", x);\n println!(\"{:?}\", rng.gen::<(f64, bool)>());\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6724,"byte_end":6733,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":7615,"byte_end":7624,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.\n\n This function is optimised for the case that only a single sample is\n made from the given range. See also the [`Uniform`] distribution\n type which may be faster if sampling from the same range repeatedly.\n\n # Panics\n\n Panics if `low >= high`.\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n\n let mut rng = thread_rng();\n let n: u32 = rng.gen_range(0, 10);\n println!(\"{}\", n);\n let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);\n println!(\"{}\", m);\n ```\n\n [`Uniform`]: distributions::uniform::Uniform\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":8311,"byte_end":8317,"line_start":262,"line_end":262,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.\n\n ### Example\n\n ```\n use rand::{thread_rng, Rng};\n use rand::distributions::Uniform;\n\n let mut rng = thread_rng();\n let x = rng.sample(Uniform::new(10u32, 15));\n // Type annotation requires two types, the type and distribution; the\n // distribution can be inferred.\n let y = rng.sample::<u16, _>(Uniform::new(10, 15));\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":9337,"byte_end":9348,"line_start":293,"line_end":293,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"fn <'a, T, D> (&'a mut self, distr: &'a D) -> distributions::DistIter<'a, D, Self, T>","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n use rand::distributions::{Alphanumeric, Uniform, Standard};\n\n let mut rng = thread_rng();\n\n // Vec of 16 x f32:\n let v: Vec<f32> = thread_rng().sample_iter(&Standard).take(16).collect();\n\n // String:\n let s: String = rng.sample_iter(&Alphanumeric).take(7).collect();\n\n // Combined values\n println!(\"{:?}\", thread_rng().sample_iter(&Standard).take(5)\n                              .collect::<Vec<(f64, bool)>>());\n\n // Dice-rolling:\n let die_range = Uniform::new_inclusive(1, 6);\n let mut roll_die = rng.sample_iter(&die_range);\n while roll_die.next().unwrap() != 6 {\n     println!(\"Not a 6; rolling again!\");\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":10393,"byte_end":10397,"line_start":321,"line_end":321,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).\n\n On big-endian platforms this performs byte-swapping to ensure\n portability of results from reproducible generators.\n\n This uses [`fill_bytes`] internally which may handle some RNG errors\n implicitly (e.g. waiting if the OS generator is not ready), but panics\n on other errors. See also [`try_fill`] which returns errors.\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n\n let mut arr = [0i8; 20];\n thread_rng().fill(&mut arr[..]);\n ```\n\n [`fill_bytes`]: RngCore::fill_bytes\n [`try_fill`]: Rng::try_fill\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":11602,"byte_end":11610,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).\n\n On big-endian platforms this performs byte-swapping to ensure\n portability of results from reproducible generators.\n\n This uses [`try_fill_bytes`] internally and forwards all RNG errors. In\n some cases errors may be resolvable; see [`ErrorKind`] and\n documentation for the RNG in use. If you do not plan to handle these\n errors you may prefer to use [`fill`].\n\n # Example\n\n ```\n # use rand::Error;\n use rand::{thread_rng, Rng};\n\n # fn try_inner() -> Result<(), Error> {\n let mut arr = [0u64; 4];\n thread_rng().try_fill(&mut arr[..])?;\n # Ok(())\n # }\n\n # try_inner().unwrap()\n ```\n\n [`try_fill_bytes`]: RngCore::try_fill_bytes\n [`fill`]: Rng::fill\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12322,"byte_end":12330,"line_start":381,"line_end":381,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.\n\n See also the [`Bernoulli`] distribution, which may be faster if\n sampling from the same probability repeatedly.\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n\n let mut rng = thread_rng();\n println!(\"{}\", rng.gen_bool(1.0 / 3.0));\n ```\n\n # Panics\n\n If `p < 0` or `p > 1`.\n\n [`Bernoulli`]: distributions::bernoulli::Bernoulli\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":12305,"byte_end":12314,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13308,"byte_end":13317,"line_start":410,"line_end":410,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.\n\n See also the [`Bernoulli`] distribution, which may be faster if\n sampling from the same `numerator` and `denominator` repeatedly.\n\n # Panics\n\n If `denominator == 0` or `numerator > denominator`.\n\n # Example\n\n ```\n use rand::{thread_rng, Rng};\n\n let mut rng = thread_rng();\n println!(\"{}\", rng.gen_ratio(2, 3));\n ```\n\n [`Bernoulli`]: distributions::bernoulli::Bernoulli\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13291,"byte_end":13300,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13678,"byte_end":13684,"line_start":419,"line_end":419,"column_start":8,"column_end":14},"name":"choose","qualname":"::Rng::choose","value":"fn <'a, T> (&mut self, values: &'a [T]) -> Option<&'a T>","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Return a random element from `values`.\n\n Deprecated: use [`seq::SliceRandom::choose`] instead.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::choose instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13602,"byte_end":13670,"line_start":418,"line_end":418,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14030,"byte_end":14040,"line_start":428,"line_end":428,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::Rng::choose_mut","value":"fn <'a, T> (&mut self, values: &'a mut [T]) -> Option<&'a mut T>","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Return a mutable pointer to a random element from `values`.\n\n Deprecated: use [`seq::SliceRandom::choose_mut`] instead.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::choose_mut instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":13950,"byte_end":14022,"line_start":427,"line_end":427,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14366,"byte_end":14373,"line_start":437,"line_end":437,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::Rng::shuffle","value":"fn <T> (&mut self, values: &mut [T]) -> ()","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.\n\n Deprecated: use [`seq::SliceRandom::shuffle`] instead.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.6.0\", note = \"use SliceRandom::shuffle instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14289,"byte_end":14358,"line_start":436,"line_end":436,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1098},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14642,"byte_end":14656,"line_start":448,"line_end":448,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100}],"decl_id":null,"docs":" Trait for casting types to byte slices\n\n This is used by the [`Rng::fill`] and [`Rng::try_fill`] methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14725,"byte_end":14742,"line_start":450,"line_end":450,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":1098},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14855,"byte_end":14860,"line_start":453,"line_end":453,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":1098},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":18322,"byte_end":18333,"line_start":566,"line_end":566,"column_start":11,"column_end":22},"name":"FromEntropy","qualname":"::FromEntropy","value":"FromEntropy: SeedableRng","parent":null,"children":[{"krate":0,"index":1107}],"decl_id":null,"docs":" A convenience extension to [`SeedableRng`] allowing construction from fresh\n entropy. This trait is automatically implemented for any PRNG implementing\n [`SeedableRng`] and is not intended to be implemented by users.\n\n This is equivalent to using `SeedableRng::from_rng(EntropyRng::new())` then\n unwrapping the result.\n\n Since this is convenient and secure, it is the recommended way to create\n PRNGs, though two alternatives may be considered:\n\n *   Deterministic creation using [`SeedableRng::from_seed`] with a fixed seed\n *   Seeding from `thread_rng`: `SeedableRng::from_rng(thread_rng())?`;\n     this will usually be faster and should also be secure, but requires\n     trusting one extra component.\n\n ## Example\n\n ```\n use rand::{Rng, FromEntropy};\n use rand::rngs::StdRng;\n\n let mut rng = StdRng::from_entropy();\n println!(\"Random die roll: {}\", rng.gen_range(1, 7));\n ```\n\n [`EntropyRng`]: rngs::EntropyRng\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":18290,"byte_end":18311,"line_start":565,"line_end":565,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":19480,"byte_end":19492,"line_start":596,"line_end":596,"column_start":8,"column_end":20},"name":"from_entropy","qualname":"::FromEntropy::from_entropy","value":"fn () -> Self","parent":{"krate":0,"index":1106},"children":[],"decl_id":null,"docs":" Creates a new instance, automatically seeded with fresh entropy.\n\n Normally this will use `OsRng`, but if that fails `JitterRng` will be\n used instead. Both should be suitable for cryptography. It is possible\n that both entropy sources will fail though unlikely; failures would\n almost certainly be platform limitations or build issues, i.e. most\n applications targetting PC/mobile platforms should not need to worry\n about this failing.\n\n # Panics\n\n If all entropy sources fail this will panic. If you need to handle\n errors, use the following code, equivalent aside from error handling:\n\n ```\n # use rand::Error;\n use rand::prelude::*;\n use rand::rngs::EntropyRng;\n\n # fn try_inner() -> Result<(), Error> {\n // This uses StdRng, but is valid for any R: SeedableRng\n let mut rng = StdRng::from_rng(EntropyRng::new())?;\n\n println!(\"random number: {}\", rng.gen_range(1, 10));\n # Ok(())\n # }\n\n # try_inner().unwrap()\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":20797,"byte_end":20803,"line_start":652,"line_end":652,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.\n\n This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for\n documentation of the entropy source and [`Standard`] for documentation of\n distributions and type-specific generation.\n\n # Examples\n\n ```\n let x = rand::random::<u8>();\n println!(\"{}\", x);\n\n let y = rand::random::<f64>();\n println!(\"{}\", y);\n\n if rand::random() { // generates a boolean\n     println!(\"Better lucky than good!\");\n }\n ```\n\n If you're calling `random()` in a loop, caching the generator as in the\n following example can increase performance.\n\n ```\n use rand::Rng;\n\n let mut v = vec![1, 2, 3];\n\n for x in v.iter_mut() {\n     *x = rand::random()\n }\n\n // can be made faster by caching thread_rng\n\n let mut rng = rand::thread_rng();\n\n for x in v.iter_mut() {\n     *x = rng.gen();\n }\n ```\n\n [`Standard`]: distributions::Standard\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":20758,"byte_end":20779,"line_start":650,"line_end":650,"column_start":1,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":20780,"byte_end":20789,"line_start":651,"line_end":651,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55509,"byte_end":55516,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56304,"byte_end":56311,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59161,"byte_end":59168,"line_start":267,"line_end":267,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59357,"byte_end":59364,"line_start":274,"line_end":274,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59937,"byte_end":59945,"line_start":291,"line_end":291,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83245,"byte_end":83253,"line_start":849,"line_end":849,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83360,"byte_end":83375,"line_start":854,"line_end":854,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102268,"byte_end":102277,"line_start":64,"line_end":64,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103992,"byte_end":104001,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":108741,"byte_end":108754,"line_start":78,"line_end":78,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":110382,"byte_end":110395,"line_start":122,"line_end":122,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113359,"byte_end":113372,"line_start":206,"line_end":206,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113697,"byte_end":113710,"line_start":217,"line_end":217,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113872,"byte_end":113885,"line_start":226,"line_end":226,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115053,"byte_end":115070,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115252,"byte_end":115269,"line_start":41,"line_end":41,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118276,"byte_end":118286,"line_start":34,"line_end":34,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118447,"byte_end":118457,"line_start":42,"line_end":42,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123033,"byte_end":123038,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123674,"byte_end":123689,"line_start":113,"line_end":113,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123907,"byte_end":123922,"line_start":122,"line_end":122,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124160,"byte_end":124165,"line_start":133,"line_end":133,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124426,"byte_end":124441,"line_start":142,"line_end":142,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124643,"byte_end":124658,"line_start":149,"line_end":149,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":126182,"byte_end":126192,"line_start":201,"line_end":201,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":126609,"byte_end":126619,"line_start":214,"line_end":214,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":127611,"byte_end":127618,"line_start":251,"line_end":251,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128085,"byte_end":128092,"line_start":265,"line_end":265,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128642,"byte_end":128650,"line_start":289,"line_end":289,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128975,"byte_end":128983,"line_start":300,"line_end":300,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129558,"byte_end":129562,"line_start":324,"line_end":324,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129949,"byte_end":129953,"line_start":338,"line_end":338,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":132993,"byte_end":133007,"line_start":40,"line_end":40,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":134835,"byte_end":134841,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135248,"byte_end":135254,"line_start":117,"line_end":117,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135935,"byte_end":135944,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":136350,"byte_end":136359,"line_start":158,"line_end":158,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":138730,"byte_end":138734,"line_start":43,"line_end":43,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":139844,"byte_end":139847,"line_start":84,"line_end":84,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":140155,"byte_end":140158,"line_start":94,"line_end":94,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":141602,"byte_end":141608,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":142098,"byte_end":142104,"line_start":45,"line_end":45,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":143831,"byte_end":143838,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":144367,"byte_end":144374,"line_start":56,"line_end":56,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":148934,"byte_end":148942,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":149354,"byte_end":149362,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":154749,"byte_end":154755,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":155148,"byte_end":155154,"line_start":49,"line_end":49,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158270,"byte_end":158279,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":159085,"byte_end":159094,"line_start":72,"line_end":72,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161494,"byte_end":161504,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161938,"byte_end":161948,"line_start":48,"line_end":48,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":163846,"byte_end":163853,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":164211,"byte_end":164218,"line_start":42,"line_end":42,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176220,"byte_end":176228,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176369,"byte_end":176377,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176520,"byte_end":176528,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176664,"byte_end":176672,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176864,"byte_end":176872,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":177159,"byte_end":177167,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":181612,"byte_end":181620,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":182369,"byte_end":182381,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":183171,"byte_end":183179,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":184360,"byte_end":184368,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":185603,"byte_end":185611,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":185955,"byte_end":185963,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37265,"byte_end":37273,"line_start":293,"line_end":293,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37617,"byte_end":37625,"line_start":309,"line_end":309,"column_start":43,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41327,"byte_end":41341,"line_start":402,"line_end":402,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":42823,"byte_end":42837,"line_start":441,"line_end":441,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":241961,"byte_end":241968,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":242142,"byte_end":242149,"line_start":59,"line_end":59,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":248219,"byte_end":248231,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249055,"byte_end":249067,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249601,"byte_end":249613,"line_start":137,"line_end":137,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249937,"byte_end":249949,"line_start":148,"line_end":148,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":250235,"byte_end":250248,"line_start":161,"line_end":161,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":251099,"byte_end":251112,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":254005,"byte_end":254018,"line_start":265,"line_end":265,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":254454,"byte_end":254467,"line_start":280,"line_end":280,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":259655,"byte_end":259665,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":260024,"byte_end":260034,"line_start":69,"line_end":69,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":260116,"byte_end":260126,"line_start":75,"line_end":75,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263243,"byte_end":263253,"line_start":162,"line_end":162,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263574,"byte_end":263582,"line_start":180,"line_end":180,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263991,"byte_end":263993,"line_start":198,"line_end":198,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":264502,"byte_end":264508,"line_start":222,"line_end":222,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266057,"byte_end":266064,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266327,"byte_end":266334,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":269687,"byte_end":269695,"line_start":76,"line_end":76,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":270107,"byte_end":270115,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":271772,"byte_end":271778,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":272190,"byte_end":272196,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":272476,"byte_end":272482,"line_start":67,"line_end":67,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277333,"byte_end":277342,"line_start":99,"line_end":99,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277435,"byte_end":277444,"line_start":105,"line_end":105,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277917,"byte_end":277926,"line_start":125,"line_end":125,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308481,"byte_end":308489,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":309938,"byte_end":309946,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310506,"byte_end":310514,"line_start":90,"line_end":90,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310612,"byte_end":310620,"line_start":96,"line_end":96,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310899,"byte_end":310911,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311427,"byte_end":311439,"line_start":127,"line_end":127,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311655,"byte_end":311671,"line_start":136,"line_end":136,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":312178,"byte_end":312194,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":292786,"byte_end":292787,"line_start":406,"line_end":406,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293204,"byte_end":293219,"line_start":419,"line_end":419,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293675,"byte_end":293690,"line_start":434,"line_end":434,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":321667,"byte_end":321675,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322131,"byte_end":322139,"line_start":50,"line_end":50,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322445,"byte_end":322453,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322760,"byte_end":322770,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323226,"byte_end":323236,"line_start":96,"line_end":96,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323552,"byte_end":323562,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323846,"byte_end":323855,"line_start":119,"line_end":119,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324311,"byte_end":324320,"line_start":141,"line_end":141,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324634,"byte_end":324643,"line_start":153,"line_end":153,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325056,"byte_end":325065,"line_start":169,"line_end":169,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325224,"byte_end":325232,"line_start":176,"line_end":176,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325688,"byte_end":325696,"line_start":198,"line_end":198,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326007,"byte_end":326015,"line_start":210,"line_end":210,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326194,"byte_end":326205,"line_start":217,"line_end":217,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326661,"byte_end":326672,"line_start":239,"line_end":239,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327179,"byte_end":327185,"line_start":257,"line_end":257,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327641,"byte_end":327647,"line_start":279,"line_end":279,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327939,"byte_end":327945,"line_start":291,"line_end":291,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328151,"byte_end":328156,"line_start":300,"line_end":300,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328622,"byte_end":328627,"line_start":323,"line_end":323,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328764,"byte_end":328769,"line_start":330,"line_end":330,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328975,"byte_end":328985,"line_start":339,"line_end":339,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329447,"byte_end":329457,"line_start":362,"line_end":362,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329579,"byte_end":329589,"line_start":369,"line_end":369,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329695,"byte_end":329705,"line_start":376,"line_end":376,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329871,"byte_end":329880,"line_start":383,"line_end":383,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330320,"byte_end":330329,"line_start":405,"line_end":405,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330973,"byte_end":330982,"line_start":429,"line_end":429,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331216,"byte_end":331225,"line_start":439,"line_end":439,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331701,"byte_end":331710,"line_start":462,"line_end":462,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331940,"byte_end":331947,"line_start":471,"line_end":471,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332421,"byte_end":332428,"line_start":494,"line_end":494,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332718,"byte_end":332730,"line_start":506,"line_end":506,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333254,"byte_end":333266,"line_start":529,"line_end":529,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333601,"byte_end":333613,"line_start":542,"line_end":542,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14510,"byte_end":14511,"line_start":443,"line_end":443,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":19566,"byte_end":19567,"line_start":600,"line_end":600,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3233,"byte_end":3246,"line_start":93,"line_end":93,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":34192,"byte_end":34199,"line_start":199,"line_end":199,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":59}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3256,"byte_end":3263,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":515}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3302,"byte_end":3306,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":533}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3316,"byte_end":3320,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":548}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239369,"byte_end":239376,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":549}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\mod.rs","byte_start":240328,"byte_end":240332,"line_start":11,"line_end":11,"column_start":46,"column_end":50},"ref_id":{"krate":0,"index":550}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mod.rs","byte_start":239422,"byte_end":239426,"line_start":152,"line_end":152,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":659}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":3330,"byte_end":3333,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":734}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":278600,"byte_end":278605,"line_start":14,"line_end":14,"column_start":33,"column_end":38},"ref_id":{"krate":0,"index":735}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":55509,"byte_end":55516,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1114},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56304,"byte_end":56311,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1114},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":56731,"byte_end":56736,"line_start":206,"line_end":206,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":81}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":57311,"byte_end":57316,"line_start":221,"line_end":221,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":83}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59161,"byte_end":59168,"line_start":267,"line_end":267,"column_start":56,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1114},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59357,"byte_end":59364,"line_start":274,"line_end":274,"column_start":65,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1114},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":59937,"byte_end":59945,"line_start":291,"line_end":291,"column_start":43,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":107},"to":{"krate":0,"index":103}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83245,"byte_end":83253,"line_start":849,"line_end":849,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":31402},"to":{"krate":0,"index":81}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\uniform.rs","byte_start":83360,"byte_end":83375,"line_start":854,"line_end":854,"column_start":25,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1374},"to":{"krate":0,"index":83}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":102268,"byte_end":102277,"line_start":64,"line_end":64,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\bernoulli.rs","byte_start":103992,"byte_end":104001,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1397},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":108741,"byte_end":108754,"line_start":78,"line_end":78,"column_start":37,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":110382,"byte_end":110395,"line_start":122,"line_end":122,"column_start":33,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1404},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113359,"byte_end":113372,"line_start":206,"line_end":206,"column_start":6,"column_end":19},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113697,"byte_end":113710,"line_start":217,"line_end":217,"column_start":30,"column_end":43},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1414},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weighted.rs","byte_start":113872,"byte_end":113885,"line_start":226,"line_end":226,"column_start":23,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1414},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115053,"byte_end":115070,"line_start":33,"line_end":33,"column_start":6,"column_end":23},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_sphere.rs","byte_start":115252,"byte_end":115269,"line_start":41,"line_end":41,"column_start":33,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1432},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118276,"byte_end":118286,"line_start":34,"line_end":34,"column_start":6,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\unit_circle.rs","byte_start":118447,"byte_end":118457,"line_start":42,"line_end":42,"column_start":33,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1439},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123033,"byte_end":123038,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123674,"byte_end":123689,"line_start":113,"line_end":113,"column_start":6,"column_end":21},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":123907,"byte_end":123922,"line_start":122,"line_end":122,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124160,"byte_end":124165,"line_start":133,"line_end":133,"column_start":28,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1446},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124426,"byte_end":124441,"line_start":142,"line_end":142,"column_start":28,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1468},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":124643,"byte_end":124658,"line_start":149,"line_end":149,"column_start":28,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1476},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":126182,"byte_end":126192,"line_start":201,"line_end":201,"column_start":6,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":126609,"byte_end":126619,"line_start":214,"line_end":214,"column_start":28,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1485},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":127611,"byte_end":127618,"line_start":251,"line_end":251,"column_start":6,"column_end":13},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128085,"byte_end":128092,"line_start":265,"line_end":265,"column_start":28,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1503},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128642,"byte_end":128650,"line_start":289,"line_end":289,"column_start":6,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":128975,"byte_end":128983,"line_start":300,"line_end":300,"column_start":28,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1512},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129558,"byte_end":129562,"line_start":324,"line_end":324,"column_start":6,"column_end":10},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\gamma.rs","byte_start":129949,"byte_end":129953,"line_start":338,"line_end":338,"column_start":28,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":132993,"byte_end":133007,"line_start":40,"line_end":40,"column_start":28,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1528},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":134835,"byte_end":134841,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135248,"byte_end":135254,"line_start":117,"line_end":117,"column_start":28,"column_end":34},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1535},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":135935,"byte_end":135944,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\normal.rs","byte_start":136350,"byte_end":136359,"line_start":158,"line_end":158,"column_start":28,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1543},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":138730,"byte_end":138734,"line_start":43,"line_end":43,"column_start":28,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1550},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":139844,"byte_end":139847,"line_start":84,"line_end":84,"column_start":6,"column_end":9},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\exponential.rs","byte_start":140155,"byte_end":140158,"line_start":94,"line_end":94,"column_start":28,"column_end":31},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1557},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":141602,"byte_end":141608,"line_start":30,"line_end":30,"column_start":6,"column_end":12},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\pareto.rs","byte_start":142098,"byte_end":142104,"line_start":45,"line_end":45,"column_start":28,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1564},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":143831,"byte_end":143838,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\poisson.rs","byte_start":144367,"byte_end":144374,"line_start":56,"line_end":56,"column_start":28,"column_end":35},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1572},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":148934,"byte_end":148942,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\binomial.rs","byte_start":149354,"byte_end":149362,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1583},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":154749,"byte_end":154755,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\cauchy.rs","byte_start":155148,"byte_end":155154,"line_start":49,"line_end":49,"column_start":28,"column_end":34},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1591},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":158270,"byte_end":158279,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\dirichlet.rs","byte_start":159085,"byte_end":159094,"line_start":72,"line_end":72,"column_start":33,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1599},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161494,"byte_end":161504,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\triangular.rs","byte_start":161938,"byte_end":161948,"line_start":48,"line_end":48,"column_start":28,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1605},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":163846,"byte_end":163853,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\weibull.rs","byte_start":164211,"byte_end":164218,"line_start":42,"line_end":42,"column_start":28,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1614},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176220,"byte_end":176228,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176369,"byte_end":176377,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176520,"byte_end":176528,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176664,"byte_end":176672,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":176864,"byte_end":176872,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\integer.rs","byte_start":177159,"byte_end":177167,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":181612,"byte_end":181620,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":182369,"byte_end":182381,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1680},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":183171,"byte_end":183179,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":184360,"byte_end":184368,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":185603,"byte_end":185611,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\other.rs","byte_start":185955,"byte_end":185963,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":196013,"byte_end":196018,"line_start":251,"line_end":251,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":439}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":196318,"byte_end":196323,"line_start":262,"line_end":262,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":446}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\utils.rs","byte_start":196705,"byte_end":196710,"line_start":273,"line_end":273,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":451}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37265,"byte_end":37273,"line_start":293,"line_end":293,"column_start":32,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2053},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":37617,"byte_end":37625,"line_start":309,"line_end":309,"column_start":43,"column_end":51},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2053},"to":{"krate":2,"index":4010}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":41327,"byte_end":41341,"line_start":402,"line_end":402,"column_start":20,"column_end":34},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\distributions\\mod.rs","byte_start":42823,"byte_end":42837,"line_start":441,"line_end":441,"column_start":40,"column_end":54},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2086},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":241961,"byte_end":241968,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\read.rs","byte_start":242142,"byte_end":242149,"line_start":59,"line_end":59,"column_start":27,"column_end":34},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2095},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":248219,"byte_end":248231,"line_start":92,"line_end":92,"column_start":15,"column_end":27},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249055,"byte_end":249067,"line_start":114,"line_end":114,"column_start":36,"column_end":48},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2101},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249601,"byte_end":249613,"line_start":137,"line_end":137,"column_start":25,"column_end":37},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2101},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":249937,"byte_end":249949,"line_start":148,"line_end":148,"column_start":29,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2101},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":250235,"byte_end":250248,"line_start":161,"line_end":161,"column_start":32,"column_end":45},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2110},"to":{"krate":15,"index":45}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":251099,"byte_end":251112,"line_start":183,"line_end":183,"column_start":15,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":254005,"byte_end":254018,"line_start":265,"line_end":265,"column_start":25,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2110},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\adapter\\reseeding.rs","byte_start":254454,"byte_end":254467,"line_start":280,"line_end":280,"column_start":29,"column_end":42},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2110},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":259655,"byte_end":259665,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":260024,"byte_end":260034,"line_start":69,"line_end":69,"column_start":18,"column_end":28},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2122},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":260116,"byte_end":260126,"line_start":75,"line_end":75,"column_start":18,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2122},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263243,"byte_end":263253,"line_start":162,"line_end":162,"column_start":20,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2122},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263574,"byte_end":263582,"line_start":180,"line_end":180,"column_start":24,"column_end":32},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2140},"to":{"krate":0,"index":644}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":263991,"byte_end":263993,"line_start":198,"line_end":198,"column_start":24,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2146},"to":{"krate":0,"index":644}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\entropy.rs","byte_start":264502,"byte_end":264508,"line_start":222,"line_end":222,"column_start":24,"column_end":30},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2153},"to":{"krate":0,"index":644}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266057,"byte_end":266064,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\mock.rs","byte_start":266327,"byte_end":266334,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2160},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":269687,"byte_end":269695,"line_start":76,"line_end":76,"column_start":18,"column_end":26},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2167},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\small.rs","byte_start":270107,"byte_end":270115,"line_start":96,"line_end":96,"column_start":22,"column_end":30},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2167},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":271772,"byte_end":271778,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2174},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":272190,"byte_end":272196,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2174},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\std.rs","byte_start":272476,"byte_end":272482,"line_start":67,"line_end":67,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2174},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277333,"byte_end":277342,"line_start":99,"line_end":99,"column_start":18,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2181},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277435,"byte_end":277444,"line_start":105,"line_end":105,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2181},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\rngs\\thread.rs","byte_start":277917,"byte_end":277926,"line_start":125,"line_end":125,"column_start":20,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2181},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":308481,"byte_end":308489,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":309938,"byte_end":309946,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2192},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310506,"byte_end":310514,"line_start":90,"line_end":90,"column_start":25,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2192},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310612,"byte_end":310620,"line_start":96,"line_end":96,"column_start":27,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2192},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":310899,"byte_end":310911,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311427,"byte_end":311439,"line_start":127,"line_end":127,"column_start":32,"column_end":44},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2203},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":311655,"byte_end":311671,"line_start":136,"line_end":136,"column_start":19,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2214},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\index.rs","byte_start":312178,"byte_end":312194,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2214},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":284673,"byte_end":284681,"line_start":173,"line_end":173,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3653},"to":{"krate":0,"index":822}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":284684,"byte_end":284689,"line_start":173,"line_end":173,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":822}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":292786,"byte_end":292787,"line_start":406,"line_end":406,"column_start":28,"column_end":29},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":861},"to":{"krate":0,"index":822}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293204,"byte_end":293219,"line_start":419,"line_end":419,"column_start":73,"column_end":88},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2225},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\seq\\mod.rs","byte_start":293675,"byte_end":293690,"line_start":434,"line_end":434,"column_start":9,"column_end":24},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2225},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":321667,"byte_end":321675,"line_start":28,"line_end":28,"column_start":18,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2237},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322131,"byte_end":322139,"line_start":50,"line_end":50,"column_start":22,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2237},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322445,"byte_end":322453,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":322760,"byte_end":322770,"line_start":74,"line_end":74,"column_start":18,"column_end":28},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2244},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323226,"byte_end":323236,"line_start":96,"line_end":96,"column_start":22,"column_end":32},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2244},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323552,"byte_end":323562,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":323846,"byte_end":323855,"line_start":119,"line_end":119,"column_start":18,"column_end":27},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2251},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324311,"byte_end":324320,"line_start":141,"line_end":141,"column_start":22,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2251},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":324634,"byte_end":324643,"line_start":153,"line_end":153,"column_start":6,"column_end":15},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325056,"byte_end":325065,"line_start":169,"line_end":169,"column_start":20,"column_end":29},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2251},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325224,"byte_end":325232,"line_start":176,"line_end":176,"column_start":18,"column_end":26},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2258},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":325688,"byte_end":325696,"line_start":198,"line_end":198,"column_start":22,"column_end":30},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2258},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326007,"byte_end":326015,"line_start":210,"line_end":210,"column_start":20,"column_end":28},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2258},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326194,"byte_end":326205,"line_start":217,"line_end":217,"column_start":18,"column_end":29},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2265},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":326661,"byte_end":326672,"line_start":239,"line_end":239,"column_start":22,"column_end":33},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2265},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327179,"byte_end":327185,"line_start":257,"line_end":257,"column_start":18,"column_end":24},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2272},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327641,"byte_end":327647,"line_start":279,"line_end":279,"column_start":22,"column_end":28},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2272},"to":{"krate":15,"index":129}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":327939,"byte_end":327945,"line_start":291,"line_end":291,"column_start":20,"column_end":26},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2272},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328151,"byte_end":328156,"line_start":300,"line_end":300,"column_start":18,"column_end":23},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2279},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328622,"byte_end":328627,"line_start":323,"line_end":323,"column_start":6,"column_end":11},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328764,"byte_end":328769,"line_start":330,"line_end":330,"column_start":20,"column_end":25},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2279},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":328975,"byte_end":328985,"line_start":339,"line_end":339,"column_start":18,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2286},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329447,"byte_end":329457,"line_start":362,"line_end":362,"column_start":6,"column_end":16},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329579,"byte_end":329589,"line_start":369,"line_end":369,"column_start":18,"column_end":28},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2286},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329695,"byte_end":329705,"line_start":376,"line_end":376,"column_start":20,"column_end":30},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2286},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":329871,"byte_end":329880,"line_start":383,"line_end":383,"column_start":18,"column_end":27},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2291},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330320,"byte_end":330329,"line_start":405,"line_end":405,"column_start":6,"column_end":15},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":330973,"byte_end":330982,"line_start":429,"line_end":429,"column_start":20,"column_end":29},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":2291},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331216,"byte_end":331225,"line_start":439,"line_end":439,"column_start":18,"column_end":27},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2298},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331701,"byte_end":331710,"line_start":462,"line_end":462,"column_start":20,"column_end":29},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2298},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":331940,"byte_end":331947,"line_start":471,"line_end":471,"column_start":27,"column_end":34},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2305},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332421,"byte_end":332428,"line_start":494,"line_end":494,"column_start":15,"column_end":22},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2305},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":332718,"byte_end":332730,"line_start":506,"line_end":506,"column_start":36,"column_end":48},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2312},"to":{"krate":15,"index":123}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333254,"byte_end":333266,"line_start":529,"line_end":529,"column_start":15,"column_end":27},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\deprecated.rs","byte_start":333601,"byte_end":333613,"line_start":542,"line_end":542,"column_start":29,"column_end":41},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2312},"to":{"krate":15,"index":128}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":6334,"byte_end":6341,"line_start":198,"line_end":198,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":15,"index":123},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":14510,"byte_end":14511,"line_start":443,"line_end":443,"column_start":35,"column_end":36},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1097},"to":{"krate":0,"index":1065}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":18335,"byte_end":18346,"line_start":566,"line_end":566,"column_start":24,"column_end":35},"kind":"SuperTrait","from":{"krate":15,"index":129},"to":{"krate":0,"index":1106}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.6.5\\src\\lib.rs","byte_start":19566,"byte_end":19567,"line_start":600,"line_end":600,"column_start":38,"column_end":39},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1109},"to":{"krate":0,"index":1106}}]}