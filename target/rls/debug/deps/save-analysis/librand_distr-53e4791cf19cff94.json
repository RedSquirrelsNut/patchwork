{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","rand_distr","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=53e4791cf19cff94","-C","extra-filename=-53e4791cf19cff94","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","rand=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand-cc693640ecde827f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand_distr-53e4791cf19cff94.rmeta"},"prelude":{"crate_id":{"name":"rand_distr","disambiguator":[2147741424370936477,17765735736464903689]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":14,"id":{"name":"rand","disambiguator":[8438396397274912183,3892782495060900242]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[17016881835859474259,11394802712639798332]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":16,"id":{"name":"getrandom","disambiguator":[41322740403071273,6117145283354986736]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":18,"id":{"name":"rand_chacha","disambiguator":[9783816951699179602,17772320859214680796]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":19,"id":{"name":"c2_chacha","disambiguator":[13937665862365590726,1406290536078948306]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","num":20,"id":{"name":"ppv_lite86","disambiguator":[7143213747247628097,14013417676120819252]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":356,"byte_end":5329,"line_start":9,"line_end":134,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":537},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2651,"byte_end":2663,"line_start":66,"line_end":66,"column_start":31,"column_end":43},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1960},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2665,"byte_end":2673,"line_start":66,"line_end":66,"column_start":45,"column_end":53},"alias_span":null,"name":"DistIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1972},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2675,"byte_end":2683,"line_start":66,"line_end":66,"column_start":55,"column_end":63},"alias_span":null,"name":"Standard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1585},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2689,"byte_end":2701,"line_start":67,"line_end":67,"column_start":5,"column_end":17},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2703,"byte_end":2710,"line_start":67,"line_end":67,"column_start":19,"column_end":26},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1509},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2712,"byte_end":2724,"line_start":67,"line_end":67,"column_start":28,"column_end":40},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1516},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2726,"byte_end":2732,"line_start":67,"line_end":67,"column_start":42,"column_end":48},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":925},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2734,"byte_end":2743,"line_start":67,"line_end":67,"column_start":50,"column_end":59},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":217},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2745,"byte_end":2752,"line_start":67,"line_end":67,"column_start":61,"column_end":68},"alias_span":null,"name":"uniform","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":320},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2754,"byte_end":2762,"line_start":67,"line_end":67,"column_start":70,"column_end":78},"alias_span":null,"name":"weighted","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2793,"byte_end":2803,"line_start":69,"line_end":69,"column_start":28,"column_end":38},"alias_span":null,"name":"UnitSphere","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2830,"byte_end":2838,"line_start":70,"line_end":70,"column_start":26,"column_end":34},"alias_span":null,"name":"UnitBall","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2867,"byte_end":2877,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2904,"byte_end":2912,"line_start":72,"line_end":72,"column_start":26,"column_end":34},"alias_span":null,"name":"UnitDisc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2936,"byte_end":2941,"line_start":73,"line_end":73,"column_start":23,"column_end":28},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2943,"byte_end":2948,"line_start":73,"line_end":73,"column_start":30,"column_end":35},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2952,"byte_end":2962,"line_start":73,"line_end":73,"column_start":39,"column_end":49},"name":"GammaError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2964,"byte_end":2974,"line_start":73,"line_end":73,"column_start":51,"column_end":61},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2976,"byte_end":2991,"line_start":73,"line_end":73,"column_start":63,"column_end":78},"alias_span":null,"name":"ChiSquaredError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":2997,"byte_end":3004,"line_start":74,"line_end":74,"column_start":5,"column_end":12},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3006,"byte_end":3018,"line_start":74,"line_end":74,"column_start":14,"column_end":26},"alias_span":null,"name":"FisherFError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3020,"byte_end":3028,"line_start":74,"line_end":74,"column_start":28,"column_end":36},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3030,"byte_end":3034,"line_start":74,"line_end":74,"column_start":38,"column_end":42},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3036,"byte_end":3045,"line_start":74,"line_end":74,"column_start":44,"column_end":53},"alias_span":null,"name":"BetaError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3071,"byte_end":3077,"line_start":75,"line_end":75,"column_start":24,"column_end":30},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3079,"byte_end":3084,"line_start":75,"line_end":75,"column_start":32,"column_end":37},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3088,"byte_end":3099,"line_start":75,"line_end":75,"column_start":41,"column_end":52},"name":"NormalError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3101,"byte_end":3110,"line_start":75,"line_end":75,"column_start":54,"column_end":63},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3112,"byte_end":3126,"line_start":75,"line_end":75,"column_start":65,"column_end":79},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3157,"byte_end":3160,"line_start":76,"line_end":76,"column_start":29,"column_end":32},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3162,"byte_end":3167,"line_start":76,"line_end":76,"column_start":34,"column_end":39},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3171,"byte_end":3179,"line_start":76,"line_end":76,"column_start":43,"column_end":51},"name":"ExpError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3181,"byte_end":3185,"line_start":76,"line_end":76,"column_start":53,"column_end":57},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3211,"byte_end":3217,"line_start":77,"line_end":77,"column_start":24,"column_end":30},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3219,"byte_end":3224,"line_start":77,"line_end":77,"column_start":32,"column_end":37},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3228,"byte_end":3239,"line_start":77,"line_end":77,"column_start":41,"column_end":52},"name":"ParetoError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3263,"byte_end":3267,"line_start":78,"line_end":78,"column_start":22,"column_end":26},"alias_span":null,"name":"Pert","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3269,"byte_end":3278,"line_start":78,"line_end":78,"column_start":28,"column_end":37},"alias_span":null,"name":"PertError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3305,"byte_end":3312,"line_start":79,"line_end":79,"column_start":25,"column_end":32},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3314,"byte_end":3319,"line_start":79,"line_end":79,"column_start":34,"column_end":39},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3323,"byte_end":3335,"line_start":79,"line_end":79,"column_start":43,"column_end":55},"name":"PoissonError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3363,"byte_end":3371,"line_start":80,"line_end":80,"column_start":26,"column_end":34},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3373,"byte_end":3378,"line_start":80,"line_end":80,"column_start":36,"column_end":41},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3382,"byte_end":3395,"line_start":80,"line_end":80,"column_start":45,"column_end":58},"name":"BinomialError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3421,"byte_end":3427,"line_start":81,"line_end":81,"column_start":24,"column_end":30},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3429,"byte_end":3434,"line_start":81,"line_end":81,"column_start":32,"column_end":37},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3438,"byte_end":3449,"line_start":81,"line_end":81,"column_start":41,"column_end":52},"name":"CauchyError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3478,"byte_end":3487,"line_start":82,"line_end":82,"column_start":27,"column_end":36},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3489,"byte_end":3494,"line_start":82,"line_end":82,"column_start":38,"column_end":43},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3498,"byte_end":3512,"line_start":82,"line_end":82,"column_start":47,"column_end":61},"name":"DirichletError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3542,"byte_end":3552,"line_start":83,"line_end":83,"column_start":28,"column_end":38},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3554,"byte_end":3569,"line_start":83,"line_end":83,"column_start":40,"column_end":55},"alias_span":null,"name":"TriangularError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3596,"byte_end":3603,"line_start":84,"line_end":84,"column_start":25,"column_end":32},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3605,"byte_end":3610,"line_start":84,"line_end":84,"column_start":34,"column_end":39},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3614,"byte_end":3626,"line_start":84,"line_end":84,"column_start":43,"column_end":55},"name":"WeibullError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":3650,"byte_end":3655,"line_start":85,"line_end":85,"column_start":22,"column_end":27},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":356,"byte_end":5329,"line_start":9,"line_end":134,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":75},{"krate":0,"index":88},{"krate":0,"index":101},{"krate":0,"index":114},{"krate":0,"index":177},{"krate":0,"index":209},{"krate":0,"index":233},{"krate":0,"index":246},{"krate":0,"index":264},{"krate":0,"index":282},{"krate":0,"index":297},{"krate":0,"index":310},{"krate":0,"index":328},{"krate":0,"index":341},{"krate":0,"index":354},{"krate":0,"index":403}],"decl_id":null,"docs":" Generating random samples from probability distributions.\n\n ## Re-exports\n\n This crate is a super-set of the [`rand::distributions`] module. See the\n [`rand::distributions`] module documentation for an overview of the core\n [`Distribution`] trait and implementations.\n\n The following are re-exported:\n \n - The [`Distribution`] trait and [`DistIter`] helper type\n - The [`Standard`], [`Alphanumeric`], [`Uniform`], [`OpenClosed01`], [`Open01`] and [`Bernoulli`] distributions\n - The [`weighted`] sub-module\n\n ## Distributions\n\n This crate provides the following probability distributions:\n\n - Related to real-valued quantities that grow linearly\n   (e.g. errors, offsets):\n   - [`Normal`] distribution, and [`StandardNormal`] as a primitive\n   - [`Cauchy`] distribution\n - Related to Bernoulli trials (yes/no events, with a given probability):\n   - [`Binomial`] distribution\n - Related to positive real-valued quantities that grow exponentially\n   (e.g. prices, incomes, populations):\n   - [`LogNormal`] distribution\n - Related to the occurrence of independent events at a given rate:\n   - [`Pareto`] distribution\n   - [`Poisson`] distribution\n   - [`Exp`]onential distribution, and [`Exp1`] as a primitive\n   - [`Weibull`] distribution\n - Gamma and derived distributions:\n   - [`Gamma`] distribution\n   - [`ChiSquared`] distribution\n   - [`StudentT`] distribution\n   - [`FisherF`] distribution\n - Triangular distribution:\n   - [`Beta`] distribution\n   - [`Triangular`] distribution\n - Multivariate probability distributions\n   - [`Dirichlet`] distribution\n   - [`UnitSphere`] distribution\n   - [`UnitBall`] distribution\n   - [`UnitCircle`] distribution\n   - [`UnitDisc`] distribution\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":571,"byte_end":593,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":594,"byte_end":633,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"allow(clippy :: excessive_precision, clippy :: float_cmp, clippy ::\n        unreadable_literal)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":635,"byte_end":720,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"allow(clippy :: neg_cmp_op_on_partial_ord)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\lib.rs","byte_start":721,"byte_end":765,"line_start":17,"line_end":17,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_sphere.rs","byte_start":6374,"byte_end":6384,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"UnitSphere","qualname":"::unit_sphere::UnitSphere","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.\n\n Implemented via a method by Marsaglia[^1].\n\n\n # Example\n\n ```\n use rand_distr::{UnitSphere, Distribution};\n\n let v: [f64; 3] = UnitSphere.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit sphere surface.\", v)\n ```\n\n [^1]: Marsaglia, George (1972). [*Choosing a Point from the Surface of a\n       Sphere.*](https://doi.org/10.1214/aoms/1177692644)\n       Ann. Math. Statist. 43, no. 2, 645--646.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_ball.rs","byte_start":9295,"byte_end":9303,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"UnitBall","qualname":"::unit_ball::UnitBall","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the unit ball (surface and interior) in three\n dimensions.\n\n Implemented via rejection sampling.\n\n\n # Example\n\n ```\n use rand_distr::{UnitBall, Distribution};\n\n let v: [f64; 3] = UnitBall.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit ball.\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_circle.rs","byte_start":11616,"byte_end":11626,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.\n\n Implemented via a method by von Neumann[^1].\n\n\n # Example\n\n ```\n use rand_distr::{UnitCircle, Distribution};\n\n let v: [f64; 2] = UnitCircle.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit circle.\", v)\n ```\n\n [^1]: von Neumann, J. (1951) [*Various Techniques Used in Connection with\n       Random Digits.*](https://mcnp.lanl.gov/pdf_files/nbs_vonneumann.pdf)\n       NBS Appl. Math. Ser., No. 12. Washington, DC: U.S. Government Printing\n       Office, pp. 36-38.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_disc.rs","byte_start":14428,"byte_end":14436,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"UnitDisc","qualname":"::unit_disc::UnitDisc","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the unit disc in two dimensions.\n\n Implemented via rejection sampling.\n\n\n # Example\n\n ```\n use rand_distr::{UnitDisc, Distribution};\n\n let v: [f64; 2] = UnitDisc.sample(&mut rand::thread_rng());\n println!(\"{:?} is from the unit Disc.\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":17234,"byte_end":17239,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":446}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.\n\n The density function of this distribution is\n\n ```text\n f(x) =  x^(k - 1) * exp(-x / θ) / (Γ(k) * θ^k)\n ```\n\n where `Γ` is the Gamma function, `k` is the shape and `θ` is the\n scale and both `k` and `θ` are strictly positive.\n\n The algorithm used is that described by Marsaglia & Tsang 2000[^1],\n falling back to directly sampling from an Exponential for `shape\n == 1`, and using the boosting technique described in that paper for\n `shape < 1`.\n\n # Example\n\n ```\n use rand_distr::{Distribution, Gamma};\n\n let gamma = Gamma::new(2.0, 5.0).unwrap();\n let v = gamma.sample(&mut rand::thread_rng());\n println!(\"{} is from a Gamma(2, 5) distribution\", v);\n ```\n\n [^1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method for\n       Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3\n       (September 2000), 363-372.\n       DOI:[10.1145/358407.358414](https://doi.acm.org/10.1145/358407.358414)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":17412,"byte_end":17425,"line_start":59,"line_end":59,"column_start":5,"column_end":18},"name":"ShapeTooSmall","qualname":"::gamma::Error::ShapeTooSmall","value":"Error::ShapeTooSmall","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" `shape <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":17462,"byte_end":17475,"line_start":61,"line_end":61,"column_start":5,"column_end":18},"name":"ScaleTooSmall","qualname":"::gamma::Error::ScaleTooSmall","value":"Error::ScaleTooSmall","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" `scale <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":17507,"byte_end":17520,"line_start":63,"line_end":63,"column_start":5,"column_end":18},"name":"ScaleTooLarge","qualname":"::gamma::Error::ScaleTooLarge","value":"Error::ScaleTooLarge","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" `1 / scale == 0`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":17369,"byte_end":17374,"line_start":57,"line_end":57,"column_start":10,"column_end":15},"name":"Error","qualname":"::gamma::Error","value":"Error::{ShapeTooSmall, ScaleTooSmall, ScaleTooLarge}","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460}],"decl_id":null,"docs":" Error type returned from `Gamma::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":18839,"byte_end":18842,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma<N>>::new","value":"fn (shape: N, scale: N) -> Result<Gamma<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":18818,"byte_end":18827,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22135,"byte_end":22145,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":519}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.\n\n For `k > 0` integral, this distribution is the sum of the squares\n of `k` independent standard normal random variables. For other\n `k`, this uses the equivalent characterisation\n `χ²(k) = Gamma(k/2, 2)`.\n\n # Example\n\n ```\n use rand_distr::{ChiSquared, Distribution};\n\n let chi = ChiSquared::new(11.0).unwrap();\n let v = chi.sample(&mut rand::thread_rng());\n println!(\"{} is from a χ²(11) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22360,"byte_end":22371,"line_start":224,"line_end":224,"column_start":5,"column_end":16},"name":"DoFTooSmall","qualname":"::gamma::ChiSquaredError::DoFTooSmall","value":"ChiSquaredError::DoFTooSmall","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" `0.5 * k <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22305,"byte_end":22320,"line_start":222,"line_end":222,"column_start":10,"column_end":25},"name":"ChiSquaredError","qualname":"::gamma::ChiSquaredError","value":"ChiSquaredError::{DoFTooSmall}","parent":null,"children":[{"krate":0,"index":529}],"decl_id":null,"docs":" Error type returned from `ChiSquared::new` and `StudentT::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22896,"byte_end":22899,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared<N>>::new","value":"fn (k: N) -> Result<ChiSquared<N>, ChiSquaredError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24222,"byte_end":24229,"line_start":284,"line_end":284,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.\n\n This distribution is equivalent to the ratio of two normalised\n chi-squared distributions, that is, `F(m,n) = (χ²(m)/m) /\n (χ²(n)/n)`.\n\n # Example\n\n ```\n use rand_distr::{FisherF, Distribution};\n\n let f = FisherF::new(2.0, 32.0).unwrap();\n let v = f.sample(&mut rand::thread_rng());\n println!(\"{} is from an F(2, 32) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24565,"byte_end":24574,"line_start":296,"line_end":296,"column_start":5,"column_end":14},"name":"MTooSmall","qualname":"::gamma::FisherFError::MTooSmall","value":"FisherFError::MTooSmall","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" `m <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24607,"byte_end":24616,"line_start":298,"line_end":298,"column_start":5,"column_end":14},"name":"NTooSmall","qualname":"::gamma::FisherFError::NTooSmall","value":"FisherFError::NTooSmall","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" `n <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24519,"byte_end":24531,"line_start":294,"line_end":294,"column_start":10,"column_end":22},"name":"FisherFError","qualname":"::gamma::FisherFError","value":"FisherFError::{MTooSmall, NTooSmall}","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":573}],"decl_id":null,"docs":" Error type returned from `FisherF::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24817,"byte_end":24820,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF<N>>::new","value":"fn (m: N, n: N) -> Result<FisherF<N>, FisherFError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given parameter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":25847,"byte_end":25855,"line_start":341,"line_end":341,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n\n # Example\n\n ```\n use rand_distr::{StudentT, Distribution};\n\n let t = StudentT::new(11.0).unwrap();\n let v = t.sample(&mut rand::thread_rng());\n println!(\"{} is from a t(11) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":26106,"byte_end":26109,"line_start":351,"line_end":351,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT<N>>::new","value":"fn (n: N) -> Result<StudentT<N>, ChiSquaredError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":26909,"byte_end":26913,"line_start":379,"line_end":379,"column_start":12,"column_end":16},"name":"Beta","qualname":"::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n\n # Example\n\n ```\n use rand_distr::{Distribution, Beta};\n\n let beta = Beta::new(2.0, 5.0).unwrap();\n let v = beta.sample(&mut rand::thread_rng());\n println!(\"{} is from a Beta(2, 5) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27111,"byte_end":27124,"line_start":388,"line_end":388,"column_start":5,"column_end":18},"name":"AlphaTooSmall","qualname":"::gamma::BetaError::AlphaTooSmall","value":"BetaError::AlphaTooSmall","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" `alpha <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":613},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27160,"byte_end":27172,"line_start":390,"line_end":390,"column_start":5,"column_end":17},"name":"BetaTooSmall","qualname":"::gamma::BetaError::BetaTooSmall","value":"BetaError::BetaTooSmall","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" `beta <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27064,"byte_end":27073,"line_start":386,"line_end":386,"column_start":10,"column_end":19},"name":"BetaError","qualname":"::gamma::BetaError","value":"BetaError::{AlphaTooSmall, BetaTooSmall}","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":613}],"decl_id":null,"docs":" Error type returned from `Beta::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27386,"byte_end":27389,"line_start":398,"line_end":398,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta<N>>::new","value":"fn (alpha: N, beta: N) -> Result<Beta<N>, BetaError>","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":30907,"byte_end":30921,"line_start":38,"line_end":38,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.\n\n See `Normal` for the general normal distribution.\n\n Implemented via the ZIGNOR variant[^1] of the Ziggurat method.\n\n [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n       Generate Normal Random Samples*](\n       https://www.doornik.com/research/ziggurat.pdf).\n       Nuffield College, Oxford\n\n # Example\n ```\n use rand::prelude::*;\n use rand_distr::StandardNormal;\n\n let val: f64 = thread_rng().sample(StandardNormal);\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":32962,"byte_end":32968,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"Normal","qualname":"::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.\n\n This uses the ZIGNOR variant of the Ziggurat method, see [`StandardNormal`]\n for more details.\n \n Note that [`StandardNormal`] is an optimised implementation for mean 0, and\n standard deviation 1.\n\n # Example\n\n ```\n use rand_distr::{Normal, Distribution};\n\n // mean 2, standard deviation 3\n let normal = Normal::new(2.0, 3.0).unwrap();\n let v = normal.sample(&mut rand::thread_rng());\n println!(\"{} is from a N(2, 9) distribution\", v)\n ```\n\n [`StandardNormal`]: crate::StandardNormal\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33169,"byte_end":33183,"line_start":114,"line_end":114,"column_start":5,"column_end":19},"name":"StdDevTooSmall","qualname":"::normal::Error::StdDevTooSmall","value":"Error::StdDevTooSmall","parent":{"krate":0,"index":645},"children":[],"decl_id":null,"docs":" `std_dev < 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33125,"byte_end":33130,"line_start":112,"line_end":112,"column_start":10,"column_end":15},"name":"Error","qualname":"::normal::Error","value":"Error::{StdDevTooSmall}","parent":null,"children":[{"krate":0,"index":646}],"decl_id":null,"docs":" Error type returned from `Normal::new` and `LogNormal::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33376,"byte_end":33379,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal<N>>::new","value":"fn (mean: N, std_dev: N) -> Result<Normal<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33355,"byte_end":33364,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34333,"byte_end":34342,"line_start":160,"line_end":160,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":661}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.\n\n If `X` is log-normal distributed, then `ln(X)` is `N(mean, std_dev**2)`\n distributed.\n\n # Example\n\n ```\n use rand_distr::{LogNormal, Distribution};\n\n // mean 2, standard deviation 3\n let log_normal = LogNormal::new(2.0, 3.0).unwrap();\n let v = log_normal.sample(&mut rand::thread_rng());\n println!(\"{} is from an ln N(2, 9) distribution\", v)\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34602,"byte_end":34605,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal<N>>::new","value":"fn (mean: N, std_dev: N) -> Result<LogNormal<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation of the logarithm of the distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34581,"byte_end":34590,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":37197,"byte_end":37201,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.\n\n See `Exp` for the general exponential distribution.\n\n Implemented via the ZIGNOR variant[^1] of the Ziggurat method. The exact\n description in the paper was adjusted to use tables for the exponential\n distribution rather than normal.\n\n [^1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to\n       Generate Normal Random Samples*](\n       https://www.doornik.com/research/ziggurat.pdf).\n       Nuffield College, Oxford\n\n # Example\n ```\n use rand::prelude::*;\n use rand_distr::Exp1;\n\n let val: f64 = thread_rng().sample(Exp1);\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38516,"byte_end":38519,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"Exp","qualname":"::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":679}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.\n\n This distribution has density function: `f(x) = lambda * exp(-lambda * x)`\n for `x > 0`.\n \n Note that [`Exp1`](crate::Exp1) is an optimised implementation for `lambda = 1`.\n\n # Example\n\n ```\n use rand_distr::{Exp, Distribution};\n\n let exp = Exp::new(2.0).unwrap();\n let v = exp.sample(&mut rand::thread_rng());\n println!(\"{} is from a Exp(2) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38760,"byte_end":38774,"line_start":97,"line_end":97,"column_start":5,"column_end":19},"name":"LambdaTooSmall","qualname":"::exponential::Error::LambdaTooSmall","value":"Error::LambdaTooSmall","parent":{"krate":0,"index":688},"children":[],"decl_id":null,"docs":" `lambda <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38716,"byte_end":38721,"line_start":95,"line_end":95,"column_start":10,"column_end":15},"name":"Error","qualname":"::exponential::Error","value":"Error::{LambdaTooSmall}","parent":null,"children":[{"krate":0,"index":689}],"decl_id":null,"docs":" Error type returned from `Exp::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38935,"byte_end":38938,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp<N>>::new","value":"fn (lambda: N) -> Result<Exp<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38914,"byte_end":38923,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40604,"byte_end":40610,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n\n # Example\n ```\n use rand::prelude::*;\n use rand_distr::Pareto;\n\n let val: f64 = thread_rng().sample(Pareto::new(1., 2.).unwrap());\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40796,"byte_end":40809,"line_start":35,"line_end":35,"column_start":5,"column_end":18},"name":"ScaleTooSmall","qualname":"::pareto::Error::ScaleTooSmall","value":"Error::ScaleTooSmall","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" `scale <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40846,"byte_end":40859,"line_start":37,"line_end":37,"column_start":5,"column_end":18},"name":"ShapeTooSmall","qualname":"::pareto::Error::ShapeTooSmall","value":"Error::ShapeTooSmall","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" `shape <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40753,"byte_end":40758,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Error","qualname":"::pareto::Error","value":"Error::{ScaleTooSmall, ShapeTooSmall}","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":717}],"decl_id":null,"docs":" Error type returned from `Pareto::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":41143,"byte_end":41146,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto<N>>::new","value":"fn (scale: N, shape: N) -> Result<Pareto<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.\n\n In the literature, `scale` is commonly written as x<sub>m</sub> or k and\n `shape` is often written as α.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43299,"byte_end":43303,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Pert","qualname":"::pert::Pert","value":"Pert {  }","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734}],"decl_id":null,"docs":" The PERT distribution.\n\n Similar to the [`Triangular`] distribution, the PERT distribution is\n parameterised by a range and a mode within that range. Unlike the\n [`Triangular`] distribution, the probability density function of the PERT\n distribution is smooth, with a configurable weighting around the mode.\n\n # Example\n\n ```rust\n use rand_distr::{Pert, Distribution};\n\n let d = Pert::new(0., 5., 2.5).unwrap();\n let v = d.sample(&mut rand::thread_rng());\n println!(\"{} is from a PERT distribution\", v);\n ```\n \n [`Triangular`]: crate::Triangular\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43525,"byte_end":43538,"line_start":43,"line_end":43,"column_start":5,"column_end":18},"name":"RangeTooSmall","qualname":"::pert::PertError::RangeTooSmall","value":"PertError::RangeTooSmall","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" `max < min` or `min` or `max` is NaN.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43599,"byte_end":43608,"line_start":45,"line_end":45,"column_start":5,"column_end":14},"name":"ModeRange","qualname":"::pert::PertError::ModeRange","value":"PertError::ModeRange","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" `mode < min` or `mode > max` or `mode` is NaN.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43652,"byte_end":43665,"line_start":47,"line_end":47,"column_start":5,"column_end":18},"name":"ShapeTooSmall","qualname":"::pert::PertError::ShapeTooSmall","value":"PertError::ShapeTooSmall","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" `shape < 0` or `shape` is NaN\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43463,"byte_end":43472,"line_start":41,"line_end":41,"column_start":10,"column_end":19},"name":"PertError","qualname":"::pert::PertError","value":"PertError::{RangeTooSmall, ModeRange, ShapeTooSmall}","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748}],"decl_id":null,"docs":" Error type returned from [`Pert`] constructors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43966,"byte_end":43969,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Pert<N>>::new","value":"fn (min: N, max: N, mode: N) -> Result<Pert<N>, PertError>","parent":null,"children":[],"decl_id":null,"docs":" Set up the PERT distribution with defined `min`, `max` and `mode`.\n\n This is equivalent to calling `Pert::new_shape` with `shape == 4.0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43945,"byte_end":43954,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":44199,"byte_end":44213,"line_start":63,"line_end":63,"column_start":12,"column_end":26},"name":"new_with_shape","qualname":"<Pert<N>>::new_with_shape","value":"fn (min: N, max: N, mode: N, shape: N) -> Result<Pert<N>, PertError>","parent":null,"children":[],"decl_id":null,"docs":" Set up the PERT distribution with defined `min`, `max`, `mode` and\n `shape`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47264,"byte_end":47271,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.\n\n This distribution has a density function:\n `f(k) = lambda^k * exp(-lambda) / k!` for `k >= 0`.\n\n # Example\n\n ```\n use rand_distr::{Poisson, Distribution};\n\n let poi = Poisson::new(2.0).unwrap();\n let v: u64 = poi.sample(&mut rand::thread_rng());\n println!(\"{} is from a Poisson(2) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47543,"byte_end":47556,"line_start":44,"line_end":44,"column_start":5,"column_end":18},"name":"ShapeTooSmall","qualname":"::poisson::Error::ShapeTooSmall","value":"Error::ShapeTooSmall","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" `lambda <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47499,"byte_end":47504,"line_start":42,"line_end":42,"column_start":10,"column_end":15},"name":"Error","qualname":"::poisson::Error","value":"Error::{ShapeTooSmall}","parent":null,"children":[{"krate":0,"index":777}],"decl_id":null,"docs":" Error type returned from `Poisson::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47715,"byte_end":47718,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson<N>>::new","value":"fn (lambda: N) -> Result<Poisson<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55028,"byte_end":55036,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.\n\n This distribution has density function:\n `f(k) = n!/(k! (n-k)!) p^k (1-p)^(n-k)` for `k >= 0`.\n\n # Example\n\n ```\n use rand_distr::{Binomial, Distribution};\n\n let bin = Binomial::new(20, 0.3).unwrap();\n let v = bin.sample(&mut rand::thread_rng());\n println!(\"{} is from a binomial distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55262,"byte_end":55281,"line_start":41,"line_end":41,"column_start":5,"column_end":24},"name":"ProbabilityTooSmall","qualname":"::binomial::Error::ProbabilityTooSmall","value":"Error::ProbabilityTooSmall","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" `p < 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55304,"byte_end":55323,"line_start":43,"line_end":43,"column_start":5,"column_end":24},"name":"ProbabilityTooLarge","qualname":"::binomial::Error::ProbabilityTooLarge","value":"Error::ProbabilityTooLarge","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":" `p > 1`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55224,"byte_end":55229,"line_start":39,"line_end":39,"column_start":10,"column_end":15},"name":"Error","qualname":"::binomial::Error","value":"Error::{ProbabilityTooSmall, ProbabilityTooLarge}","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":801}],"decl_id":null,"docs":" Error type returned from `Binomial::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55487,"byte_end":55490,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Result<Binomial, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66504,"byte_end":66510,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.\n\n This distribution has a density function:\n `f(x) = 1 / (pi * scale * (1 + ((x - median) / scale)^2))`\n\n # Example\n\n ```\n use rand_distr::{Cauchy, Distribution};\n\n let cau = Cauchy::new(2.0, 5.0).unwrap();\n let v = cau.sample(&mut rand::thread_rng());\n println!(\"{} is from a Cauchy(2, 5) distribution\", v);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66689,"byte_end":66702,"line_start":40,"line_end":40,"column_start":5,"column_end":18},"name":"ScaleTooSmall","qualname":"::cauchy::Error::ScaleTooSmall","value":"Error::ScaleTooSmall","parent":{"krate":0,"index":826},"children":[],"decl_id":null,"docs":" `scale <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66646,"byte_end":66651,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"Error","qualname":"::cauchy::Error","value":"Error::{ScaleTooSmall}","parent":null,"children":[{"krate":0,"index":827}],"decl_id":null,"docs":" Error type returned from `Cauchy::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66907,"byte_end":66910,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy<N>>::new","value":"fn (median: N, scale: N) -> Result<Cauchy<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70227,"byte_end":70236,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":842}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.\n\n The Dirichlet distribution is a family of continuous multivariate\n probability distributions parameterized by a vector alpha of positive reals.\n It is a multivariate generalization of the beta distribution.\n\n # Example\n\n ```\n use rand::prelude::*;\n use rand_distr::Dirichlet;\n\n let dirichlet = Dirichlet::new(vec![1.0, 2.0, 3.0]).unwrap();\n let samples = dirichlet.sample(&mut rand::thread_rng());\n println!(\"{:?} is from a Dirichlet([1.0, 2.0, 3.0]) distribution\", samples);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70444,"byte_end":70457,"line_start":42,"line_end":42,"column_start":5,"column_end":18},"name":"AlphaTooShort","qualname":"::dirichlet::Error::AlphaTooShort","value":"Error::AlphaTooShort","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" `alpha.len() < 2`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":852},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70496,"byte_end":70509,"line_start":44,"line_end":44,"column_start":5,"column_end":18},"name":"AlphaTooSmall","qualname":"::dirichlet::Error::AlphaTooSmall","value":"Error::AlphaTooSmall","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" `alpha <= 0.0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":854},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70535,"byte_end":70547,"line_start":46,"line_end":46,"column_start":5,"column_end":17},"name":"SizeTooSmall","qualname":"::dirichlet::Error::SizeTooSmall","value":"Error::SizeTooSmall","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" `size < 2`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70405,"byte_end":70410,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Error","qualname":"::dirichlet::Error","value":"Error::{AlphaTooShort, AlphaTooSmall, SizeTooSmall}","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854}],"decl_id":null,"docs":" Error type returned from `Dirchlet::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70814,"byte_end":70817,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet<N>>::new","value":"fn <V> (alpha: V) -> Result<Dirichlet<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.\n\n Requires `alpha.len() >= 2`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70793,"byte_end":70802,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":71318,"byte_end":71331,"line_start":74,"line_end":74,"column_start":12,"column_end":25},"name":"new_with_size","qualname":"<Dirichlet<N>>::new_with_size","value":"fn (alpha: N, size: usize) -> Result<Dirichlet<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.\n\n Requires `size >= 2`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":71297,"byte_end":71306,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74523,"byte_end":74533,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"decl_id":null,"docs":" The triangular distribution.\n \n A continuous probability distribution parameterised by a range, and a mode\n (most likely value) within that range.\n\n The probability density function is triangular. For a similar distribution\n with a smooth PDF, see the [`Pert`] distribution.\n\n # Example\n\n ```rust\n use rand_distr::{Triangular, Distribution};\n\n let d = Triangular::new(0., 5., 2.5).unwrap();\n let v = d.sample(&mut rand::thread_rng());\n println!(\"{} is from a triangular distribution\", v);\n ```\n\n [`Pert`]: crate::Pert\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74751,"byte_end":74764,"line_start":44,"line_end":44,"column_start":5,"column_end":18},"name":"RangeTooSmall","qualname":"::triangular::TriangularError::RangeTooSmall","value":"TriangularError::RangeTooSmall","parent":{"krate":0,"index":880},"children":[],"decl_id":null,"docs":" `max < min` or `min` or `max` is NaN.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74825,"byte_end":74834,"line_start":46,"line_end":46,"column_start":5,"column_end":14},"name":"ModeRange","qualname":"::triangular::TriangularError::ModeRange","value":"TriangularError::ModeRange","parent":{"krate":0,"index":880},"children":[],"decl_id":null,"docs":" `mode < min` or `mode > max` or `mode` is NaN.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74683,"byte_end":74698,"line_start":42,"line_end":42,"column_start":10,"column_end":25},"name":"TriangularError","qualname":"::triangular::TriangularError","value":"TriangularError::{RangeTooSmall, ModeRange}","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":883}],"decl_id":null,"docs":" Error type returned from [`Triangular::new`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":75008,"byte_end":75011,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular<N>>::new","value":"fn (min: N, max: N, mode: N) -> Result<Triangular<N>, TriangularError>","parent":null,"children":[],"decl_id":null,"docs":" Set up the Triangular distribution with defined `min`, `max` and `mode`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74987,"byte_end":74996,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78106,"byte_end":78113,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n\n # Example\n ```\n use rand::prelude::*;\n use rand_distr::Weibull;\n\n let val: f64 = thread_rng().sample(Weibull::new(1., 10.).unwrap());\n println!(\"{}\", val);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78296,"byte_end":78309,"line_start":35,"line_end":35,"column_start":5,"column_end":18},"name":"ScaleTooSmall","qualname":"::weibull::Error::ScaleTooSmall","value":"Error::ScaleTooSmall","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" `scale <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":911},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78346,"byte_end":78359,"line_start":37,"line_end":37,"column_start":5,"column_end":18},"name":"ShapeTooSmall","qualname":"::weibull::Error::ShapeTooSmall","value":"Error::ShapeTooSmall","parent":{"krate":0,"index":908},"children":[],"decl_id":null,"docs":" `shape <= 0` or `nan`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78253,"byte_end":78258,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Error","qualname":"::weibull::Error","value":"Error::{ScaleTooSmall, ShapeTooSmall}","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":911}],"decl_id":null,"docs":" Error type returned from `Weibull::new`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78518,"byte_end":78521,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull<N>>::new","value":"fn (scale: N, shape: N) -> Result<Weibull<N>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80433,"byte_end":80438,"line_start":24,"line_end":24,"column_start":11,"column_end":16},"name":"Float","qualname":"::utils::Float","value":"Float: Copy + Sized + cmp::PartialOrd + ops::Neg<Output = Self> + ops::Add<Output =\nSelf> + ops::Sub<Output = Self> + ops::Mul<Output = Self> + ops::Div<Output =\nSelf> + ops::AddAssign + ops::SubAssign + ops::MulAssign + ops::DivAssign","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":" Trait for floating-point scalar types\n \n This allows many distributions to work with `f32` or `f64` parameters and is\n potentially extensible. Note however that the `Exp1` and `StandardNormal`\n distributions are implemented exclusively for `f32` and `f64`.\n \n The bounds and methods are based purely on internal\n requirements, and will change as needed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80726,"byte_end":80728,"line_start":33,"line_end":33,"column_start":8,"column_end":10},"name":"pi","qualname":"::utils::Float::pi","value":"fn () -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" The constant π\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80805,"byte_end":80809,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"from","qualname":"::utils::Float::from","value":"fn (x: f64) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Support approximate representation of a f64 value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80885,"byte_end":80891,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::utils::Float::to_u64","value":"fn (self) -> Option<u64>","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Support converting to an unsigned integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80966,"byte_end":80969,"line_start":40,"line_end":40,"column_start":8,"column_end":11},"name":"abs","qualname":"::utils::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the absolute value of self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81052,"byte_end":81057,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"floor","qualname":"::utils::Float::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the largest integer less than or equal to self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81122,"byte_end":81125,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"exp","qualname":"::utils::Float::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the exponential of self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81191,"byte_end":81193,"line_start":47,"line_end":47,"column_start":8,"column_end":10},"name":"ln","qualname":"::utils::Float::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the natural logarithm of self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81249,"byte_end":81253,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::utils::Float::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take square root of self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81320,"byte_end":81324,"line_start":51,"line_end":51,"column_start":8,"column_end":12},"name":"powf","qualname":"::utils::Float::powf","value":"fn (self, power: Self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take self to a floating-point power\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81398,"byte_end":81401,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"tan","qualname":"::utils::Float::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the tangent of self\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":81481,"byte_end":81490,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"log_gamma","qualname":"::utils::Float::log_gamma","value":"fn (self) -> Self","parent":{"krate":0,"index":361},"children":[],"decl_id":null,"docs":" Take the logarithm of the gamma function of self\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_sphere.rs","byte_start":6443,"byte_end":6453,"line_start":33,"line_end":33,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_ball.rs","byte_start":9362,"byte_end":9370,"line_start":30,"line_end":30,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_circle.rs","byte_start":11685,"byte_end":11695,"line_start":34,"line_end":34,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_disc.rs","byte_start":14495,"byte_end":14503,"line_start":29,"line_end":29,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":18628,"byte_end":18633,"line_start":104,"line_end":104,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":19444,"byte_end":19459,"line_start":129,"line_end":129,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":19771,"byte_end":19786,"line_start":140,"line_end":140,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20125,"byte_end":20130,"line_start":153,"line_end":153,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20486,"byte_end":20501,"line_start":164,"line_end":164,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20773,"byte_end":20788,"line_start":173,"line_end":173,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22700,"byte_end":22710,"line_start":236,"line_end":236,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":23326,"byte_end":23336,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24636,"byte_end":24643,"line_start":301,"line_end":301,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":25256,"byte_end":25263,"line_start":320,"line_end":320,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":25914,"byte_end":25922,"line_start":346,"line_end":346,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":26291,"byte_end":26299,"line_start":358,"line_end":358,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27192,"byte_end":27196,"line_start":393,"line_end":393,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27748,"byte_end":27752,"line_start":408,"line_end":408,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":30951,"byte_end":30965,"line_start":40,"line_end":40,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":31185,"byte_end":31199,"line_start":49,"line_end":49,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33203,"byte_end":33209,"line_start":117,"line_end":117,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33641,"byte_end":33647,"line_start":134,"line_end":134,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34386,"byte_end":34395,"line_start":164,"line_end":164,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34869,"byte_end":34878,"line_start":178,"line_end":178,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":37231,"byte_end":37235,"line_start":42,"line_end":42,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":37526,"byte_end":37530,"line_start":52,"line_end":52,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38794,"byte_end":38797,"line_start":100,"line_end":100,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":39174,"byte_end":39177,"line_start":114,"line_end":114,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40879,"byte_end":40885,"line_start":40,"line_end":40,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":41494,"byte_end":41500,"line_start":58,"line_end":58,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43685,"byte_end":43689,"line_start":50,"line_end":50,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":45084,"byte_end":45088,"line_start":88,"line_end":88,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47576,"byte_end":47583,"line_start":47,"line_end":47,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":48194,"byte_end":48201,"line_start":67,"line_end":67,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":50620,"byte_end":50627,"line_start":125,"line_end":125,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55333,"byte_end":55341,"line_start":46,"line_end":46,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55990,"byte_end":55998,"line_start":67,"line_end":67,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66722,"byte_end":66728,"line_start":43,"line_end":43,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":67168,"byte_end":67174,"line_start":59,"line_end":59,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70567,"byte_end":70576,"line_start":49,"line_end":49,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":71679,"byte_end":71688,"line_start":87,"line_end":87,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74854,"byte_end":74864,"line_start":49,"line_end":49,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":75365,"byte_end":75375,"line_start":65,"line_end":65,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78379,"byte_end":78386,"line_start":40,"line_end":40,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78863,"byte_end":78870,"line_start":55,"line_end":55,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_sphere.rs","byte_start":6443,"byte_end":6453,"line_start":33,"line_end":33,"column_start":57,"column_end":67},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":416},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_ball.rs","byte_start":9362,"byte_end":9370,"line_start":30,"line_end":30,"column_start":57,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":423},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_circle.rs","byte_start":11685,"byte_end":11695,"line_start":34,"line_end":34,"column_start":57,"column_end":67},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":430},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\unit_disc.rs","byte_start":14495,"byte_end":14503,"line_start":29,"line_end":29,"column_start":57,"column_end":65},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":437},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":18628,"byte_end":18633,"line_start":104,"line_end":104,"column_start":16,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":19444,"byte_end":19459,"line_start":129,"line_end":129,"column_start":16,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":19771,"byte_end":19786,"line_start":140,"line_end":140,"column_start":16,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20125,"byte_end":20130,"line_start":153,"line_end":153,"column_start":36,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":444},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20486,"byte_end":20501,"line_start":164,"line_end":164,"column_start":36,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":492},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":20773,"byte_end":20788,"line_start":173,"line_end":173,"column_start":36,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":504},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":22700,"byte_end":22710,"line_start":236,"line_end":236,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":23326,"byte_end":23336,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":517},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":24636,"byte_end":24643,"line_start":301,"line_end":301,"column_start":16,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":25256,"byte_end":25263,"line_start":320,"line_end":320,"column_start":36,"column_end":43},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":557},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":25914,"byte_end":25922,"line_start":346,"line_end":346,"column_start":16,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":26291,"byte_end":26299,"line_start":358,"line_end":358,"column_start":36,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":586},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27192,"byte_end":27196,"line_start":393,"line_end":393,"column_start":16,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\gamma.rs","byte_start":27748,"byte_end":27752,"line_start":408,"line_end":408,"column_start":36,"column_end":40},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":598},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":30951,"byte_end":30965,"line_start":40,"line_end":40,"column_start":28,"column_end":42},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":626},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":31185,"byte_end":31199,"line_start":49,"line_end":49,"column_start":28,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":626},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33203,"byte_end":33209,"line_start":117,"line_end":117,"column_start":16,"column_end":22},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":33641,"byte_end":33647,"line_start":134,"line_end":134,"column_start":36,"column_end":42},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":633},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34386,"byte_end":34395,"line_start":164,"line_end":164,"column_start":16,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\normal.rs","byte_start":34869,"byte_end":34878,"line_start":178,"line_end":178,"column_start":36,"column_end":45},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":659},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":37231,"byte_end":37235,"line_start":42,"line_end":42,"column_start":28,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":670},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":37526,"byte_end":37530,"line_start":52,"line_end":52,"column_start":28,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":670},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":38794,"byte_end":38797,"line_start":100,"line_end":100,"column_start":16,"column_end":19},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\exponential.rs","byte_start":39174,"byte_end":39177,"line_start":114,"line_end":114,"column_start":36,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":677},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":40879,"byte_end":40885,"line_start":40,"line_end":40,"column_start":16,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pareto.rs","byte_start":41494,"byte_end":41500,"line_start":58,"line_end":58,"column_start":36,"column_end":42},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":702},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":43685,"byte_end":43689,"line_start":50,"line_end":50,"column_start":16,"column_end":20},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\pert.rs","byte_start":45084,"byte_end":45088,"line_start":88,"line_end":88,"column_start":36,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":730},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":47576,"byte_end":47583,"line_start":47,"line_end":47,"column_start":16,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":48194,"byte_end":48201,"line_start":67,"line_end":67,"column_start":36,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":761},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\poisson.rs","byte_start":50620,"byte_end":50627,"line_start":125,"line_end":125,"column_start":38,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":761},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55333,"byte_end":55341,"line_start":46,"line_end":46,"column_start":6,"column_end":14},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\binomial.rs","byte_start":55990,"byte_end":55998,"line_start":67,"line_end":67,"column_start":28,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":790},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":66722,"byte_end":66728,"line_start":43,"line_end":43,"column_start":16,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\cauchy.rs","byte_start":67168,"byte_end":67174,"line_start":59,"line_end":59,"column_start":36,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":814},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":70567,"byte_end":70576,"line_start":49,"line_end":49,"column_start":16,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\dirichlet.rs","byte_start":71679,"byte_end":71688,"line_start":87,"line_end":87,"column_start":41,"column_end":50},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":840},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":74854,"byte_end":74864,"line_start":49,"line_end":49,"column_start":16,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\triangular.rs","byte_start":75365,"byte_end":75375,"line_start":65,"line_end":65,"column_start":36,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":867},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78379,"byte_end":78386,"line_start":40,"line_end":40,"column_start":16,"column_end":23},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\weibull.rs","byte_start":78863,"byte_end":78870,"line_start":55,"line_end":55,"column_start":36,"column_end":43},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":896},"to":{"krate":14,"index":537}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80440,"byte_end":80444,"line_start":24,"line_end":24,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80447,"byte_end":80452,"line_start":24,"line_end":24,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80460,"byte_end":80470,"line_start":24,"line_end":24,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2077},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80482,"byte_end":80485,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1623},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80512,"byte_end":80515,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1596},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80542,"byte_end":80545,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1601},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80572,"byte_end":80575,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1606},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80602,"byte_end":80605,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1611},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80632,"byte_end":80641,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1629},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80649,"byte_end":80658,"line_start":30,"line_end":30,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1633},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80666,"byte_end":80675,"line_start":30,"line_end":30,"column_start":46,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1637},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_distr-0.2.2\\src\\utils.rs","byte_start":80683,"byte_end":80692,"line_start":30,"line_end":30,"column_start":63,"column_end":72},"kind":"SuperTrait","from":{"krate":2,"index":1641},"to":{"krate":0,"index":361}}]}