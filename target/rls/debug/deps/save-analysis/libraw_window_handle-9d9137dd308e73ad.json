{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","raw_window_handle","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9d9137dd308e73ad","-C","extra-filename=-9d9137dd308e73ad","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","libc=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblibc-bdc370f3966ce084.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libraw_window_handle-9d9137dd308e73ad.rmeta"},"prelude":{"crate_id":{"name":"raw_window_handle","disambiguator":[5058222338435994168,14980528843496773760]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","num":4,"id":{"name":"libc","disambiguator":[5464519403103214804,849774347526692301]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":0,"byte_end":6660,"line_start":1,"line_end":194,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":0,"byte_end":6660,"line_start":1,"line_end":194,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":33},{"krate":0,"index":53},{"krate":0,"index":51},{"krate":0,"index":50},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":40},{"krate":0,"index":13}],"decl_id":null,"docs":" Interoperability library for Rust Windowing applications.\n\n This library provides standard types for accessing a window's platform-specific raw window\n handle. This does not provide any utilities for creating and managing windows; instead, it\n provides a common interface that window creation libraries (e.g. Winit, SDL) can use to easily\n talk with graphics libraries (e.g. gfx-hal).\n\n ## Platform handle initialization\n\n Each platform handle struct is purposefully non-exhaustive, so that additional fields may be\n added without breaking backwards compatibility. Each struct provides an `empty` method that may\n be used along with the struct update syntax to construct it. See each specific struct for\n examples.\n\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":816,"byte_end":826,"line_start":16,"line_end":16,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"windows","qualname":"::windows","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":14},{"krate":0,"index":31},{"krate":0,"index":29},{"krate":0,"index":28},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":18},{"krate":0,"index":7}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_os = \"windows\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":2017,"byte_end":2043,"line_start":52,"line_end":52,"column_start":43,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":6980,"byte_end":6993,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"WindowsHandle","qualname":"::windows::WindowsHandle","value":"WindowsHandle { hwnd, hinstance, _non_exhaustive_do_not_use }","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" Raw window handle for Windows.\n\n ## Construction\n ```\n # use raw_window_handle::windows::WindowsHandle;\n let handle = WindowsHandle {\n     /* fields */\n     ..WindowsHandle::empty()\n };\n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7033,"byte_end":7037,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"hwnd","qualname":"::windows::WindowsHandle::hwnd","value":"*mut core::ffi::c_void","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" A Win32 HWND handle.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7116,"byte_end":7125,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"hinstance","qualname":"::windows::WindowsHandle::hinstance","value":"*mut core::ffi::c_void","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" The HINSTANCE associated with this type's HWND.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7324,"byte_end":7350,"line_start":22,"line_end":22,"column_start":9,"column_end":35},"name":"_non_exhaustive_do_not_use","qualname":"::windows::WindowsHandle::_non_exhaustive_do_not_use","value":"seal::Seal","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated =\n  \"This field is used to ensure that this struct is non-exhaustive, so that it may be extended in the future. Do not refer to this field.\"","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7163,"byte_end":7315,"line_start":21,"line_end":21,"column_start":5,"column_end":157}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7406,"byte_end":7411,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"empty","qualname":"<WindowsHandle>::empty","value":"fn () -> WindowsHandle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":3629,"byte_end":3647,"line_start":94,"line_end":94,"column_start":18,"column_end":36},"name":"HasRawWindowHandle","qualname":"::HasRawWindowHandle","value":"HasRawWindowHandle","parent":null,"children":[{"krate":0,"index":12}],"decl_id":null,"docs":" Window that wraps around a raw window handle.\n\n # Safety guarantees\n\n Users can safely assume that non-`null`/`0` fields are valid handles, and it is up to the\n implementer of this trait to ensure that condition is upheld. However, It is entirely valid\n behavior for fields within each platform-specific `RawWindowHandle` variant to be `null` or\n `0`, and appropriate checking should be done before the handle is used.\n\n Despite that qualification, implementers should still make a best-effort attempt to fill in all\n available fields. If an implementation doesn't, and a downstream user needs the field, it should\n try to derive the field from other fields the implementer *does* provide via whatever methods the\n platform provides.\n\n The exact handles returned by `raw_window_handle` must remain consistent between multiple calls\n to `raw_window_handle`, and must be valid for at least the lifetime of the `HasRawWindowHandle`\n implementer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":3657,"byte_end":3674,"line_start":95,"line_end":95,"column_start":8,"column_end":25},"name":"raw_window_handle","qualname":"::HasRawWindowHandle::raw_window_handle","value":"fn (&self) -> RawWindowHandle","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":5952,"byte_end":5959,"line_start":176,"line_end":176,"column_start":5,"column_end":12},"name":"Windows","qualname":"::RawWindowHandle::Windows","value":"RawWindowHandle::Windows(windows::WindowsHandle)","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_os = \"windows\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":5919,"byte_end":5945,"line_start":175,"line_end":175,"column_start":47,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":6532,"byte_end":6555,"line_start":188,"line_end":188,"column_start":5,"column_end":28},"name":"__NonExhaustiveDoNotUse","qualname":"::RawWindowHandle::__NonExhaustiveDoNotUse","value":"RawWindowHandle::__NonExhaustiveDoNotUse(seal::Seal)","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated =\n  \"This field is used to ensure that this struct is non-exhaustive, so that it may be extended in the future. Do not refer to this field.\"","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":6375,"byte_end":6527,"line_start":187,"line_end":187,"column_start":5,"column_end":157}}]},{"kind":"Enum","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":3765,"byte_end":3780,"line_start":99,"line_end":99,"column_start":10,"column_end":25},"name":"RawWindowHandle","qualname":"::RawWindowHandle","value":"RawWindowHandle::{Windows, __NonExhaustiveDoNotUse}","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":37}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":6653,"byte_end":6657,"line_start":193,"line_end":193,"column_start":16,"column_end":20},"name":"Seal","qualname":"::seal::Seal","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7379,"byte_end":7392,"line_start":25,"line_end":25,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\lib.rs","byte_start":2054,"byte_end":2061,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\raw-window-handle-0.3.3\\src\\windows.rs","byte_start":7379,"byte_end":7392,"line_start":25,"line_end":25,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":14},"to":{"krate":4294967295,"index":4294967295}}]}