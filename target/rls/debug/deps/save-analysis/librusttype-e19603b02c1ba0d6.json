{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","rusttype","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"crossbeam-deque\"","--cfg","feature=\"crossbeam-utils\"","--cfg","feature=\"default\"","--cfg","feature=\"gpu_cache\"","--cfg","feature=\"has-atomics\"","--cfg","feature=\"linked-hash-map\"","--cfg","feature=\"num_cpus\"","--cfg","feature=\"rustc-hash\"","--cfg","feature=\"std\"","-C","metadata=e19603b02c1ba0d6","-C","extra-filename=-e19603b02c1ba0d6","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","approx=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libapprox-fcc8137a9062fedc.rmeta","--extern","arrayvec=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libarrayvec-192ae924b6b647b3.rmeta","--extern","crossbeam_deque=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrossbeam_deque-36ddcd3e74457ae2.rmeta","--extern","crossbeam_utils=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrossbeam_utils-7691cda68fa03b20.rmeta","--extern","linked_hash_map=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblinked_hash_map-e2907532bafd1ee0.rmeta","--extern","num_cpus=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libnum_cpus-097f01fe18cb2379.rmeta","--extern","ordered_float=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libordered_float-e6e4427a43c5fe87.rmeta","--extern","rustc_hash=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librustc_hash-445a0f5f5ed19fd9.rmeta","--extern","stb_truetype=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libstb_truetype-b914836f50350d5b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librusttype-e19603b02c1ba0d6.rmeta"},"prelude":{"crate_id":{"name":"rusttype","disambiguator":[13263997752320669711,4920352708742172091]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","num":14,"id":{"name":"approx","disambiguator":[8203426696814416008,11700430433253579810]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","num":15,"id":{"name":"num_traits","disambiguator":[9658936450980938914,14161967064833628679]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","num":16,"id":{"name":"ordered_float","disambiguator":[5861230906993484489,6258720921812304733]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","num":17,"id":{"name":"arrayvec","disambiguator":[9090649725863519185,15793980851999346954]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":18,"id":{"name":"linked_hash_map","disambiguator":[14142994031446925191,1665975324801198051]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":19,"id":{"name":"rustc_hash","disambiguator":[14324777267488932790,14384939360982581900]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":20,"id":{"name":"byteorder","disambiguator":[373764108737062493,6998070977021925776]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":21,"id":{"name":"crossbeam_deque","disambiguator":[5018473264195450183,6382778854308847870]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":22,"id":{"name":"crossbeam_epoch","disambiguator":[17054536658623444655,6154134795048836908]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":23,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":24,"id":{"name":"crossbeam_utils","disambiguator":[7709528671052336800,4286142518779901766]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":25,"id":{"name":"lazy_static","disambiguator":[17281579441627161632,7326486140096487162]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":26,"id":{"name":"memoffset","disambiguator":[16489986462602757596,1492316565336062603]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":27,"id":{"name":"scopeguard","disambiguator":[8293681837284562385,10699146686669501925]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","num":28,"id":{"name":"stb_truetype","disambiguator":[6738647066241828924,2833314474130793450]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","num":29,"id":{"name":"num_cpus","disambiguator":[15898470444742567229,11826811419716725877]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":0,"byte_end":42496,"line_start":1,"line_end":1112,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5269,"byte_end":5274,"line_start":109,"line_end":109,"column_start":27,"column_end":32},"alias_span":null,"name":"point","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5276,"byte_end":5282,"line_start":109,"line_end":109,"column_start":34,"column_end":40},"alias_span":null,"name":"vector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5284,"byte_end":5289,"line_start":109,"line_end":109,"column_start":42,"column_end":47},"alias_span":null,"name":"Curve","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5291,"byte_end":5295,"line_start":109,"line_end":109,"column_start":49,"column_end":53},"alias_span":null,"name":"Line","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5297,"byte_end":5302,"line_start":109,"line_end":109,"column_start":55,"column_end":60},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5304,"byte_end":5308,"line_start":109,"line_end":109,"column_start":62,"column_end":66},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5310,"byte_end":5316,"line_start":109,"line_end":109,"column_start":68,"column_end":74},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":0,"byte_end":42496,"line_start":1,"line_end":1112,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":88},{"krate":0,"index":140},{"krate":0,"index":249},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":710},{"krate":0,"index":717},{"krate":0,"index":714},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":261},{"krate":0,"index":726},{"krate":0,"index":737},{"krate":0,"index":734},{"krate":0,"index":263},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":740},{"krate":0,"index":765},{"krate":0,"index":763},{"krate":0,"index":761},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":751},{"krate":0,"index":745},{"krate":0,"index":743},{"krate":0,"index":766},{"krate":0,"index":791},{"krate":0,"index":789},{"krate":0,"index":787},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":777},{"krate":0,"index":771},{"krate":0,"index":769},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":280},{"krate":0,"index":798},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":839},{"krate":0,"index":837},{"krate":0,"index":835},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":821},{"krate":0,"index":840},{"krate":0,"index":866},{"krate":0,"index":864},{"krate":0,"index":862},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":844},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":867},{"krate":0,"index":872},{"krate":0,"index":287},{"krate":0,"index":875},{"krate":0,"index":880},{"krate":0,"index":289},{"krate":0,"index":883},{"krate":0,"index":904},{"krate":0,"index":902},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":888},{"krate":0,"index":886},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":308},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":905},{"krate":0,"index":911},{"krate":0,"index":335},{"krate":0,"index":916},{"krate":0,"index":925},{"krate":0,"index":342},{"krate":0,"index":348},{"krate":0,"index":929},{"krate":0,"index":940},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":941},{"krate":0,"index":945},{"krate":0,"index":943},{"krate":0,"index":357},{"krate":0,"index":378},{"krate":0,"index":947},{"krate":0,"index":956},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400}],"decl_id":null,"docs":" RustType is a pure Rust alternative to libraries like FreeType.\n\n The current capabilities of RustType:\n\n * Reading TrueType formatted fonts and font collections. This includes\n   `*.ttf` as well as a subset of `*.otf` font files.\n * Retrieving glyph shapes and commonly used properties for a font and its\n   glyphs.\n * Laying out glyphs horizontally using horizontal and vertical metrics, and\n   glyph-pair-specific kerning.\n * Rasterising glyphs with sub-pixel positioning using an accurate analytical\n   algorithm (not based on sampling).\n * Managing a font cache on the GPU with the `gpu_cache` module. This keeps\n   recently used glyph renderings in a dynamic cache in GPU memory to\n   minimise texture uploads per-frame. It also allows you keep the draw call\n   count for text very low, as all glyphs are kept in one GPU texture.\n\n Notable things that RustType does not support *yet*:\n\n * OpenType formatted fonts that are not just TrueType fonts (OpenType is a\n   superset of TrueType). Notably there is no support yet for cubic Bezier\n   curves used in glyphs.\n * Font hinting.\n * Ligatures of any kind.\n * Some less common TrueType sub-formats.\n * Right-to-left and vertical text layout.\n\n # Getting Started\n\n To hit the ground running with RustType, look at the `simple.rs` example\n supplied with the crate. It demonstrates loading a font file, rasterising an\n arbitrary string, and displaying the result as ASCII art. If you prefer to\n just look at the documentation, the entry point for loading fonts is\n `FontCollection`, from which you can access individual fonts, then their\n glyphs.\n\n # Glyphs\n\n The glyph API uses wrapper structs to augment a glyph with information such\n as scaling and positioning, making relevant methods that make use of this\n information available as appropriate. For example, given a `Glyph` `glyph`\n obtained directly from a `Font`:\n\n ```no_run\n # use rusttype::*;\n # let glyph: Glyph<'static> = unimplemented!();\n // One of the few things you can do with an unsized, positionless glyph is get its id.\n let id = glyph.id();\n let glyph = glyph.scaled(Scale::uniform(10.0));\n // Now glyph is a ScaledGlyph, you can do more with it, as well as what you can do with Glyph.\n // For example, you can access the correctly scaled horizontal metrics for the glyph.\n let h_metrics = glyph.h_metrics();\n let glyph = glyph.positioned(point(5.0, 3.0));\n // Now glyph is a PositionedGlyph, and you can do even more with it, e.g. drawing.\n glyph.draw(|x, y, v| {}); // In this case the pixel values are not used.\n ```\n\n # Unicode terminology\n\n This crate uses terminology for computerised typography as specified by the\n Unicode standard. If you are not sure of the differences between a code\n point, a character, and a glyph, you may want to check the [official Unicode\n glossary](http://unicode.org/glossary/), or alternatively, here's my take on\n it from a practical perspective:\n\n * A character is what you would conventionally call a single symbol,\n   independent of its appearance or representation in a particular font.\n   Examples include `a`, `A`, `ä`, `å`, `1`, `*`, `Ω`, etc.\n * A Unicode code point is the particular number that the Unicode standard\n   associates with a particular character. Note however that code points also\n   exist for things not conventionally thought of as characters by\n   themselves, but can be combined to form characters, such as diacritics\n   like accents. These \"characters\" are known in Unicode as \"combining\n   characters\". E.g., a diaeresis (`¨`) has the code point U+0308. If this\n   code point follows the code point U+0055 (the letter `u`), this sequence\n   represents the character `ü`. Note that there is also a single codepoint\n   for `ü`, U+00FC. This means that what visually looks like the same string\n   can have multiple different Unicode representations. Some fonts will have\n   glyphs (see below) for one sequence of codepoints, but not another that\n   has the same meaning. To deal with this problem it is recommended to use\n   Unicode normalisation, as provided by, for example, the\n   [unicode-normalization](http://crates.io/crates/unicode-normalization)\n   crate, to convert to code point sequences that work with the font in\n   question. Typically a font is more likely to support a single code point\n   vs. a sequence with the same meaning, so the best normalisation to use is\n   \"canonical recomposition\", known as NFC in the normalisation crate.\n * A glyph is a particular font's shape to draw the character for a\n   particular Unicode code point. This will have its own identifying number\n   unique to the font, its ID.\n","sig":null,"attributes":[{"value":"allow(clippy :: cognitive_complexity, clippy :: doc_markdown, clippy ::\n        cast_lossless, clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":4887,"byte_end":5021,"line_start":90,"line_end":95,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43286,"byte_end":43291,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Point","qualname":"::geometry::Point","value":"Point { x, y }","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405}],"decl_id":null,"docs":" A point in 2-dimensional space, with each dimension of type `N`.\n\n Legal operations on points are addition and subtraction by vectors, and\n subtraction between points, to give a vector representing the offset between\n the two points. Combined with the legal operations on vectors, meaningful\n manipulations of vectors and points can be performed.\n\n For example, to interpolate between two points by a factor `t`:\n\n ```\n # use rusttype::*;\n # let t = 0.5; let p0 = point(0.0, 0.0); let p1 = point(0.0, 0.0);\n let interpolated_point = p0 + (p1 - p0) * t;\n ```\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43305,"byte_end":43306,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"x","qualname":"::geometry::Point::x","value":"N","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43319,"byte_end":43320,"line_start":23,"line_end":23,"column_start":9,"column_end":10},"name":"y","qualname":"::geometry::Point::y","value":"N","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43643,"byte_end":43649,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"Vector","qualname":"::geometry::Vector","value":"Vector { x, y }","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"decl_id":null,"docs":" A vector in 2-dimensional space, with each dimension of type `N`.\n\n Legal operations on vectors are addition and subtraction by vectors,\n addition by points (to give points), and multiplication and division by\n scalars.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43663,"byte_end":43664,"line_start":33,"line_end":33,"column_start":9,"column_end":10},"name":"x","qualname":"::geometry::Vector::x","value":"N","parent":{"krate":0,"index":443},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43677,"byte_end":43678,"line_start":34,"line_end":34,"column_start":9,"column_end":10},"name":"y","qualname":"::geometry::Vector::y","value":"N","parent":{"krate":0,"index":443},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43754,"byte_end":43759,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"point","qualname":"::geometry::point","value":"fn <N> (x: N, y: N) -> Point<N>","parent":null,"children":[],"decl_id":null,"docs":" A convenience function for generating `Point`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43737,"byte_end":43746,"line_start":37,"line_end":37,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43880,"byte_end":43886,"line_start":43,"line_end":43,"column_start":8,"column_end":14},"name":"vector","qualname":"::geometry::vector","value":"fn <N> (x: N, y: N) -> Vector<N>","parent":null,"children":[],"decl_id":null,"docs":" A convenience function for generating `Vector`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43863,"byte_end":43872,"line_start":42,"line_end":42,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46552,"byte_end":46556,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"Line","qualname":"::geometry::Line","value":"Line { p }","parent":null,"children":[{"krate":0,"index":485}],"decl_id":null,"docs":" A straight line between two points, `p[0]` and `p[1]`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46567,"byte_end":46568,"line_start":148,"line_end":148,"column_start":9,"column_end":10},"name":"p","qualname":"::geometry::Line::p","value":"[geometry::Point<f32>; _]","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46752,"byte_end":46757,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"Curve","qualname":"::geometry::Curve","value":"Curve { p }","parent":null,"children":[{"krate":0,"index":504}],"decl_id":null,"docs":" A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control\n point `p[1]`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46768,"byte_end":46769,"line_start":154,"line_end":154,"column_start":9,"column_end":10},"name":"p","qualname":"::geometry::Curve::p","value":"[geometry::Point<f32>; _]","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46955,"byte_end":46959,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"Rect","qualname":"::geometry::Rect","value":"Rect { min, max }","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" A rectangle, with top-left corner at `min`, and bottom-right corner at\n `max`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46973,"byte_end":46976,"line_start":160,"line_end":160,"column_start":9,"column_end":12},"name":"min","qualname":"::geometry::Rect::min","value":"geometry::Point<N>","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46996,"byte_end":46999,"line_start":161,"line_end":161,"column_start":9,"column_end":12},"name":"max","qualname":"::geometry::Rect::max","value":"geometry::Point<N>","parent":{"krate":0,"index":522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47071,"byte_end":47076,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<N>>::width","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47140,"byte_end":47146,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<N>>::height","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":52572,"byte_end":52580,"line_start":10,"line_end":10,"column_start":10,"column_end":18},"name":"PerSlice","qualname":"::rasterizer::SliceUp::PerSlice","value":"type PerSlice: Iterator<Item = Self>;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":52614,"byte_end":52617,"line_start":11,"line_end":11,"column_start":10,"column_end":13},"name":"Out","qualname":"::rasterizer::SliceUp::Out","value":"type Out: Iterator<Item = Self::PerSlice>;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gpu_cache","qualname":"::gpu_cache","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":597},{"krate":0,"index":616},{"krate":0,"index":614},{"krate":0,"index":612},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":602},{"krate":0,"index":617},{"krate":0,"index":630},{"krate":0,"index":628},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":632},{"krate":0,"index":641},{"krate":0,"index":639},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":643},{"krate":0,"index":663},{"krate":0,"index":661},{"krate":0,"index":659},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":650},{"krate":0,"index":648},{"krate":0,"index":646},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":664},{"krate":0,"index":686},{"krate":0,"index":684},{"krate":0,"index":682},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":673},{"krate":0,"index":671},{"krate":0,"index":669},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":687},{"krate":0,"index":709},{"krate":0,"index":707},{"krate":0,"index":705},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":696},{"krate":0,"index":694},{"krate":0,"index":692},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":246}],"decl_id":null,"docs":" This module provides capabilities for managing a cache of rendered glyphs in\n GPU memory, with the goal of minimisng the size and frequency of glyph\n uploads to GPU memory from the CPU.\n\n This module is optional, and not compiled by default. To use it enable the\n `gpu_cache` feature in your Cargo.toml.\n\n Typical applications that render directly with hardware graphics APIs (e.g.\n games) need text rendering. There is not yet a performant solution for high\n quality text rendering directly on the GPU that isn't experimental research\n work. Quality is often critical for legibility, so many applications use\n text or individual characters that have been rendered on the CPU. This is\n done either ahead-of-time, giving a fixed set of fonts, characters, and\n sizes that can be used at runtime, or dynamically as text is required. This\n latter scenario is more flexible and the focus of this module.\n\n To minimise the CPU load and texture upload bandwidth saturation, recently\n used glyphs should be cached on the GPU for use by future frames. This\n module provides a mechanism for maintaining such a cache in the form of a\n single packed 2D GPU texture. When a rendered glyph is requested, it is\n either retrieved from its location in the texture if it is present or room\n is made in the cache (if necessary), the CPU renders the glyph then it is\n uploaded into a gap in the texture to be available for GPU rendering. This\n cache uses a Least Recently Used (LRU) cache eviction scheme - glyphs in the\n cache that have not been used recently are as a rule of thumb not likely to\n be used again soon, so they are the best candidates for eviction to make\n room for required glyphs.\n\n The API for the cache does not assume a particular graphics API. The\n intended usage is to queue up glyphs that need to be present for the current\n frame using `Cache::queue_glyph`, update the cache to ensure that the queued\n glyphs are present using `Cache::cache_queued` (providing a function for\n uploading pixel data), then when it's time to render call `Cache::rect_for`\n to get the UV coordinates in the cache texture for each glyph. For a\n concrete use case see the `gpu_cache` example.\n\n Cache dimensions are immutable. If you need to change the dimensions of the\n cache texture (e.g. due to high cache pressure), rebuild a new `Cache`.\n Either from scratch or with `CacheBuilder::rebuild`.\n\n # Example\n\n ```\n # use rusttype::{Font, gpu_cache::Cache, point, Scale};\n # use std::error::Error;\n # fn example() -> Result<(), Box<dyn Error>> {\n # let font_data: &[u8] = include_bytes!(\"../dev/fonts/dejavu/DejaVuSansMono.ttf\");\n # let font: Font<'static> = Font::from_bytes(font_data)?;\n # let glyph = font.glyph('a').scaled(Scale::uniform(25.0)).positioned(point(0.0, 0.0));\n # let glyph2 = glyph.clone();\n # fn update_gpu_texture(_: rusttype::Rect<u32>, _: &[u8]) {};\n // Build a default Cache.\n let mut cache = Cache::builder().build();\n\n // Queue some positioned glyphs needed for the next frame.\n cache.queue_glyph(0, glyph);\n\n // Cache all queued glyphs somewhere in the cache texture.\n // If new glyph data has been drawn the closure is called to upload\n // the pixel data to GPU memory.\n cache.cache_queued(|region, data| update_gpu_texture(region, data))?;\n\n # let glyph = glyph2;\n // Lookup a positioned glyph's texture location\n if let Ok(Some((uv_rect, screen_rect))) = cache.rect_for(0, &glyph) {\n     // Generate vertex data, etc\n }\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[{"value":"cfg(feature = \"gpu_cache\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5193,"byte_end":5222,"line_start":106,"line_end":106,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":69893,"byte_end":69906,"line_start":84,"line_end":84,"column_start":10,"column_end":23},"name":"TextureCoords","qualname":"::gpu_cache::TextureCoords","value":"(Rect<f32>, Rect<i32>)","parent":null,"children":[],"decl_id":null,"docs":" Texture coordinates (floating point) of the quad for a glyph in the cache,\n as well as the pixel-space (integer) coordinates that this region should be\n drawn at.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":72769,"byte_end":72774,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"Cache","qualname":"::gpu_cache::Cache","value":"Cache {  }","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" An implementation of a dynamic GPU glyph cache. See the module documentation\n for more information.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":73932,"byte_end":73944,"line_start":235,"line_end":235,"column_start":12,"column_end":24},"name":"CacheBuilder","qualname":"::gpu_cache::CacheBuilder","value":"CacheBuilder {  }","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638}],"decl_id":null,"docs":" Builder & rebuilder for `Cache`.\n\n # Example\n\n ```\n use rusttype::gpu_cache::Cache;\n\n // Create a cache with all default values set explicitly\n // equivalent to `Cache::builder().build()`\n let default_cache = Cache::builder()\n     .dimensions(256, 256)\n     .scale_tolerance(0.1)\n     .position_tolerance(0.1)\n     .pad_glyphs(true)\n     .align_4x4(false)\n     .multithread(true)\n     .build();\n\n // Create a cache with all default values, except with a dimension of 1024x1024\n let bigger_cache = Cache::builder().dimensions(1024, 1024).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":74907,"byte_end":74917,"line_start":271,"line_end":271,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<CacheBuilder>::dimensions","value":"fn (mut self, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" `width` & `height` dimensions of the 2D texture that will hold the\n cache contents on the GPU.\n\n This must match the dimensions of the actual texture used, otherwise\n `cache_queued` will try to cache into coordinates outside the bounds of\n the texture.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().dimensions(256, 256).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":76119,"byte_end":76134,"line_start":298,"line_end":298,"column_start":12,"column_end":27},"name":"scale_tolerance","qualname":"<CacheBuilder>::scale_tolerance","value":"fn <V> (mut self, scale_tolerance: V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the tolerances (maximum allowed difference) for judging\n whether an existing glyph in the cache is close enough to the\n requested glyph in scale to be used in its place. Due to floating\n point inaccuracies a min value of `0.001` is enforced.\n\n Both `scale_tolerance` and `position_tolerance` are measured in pixels.\n\n Tolerances produce even steps for scale and subpixel position. Only a\n single glyph texture will be used within a single step. For example,\n `scale_tolerance = 0.1` will have a step `9.95-10.05` so similar glyphs\n with scale `9.98` & `10.04` will match.\n\n A typical application will produce results with no perceptible\n inaccuracies with `scale_tolerance` and `position_tolerance` set to\n 0.1. Depending on the target DPI higher tolerance may be acceptable.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().scale_tolerance(0.1).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":77540,"byte_end":77558,"line_start":328,"line_end":328,"column_start":12,"column_end":30},"name":"position_tolerance","qualname":"<CacheBuilder>::position_tolerance","value":"fn <V> (mut self, position_tolerance: V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the tolerances (maximum allowed difference) for judging\n whether an existing glyph in the cache is close enough to the requested\n glyph in subpixel offset to be used in its place. Due to floating\n point inaccuracies a min value of `0.001` is enforced.\n\n Both `scale_tolerance` and `position_tolerance` are measured in pixels.\n\n Tolerances produce even steps for scale and subpixel position. Only a\n single glyph texture will be used within a single step. For example,\n `scale_tolerance = 0.1` will have a step `9.95-10.05` so similar glyphs\n with scale `9.98` & `10.04` will match.\n\n Note that since `position_tolerance` is a tolerance of subpixel\n offsets, setting it to 1.0 or higher is effectively a \"don't care\"\n option.\n\n A typical application will produce results with no perceptible\n inaccuracies with `scale_tolerance` and `position_tolerance` set to\n 0.1. Depending on the target DPI higher tolerance may be acceptable.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().position_tolerance(0.1).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":78169,"byte_end":78179,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"pad_glyphs","qualname":"<CacheBuilder>::pad_glyphs","value":"fn (mut self, pad_glyphs: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Pack glyphs in texture with a padding of a single zero alpha pixel to\n avoid bleeding from interpolated shader texture lookups near edges.\n\n If glyphs are never transformed this may be set to `false` to slightly\n improve the glyph packing.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().pad_glyphs(true).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":78676,"byte_end":78685,"line_start":359,"line_end":359,"column_start":12,"column_end":21},"name":"align_4x4","qualname":"<CacheBuilder>::align_4x4","value":"fn (mut self, align_4x4: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align glyphs in texture to 4x4 texel boundaries.\n\n If your backend requires texture updates to be aligned to 4x4 texel\n boundaries (e.g. WebGL), this should be set to `true`.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().align_4x4(false).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":79257,"byte_end":79268,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"multithread","qualname":"<CacheBuilder>::multithread","value":"fn (mut self, multithread: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When multiple CPU cores are available spread rasterization work across\n all cores.\n\n Significantly reduces worst case latency in multicore environments.\n\n # Platform-specific behaviour\n\n This option has no effect on wasm32.\n\n # Example (set to default value)\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().multithread(true).build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":80334,"byte_end":80339,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"build","qualname":"<CacheBuilder>::build","value":"fn <'a> (self) -> Cache<'a>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new cache. Note that this is just the CPU side of the\n cache. The GPU texture is managed by the user.\n\n # Panics\n\n `scale_tolerance` or `position_tolerance` are less than or equal to\n zero.\n\n # Example\n\n ```\n # use rusttype::gpu_cache::Cache;\n let cache = Cache::builder().build();\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":81772,"byte_end":81779,"line_start":463,"line_end":463,"column_start":12,"column_end":19},"name":"rebuild","qualname":"<CacheBuilder>::rebuild","value":"fn (self, cache: &mut Cache) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rebuilds a `Cache` with new attributes. All cached glyphs are cleared,\n however the glyph queue is retained unmodified.\n\n # Panics\n\n `scale_tolerance` or `position_tolerance` are less than or equal to\n zero.\n\n # Example\n\n ```\n # use rusttype::gpu_cache::Cache;\n # let mut cache = Cache::builder().build();\n // Rebuild the cache with different dimensions\n cache.to_builder().dimensions(768, 768).rebuild(&mut cache);\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82556,"byte_end":82570,"line_start":488,"line_end":488,"column_start":5,"column_end":19},"name":"GlyphNotCached","qualname":"::gpu_cache::CacheReadErr::GlyphNotCached","value":"CacheReadErr::GlyphNotCached","parent":{"krate":0,"index":643},"children":[],"decl_id":null,"docs":" Indicates that the requested glyph is not present in the cache\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82466,"byte_end":82478,"line_start":486,"line_end":486,"column_start":10,"column_end":22},"name":"CacheReadErr","qualname":"::gpu_cache::CacheReadErr","value":"CacheReadErr::{GlyphNotCached}","parent":null,"children":[{"krate":0,"index":644}],"decl_id":null,"docs":" Returned from `Cache::rect_for`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83173,"byte_end":83186,"line_start":508,"line_end":508,"column_start":5,"column_end":18},"name":"GlyphTooLarge","qualname":"::gpu_cache::CacheWriteErr::GlyphTooLarge","value":"CacheWriteErr::GlyphTooLarge","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" At least one of the queued glyphs is too big to fit into the cache, even\n if all other glyphs are removed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83324,"byte_end":83343,"line_start":511,"line_end":511,"column_start":5,"column_end":24},"name":"NoRoomForWholeQueue","qualname":"::gpu_cache::CacheWriteErr::NoRoomForWholeQueue","value":"CacheWriteErr::NoRoomForWholeQueue","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" Not all of the requested glyphs can fit into the cache, even if the\n cache is completely cleared before the attempt.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83031,"byte_end":83044,"line_start":505,"line_end":505,"column_start":10,"column_end":23},"name":"CacheWriteErr","qualname":"::gpu_cache::CacheWriteErr","value":"CacheWriteErr::{GlyphTooLarge, NoRoomForWholeQueue}","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":667}],"decl_id":null,"docs":" Returned from `Cache::cache_queued`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84115,"byte_end":84121,"line_start":534,"line_end":534,"column_start":5,"column_end":11},"name":"Adding","qualname":"::gpu_cache::CachedBy::Adding","value":"CachedBy::Adding","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":" Added any additional glyphs into the texture without affecting\n the position of any already cached glyphs in the latest queue.\n\n Glyphs not in the latest queue may have been removed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84255,"byte_end":84265,"line_start":537,"line_end":537,"column_start":5,"column_end":15},"name":"Reordering","qualname":"::gpu_cache::CachedBy::Reordering","value":"CachedBy::Reordering","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":" Fit the glyph queue by re-ordering all glyph texture positions.\n Previous texture positions are no longer valid.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83888,"byte_end":83896,"line_start":529,"line_end":529,"column_start":10,"column_end":18},"name":"CachedBy","qualname":"::gpu_cache::CachedBy","value":"CachedBy::{Adding, Reordering}","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":690}],"decl_id":null,"docs":" Successful method of caching of the queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84745,"byte_end":84752,"line_start":558,"line_end":558,"column_start":12,"column_end":19},"name":"builder","qualname":"<Cache>::builder","value":"fn () -> CacheBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a default `CacheBuilder`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84724,"byte_end":84733,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84882,"byte_end":84897,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"scale_tolerance","qualname":"<Cache>::scale_tolerance","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current scale tolerance for the cache.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":85032,"byte_end":85050,"line_start":568,"line_end":568,"column_start":12,"column_end":30},"name":"position_tolerance","qualname":"<Cache>::position_tolerance","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current subpixel position tolerance for the cache.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":85271,"byte_end":85281,"line_start":574,"line_end":574,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<Cache>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Returns the cache texture dimensions assumed by the cache. For proper\n operation this should match the dimensions of the used GPU texture.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":85585,"byte_end":85596,"line_start":581,"line_end":581,"column_start":12,"column_end":23},"name":"queue_glyph","qualname":"<Cache>::queue_glyph","value":"fn (&mut self, font_id: usize, glyph: PositionedGlyph<'font>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Queue a glyph for caching by the next call to `cache_queued`. `font_id`\n is used to disambiguate glyphs from different fonts. The user should\n ensure that `font_id` is unique to the font the glyph is from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":85841,"byte_end":85846,"line_start":588,"line_end":588,"column_start":12,"column_end":17},"name":"clear","qualname":"<Cache>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the cache. Does not affect the glyph queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":86168,"byte_end":86179,"line_start":598,"line_end":598,"column_start":12,"column_end":23},"name":"clear_queue","qualname":"<Cache>::clear_queue","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the glyph queue.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":86302,"byte_end":86312,"line_start":603,"line_end":603,"column_start":12,"column_end":22},"name":"to_builder","qualname":"<Cache>::to_builder","value":"fn (&self) -> CacheBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a `CacheBuilder` with this cache's attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":88328,"byte_end":88340,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"cache_queued","qualname":"<Cache>::cache_queued","value":"fn <F> (&mut self, mut uploader: F) -> Result<CachedBy, CacheWriteErr>","parent":null,"children":[],"decl_id":null,"docs":" Caches the queued glyphs. If this is unsuccessful, the queue is\n untouched. Any glyphs cached by previous calls to this function may be\n removed from the cache to make room for the newly queued glyphs. Thus if\n you want to ensure that a glyph is in the cache, the most recently\n cached queue must have contained that glyph.\n\n `uploader` is the user-provided function that should perform the texture\n uploads to the GPU. The information provided is the rectangular region\n to insert the pixel data into, and the pixel data itself. This data is\n provided in horizontal scanline format (row major), with stride equal to\n the rectangle width.\n\n If successful returns a `CachedBy` that can indicate the validity of\n previously cached glyph textures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":101427,"byte_end":101435,"line_start":920,"line_end":920,"column_start":12,"column_end":20},"name":"rect_for","qualname":"<Cache>::rect_for","value":"fn (&self, font_id: usize, glyph: &PositionedGlyph) -> Result<Option<TextureCoords>, CacheReadErr>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the (floating point) texture coordinates of the quad for a\n glyph in the cache, as well as the pixel-space (integer) coordinates\n that this region should be drawn at. These pixel-space coordinates\n assume an origin at the top left of the quad. In the majority of cases\n these pixel-space coordinates should be identical to the bounding box of\n the input glyph. They only differ if the cache has returned a substitute\n glyph that is deemed close enough to the requested glyph as specified by\n the cache tolerance parameters.\n\n A sucessful result is `Some` if the glyph is not an empty glyph (no\n shape, and thus no rect to return).\n\n Ensure that `font_id` matches the `font_id` that was passed to\n `queue_glyph` with this `glyph`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":6062,"byte_end":6076,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"FontCollection","qualname":"::FontCollection","value":"","parent":null,"children":[],"decl_id":null,"docs":" A collection of fonts read straight from a font file's data. The data in the\n collection is not validated. This structure may or may not own the font\n data.\n\n # Lifetime\n The lifetime reflects the font data lifetime. `FontCollection<'static>`\n covers most cases ie both dynamically loaded owned data and for referenced\n compile time font data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":6794,"byte_end":6798,"line_start":155,"line_end":155,"column_start":12,"column_end":16},"name":"Font","qualname":"::Font","value":"Font {  }","parent":null,"children":[{"krate":0,"index":722}],"decl_id":null,"docs":" A single font. This may or may not own the font data.\n\n # Lifetime\n The lifetime reflects the font data lifetime. `Font<'static>` covers most\n cases ie both dynamically loaded owned data and for referenced compile time\n font data.\n\n # Example\n\n ```\n # use rusttype::{Font, Error};\n # fn example() -> Result<(), Error> {\n let font_data: &[u8] = include_bytes!(\"../dev/fonts/dejavu/DejaVuSansMono.ttf\");\n let font: Font<'static> = Font::from_bytes(font_data)?;\n\n let owned_font_data: Vec<u8> = font_data.to_vec();\n let from_owned_font: Font<'static> = Font::from_bytes(owned_font_data)?;\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7516,"byte_end":7521,"line_start":176,"line_end":176,"column_start":5,"column_end":10},"name":"ByRef","qualname":"::SharedBytes::ByRef","value":"SharedBytes::ByRef(&'a [u8])","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7537,"byte_end":7542,"line_start":177,"line_end":177,"column_start":5,"column_end":10},"name":"ByArc","qualname":"::SharedBytes::ByArc","value":"SharedBytes::ByArc(Arc<[u8]>)","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7494,"byte_end":7505,"line_start":175,"line_end":175,"column_start":10,"column_end":21},"name":"SharedBytes","qualname":"::SharedBytes","value":"SharedBytes::{ByRef, ByArc}","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":731}],"decl_id":null,"docs":" `SharedBytes` handles the lifetime of font data used in RustType. The data\n is either a shared reference to externally owned data, or managed by\n reference counting. `SharedBytes` can be conveniently used with `From` and\n `Into`, and dereferences to the contained bytes.\n\n # Lifetime\n The lifetime reflects the font data lifetime. `SharedBytes<'static>` covers\n most cases ie both dynamically loaded owned data and for referenced compile\n time font data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9588,"byte_end":9597,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"Codepoint","qualname":"::Codepoint","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents a Unicode code point.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9877,"byte_end":9884,"line_start":253,"line_end":253,"column_start":12,"column_end":19},"name":"GlyphId","qualname":"::GlyphId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents a glyph identifier for a particular font. This identifier will\n not necessarily correspond to the correct glyph in a font other than the\n one that it was obtained from.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10299,"byte_end":10304,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"Glyph","qualname":"::Glyph","value":"Glyph {  }","parent":null,"children":[{"krate":0,"index":794}],"decl_id":null,"docs":" A single glyph of a font. this may either be a thin wrapper referring to the\n font and the glyph id, or it may be a standalone glyph that owns the data\n needed by it.\n\n A `Glyph` does not have an inherent scale or position associated with it. To\n augment a glyph with a size, give it a scale using `scaled`. You can then\n position it using `positioned`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10642,"byte_end":10657,"line_start":279,"line_end":279,"column_start":12,"column_end":27},"name":"SharedGlyphData","qualname":"::SharedGlyphData","value":"SharedGlyphData { id, extents, scale_for_1_pixel, unit_h_metrics, shape }","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10668,"byte_end":10670,"line_start":280,"line_end":280,"column_start":9,"column_end":11},"name":"id","qualname":"::SharedGlyphData::id","value":"u32","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10685,"byte_end":10692,"line_start":281,"line_end":281,"column_start":9,"column_end":16},"name":"extents","qualname":"::SharedGlyphData::extents","value":"std::option::Option<geometry::Rect<i32>>","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10721,"byte_end":10738,"line_start":282,"line_end":282,"column_start":9,"column_end":26},"name":"scale_for_1_pixel","qualname":"::SharedGlyphData::scale_for_1_pixel","value":"f32","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10753,"byte_end":10767,"line_start":283,"line_end":283,"column_start":9,"column_end":23},"name":"unit_h_metrics","qualname":"::SharedGlyphData::unit_h_metrics","value":"HMetrics","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10787,"byte_end":10792,"line_start":284,"line_end":284,"column_start":9,"column_end":14},"name":"shape","qualname":"::SharedGlyphData::shape","value":"std::option::Option<std::vec::Vec<stb_truetype::Vertex>>","parent":{"krate":0,"index":810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11071,"byte_end":11079,"line_start":290,"line_end":290,"column_start":12,"column_end":20},"name":"HMetrics","qualname":"::HMetrics","value":"HMetrics { advance_width, left_side_bearing }","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"decl_id":null,"docs":" The \"horizontal metrics\" of a glyph. This is useful for calculating the\n horizontal offset of a glyph from the previous one in a string when laying a\n string out horizontally.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11203,"byte_end":11216,"line_start":293,"line_end":293,"column_start":9,"column_end":22},"name":"advance_width","qualname":"::HMetrics::advance_width","value":"f32","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" The horizontal offset that the origin of the next glyph should be from\n the origin of this glyph.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11344,"byte_end":11361,"line_start":296,"line_end":296,"column_start":9,"column_end":26},"name":"left_side_bearing","qualname":"::HMetrics::left_side_bearing","value":"f32","parent":{"krate":0,"index":818},"children":[],"decl_id":null,"docs":" The horizontal offset between the origin of this glyph and the leftmost\n edge/point of the glyph.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11650,"byte_end":11658,"line_start":302,"line_end":302,"column_start":12,"column_end":20},"name":"VMetrics","qualname":"::VMetrics","value":"VMetrics { ascent, descent, line_gap }","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"decl_id":null,"docs":" The \"vertical metrics\" of a font at a particular scale. This is useful for\n calculating the amount of vertical space to give a line of text, and for\n computing the vertical offset between successive lines.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11781,"byte_end":11787,"line_start":305,"line_end":305,"column_start":9,"column_end":15},"name":"ascent","qualname":"::VMetrics::ascent","value":"f32","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" The highest point that any glyph in the font extends to above the\n baseline. Typically positive.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":11913,"byte_end":11920,"line_start":308,"line_end":308,"column_start":9,"column_end":16},"name":"descent","qualname":"::VMetrics::descent","value":"f32","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" The lowest point that any glyph in the font extends to below the\n baseline. Typically negative.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12094,"byte_end":12102,"line_start":311,"line_end":311,"column_start":9,"column_end":17},"name":"line_gap","qualname":"::VMetrics::line_gap","value":"f32","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" The gap to leave between the descent of one line and the ascent of the\n next. This is of course only a guideline given by the font's designers.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":867},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12771,"byte_end":12782,"line_start":339,"line_end":339,"column_start":12,"column_end":23},"name":"ScaledGlyph","qualname":"::ScaledGlyph","value":"ScaledGlyph {  }","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"decl_id":null,"docs":" A glyph augmented with scaling information. You can query such a glyph for\n information that depends on the scale of the glyph.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":13306,"byte_end":13321,"line_start":358,"line_end":358,"column_start":12,"column_end":27},"name":"PositionedGlyph","qualname":"::PositionedGlyph","value":"PositionedGlyph {  }","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" A glyph augmented with positioning and scaling information. You can query\n such a glyph for information that depends on the scale and position of the\n glyph.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14195,"byte_end":14200,"line_start":381,"line_end":381,"column_start":12,"column_end":17},"name":"Scale","qualname":"::Scale","value":"Scale { x, y }","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"decl_id":null,"docs":" Defines the size of a rendered face of a font, in pixels, horizontally and\n vertically. A vertical scale of `y` pixels means that the distance betwen\n the ascent and descent lines (see `VMetrics`) of the face will be `y`\n pixels. If `x` and `y` are equal the scaling is uniform. Non-uniform scaling\n by a factor *f* in the horizontal direction is achieved by setting `x` equal\n to *f* times `y`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14248,"byte_end":14249,"line_start":383,"line_end":383,"column_start":9,"column_end":10},"name":"x","qualname":"::Scale::x","value":"f32","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" Horizontal scale, in pixels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14299,"byte_end":14300,"line_start":385,"line_end":385,"column_start":9,"column_end":10},"name":"y","qualname":"::Scale::y","value":"f32","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":" Vertical scale, in pixels.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14411,"byte_end":14418,"line_start":391,"line_end":391,"column_start":12,"column_end":19},"name":"uniform","qualname":"<Scale>::uniform","value":"fn (s: f32) -> Scale","parent":null,"children":[],"decl_id":null,"docs":" Uniform scaling, equivalent to `Scale { x: s, y: s }`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14390,"byte_end":14399,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14784,"byte_end":14795,"line_start":401,"line_end":401,"column_start":11,"column_end":22},"name":"IntoGlyphId","qualname":"::IntoGlyphId","value":"IntoGlyphId","parent":null,"children":[{"krate":0,"index":294}],"decl_id":null,"docs":" A trait for types that can be converted into a `GlyphId`, in the context of\n a specific font.\n\n Many `rusttype` functions that operate on characters accept values of any\n type that implements `IntoGlyphId`. Such types include `char`, `Codepoint`,\n and obviously `GlyphId` itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14903,"byte_end":14916,"line_start":404,"line_end":404,"column_start":8,"column_end":21},"name":"into_glyph_id","qualname":"::IntoGlyphId::into_glyph_id","value":"fn (self, _: &Font<'_>) -> GlyphId","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Convert `self` into a `GlyphId`, consulting the index map of `font` if\n necessary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15894,"byte_end":15904,"line_start":431,"line_end":431,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<FontCollection>::from_bytes","value":"fn <B> (bytes: B) -> Result<FontCollection<'a>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a font collection from an array of bytes, typically loaded\n from a font file, which may be a single font or a TrueType Collection\n holding a number of fonts. This array may be owned (e.g. `Vec<u8>`), or\n borrowed (`&[u8]`). As long as `From<T>` is implemented for `Bytes` for\n some type `T`, `T` can be used as input.\n\n This returns an error if `bytes` does not seem to be font data in a\n format we recognize.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":16946,"byte_end":16955,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"into_font","qualname":"<FontCollection>::into_font","value":"fn (self) -> Result<Font<'a>, Error>","parent":null,"children":[],"decl_id":null,"docs":" If this `FontCollection` holds a single font, or a TrueType Collection\n containing only one font, return that as a `Font`. The `FontCollection`\n is consumed.\n\n If this `FontCollection` holds multiple fonts, return a\n `CollectionContainsMultipleFonts` error.\n\n If an error occurs, the `FontCollection` is lost, since this function\n takes ownership of it, and the error values don't give it back. If that\n is a problem, use the `font_at` or `into_fonts` methods instead, which\n borrow the `FontCollection` rather than taking ownership of it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":17982,"byte_end":17989,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"font_at","qualname":"<FontCollection>::font_at","value":"fn (&self, i: usize) -> Result<Font<'a>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Gets the font at index `i` in the font collection, if it exists and is\n valid. The produced font borrows the font data that is either borrowed\n or owned by this font collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":18408,"byte_end":18418,"line_start":481,"line_end":481,"column_start":12,"column_end":22},"name":"into_fonts","qualname":"<FontCollection>::into_fonts","value":"fn (self) -> IntoFontsIter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into an `Iterator` yielding each `Font` that exists\n within the collection.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":18558,"byte_end":18571,"line_start":488,"line_end":488,"column_start":12,"column_end":25},"name":"IntoFontsIter","qualname":"::IntoFontsIter","value":"IntoFontsIter {  }","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19176,"byte_end":19186,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Font>::from_bytes","value":"fn <B> (bytes: B) -> Result<Font<'a>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a font from an array of bytes, this is a shortcut for\n `FontCollection::from_bytes` for collections comprised of a single font.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19502,"byte_end":19511,"line_start":512,"line_end":512,"column_start":12,"column_end":21},"name":"v_metrics","qualname":"<Font>::v_metrics","value":"fn (&self, scale: Scale) -> VMetrics","parent":null,"children":[],"decl_id":null,"docs":" The \"vertical metrics\" for this font at a given scale. These metrics are\n shared by all of the glyphs in the font. See `VMetrics` for more detail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19818,"byte_end":19836,"line_start":520,"line_end":520,"column_start":12,"column_end":30},"name":"v_metrics_unscaled","qualname":"<Font>::v_metrics_unscaled","value":"fn (&self) -> VMetrics","parent":null,"children":[],"decl_id":null,"docs":" Get the unscaled VMetrics for this font, shared by all glyphs.\n See `VMetrics` for more detail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19979,"byte_end":19991,"line_start":525,"line_end":525,"column_start":12,"column_end":24},"name":"units_per_em","qualname":"<Font>::units_per_em","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the units per EM square of this font\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":20202,"byte_end":20213,"line_start":531,"line_end":531,"column_start":12,"column_end":23},"name":"glyph_count","qualname":"<Font>::glyph_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of glyphs present in this font. Glyph identifiers for this\n font will always be in the range `0..self.glyph_count()`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":20836,"byte_end":20841,"line_start":545,"line_end":545,"column_start":12,"column_end":17},"name":"glyph","qualname":"<Font>::glyph","value":"fn <C> (&self, id: C) -> Glyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding glyph for a Unicode code point or a glyph id\n for this font.\n\n If `id` is a `GlyphId`, it must be valid for this font; otherwise, this\n function panics. `GlyphId`s should always be produced by looking up some\n other sort of designator (like a Unicode code point) in a font, and\n should only be used to index the font they were produced for.\n\n Note that code points without corresponding glyphs in this font map to\n the \".notdef\" glyph, glyph 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":21388,"byte_end":21398,"line_start":557,"line_end":557,"column_start":12,"column_end":22},"name":"glyphs_for","qualname":"<Font>::glyphs_for","value":"fn <I> (&self, itr: I) -> GlyphIter<'a, '_, I>","parent":null,"children":[],"decl_id":null,"docs":" A convenience function.\n\n Returns an iterator that produces the glyphs corresponding to the code\n points or glyph ids produced by the given iterator `itr`.\n\n This is equivalent in behaviour to `itr.map(|c| font.glyph(c))`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":21610,"byte_end":21627,"line_start":564,"line_end":564,"column_start":12,"column_end":29},"name":"font_name_strings","qualname":"<Font>::font_name_strings","value":"fn (&self) -> tt::FontNameIter<'_, SharedBytes<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the names for this font.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":23811,"byte_end":23817,"line_start":613,"line_end":613,"column_start":12,"column_end":18},"name":"layout","qualname":"<Font>::layout","value":"fn <'b> (&'b self, s: &'b str, scale: Scale, start: Point<f32>) -> LayoutIter<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":" A convenience function for laying out glyphs for a string horizontally.\n It does not take control characters like line breaks into account, as\n treatment of these is likely to depend on the application.\n\n Note that this function does not perform Unicode normalisation.\n Composite characters (such as ö constructed from two code points, ¨ and\n o), will not be normalised to single code points. So if a font does not\n contain a glyph for each separate code point, but does contain one for\n the normalised single code point (which is common), the desired glyph\n will not be produced, despite being present in the font. Deal with this\n by performing Unicode normalisation on the input string before passing\n it to `layout`. The crate\n [unicode-normalization](http://crates.io/crates/unicode-normalization)\n is perfect for this purpose.\n\n Calling this function is equivalent to a longer sequence of operations\n involving `glyphs_for`, e.g.\n\n ```no_run\n # use rusttype::*;\n # let (scale, start) = (Scale::uniform(0.0), point(0.0, 0.0));\n # let font: Font = unimplemented!();\n font.layout(\"Hello World!\", scale, start)\n # ;\n ```\n\n produces an iterator with behaviour equivalent to the following:\n\n ```no_run\n # use rusttype::*;\n # let (scale, start) = (Scale::uniform(0.0), point(0.0, 0.0));\n # let font: Font = unimplemented!();\n font.glyphs_for(\"Hello World!\".chars())\n     .scan((None, 0.0), |&mut (mut last, mut x), g| {\n         let g = g.scaled(scale);\n         if let Some(last) = last {\n             x += font.pair_kerning(scale, last, g.id());\n         }\n         let w = g.h_metrics().advance_width;\n         let next = g.positioned(start + vector(x, 0.0));\n         last = Some(next.id());\n         x += w;\n         Some(next)\n     })\n # ;\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":24214,"byte_end":24226,"line_start":625,"line_end":625,"column_start":12,"column_end":24},"name":"pair_kerning","qualname":"<Font>::pair_kerning","value":"fn <A, B> (&self, scale: Scale, first: A, second: B) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns additional kerning to apply as well as that given by HMetrics\n for a particular pair of glyphs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":24677,"byte_end":24686,"line_start":638,"line_end":638,"column_start":12,"column_end":21},"name":"GlyphIter","qualname":"::GlyphIter","value":"GlyphIter {  }","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":25035,"byte_end":25045,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"LayoutIter","qualname":"::LayoutIter","value":"LayoutIter {  }","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":26168,"byte_end":26172,"line_start":686,"line_end":686,"column_start":12,"column_end":16},"name":"font","qualname":"<Glyph>::font","value":"fn (&self) -> Option<&Font<'a>>","parent":null,"children":[],"decl_id":null,"docs":" The font to which this glyph belongs. If the glyph is a standalone glyph\n that owns its resources, it no longer has a reference to the font which\n it was created from (using `standalone()`). In which case, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":26397,"byte_end":26399,"line_start":693,"line_end":693,"column_start":12,"column_end":14},"name":"id","qualname":"<Glyph>::id","value":"fn (&self) -> GlyphId","parent":null,"children":[],"decl_id":null,"docs":" The glyph identifier for this glyph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":26715,"byte_end":26721,"line_start":701,"line_end":701,"column_start":12,"column_end":18},"name":"scaled","qualname":"<Glyph>::scaled","value":"fn (self, scale: Scale) -> ScaledGlyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" Augments this glyph with scaling information, making methods that depend\n on the scale of the glyph available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":27734,"byte_end":27744,"line_start":726,"line_end":726,"column_start":12,"column_end":22},"name":"standalone","qualname":"<Glyph>::standalone","value":"fn (&self) -> Glyph<'static>","parent":null,"children":[],"decl_id":null,"docs":" Turns a `Glyph<'a>` into a `Glyph<'static>`. This produces a glyph that\n owns its resources, extracted from the font. This glyph can outlive the\n font that it comes from.\n\n Calling `standalone()` on a standalone glyph shares the resources, and\n is equivalent to `clone()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":28931,"byte_end":28939,"line_start":751,"line_end":751,"column_start":12,"column_end":20},"name":"get_data","qualname":"<Glyph>::get_data","value":"fn (&self) -> Option<Arc<SharedGlyphData>>","parent":null,"children":[],"decl_id":null,"docs":" Get the data from this glyph (such as width, extents, vertices, etc.).\n Only possible if the glyph is a shared glyph.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29235,"byte_end":29239,"line_start":761,"line_end":761,"column_start":5,"column_end":9},"name":"Line","qualname":"::Segment::Line","value":"Segment::Line(Line)","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29251,"byte_end":29256,"line_start":762,"line_end":762,"column_start":5,"column_end":10},"name":"Curve","qualname":"::Segment::Curve","value":"Segment::Curve(Curve)","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29221,"byte_end":29228,"line_start":760,"line_end":760,"column_start":10,"column_end":17},"name":"Segment","qualname":"::Segment","value":"Segment::{Line, Curve}","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":933}],"decl_id":null,"docs":" Part of a `Contour`, either a `Line` or a `Curve`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29360,"byte_end":29367,"line_start":766,"line_end":766,"column_start":12,"column_end":19},"name":"Contour","qualname":"::Contour","value":"Contour { segments }","parent":null,"children":[{"krate":0,"index":942}],"decl_id":null,"docs":" A closed loop consisting of a sequence of `Segment`s.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29378,"byte_end":29386,"line_start":767,"line_end":767,"column_start":9,"column_end":17},"name":"segments","qualname":"::Contour::segments","value":"std::vec::Vec<Segment>","parent":{"krate":0,"index":941},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29487,"byte_end":29489,"line_start":771,"line_end":771,"column_start":12,"column_end":14},"name":"id","qualname":"<ScaledGlyph>::id","value":"fn (&self) -> GlyphId","parent":null,"children":[],"decl_id":null,"docs":" The glyph identifier for this glyph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29803,"byte_end":29807,"line_start":778,"line_end":778,"column_start":12,"column_end":16},"name":"font","qualname":"<ScaledGlyph>::font","value":"fn (&self) -> Option<&Font<'a>>","parent":null,"children":[],"decl_id":null,"docs":" The font to which this glyph belongs. If the glyph is a standalone glyph\n that owns its resources, it no longer has a reference to the font which\n it was created from (using `standalone()`). In which case, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29931,"byte_end":29944,"line_start":782,"line_end":782,"column_start":12,"column_end":25},"name":"into_unscaled","qualname":"<ScaledGlyph>::into_unscaled","value":"fn (self) -> Glyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" A reference to this glyph without the scaling\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":30042,"byte_end":30050,"line_start":786,"line_end":786,"column_start":12,"column_end":20},"name":"unscaled","qualname":"<ScaledGlyph>::unscaled","value":"fn (&self) -> &Glyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" Removes the scaling from this glyph\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":30240,"byte_end":30250,"line_start":791,"line_end":791,"column_start":12,"column_end":22},"name":"positioned","qualname":"<ScaledGlyph>::positioned","value":"fn (self, p: Point<f32>) -> PositionedGlyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" Augments this glyph with positioning information, making methods that\n depend on the position of the glyph available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":30455,"byte_end":30460,"line_start":799,"line_end":799,"column_start":12,"column_end":17},"name":"scale","qualname":"<ScaledGlyph>::scale","value":"fn (&self) -> Scale","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":30617,"byte_end":30626,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"h_metrics","qualname":"<ScaledGlyph>::h_metrics","value":"fn (&self) -> HMetrics","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the \"horizontal metrics\" of this glyph. See `HMetrics` for\n more detail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":33291,"byte_end":33296,"line_start":867,"line_end":867,"column_start":12,"column_end":17},"name":"shape","qualname":"<ScaledGlyph>::shape","value":"fn (&self) -> Option<Vec<Contour>>","parent":null,"children":[],"decl_id":null,"docs":" Produces a list of the contours that make up the shape of this glyph.\n Each contour consists of a sequence of segments. Each segment is either\n a straight `Line` or a `Curve`.\n\n The winding of the produced contours is clockwise for closed shapes,\n anticlockwise for holes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":33608,"byte_end":33626,"line_start":873,"line_end":873,"column_start":12,"column_end":30},"name":"exact_bounding_box","qualname":"<ScaledGlyph>::exact_bounding_box","value":"fn (&self) -> Option<Rect<f32>>","parent":null,"children":[],"decl_id":null,"docs":" The bounding box of the shape of this glyph, not to be confused with\n `pixel_bounding_box`, the conservative pixel-boundary bounding box. The\n coordinates are relative to the glyph's origin.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":34532,"byte_end":34542,"line_start":893,"line_end":893,"column_start":12,"column_end":22},"name":"standalone","qualname":"<ScaledGlyph>::standalone","value":"fn (&self) -> ScaledGlyph<'static>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a glyph that owns its data from this glyph. This is similar\n to `Glyph::standalone`. See that function for more details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36095,"byte_end":36097,"line_start":932,"line_end":932,"column_start":12,"column_end":14},"name":"id","qualname":"<PositionedGlyph>::id","value":"fn (&self) -> GlyphId","parent":null,"children":[],"decl_id":null,"docs":" The glyph identifier for this glyph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36412,"byte_end":36416,"line_start":939,"line_end":939,"column_start":12,"column_end":16},"name":"font","qualname":"<PositionedGlyph>::font","value":"fn (&self) -> Option<&Font<'a>>","parent":null,"children":[],"decl_id":null,"docs":" The font to which this glyph belongs. If the glyph is a standalone glyph\n that owns its resources, it no longer has a reference to the font which\n it was created from (using `standalone()`). In which case, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36541,"byte_end":36553,"line_start":943,"line_end":943,"column_start":12,"column_end":24},"name":"unpositioned","qualname":"<PositionedGlyph>::unpositioned","value":"fn (&self) -> &ScaledGlyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" A reference to this glyph without positioning\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36665,"byte_end":36682,"line_start":947,"line_end":947,"column_start":12,"column_end":29},"name":"into_unpositioned","qualname":"<PositionedGlyph>::into_unpositioned","value":"fn (self) -> ScaledGlyph<'a>","parent":null,"children":[],"decl_id":null,"docs":" Removes the positioning from this glyph\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":37061,"byte_end":37079,"line_start":954,"line_end":954,"column_start":12,"column_end":30},"name":"pixel_bounding_box","qualname":"<PositionedGlyph>::pixel_bounding_box","value":"fn (&self) -> Option<Rect<i32>>","parent":null,"children":[],"decl_id":null,"docs":" The conservative pixel-boundary bounding box for this glyph. This is the\n smallest rectangle aligned to pixel boundaries that encloses the shape\n of this glyph at this position. Note that the origin of the glyph, at\n pixel-space coordinates (0, 0), is at the top left of the bounding box.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":37249,"byte_end":37254,"line_start":959,"line_end":959,"column_start":12,"column_end":17},"name":"shape","qualname":"<PositionedGlyph>::shape","value":"fn (&self) -> Option<Vec<Contour>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `ScaledGlyph::shape()`, but with the position of the glyph\n taken into account.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":37354,"byte_end":37359,"line_start":962,"line_end":962,"column_start":12,"column_end":17},"name":"scale","qualname":"<PositionedGlyph>::scale","value":"fn (&self) -> Scale","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":37421,"byte_end":37429,"line_start":965,"line_end":965,"column_start":12,"column_end":20},"name":"position","qualname":"<PositionedGlyph>::position","value":"fn (&self) -> Point<f32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":38209,"byte_end":38213,"line_start":988,"line_end":988,"column_start":12,"column_end":16},"name":"draw","qualname":"<PositionedGlyph>::draw","value":"fn <O> (&self, o: O) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rasterises this glyph. For each pixel in the rect given by\n `pixel_bounding_box()`, `o` is called:\n\n ```ignore\n o(x, y, v)\n ```\n\n where `x` and `y` are the coordinates of the pixel relative to the `min`\n coordinates of the bounding box, and `v` is the analytically calculated\n coverage of the pixel by the shape of the glyph. Calls to `o` proceed in\n horizontal scanline order, similar to this pseudo-code:\n\n ```ignore\n let bb = glyph.pixel_bounding_box();\n for y in 0..bb.height() {\n     for x in 0..bb.width() {\n         o(x, y, calc_coverage(&glyph, x, y));\n     }\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":40007,"byte_end":40017,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"standalone","qualname":"<PositionedGlyph>::standalone","value":"fn (&self) -> PositionedGlyph<'static>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a glyph that owns its data from this glyph. This is similar\n to `Glyph::standalone`. See that function for more details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":40288,"byte_end":40300,"line_start":1044,"line_end":1044,"column_start":12,"column_end":24},"name":"set_position","qualname":"<PositionedGlyph>::set_position","value":"fn (&mut self, p: Point<f32>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets positioning information and recalculates the pixel bounding box\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41002,"byte_end":41020,"line_start":1064,"line_end":1064,"column_start":5,"column_end":23},"name":"UnrecognizedFormat","qualname":"::Error::UnrecognizedFormat","value":"Error::UnrecognizedFormat","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" Font data presented to rusttype is not in a format that the library\n recognizes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41131,"byte_end":41140,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14},"name":"IllFormed","qualname":"::Error::IllFormed","value":"Error::IllFormed","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" Font data presented to rusttype was ill-formed (lacking necessary\n tables, for example).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41283,"byte_end":41309,"line_start":1072,"line_end":1072,"column_start":5,"column_end":31},"name":"CollectionIndexOutOfBounds","qualname":"::Error::CollectionIndexOutOfBounds","value":"Error::CollectionIndexOutOfBounds","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" The caller tried to access the `i`'th font from a `FontCollection`, but\n the collection doesn't contain that many fonts.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":954},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41462,"byte_end":41493,"line_start":1076,"line_end":1076,"column_start":5,"column_end":36},"name":"CollectionContainsMultipleFonts","qualname":"::Error::CollectionContainsMultipleFonts","value":"Error::CollectionContainsMultipleFonts","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" The caller tried to convert a `FontCollection` into a font via\n `into_font`, but the `FontCollection` contains more than one font.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":40894,"byte_end":40899,"line_start":1061,"line_end":1061,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"Error::{UnrecognizedFormat, IllFormed, CollectionIndexOutOfBounds, CollectionContainsMultipleFonts}","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954}],"decl_id":null,"docs":" The type for errors returned by rusttype.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43983,"byte_end":43988,"line_start":47,"line_end":47,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44169,"byte_end":44175,"line_start":54,"line_end":54,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44357,"byte_end":44363,"line_start":61,"line_end":61,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44525,"byte_end":44531,"line_start":68,"line_end":68,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44861,"byte_end":44867,"line_start":82,"line_end":82,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45197,"byte_end":45203,"line_start":96,"line_end":96,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45533,"byte_end":45539,"line_start":110,"line_end":110,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45900,"byte_end":45905,"line_start":124,"line_end":124,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46095,"byte_end":46100,"line_start":131,"line_end":131,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46289,"byte_end":46295,"line_start":138,"line_end":138,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47050,"byte_end":47054,"line_start":163,"line_end":163,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47565,"byte_end":47569,"line_start":185,"line_end":185,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47969,"byte_end":47974,"line_start":204,"line_end":204,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":49468,"byte_end":49473,"line_start":250,"line_end":250,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":49934,"byte_end":49938,"line_start":267,"line_end":267,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":50834,"byte_end":50855,"line_start":304,"line_end":304,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":52950,"byte_end":52963,"line_start":27,"line_end":27,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":54115,"byte_end":54119,"line_start":64,"line_end":64,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":54860,"byte_end":54874,"line_start":100,"line_end":100,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":57639,"byte_end":57644,"line_start":178,"line_end":178,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":70829,"byte_end":70840,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":71576,"byte_end":71587,"line_start":146,"line_end":146,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":71793,"byte_end":71804,"line_start":155,"line_end":155,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":72425,"byte_end":72429,"line_start":183,"line_end":183,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":74116,"byte_end":74128,"line_start":244,"line_end":244,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":74395,"byte_end":74407,"line_start":257,"line_end":257,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82596,"byte_end":82608,"line_start":490,"line_end":490,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82757,"byte_end":82769,"line_start":495,"line_end":495,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83369,"byte_end":83382,"line_start":513,"line_end":513,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83531,"byte_end":83544,"line_start":518,"line_end":518,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84663,"byte_end":84668,"line_start":555,"line_end":555,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":6869,"byte_end":6873,"line_start":159,"line_end":159,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7588,"byte_end":7599,"line_start":180,"line_end":180,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7998,"byte_end":8009,"line_start":195,"line_end":195,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":8354,"byte_end":8365,"line_start":207,"line_end":207,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":8690,"byte_end":8701,"line_start":218,"line_end":218,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9013,"byte_end":9024,"line_start":229,"line_end":229,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9355,"byte_end":9366,"line_start":240,"line_end":240,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10361,"byte_end":10366,"line_start":266,"line_end":266,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12140,"byte_end":12148,"line_start":314,"line_end":314,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12374,"byte_end":12382,"line_start":324,"line_end":324,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12876,"byte_end":12887,"line_start":345,"line_end":345,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":13429,"byte_end":13444,"line_start":364,"line_end":364,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14315,"byte_end":14320,"line_start":388,"line_end":388,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15122,"byte_end":15131,"line_start":411,"line_end":411,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15272,"byte_end":15279,"line_start":416,"line_end":416,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15384,"byte_end":15398,"line_start":422,"line_end":422,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":18661,"byte_end":18674,"line_start":492,"line_end":492,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19000,"byte_end":19004,"line_start":503,"line_end":503,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":24819,"byte_end":24828,"line_start":645,"line_end":645,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":25231,"byte_end":25241,"line_start":663,"line_end":663,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":25810,"byte_end":25815,"line_start":678,"line_end":678,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29413,"byte_end":29424,"line_start":769,"line_end":769,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36017,"byte_end":36032,"line_start":930,"line_end":930,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41503,"byte_end":41508,"line_start":1079,"line_end":1079,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42039,"byte_end":42044,"line_start":1094,"line_end":1094,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42235,"byte_end":42240,"line_start":1101,"line_end":1101,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42383,"byte_end":42388,"line_start":1108,"line_end":1108,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":5231,"byte_end":5240,"line_start":107,"line_end":107,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":140}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":43983,"byte_end":43988,"line_start":47,"line_end":47,"column_start":44,"column_end":49},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44169,"byte_end":44175,"line_start":54,"line_end":54,"column_start":44,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44357,"byte_end":44363,"line_start":61,"line_end":61,"column_start":44,"column_end":50},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44525,"byte_end":44531,"line_start":68,"line_end":68,"column_start":24,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":44861,"byte_end":44867,"line_start":82,"line_end":82,"column_start":24,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45197,"byte_end":45203,"line_start":96,"line_end":96,"column_start":24,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1611}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45533,"byte_end":45539,"line_start":110,"line_end":110,"column_start":24,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1611}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":45900,"byte_end":45905,"line_start":124,"line_end":124,"column_start":55,"column_end":60},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46095,"byte_end":46100,"line_start":131,"line_end":131,"column_start":55,"column_end":60},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":1601}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":46289,"byte_end":46295,"line_start":138,"line_end":138,"column_start":54,"column_end":60},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1596}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47050,"byte_end":47054,"line_start":163,"line_end":163,"column_start":38,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47565,"byte_end":47569,"line_start":185,"line_end":185,"column_start":27,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":484},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":47969,"byte_end":47974,"line_start":204,"line_end":204,"column_start":27,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":62}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":49252,"byte_end":49257,"line_start":242,"line_end":242,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":73}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":49468,"byte_end":49473,"line_start":250,"line_end":250,"column_start":14,"column_end":19},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":73}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":49934,"byte_end":49938,"line_start":267,"line_end":267,"column_start":14,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":484},"to":{"krate":0,"index":73}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\geometry.rs","byte_start":50834,"byte_end":50855,"line_start":304,"line_end":304,"column_start":6,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":52555,"byte_end":52560,"line_start":9,"line_end":9,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":93}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":52950,"byte_end":52963,"line_start":27,"line_end":27,"column_start":19,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":583},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":54115,"byte_end":54119,"line_start":64,"line_end":64,"column_start":18,"column_end":22},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":484},"to":{"krate":0,"index":93}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":54860,"byte_end":54874,"line_start":100,"line_end":100,"column_start":19,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":109},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\rasterizer.rs","byte_start":57639,"byte_end":57644,"line_start":178,"line_end":178,"column_start":18,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":93}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":70829,"byte_end":70840,"line_start":113,"line_end":113,"column_start":6,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":71576,"byte_end":71587,"line_start":146,"line_end":146,"column_start":42,"column_end":53},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":617},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":71793,"byte_end":71804,"line_start":155,"line_end":155,"column_start":45,"column_end":56},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":617},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":72425,"byte_end":72429,"line_start":183,"line_end":183,"column_start":23,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":522},"to":{"krate":0,"index":180}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":74116,"byte_end":74128,"line_start":244,"line_end":244,"column_start":18,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":632},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":74395,"byte_end":74407,"line_start":257,"line_end":257,"column_start":6,"column_end":18},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82596,"byte_end":82608,"line_start":490,"line_end":490,"column_start":23,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":643},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":82757,"byte_end":82769,"line_start":495,"line_end":495,"column_start":23,"column_end":35},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":643},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83369,"byte_end":83382,"line_start":513,"line_end":513,"column_start":23,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":664},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":83531,"byte_end":83544,"line_start":518,"line_end":518,"column_start":23,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\gpu_cache.rs","byte_start":84663,"byte_end":84668,"line_start":555,"line_end":555,"column_start":13,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":6869,"byte_end":6873,"line_start":159,"line_end":159,"column_start":21,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7588,"byte_end":7599,"line_start":180,"line_end":180,"column_start":31,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":7998,"byte_end":8009,"line_start":195,"line_end":195,"column_start":29,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":8354,"byte_end":8365,"line_start":207,"line_end":207,"column_start":26,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":8690,"byte_end":8701,"line_start":218,"line_end":218,"column_start":26,"column_end":37},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9013,"byte_end":9024,"line_start":229,"line_end":229,"column_start":24,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":9355,"byte_end":9366,"line_start":240,"line_end":240,"column_start":42,"column_end":53},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":10361,"byte_end":10366,"line_start":266,"line_end":266,"column_start":21,"column_end":26},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12140,"byte_end":12148,"line_start":314,"line_end":314,"column_start":29,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":840},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12374,"byte_end":12382,"line_start":324,"line_end":324,"column_start":30,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":840},"to":{"krate":2,"index":1606}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":12876,"byte_end":12887,"line_start":345,"line_end":345,"column_start":21,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":867},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":13429,"byte_end":13444,"line_start":364,"line_end":364,"column_start":21,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":875},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":14315,"byte_end":14320,"line_start":388,"line_end":388,"column_start":6,"column_end":11},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15122,"byte_end":15131,"line_start":411,"line_end":411,"column_start":22,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":740},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15272,"byte_end":15279,"line_start":416,"line_end":416,"column_start":22,"column_end":29},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":766},"to":{"krate":0,"index":293}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":15384,"byte_end":15398,"line_start":422,"line_end":422,"column_start":10,"column_end":24},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":18661,"byte_end":18674,"line_start":492,"line_end":492,"column_start":23,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":19000,"byte_end":19004,"line_start":503,"line_end":503,"column_start":10,"column_end":14},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":24819,"byte_end":24828,"line_start":645,"line_end":645,"column_start":40,"column_end":49},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":905},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":25231,"byte_end":25241,"line_start":663,"line_end":663,"column_start":27,"column_end":37},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":25810,"byte_end":25815,"line_start":678,"line_end":678,"column_start":10,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":29413,"byte_end":29424,"line_start":769,"line_end":769,"column_start":10,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":36017,"byte_end":36032,"line_start":930,"line_end":930,"column_start":10,"column_end":25},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":875},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":41503,"byte_end":41508,"line_start":1079,"line_end":1079,"column_start":6,"column_end":11},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42039,"byte_end":42044,"line_start":1094,"line_end":1094,"column_start":23,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":947},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42235,"byte_end":42240,"line_start":1101,"line_end":1101,"column_start":28,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":947},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusttype-0.8.2\\src\\lib.rs","byte_start":42383,"byte_end":42388,"line_start":1108,"line_end":1108,"column_start":45,"column_end":50},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":2469},"to":{"krate":2,"index":2258}}]}