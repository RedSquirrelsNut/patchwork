{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rusty_xinput","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=875cd86b6182c222","-C","extra-filename=-875cd86b6182c222","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","lazy_static=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblazy_static-79de1231268f023b.rmeta","--extern","log=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\liblog-ae804962dc3d6abe.rmeta","--extern","winapi=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libwinapi-978bfab176c482d4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librusty_xinput-875cd86b6182c222.rmeta"},"prelude":{"crate_id":{"name":"rusty_xinput","disambiguator":[14360325480196705739,9677747728254808568]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":14,"id":{"name":"log","disambiguator":[17746278763066137263,8798032287631474102]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":16,"id":{"name":"lazy_static","disambiguator":[17281579441627161632,7326486140096487162]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","num":17,"id":{"name":"winapi","disambiguator":[5636639422687459420,15773350436437932257]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":0,"byte_end":35965,"line_start":1,"line_end":1018,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":0,"byte_end":35965,"line_start":1,"line_end":1018,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":128},{"krate":0,"index":138},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":148},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":151},{"krate":0,"index":174},{"krate":0,"index":173},{"krate":0,"index":171},{"krate":0,"index":168},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":176},{"krate":0,"index":199},{"krate":0,"index":198},{"krate":0,"index":196},{"krate":0,"index":193},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":201},{"krate":0,"index":226},{"krate":0,"index":225},{"krate":0,"index":223},{"krate":0,"index":220},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":228},{"krate":0,"index":240},{"krate":0,"index":238},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":107},{"krate":0,"index":113},{"krate":0,"index":241},{"krate":0,"index":253},{"krate":0,"index":251},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":259},{"krate":0,"index":257},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" This module lets you load an XInput DLL and use it.\n\n ## How To Use This\n\n 1) Call `dynamic_load_xinput()`. This will attempt to load in a DLL that\n    supports XInput. Note that the user might not have XInput installed, so\n    be prepared to fall back to a keyboard/mouse if that happens.\n 2) Call `xinput_get_state(controller)` to get your data. Usually you do this\n    once at the start of each frame of the game. You can poll for controllers\n    0, 1, 2, or 3. If a controller is connected you'll get `Ok(data)`.\n    Otherwise you'll get some sort of `Err` info.\n 3) Call `xinput_set_state(controller, left_speed, right_speed)` to set a\n    rumble effect on the controller. As with `xinput_get_state`, you can\n    select slots 0, 1, 2 or 3, and missing controllers or out of bounds\n    selections will give an `Err` of some kind. Devices other than literal\n    XBox 360 controllers have XInput drivers, but not all of them actually\n    have rumble support, so this should be an extra not an essential.\n\n If xinput isn't fully loaded, a call to get_state or set_state is still\n entirely safe to perform, you'll just get an `Err`.\n\n Note that there are theoretically other XInput extras you might care about,\n but they're only available in Windows 8+ and I use Windows 7, so oh well.\n","sig":null,"attributes":[{"value":"allow(non_upper_case_globals)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":1357,"byte_end":1390,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":1391,"byte_end":1413,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"forbid(missing_debug_implementations)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":1414,"byte_end":1455,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"cfg(windows)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":1456,"byte_end":1472,"line_start":28,"line_end":28,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3034,"byte_end":3046,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"XInputHandle","qualname":"::XInputHandle","value":"XInputHandle {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"decl_id":null,"docs":" A handle to a loaded XInput DLL.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5114,"byte_end":5128,"line_start":141,"line_end":141,"column_start":3,"column_end":17},"name":"AlreadyLoading","qualname":"::XInputLoadingFailure::AlreadyLoading","value":"XInputLoadingFailure::AlreadyLoading","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The xinput system was already in the process of loading in some other\n thread. This attempt failed because of that, but that other attempt might\n still succeed.\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5098,"byte_end":5111,"line_start":140,"line_end":140,"column_start":3,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5231,"byte_end":5244,"line_start":144,"line_end":144,"column_start":3,"column_end":16},"name":"AlreadyActive","qualname":"::XInputLoadingFailure::AlreadyActive","value":"XInputLoadingFailure::AlreadyActive","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The xinput system was already active. A failure of this kind leaves the\n system active.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5390,"byte_end":5402,"line_start":147,"line_end":147,"column_start":3,"column_end":15},"name":"UnknownState","qualname":"::XInputLoadingFailure::UnknownState","value":"XInputLoadingFailure::UnknownState","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" The system was not loading or active, but was in some unknown state. If\n you get this, it's probably a bug that you should report.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5621,"byte_end":5626,"line_start":151,"line_end":151,"column_start":3,"column_end":8},"name":"NoDLL","qualname":"::XInputLoadingFailure::NoDLL","value":"XInputLoadingFailure::NoDLL","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" No DLL for XInput could be found. This places the system back into an\n \"uninitialized\" status, and you could potentially try again later if the\n user fiddles with the program's DLL path or whatever.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5936,"byte_end":5946,"line_start":156,"line_end":156,"column_start":3,"column_end":13},"name":"NoPointers","qualname":"::XInputLoadingFailure::NoPointers","value":"XInputLoadingFailure::NoPointers","parent":{"krate":0,"index":151},"children":[],"decl_id":null,"docs":" A DLL was found that matches one of the expected XInput DLL names, but it\n didn't contain both of the expected functions. This is probably a weird\n situation to find. Either way, the xinput status is set to \"uninitialized\"\n and as with the NoDLL error you could potentially try again.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":4896,"byte_end":4916,"line_start":136,"line_end":136,"column_start":10,"column_end":30},"name":"XInputLoadingFailure","qualname":"::XInputLoadingFailure","value":"XInputLoadingFailure::{AlreadyLoading, AlreadyActive, UnknownState, NoDLL, NoPointers}","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"decl_id":null,"docs":" The ways that a dynamic load of XInput can fail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":6601,"byte_end":6613,"line_start":178,"line_end":178,"column_start":10,"column_end":22},"name":"load_default","qualname":"<XInputHandle>::load_default","value":"fn () -> Result<XInputHandle, XInputLoadingFailure>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to dynamically load an XInput DLL and get the function pointers.\n\n # Failure\n\n This can fail in a few ways, as explained in the `XInputLoadingFailure`\n type. The most likely failure case is that the user's system won't have the\n required DLL, in which case you should probably allow them to play with just\n a keyboard/mouse instead.\n\n # Current DLL Names\n\n Currently the following DLL names are searched for in this order:\n\n * `xinput1_4.dll`\n * `xinput1_3.dll`\n * `xinput1_2.dll`\n * `xinput1_1.dll`\n * `xinput9_1_0.dll`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":7209,"byte_end":7213,"line_start":196,"line_end":196,"column_start":10,"column_end":14},"name":"load","qualname":"<XInputHandle>::load","value":"fn <S> (s: S) -> Result<XInputHandle, XInputLoadingFailure>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to load a specific XInput DLL and get the function pointers.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":14377,"byte_end":14396,"line_start":383,"line_end":383,"column_start":8,"column_end":27},"name":"dynamic_load_xinput","qualname":"::dynamic_load_xinput","value":"fn () -> Result<(), XInputLoadingFailure>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to dynamically load an XInput DLL and get the function pointers.\n\n This operation is thread-safe and can be performed at any time. If xinput\n hasn't been loaded yet, or if there was a failed load attempt, then\n `xinput_get_state` and `xinput_set_state` will safety return an `Err` value\n to that effect.\n\n There's no way provided to unload XInput once it's been loaded, because that\n makes the normal operation a little faster. Why would you want to unload it\n anyway? Don't be silly.\n\n # Failure\n\n This can fail in a few ways, as explained in the `XInputLoadingFailure`\n type. The most likely failure case is that the user's system won't have the\n required DLL, in which case you should probably allow them to play with just\n a keyboard/mouse instead.\n\n # Current DLL Names\n\n Currently the following DLL names are searched for in this order:\n\n * `xinput9_1_0.dll`\n * `xinput1_4.dll`\n * `xinput1_3.dll`\n * `xinput1_2.dll`\n * `xinput1_1.dll`\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":14356,"byte_end":14369,"line_start":382,"line_end":382,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15359,"byte_end":15370,"line_start":406,"line_end":406,"column_start":12,"column_end":23},"name":"XInputState","qualname":"::XInputState","value":"XInputState { raw }","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" This wraps an `XINPUT_STATE` value and provides a more rusty (read-only)\n interface to the data it contains.\n\n All three major game companies use different names for most of the buttons,\n so the docs for each button method list out what each of the major companies\n call that button. To the driver it's all the same, it's just however you\n want to think of them.\n\n If sequential calls to `xinput_get_state` for a given controller slot have\n the same packet number then the controller state has not changed since the\n last call. The `PartialEq` and `Eq` implementations for this wrapper type\n reflect that. The exact value of the packet number is unimportant.\n\n If you want to do something that the rust wrapper doesn't support, just use\n the raw field to get at the inner value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15415,"byte_end":15418,"line_start":408,"line_end":408,"column_start":7,"column_end":10},"name":"raw","qualname":"::XInputState::raw","value":"winapi::um::xinput::XINPUT_STATE","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" The raw value we're wrapping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16232,"byte_end":16244,"line_start":436,"line_end":436,"column_start":10,"column_end":22},"name":"north_button","qualname":"<XInputState>::north_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The north button of the action button group.\n\n * Nintendo: X\n * Playstation: Triangle\n * XBox: Y\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16213,"byte_end":16222,"line_start":435,"line_end":435,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16458,"byte_end":16470,"line_start":446,"line_end":446,"column_start":10,"column_end":22},"name":"south_button","qualname":"<XInputState>::south_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The south button of the action button group.\n\n * Nintendo: B\n * Playstation: X\n * XBox: A\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16439,"byte_end":16448,"line_start":445,"line_end":445,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16688,"byte_end":16699,"line_start":456,"line_end":456,"column_start":10,"column_end":21},"name":"east_button","qualname":"<XInputState>::east_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The east button of the action button group.\n\n * Nintendo: A\n * Playstation: Circle\n * XBox: B\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16669,"byte_end":16678,"line_start":455,"line_end":455,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16917,"byte_end":16928,"line_start":466,"line_end":466,"column_start":10,"column_end":21},"name":"west_button","qualname":"<XInputState>::west_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The west button of the action button group.\n\n * Nintendo: Y\n * Playstation: Square\n * XBox: X\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16898,"byte_end":16907,"line_start":465,"line_end":465,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17070,"byte_end":17078,"line_start":472,"line_end":472,"column_start":10,"column_end":18},"name":"arrow_up","qualname":"<XInputState>::arrow_up","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The up button on the directional pad.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17051,"byte_end":17060,"line_start":471,"line_end":471,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17228,"byte_end":17238,"line_start":478,"line_end":478,"column_start":10,"column_end":20},"name":"arrow_down","qualname":"<XInputState>::arrow_down","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The down button on the directional pad.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17209,"byte_end":17218,"line_start":477,"line_end":477,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17390,"byte_end":17400,"line_start":484,"line_end":484,"column_start":10,"column_end":20},"name":"arrow_left","qualname":"<XInputState>::arrow_left","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The left button on the directional pad.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17371,"byte_end":17380,"line_start":483,"line_end":483,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17553,"byte_end":17564,"line_start":490,"line_end":490,"column_start":10,"column_end":21},"name":"arrow_right","qualname":"<XInputState>::arrow_right","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The right button on the directional pad.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17534,"byte_end":17543,"line_start":489,"line_end":489,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17809,"byte_end":17821,"line_start":500,"line_end":500,"column_start":10,"column_end":22},"name":"start_button","qualname":"<XInputState>::start_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The \"start\" button.\n\n * Nintendo: Start (NES / SNES), '+' (Pro Controller)\n * Playstation: Start\n * XBox: Start\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":17790,"byte_end":17799,"line_start":499,"line_end":499,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18065,"byte_end":18078,"line_start":510,"line_end":510,"column_start":10,"column_end":23},"name":"select_button","qualname":"<XInputState>::select_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The \"not start\" button.\n\n * Nintendo: Select (NES / NES), '-' (Pro Controller)\n * Playstation: Select\n * XBox: Back\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18046,"byte_end":18055,"line_start":509,"line_end":509,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18284,"byte_end":18297,"line_start":520,"line_end":520,"column_start":10,"column_end":23},"name":"left_shoulder","qualname":"<XInputState>::left_shoulder","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The upper left shoulder button.\n\n * Nintendo: L\n * Playstation: L1\n * XBox: LB\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18265,"byte_end":18274,"line_start":519,"line_end":519,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18513,"byte_end":18527,"line_start":530,"line_end":530,"column_start":10,"column_end":24},"name":"right_shoulder","qualname":"<XInputState>::right_shoulder","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The upper right shoulder button.\n\n * Nintendo: R\n * Playstation: R1\n * XBox: RB\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18494,"byte_end":18503,"line_start":529,"line_end":529,"column_start":3,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18696,"byte_end":18713,"line_start":535,"line_end":535,"column_start":13,"column_end":30},"name":"TRIGGER_THRESHOLD","qualname":"::XInputState::TRIGGER_THRESHOLD","value":"u8","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" The default threshold to count a trigger as being \"pressed\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19012,"byte_end":19024,"line_start":545,"line_end":545,"column_start":10,"column_end":22},"name":"left_trigger","qualname":"<XInputState>::left_trigger","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The lower left shoulder trigger. If you want to use this as a simple\n boolean it is suggested that you compare it to the `TRIGGER_THRESHOLD`\n constant.\n\n * Nintendo: ZL\n * Playstation: L2\n * XBox: LT\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":18993,"byte_end":19002,"line_start":544,"line_end":544,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19337,"byte_end":19350,"line_start":557,"line_end":557,"column_start":10,"column_end":23},"name":"right_trigger","qualname":"<XInputState>::right_trigger","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The lower right shoulder trigger. If you want to use this as a simple\n boolean it is suggested that you compare it to the `TRIGGER_THRESHOLD`\n constant.\n\n * Nintendo: ZR\n * Playstation: R2\n * XBox: RT\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19318,"byte_end":19327,"line_start":556,"line_end":556,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19572,"byte_end":19589,"line_start":567,"line_end":567,"column_start":10,"column_end":27},"name":"left_trigger_bool","qualname":"<XInputState>::left_trigger_bool","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The lower left shoulder trigger as a bool using the default threshold.\n\n * Nintendo: ZL\n * Playstation: L2\n * XBox: LT\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19553,"byte_end":19562,"line_start":566,"line_end":566,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19837,"byte_end":19855,"line_start":577,"line_end":577,"column_start":10,"column_end":28},"name":"right_trigger_bool","qualname":"<XInputState>::right_trigger_bool","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The lower right shoulder trigger as a bool using the default threshold.\n\n * Nintendo: ZR\n * Playstation: R2\n * XBox: RT\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":19818,"byte_end":19827,"line_start":576,"line_end":576,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20077,"byte_end":20094,"line_start":587,"line_end":587,"column_start":10,"column_end":27},"name":"left_thumb_button","qualname":"<XInputState>::left_thumb_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The left thumb stick being pressed inward.\n\n * Nintendo: (L)\n * Playstation: L3\n * XBox: (L)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20058,"byte_end":20067,"line_start":586,"line_end":586,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20321,"byte_end":20339,"line_start":597,"line_end":597,"column_start":10,"column_end":28},"name":"right_thumb_button","qualname":"<XInputState>::right_thumb_button","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The right thumb stick being pressed inward.\n\n * Nintendo: (R)\n * Playstation: R3\n * XBox: (R)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20302,"byte_end":20311,"line_start":596,"line_end":596,"column_start":3,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20510,"byte_end":20529,"line_start":602,"line_end":602,"column_start":13,"column_end":32},"name":"LEFT_STICK_DEADZONE","qualname":"::XInputState::LEFT_STICK_DEADZONE","value":"i16","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" The suggested default deadzone for use with the left thumb stick.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20659,"byte_end":20679,"line_start":605,"line_end":605,"column_start":13,"column_end":33},"name":"RIGHT_STICK_DEADZONE","qualname":"::XInputState::RIGHT_STICK_DEADZONE","value":"i16","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" The suggested default deadzone for use with the right thumb stick.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20848,"byte_end":20862,"line_start":611,"line_end":611,"column_start":10,"column_end":24},"name":"left_stick_raw","qualname":"<XInputState>::left_stick_raw","value":"fn (&self) -> (i16, i16)","parent":null,"children":[],"decl_id":null,"docs":" The left stick raw value.\n\n Positive values are to the right (X-axis) or up (Y-axis).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":20829,"byte_end":20838,"line_start":610,"line_end":610,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21074,"byte_end":21089,"line_start":619,"line_end":619,"column_start":10,"column_end":25},"name":"right_stick_raw","qualname":"<XInputState>::right_stick_raw","value":"fn (&self) -> (i16, i16)","parent":null,"children":[],"decl_id":null,"docs":" The right stick raw value.\n\n Positive values are to the right (X-axis) or up (Y-axis).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21055,"byte_end":21064,"line_start":618,"line_end":618,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21318,"byte_end":21339,"line_start":627,"line_end":627,"column_start":10,"column_end":31},"name":"left_stick_normalized","qualname":"<XInputState>::left_stick_normalized","value":"fn (&self) -> (f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" The left stick value normalized with the default dead-zone.\n\n See `normalize_raw_stick_value` for more.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21299,"byte_end":21308,"line_start":626,"line_end":626,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21610,"byte_end":21632,"line_start":635,"line_end":635,"column_start":10,"column_end":32},"name":"right_stick_normalized","qualname":"<XInputState>::right_stick_normalized","value":"fn (&self) -> (f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" The right stick value normalized with the default dead-zone.\n\n See `normalize_raw_stick_value` for more.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":21591,"byte_end":21600,"line_start":634,"line_end":634,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":22275,"byte_end":22300,"line_start":652,"line_end":652,"column_start":10,"column_end":35},"name":"normalize_raw_stick_value","qualname":"<XInputState>::normalize_raw_stick_value","value":"fn (raw_stick: (i16, i16), deadzone: i16) -> (f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" This helper normalizes a raw stick value using the given deadzone.\n\n If the raw value's 2d length is less than the deadzone the result will be\n `(0.0,0.0)`, otherwise the result is normalized across the range from the\n deadzone point to the maximum value.\n\n The `deadzone` value is clamped to the range 0 to 32,766 (inclusive)\n before use. Negative inputs or maximum value inputs make the normalization\n just work improperly.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":22256,"byte_end":22265,"line_start":651,"line_end":651,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":23874,"byte_end":23889,"line_start":690,"line_end":690,"column_start":3,"column_end":18},"name":"XInputNotLoaded","qualname":"::XInputUsageError::XInputNotLoaded","value":"XInputUsageError::XInputNotLoaded","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" XInput isn't currently loaded.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":23941,"byte_end":23960,"line_start":692,"line_end":692,"column_start":3,"column_end":22},"name":"InvalidControllerID","qualname":"::XInputUsageError::InvalidControllerID","value":"XInputUsageError::InvalidControllerID","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" The controller ID you gave was 4 or more.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24024,"byte_end":24042,"line_start":694,"line_end":694,"column_start":3,"column_end":21},"name":"DeviceNotConnected","qualname":"::XInputUsageError::DeviceNotConnected","value":"XInputUsageError::DeviceNotConnected","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Not really an error, this controller is just missing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24149,"byte_end":24161,"line_start":697,"line_end":697,"column_start":3,"column_end":15},"name":"UnknownError","qualname":"::XInputUsageError::UnknownError","value":"XInputUsageError::UnknownError(u32)","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" There was some sort of unexpected error happened, this is the error code\n windows returned.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":23816,"byte_end":23832,"line_start":688,"line_end":688,"column_start":10,"column_end":26},"name":"XInputUsageError","qualname":"::XInputUsageError","value":"XInputUsageError::{XInputNotLoaded, InvalidControllerID, DeviceNotConnected, UnknownError}","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183}],"decl_id":null,"docs":" These are all the sorts of problems that can come up when you're using the\n xinput system.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24413,"byte_end":24428,"line_start":705,"line_end":705,"column_start":3,"column_end":18},"name":"XInputNotLoaded","qualname":"::XInputOptionalFnUsageError::XInputNotLoaded","value":"XInputOptionalFnUsageError::XInputNotLoaded","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" XInput isn't currently loaded.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24480,"byte_end":24499,"line_start":707,"line_end":707,"column_start":3,"column_end":22},"name":"InvalidControllerID","qualname":"::XInputOptionalFnUsageError::InvalidControllerID","value":"XInputOptionalFnUsageError::InvalidControllerID","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" The controller ID you gave was 4 or more.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24563,"byte_end":24581,"line_start":709,"line_end":709,"column_start":3,"column_end":21},"name":"DeviceNotConnected","qualname":"::XInputOptionalFnUsageError::DeviceNotConnected","value":"XInputOptionalFnUsageError::DeviceNotConnected","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Not really an error, this controller is just missing.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24629,"byte_end":24646,"line_start":711,"line_end":711,"column_start":3,"column_end":20},"name":"FunctionNotLoaded","qualname":"::XInputOptionalFnUsageError::FunctionNotLoaded","value":"XInputOptionalFnUsageError::FunctionNotLoaded","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Function is not present in loaded DLL\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24753,"byte_end":24765,"line_start":714,"line_end":714,"column_start":3,"column_end":15},"name":"UnknownError","qualname":"::XInputOptionalFnUsageError::UnknownError","value":"XInputOptionalFnUsageError::UnknownError(u32)","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" There was some sort of unexpected error happened, this is the error code\n windows returned.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24345,"byte_end":24371,"line_start":703,"line_end":703,"column_start":10,"column_end":36},"name":"XInputOptionalFnUsageError","qualname":"::XInputOptionalFnUsageError","value":"XInputOptionalFnUsageError::{XInputNotLoaded, InvalidControllerID, DeviceNotConnected, FunctionNotLoaded, UnknownError}","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210}],"decl_id":null,"docs":" Error that can be returned by functions that are not guaranteed to be present\n in earlier XInput versions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24981,"byte_end":24987,"line_start":721,"line_end":721,"column_start":10,"column_end":16},"name":"enable","qualname":"<XInputHandle>::enable","value":"fn (&self, enable: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Enables or disables XInput.\n\n See the [MSDN documentation for XInputEnable](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/nf-xinput-xinputenable).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":26145,"byte_end":26154,"line_start":748,"line_end":748,"column_start":10,"column_end":19},"name":"get_state","qualname":"<XInputHandle>::get_state","value":"fn (&self, user_index: u32) -> Result<XInputState, XInputUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Polls the controller port given for the current controller state.\n\n # Notes\n\n It is a persistent problem (since ~2007?) with xinput that polling for the\n data of a controller that isn't connected will cause a long delay. In the\n area of 500_000 cpu cycles. That's like 2_000 cache misses in a row.\n\n Once a controller is detected as not being plugged in you are strongly\n advised to not poll for its data again next frame. Instead, you should\n probably only poll for one known-missing controller per frame at most.\n\n Alternately, you can register for your app to get plug and play events and\n then wait for one of them to come in before you ever poll for a missing\n controller a second time. That's up to you.\n\n # Errors\n\n A few things can cause an `Err` value to come back, as explained by the\n `XInputUsageError` type.\n\n Most commonly, a controller will simply not be connected. Most people don't\n have all four slots plugged in all the time.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":26840,"byte_end":26856,"line_start":768,"line_end":768,"column_start":8,"column_end":24},"name":"xinput_get_state","qualname":"::xinput_get_state","value":"fn (user_index: u32) -> Result<XInputState, XInputUsageError>","parent":null,"children":[],"decl_id":null,"docs":" See `XInputHandle::get_state`\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":26819,"byte_end":26832,"line_start":767,"line_end":767,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":27983,"byte_end":27992,"line_start":794,"line_end":794,"column_start":10,"column_end":19},"name":"set_state","qualname":"<XInputHandle>::set_state","value":"fn (&self, user_index: u32, left_motor_speed: u16, right_motor_speed: u16) -> Result<(), XInputUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Allows you to set the rumble speeds of the left and right motors.\n\n Valid motor speeds are across the whole `u16` range, and the number is the\n scale of the motor intensity. In other words, 0 is 0%, and 65,535 is 100%.\n\n On a 360 controller the left motor is low-frequency and the right motor is\n high-frequency. On other controllers running through xinput this might be\n the case, or the controller might not even have rumble ability at all. If\n rumble is missing from the device you'll still get `Ok` return values, so\n treat rumble as an extra, not an essential.\n\n # Errors\n\n A few things can cause an `Err` value to come back, as explained by the\n `XInputUsageError` type.\n\n Most commonly, a controller will simply not be connected. Most people don't\n have all four slots plugged in all the time.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":28760,"byte_end":28776,"line_start":819,"line_end":819,"column_start":8,"column_end":24},"name":"xinput_set_state","qualname":"::xinput_set_state","value":"fn (user_index: u32, left_motor_speed: u16, right_motor_speed: u16) -> Result<(), XInputUsageError>","parent":null,"children":[],"decl_id":null,"docs":" See `XInputHandle::set_state`\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":28739,"byte_end":28752,"line_start":818,"line_end":818,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":29301,"byte_end":29317,"line_start":832,"line_end":832,"column_start":10,"column_end":26},"name":"get_capabilities","qualname":"<XInputHandle>::get_capabilities","value":"fn (&self, user_index: u32) -> Result<XINPUT_CAPABILITIES, XInputUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the capabilities of a controller.\n\n See the [MSDN documentation for XInputGetCapabilities](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/nf-xinput-xinputgetcapabilities).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":30168,"byte_end":30181,"line_start":854,"line_end":854,"column_start":10,"column_end":23},"name":"get_keystroke","qualname":"<XInputHandle>::get_keystroke","value":"fn (&self, user_index: u32) -> Result<Option<XINPUT_KEYSTROKE>, XInputOptionalFnUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a gamepad input event.\n\n See the [MSDN documentation for XInputGetKeystroke](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/nf-xinput-xinputgetkeystroke).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31115,"byte_end":31126,"line_start":881,"line_end":881,"column_start":12,"column_end":23},"name":"BatteryType","qualname":"::BatteryType","value":"","parent":null,"children":[],"decl_id":null,"docs":" Defines type of battery used in device, if any.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31200,"byte_end":31212,"line_start":885,"line_end":885,"column_start":13,"column_end":25},"name":"DISCONNECTED","qualname":"::BatteryType::DISCONNECTED","value":"Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Device is disconnected.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31309,"byte_end":31314,"line_start":887,"line_end":887,"column_start":13,"column_end":18},"name":"WIRED","qualname":"::BatteryType::WIRED","value":"Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Device does not have battery.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31403,"byte_end":31411,"line_start":889,"line_end":889,"column_start":13,"column_end":21},"name":"ALKALINE","qualname":"::BatteryType::ALKALINE","value":"Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Device has alkaline battery.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31499,"byte_end":31503,"line_start":891,"line_end":891,"column_start":13,"column_end":17},"name":"NIMH","qualname":"::BatteryType::NIMH","value":"Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" Device has nimh battery.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31593,"byte_end":31600,"line_start":893,"line_end":893,"column_start":13,"column_end":20},"name":"UNKNOWN","qualname":"::BatteryType::UNKNOWN","value":"Self","parent":{"krate":0,"index":107},"children":[],"decl_id":null,"docs":" The battery type is not known.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32192,"byte_end":32204,"line_start":913,"line_end":913,"column_start":12,"column_end":24},"name":"BatteryLevel","qualname":"::BatteryLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" Specify how much battery is charged for devices with battery.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32273,"byte_end":32278,"line_start":917,"line_end":917,"column_start":13,"column_end":18},"name":"EMPTY","qualname":"::BatteryLevel::EMPTY","value":"Self","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Battery is empty.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32362,"byte_end":32365,"line_start":919,"line_end":919,"column_start":13,"column_end":16},"name":"LOW","qualname":"::BatteryLevel::LOW","value":"Self","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Battery level is low.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32450,"byte_end":32456,"line_start":921,"line_end":921,"column_start":13,"column_end":19},"name":"MEDIUM","qualname":"::BatteryLevel::MEDIUM","value":"Self","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Battery level is medium.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32536,"byte_end":32540,"line_start":923,"line_end":923,"column_start":13,"column_end":17},"name":"FULL","qualname":"::BatteryLevel::FULL","value":"Self","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Battery is full.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":33193,"byte_end":33217,"line_start":944,"line_end":944,"column_start":12,"column_end":36},"name":"XInputBatteryInformation","qualname":"::XInputBatteryInformation","value":"XInputBatteryInformation { battery_type, battery_level }","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"decl_id":null,"docs":" Holds information about device's battery.\n\n See also [XINPUT_BATTERY_INFORMATION](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/ns-xinput-_xinput_battery_information).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":33271,"byte_end":33283,"line_start":946,"line_end":946,"column_start":7,"column_end":19},"name":"battery_type","qualname":"::XInputBatteryInformation::battery_type","value":"BatteryType","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Type of batter used in device, if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":33360,"byte_end":33373,"line_start":948,"line_end":948,"column_start":7,"column_end":20},"name":"battery_level","qualname":"::XInputBatteryInformation::battery_level","value":"BatteryLevel","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" For devices with battery, contains battery level.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":34566,"byte_end":34597,"line_start":982,"line_end":982,"column_start":10,"column_end":41},"name":"get_gamepad_battery_information","qualname":"<XInputHandle>::get_gamepad_battery_information","value":"fn (&self, user_index: u32) -> Result<XInputBatteryInformation, XInputOptionalFnUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Get battery type and charge level of a gamepad.\n\n See also [XInputGetBatteryInformation](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/nf-xinput-xinputgetbatteryinformation)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":34992,"byte_end":35023,"line_start":991,"line_end":991,"column_start":10,"column_end":41},"name":"get_headset_battery_information","qualname":"<XInputHandle>::get_headset_battery_information","value":"fn (&self, user_index: u32) -> Result<XInputBatteryInformation, XInputOptionalFnUsageError>","parent":null,"children":[],"decl_id":null,"docs":" Get battery type and charge level of a headset.\n\n See also [XInputGetBatteryInformation](https://docs.microsoft.com/en-us/windows/desktop/api/xinput/nf-xinput-xinputgetbatteryinformation)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":35283,"byte_end":35321,"line_start":1000,"line_end":1000,"column_start":8,"column_end":46},"name":"xinput_get_gamepad_battery_information","qualname":"::xinput_get_gamepad_battery_information","value":"fn (user_index: u32) -> Result<XInputBatteryInformation, XInputOptionalFnUsageError>","parent":null,"children":[],"decl_id":null,"docs":" See `InputHandle::get_gamepad_battery_information`\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":35262,"byte_end":35275,"line_start":999,"line_end":999,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":35663,"byte_end":35701,"line_start":1011,"line_end":1011,"column_start":8,"column_end":46},"name":"xinput_get_headset_battery_information","qualname":"::xinput_get_headset_battery_information","value":"fn (user_index: u32) -> Result<XInputBatteryInformation, XInputOptionalFnUsageError>","parent":null,"children":[],"decl_id":null,"docs":" See `InputHandle::get_headset_battery_information`\n","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":35642,"byte_end":35655,"line_start":1010,"line_end":1010,"column_start":1,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":2887,"byte_end":2900,"line_start":68,"line_end":68,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3566,"byte_end":3578,"line_start":88,"line_end":88,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3732,"byte_end":3744,"line_start":94,"line_end":94,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3769,"byte_end":3781,"line_start":95,"line_end":95,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":4100,"byte_end":4111,"line_start":104,"line_end":104,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5956,"byte_end":5968,"line_start":159,"line_end":159,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15468,"byte_end":15479,"line_start":411,"line_end":411,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15901,"byte_end":15912,"line_start":421,"line_end":421,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15944,"byte_end":15955,"line_start":423,"line_end":423,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16074,"byte_end":16085,"line_start":429,"line_end":429,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24780,"byte_end":24792,"line_start":717,"line_end":717,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":27067,"byte_end":27079,"line_start":775,"line_end":775,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":29067,"byte_end":29079,"line_start":828,"line_end":828,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31144,"byte_end":31155,"line_start":883,"line_end":883,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31662,"byte_end":31673,"line_start":896,"line_end":896,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32222,"byte_end":32234,"line_start":915,"line_end":915,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32601,"byte_end":32613,"line_start":926,"line_end":926,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":33397,"byte_end":33409,"line_start":951,"line_end":951,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":2887,"byte_end":2900,"line_start":68,"line_end":68,"column_start":15,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3566,"byte_end":3578,"line_start":88,"line_end":88,"column_start":16,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3732,"byte_end":3744,"line_start":94,"line_end":94,"column_start":22,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":3769,"byte_end":3781,"line_start":95,"line_end":95,"column_start":22,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":4100,"byte_end":4111,"line_start":104,"line_end":104,"column_start":32,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":45},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":5956,"byte_end":5968,"line_start":159,"line_end":159,"column_start":6,"column_end":18},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15468,"byte_end":15479,"line_start":411,"line_end":411,"column_start":32,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15901,"byte_end":15912,"line_start":421,"line_end":421,"column_start":25,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":15944,"byte_end":15955,"line_start":423,"line_end":423,"column_start":28,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":16074,"byte_end":16085,"line_start":429,"line_end":429,"column_start":6,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":63},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":24780,"byte_end":24792,"line_start":717,"line_end":717,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":27067,"byte_end":27079,"line_start":775,"line_end":775,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":29067,"byte_end":29079,"line_start":828,"line_end":828,"column_start":6,"column_end":18},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31144,"byte_end":31155,"line_start":883,"line_end":883,"column_start":6,"column_end":17},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":31662,"byte_end":31673,"line_start":896,"line_end":896,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32222,"byte_end":32234,"line_start":915,"line_end":915,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":32601,"byte_end":32613,"line_start":926,"line_end":926,"column_start":16,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":241},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rusty-xinput-1.2.0\\src/lib.rs","byte_start":33397,"byte_end":33409,"line_start":951,"line_end":951,"column_start":6,"column_end":18},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}}]}