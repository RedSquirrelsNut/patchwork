{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ryu","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=9ef27773066413be","-C","extra-filename=-9ef27773066413be","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","integer128","--cfg","must_use_return","--cfg","maybe_uninit","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libryu-9ef27773066413be.rmeta"},"prelude":{"crate_id":{"name":"ryu","disambiguator":[8638467896958977370,1506025259235723643]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":0,"byte_end":3627,"line_start":1,"line_end":111,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":3479,"byte_end":3485,"line_start":106,"line_end":106,"column_start":18,"column_end":24},"alias_span":null,"name":"Buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":3487,"byte_end":3492,"line_start":106,"line_end":106,"column_start":26,"column_end":31},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":3605,"byte_end":3613,"line_start":110,"line_end":110,"column_start":22,"column_end":30},"alias_span":null,"name":"format32","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":3615,"byte_end":3623,"line_start":110,"line_end":110,"column_start":32,"column_end":40},"alias_span":null,"name":"format64","value":"","parent":{"krate":0,"index":129}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":0,"byte_end":3627,"line_start":1,"line_end":111,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":68},{"krate":0,"index":73},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":104},{"krate":0,"index":126},{"krate":0,"index":129}],"decl_id":null,"docs":" Pure Rust implementation of Ryū, an algorithm to quickly convert floating\n point numbers to decimal strings.\n\n The PLDI'18 paper [*Ryū: fast float-to-string conversion*][paper] by Ulf\n Adams includes a complete correctness proof of the algorithm. The paper is\n available under the creative commons CC-BY-SA license.\n\n This Rust implementation is a line-by-line port of Ulf Adams' implementation\n in C, [https://github.com/ulfjack/ryu][upstream].\n\n [paper]: https://dl.acm.org/citation.cfm?id=3192369\n [upstream]: https://github.com/ulfjack/ryu\n\n # Example\n\n ```edition2018\n fn main() {\n     let mut buffer = ryu::Buffer::new();\n     let printed = buffer.format(1.234);\n     assert_eq!(printed, \"1.234\");\n }\n ```\n\n ## Performance\n\n You can run upstream's benchmarks with:\n\n ```console\n $ git clone https://github.com/ulfjack/ryu c-ryu\n $ cd c-ryu\n $ bazel run -c opt //ryu/benchmark\n ```\n\n And the same benchmark against our implementation with:\n\n ```console\n $ git clone https://github.com/dtolnay/ryu rust-ryu\n $ cd rust-ryu\n $ cargo run --example upstream_benchmark --release\n ```\n\n These benchmarks measure the average time to print a 32-bit float and average\n time to print a 64-bit float, where the inputs are distributed as uniform random\n bit patterns 32 and 64 bits wide.\n\n The upstream C code, the unsafe direct Rust port, and the safe pretty Rust API\n all perform the same, taking around 21 nanoseconds to format a 32-bit float and\n 31 nanoseconds to format a 64-bit float.\n\n There is also a Rust-specific benchmark comparing this implementation to the\n standard library which you can run with:\n\n ```console\n $ cargo bench\n ```\n\n The benchmark shows Ryu approximately 4-10x faster than the standard library\n across a range of f32 and f64 inputs. Measurements are in nanoseconds per\n iteration; smaller is better.\n\n | type=f32 | 0.0  | 0.1234 | 2.718281828459045 | f32::MAX |\n |:--------:|:----:|:------:|:-----------------:|:--------:|\n | RYU      | 3ns  | 28ns   | 23ns              | 22ns     |\n | STD      | 40ns | 106ns  | 128ns             | 110ns    |\n\n | type=f64 | 0.0  | 0.1234 | 2.718281828459045 | f64::MAX |\n |:--------:|:----:|:------:|:-----------------:|:--------:|\n | RYU      | 3ns  | 50ns   | 35ns              | 32ns     |\n | STD      | 39ns | 105ns  | 128ns             | 202ns    |\n\n ## Formatting\n\n This library tends to produce more human-readable output than the standard\n library's to\\_string, which never uses scientific notation. Here are two\n examples:\n\n - *ryu:* 1.23e40, *std:* 12300000000000000000000000000000000000000\n - *ryu:* 1.23e-40, *std:* 0.000000000000000000000000000000000000000123\n\n Both libraries print short decimals such as 0.0000123 without scientific\n notation.\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":2965,"byte_end":2975,"line_start":83,"line_end":83,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":4154,"byte_end":4160,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::buffer::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":" Safe API for formatting floating point numbers to text.\n\n ## Example\n\n ```edition2018\n let mut buffer = ryu::Buffer::new();\n let printed = buffer.format_finite(1.234);\n assert_eq!(printed, \"1.234\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":4468,"byte_end":4471,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<Buffer>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" This is a cheap operation; you don't need to worry about reusing buffers\n for efficiency.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":4399,"byte_end":4408,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":5452,"byte_end":5458,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"format","qualname":"<Buffer>::format","value":"fn <F> (&mut self, f: F) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Print a floating point number into this buffer and return a reference to\n its string representation within the buffer.\n\n # Special cases\n\n This function formats NaN as the string \"NaN\", positive infinity as\n \"inf\", and negative infinity as \"-inf\" to match std::fmt.\n\n If your input is known to be finite, you may get better performance by\n calling the `format_finite` method instead of `format` to avoid the\n checks for special cases.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":6524,"byte_end":6537,"line_start":86,"line_end":86,"column_start":12,"column_end":25},"name":"format_finite","qualname":"<Buffer>::format_finite","value":"fn <F> (&mut self, f: F) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Print a floating point number into this buffer and return a reference to\n its string representation within the buffer.\n\n # Special cases\n\n This function **does not** check for NaN or infinity. If the input\n number is not a finite float, the printed representation will be some\n correctly formatted but unspecified numerical value.\n\n Please check [`is_finite`] yourself before calling this function, or\n check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n\n [`is_finite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_finite\n [`is_nan`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_nan\n [`is_infinite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_infinite\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":6455,"byte_end":6464,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7744,"byte_end":7749,"line_start":133,"line_end":133,"column_start":11,"column_end":16},"name":"Float","qualname":"::buffer::Float","value":"Float: Sealed","parent":null,"children":[],"decl_id":null,"docs":" A floating point number, f32 or f64, that can be written into a\n [`ryu::Buffer`][Buffer].\n\n This trait is sealed and cannot be implemented for types outside of the\n `ryu` crate.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7816,"byte_end":7822,"line_start":137,"line_end":137,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::buffer::Sealed","value":"Sealed: Copy","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7838,"byte_end":7850,"line_start":138,"line_end":138,"column_start":8,"column_end":20},"name":"is_nonfinite","qualname":"::buffer::Sealed::is_nonfinite","value":"fn (self) -> bool","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7873,"byte_end":7889,"line_start":139,"line_end":139,"column_start":8,"column_end":24},"name":"format_nonfinite","qualname":"::buffer::Sealed::format_nonfinite","value":"fn (self) -> &'static str","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7927,"byte_end":7946,"line_start":140,"line_end":140,"column_start":15,"column_end":34},"name":"write_to_ryu_buffer","qualname":"::buffer::Sealed::write_to_ryu_buffer","value":"fn (self, result: *mut u8) -> usize","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\pretty\\mod.rs","byte_start":72661,"byte_end":72669,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"name":"format64","qualname":"::pretty::format64","value":"fn (f: f64, result: *mut u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Print f64 to the given buffer and return number of bytes written.\n\n At most 24 bytes will be written.\n\n ## Special cases\n\n This function **does not** check for NaN or infinity. If the input\n number is not a finite float, the printed representation will be some\n correctly formatted but unspecified numerical value.\n\n Please check [`is_finite`] yourself before calling this function, or\n check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n\n [`is_finite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_finite\n [`is_nan`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_nan\n [`is_infinite`]: https://doc.rust-lang.org/std/primitive.f64.html#method.is_infinite\n\n ## Safety\n\n The `result` pointer argument must point to sufficiently many writable bytes\n to hold Ryū's representation of `f`.\n\n ## Example\n\n ```edition2018\n use std::mem::MaybeUninit;\n\n let f = 1.234f64;\n\n unsafe {\n     let mut buffer: [MaybeUninit<u8>; 24] = MaybeUninit::uninit().assume_init();\n     let len = ryu::raw::format64(f, buffer.as_mut_ptr() as *mut u8);\n     let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);\n     let print = std::str::from_utf8_unchecked(slice);\n     assert_eq!(print, \"1.234\");\n }\n ```\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\pretty\\mod.rs","byte_start":72592,"byte_end":72600,"line_start":53,"line_end":53,"column_start":29,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\pretty\\mod.rs","byte_start":76661,"byte_end":76669,"line_start":162,"line_end":162,"column_start":15,"column_end":23},"name":"format32","qualname":"::pretty::format32","value":"fn (f: f32, result: *mut u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Print f32 to the given buffer and return number of bytes written.\n\n At most 16 bytes will be written.\n\n ## Special cases\n\n This function **does not** check for NaN or infinity. If the input\n number is not a finite float, the printed representation will be some\n correctly formatted but unspecified numerical value.\n\n Please check [`is_finite`] yourself before calling this function, or\n check [`is_nan`] and [`is_infinite`] and handle those cases yourself.\n\n [`is_finite`]: https://doc.rust-lang.org/std/primitive.f32.html#method.is_finite\n [`is_nan`]: https://doc.rust-lang.org/std/primitive.f32.html#method.is_nan\n [`is_infinite`]: https://doc.rust-lang.org/std/primitive.f32.html#method.is_infinite\n\n ## Safety\n\n The `result` pointer argument must point to sufficiently many writable bytes\n to hold Ryū's representation of `f`.\n\n ## Example\n\n ```edition2018\n use std::mem::MaybeUninit;\n\n let f = 1.234f32;\n\n unsafe {\n     let mut buffer: [MaybeUninit<u8>; 16] = MaybeUninit::uninit().assume_init();\n     let len = ryu::raw::format32(f, buffer.as_mut_ptr() as *mut u8);\n     let slice = std::slice::from_raw_parts(buffer.as_ptr() as *const u8, len);\n     let print = std::str::from_utf8_unchecked(slice);\n     assert_eq!(print, \"1.234\");\n }\n ```\n","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\pretty\\mod.rs","byte_start":76592,"byte_end":76600,"line_start":160,"line_end":160,"column_start":29,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","byte_start":3578,"byte_end":3581,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":130}],"decl_id":null,"docs":" Unsafe functions that mirror the API of the C implementation of Ryū.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":4281,"byte_end":4287,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7411,"byte_end":7417,"line_start":120,"line_end":120,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":4281,"byte_end":4287,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7411,"byte_end":7417,"line_start":120,"line_end":120,"column_start":18,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":133},"to":{"krate":1,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7751,"byte_end":7757,"line_start":133,"line_end":133,"column_start":18,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":24}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ryu-1.0.2\\src\\buffer\\mod.rs","byte_start":7824,"byte_end":7828,"line_start":137,"line_end":137,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":1543},"to":{"krate":0,"index":27}}]}