{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","same_file","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=e9927e374d458aed","-C","extra-filename=-e9927e374d458aed","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","winapi_util=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libwinapi_util-9aaf4ae41319a928.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libsame_file-e9927e374d458aed.rmeta"},"prelude":{"crate_id":{"name":"same_file","disambiguator":[11212841497081443172,17215947667989593964]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","num":14,"id":{"name":"winapi_util","disambiguator":[4610850028362120735,4711611260241363649]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","num":15,"id":{"name":"winapi","disambiguator":[16884225663357164607,15698575546599551137]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":0,"byte_end":16325,"line_start":1,"line_end":572,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":0,"byte_end":16325,"line_start":1,"line_end":572,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":81},{"krate":0,"index":94},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":84},{"krate":0,"index":40},{"krate":0,"index":49}],"decl_id":null,"docs":"This crate provides a safe and simple **cross platform** way to determine\nwhether two file paths refer to the same file or directory.\n\nMost uses of this crate should be limited to the top-level [`is_same_file`]\nfunction, which takes two file paths and returns true if they refer to the\nsame file or directory:\n\n```rust,no_run\n# use std::error::Error;\nuse same_file::is_same_file;\n\n# fn try_main() -> Result<(), Box<Error>> {\nassert!(is_same_file(\"/bin/sh\", \"/usr/bin/sh\")?);\n#    Ok(())\n# }\n#\n# fn main() {\n#    try_main().unwrap();\n# }\n```\n\nAdditionally, this crate provides a [`Handle`] type that permits a more efficient\nequality check depending on your access pattern. For example, if one wanted to\ncheck whether any path in a list of paths corresponded to the process' stdout\nhandle, then one could build a handle once for stdout. The equality check for\neach file in the list then only requires one stat call instead of two. The code\nmight look like this:\n\n```rust,no_run\n# use std::error::Error;\nuse same_file::Handle;\n\n# fn try_main() -> Result<(), Box<Error>> {\nlet candidates = &[\n    \"examples/is_same_file.rs\",\n    \"examples/is_stderr.rs\",\n    \"examples/stderr\",\n];\nlet stdout_handle = Handle::stdout()?;\nfor candidate in candidates {\n    let handle = Handle::from_path(candidate)?;\n    if stdout_handle == handle {\n        println!(\"{:?} is stdout!\", candidate);\n    } else {\n        println!(\"{:?} is NOT stdout!\", candidate);\n    }\n}\n#    Ok(())\n# }\n#\n# fn main() {\n#     try_main().unwrap();\n# }\n```\n\nSee [`examples/is_stderr.rs`] for a runnable example and compare the output of:\n\n- `cargo run --example is_stderr 2> examples/stderr` and\n- `cargo run --example is_stderr`.\n\n[`is_same_file`]: fn.is_same_file.html\n[`Handle`]: struct.Handle.html\n[`examples/is_stderr.rs`]: https://github.com/BurntSushi/same-file/blob/master/examples/is_same_file.rs\n","sig":null,"attributes":[{"value":"allow(bare_trait_objects, unknown_lints)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":1873,"byte_end":1917,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":1918,"byte_end":1940,"line_start":69,"line_end":69,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":3224,"byte_end":3230,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"Handle","qualname":"::Handle","value":"","parent":null,"children":[],"decl_id":null,"docs":" A handle to a file that can be tested for equality with other handles.\n\n If two files are the same, then any two handles of those files will compare\n equal. If two files are not the same, then any two handles of those files\n will compare not-equal.\n\n A handle consumes an open file resource as long as it exists.\n\n Equality is determined by comparing inode numbers on Unix and a combination\n of identifier, volume serial, and file size on Windows. Note that it's\n possible for comparing two handles to produce a false positive on some\n platforms. Namely, two handles can compare equal even if the two handles\n *don't* point to the same file. Check the [source] for specific\n implementation details.\n\n [source]: https://github.com/BurntSushi/same-file/tree/master/src\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":4368,"byte_end":4377,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Handle>::from_path","value":"fn <P> (p: P) -> io::Result<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Construct a handle from a path.\n\n Note that the underlying [`File`] is opened in read-only mode on all\n platforms.\n\n [`File`]: https://doc.rust-lang.org/std/fs/struct.File.html\n\n # Errors\n This method will return an [`io::Error`] if the path cannot\n be opened, or the file's metadata cannot be obtained.\n The most common reasons for this are: the path does not\n exist, or there were not enough permissions.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n\n # Examples\n Check that two paths are not the same file:\n\n ```rust,no_run\n # use std::error::Error;\n use same_file::Handle;\n\n # fn try_main() -> Result<(), Box<Error>> {\n let source = Handle::from_path(\"./source\")?;\n let target = Handle::from_path(\"./target\")?;\n assert_ne!(source, target, \"The files are the same.\");\n # Ok(())\n # }\n #\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":5463,"byte_end":5472,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Handle>::from_file","value":"fn (file: File) -> io::Result<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Construct a handle from a file.\n\n # Errors\n This method will return an [`io::Error`] if the metadata for\n the given [`File`] cannot be obtained.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n [`File`]: https://doc.rust-lang.org/std/fs/struct.File.html\n\n # Examples\n Check that two files are not in fact the same file:\n\n ```rust,no_run\n # use std::error::Error;\n # use std::fs::File;\n use same_file::Handle;\n\n # fn try_main() -> Result<(), Box<Error>> {\n let source = File::open(\"./source\")?;\n let target = File::open(\"./target\")?;\n\n assert_ne!(\n     Handle::from_file(source)?,\n     Handle::from_file(target)?,\n     \"The files are the same.\"\n );\n #     Ok(())\n # }\n #\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":7042,"byte_end":7047,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"stdin","qualname":"<Handle>::stdin","value":"fn () -> io::Result<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Construct a handle from stdin.\n\n # Errors\n This method will return an [`io::Error`] if stdin cannot\n be opened due to any I/O-related reason.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n\n # Examples\n\n ```rust\n # use std::error::Error;\n use same_file::Handle;\n\n # fn try_main() -> Result<(), Box<Error>> {\n let stdin = Handle::stdin()?;\n let stdout = Handle::stdout()?;\n let stderr = Handle::stderr()?;\n\n if stdin == stdout {\n     println!(\"stdin == stdout\");\n }\n if stdin == stderr {\n     println!(\"stdin == stderr\");\n }\n if stdout == stderr {\n     println!(\"stdout == stderr\");\n }\n #\n #     Ok(())\n # }\n #\n # fn main() {\n #     try_main().unwrap();\n # }\n ```\n\n The output differs depending on the platform.\n\n On Linux:\n\n ```text\n $ ./example\n stdin == stdout\n stdin == stderr\n stdout == stderr\n $ ./example > result\n $ cat result\n stdin == stderr\n $ ./example > result 2>&1\n $ cat result\n stdout == stderr\n ```\n\n Windows:\n\n ```text\n > example\n > example > result 2>&1\n > type result\n stdout == stderr\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":7506,"byte_end":7512,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"stdout","qualname":"<Handle>::stdout","value":"fn () -> io::Result<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Construct a handle from stdout.\n\n # Errors\n This method will return an [`io::Error`] if stdout cannot\n be opened due to any I/O-related reason.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n\n # Examples\n See the example for [`stdin()`].\n\n [`stdin()`]: #method.stdin\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":7972,"byte_end":7978,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"stderr","qualname":"<Handle>::stderr","value":"fn () -> io::Result<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Construct a handle from stderr.\n\n # Errors\n This method will return an [`io::Error`] if stderr cannot\n be opened due to any I/O-related reason.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n\n # Examples\n See the example for [`stdin()`].\n\n [`stdin()`]: #method.stdin\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":9211,"byte_end":9218,"line_start":320,"line_end":320,"column_start":12,"column_end":19},"name":"as_file","qualname":"<Handle>::as_file","value":"fn (&self) -> &File","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying file.\n\n # Examples\n Ensure that the target file is not the same as the source one,\n and copy the data to it:\n\n ```rust,no_run\n # use std::error::Error;\n use std::io::prelude::*;\n use std::io::Write;\n use std::fs::File;\n use same_file::Handle;\n\n # fn try_main() -> Result<(), Box<Error>> {\n let source = File::open(\"source\")?;\n let target = File::create(\"target\")?;\n\n let source_handle = Handle::from_file(source)?;\n let mut target_handle = Handle::from_file(target)?;\n assert_ne!(source_handle, target_handle, \"The files are the same.\");\n\n let mut source = source_handle.as_file();\n let target = target_handle.as_file_mut();\n\n let mut buffer = Vec::new();\n // data copy is simplified for the purposes of the example\n source.read_to_end(&mut buffer)?;\n target.write_all(&buffer)?;\n #\n #    Ok(())\n # }\n #\n # fn main() {\n #    try_main().unwrap();\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":9456,"byte_end":9467,"line_start":330,"line_end":330,"column_start":12,"column_end":23},"name":"as_file_mut","qualname":"<Handle>::as_file_mut","value":"fn (&mut self) -> &mut File","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying file.\n\n # Examples\n See the example for [`as_file()`].\n\n [`as_file()`]: #method.as_file\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":10677,"byte_end":10689,"line_start":370,"line_end":370,"column_start":8,"column_end":20},"name":"is_same_file","qualname":"::is_same_file","value":"fn <P, Q> (path1: P, path2: Q) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the two file paths may correspond to the same file.\n\n Note that it's possible for this to produce a false positive on some\n platforms. Namely, this can return true even if the two file paths *don't*\n resolve to the same file.\n # Errors\n This function will return an [`io::Error`] if any of the two paths cannot\n be opened. The most common reasons for this are: the path does not exist,\n or there were not enough permissions.\n\n [`io::Error`]: https://doc.rust-lang.org/std/io/struct.Error.html\n\n # Example\n\n ```rust,no_run\n use same_file::is_same_file;\n\n assert!(is_same_file(\"./foo\", \"././foo\").unwrap_or(false));\n ```\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":18924,"byte_end":18930,"line_start":70,"line_end":70,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":18954,"byte_end":18960,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19369,"byte_end":19375,"line_start":85,"line_end":85,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19619,"byte_end":19625,"line_start":94,"line_end":94,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19848,"byte_end":19854,"line_start":103,"line_end":103,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19948,"byte_end":19954,"line_start":109,"line_end":109,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":3251,"byte_end":3257,"line_start":111,"line_end":111,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":18924,"byte_end":18930,"line_start":70,"line_end":70,"column_start":13,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":52},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":18954,"byte_end":18960,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":52},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19369,"byte_end":19375,"line_start":85,"line_end":85,"column_start":29,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":8561}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19619,"byte_end":19625,"line_start":94,"line_end":94,"column_start":31,"column_end":37},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":8565}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19848,"byte_end":19854,"line_start":103,"line_end":103,"column_start":15,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":52},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\win.rs","byte_start":19948,"byte_end":19954,"line_start":109,"line_end":109,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":52},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\same-file-1.0.6\\src\\lib.rs","byte_start":3251,"byte_end":3257,"line_start":111,"line_end":111,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}}]}