{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","smallvec","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=a0d7f83df1e970dc","-C","extra-filename=-a0d7f83df1e970dc","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","maybe_uninit=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libmaybe_uninit-4c10b07ea0bd4c72.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libsmallvec-a0d7f83df1e970dc.rmeta"},"prelude":{"crate_id":{"name":"smallvec","disambiguator":[7532348961559425697,17176165485341521969]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","num":14,"id":{"name":"maybe_uninit","disambiguator":[4286604793989925036,16418824572312769135]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":301,"byte_end":71292,"line_start":7,"line_end":2374,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":301,"byte_end":71292,"line_start":7,"line_end":2374,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":51},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":71},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":134},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":308},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":246},{"krate":0,"index":252},{"krate":0,"index":258},{"krate":0,"index":263},{"krate":0,"index":267},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":311},{"krate":0,"index":318},{"krate":0,"index":325},{"krate":0,"index":332},{"krate":0,"index":339},{"krate":0,"index":346},{"krate":0,"index":353},{"krate":0,"index":360},{"krate":0,"index":367},{"krate":0,"index":374},{"krate":0,"index":381},{"krate":0,"index":388},{"krate":0,"index":395},{"krate":0,"index":402},{"krate":0,"index":409},{"krate":0,"index":416},{"krate":0,"index":423},{"krate":0,"index":430},{"krate":0,"index":437},{"krate":0,"index":444},{"krate":0,"index":451},{"krate":0,"index":458},{"krate":0,"index":465},{"krate":0,"index":472},{"krate":0,"index":479},{"krate":0,"index":486},{"krate":0,"index":493},{"krate":0,"index":500},{"krate":0,"index":507},{"krate":0,"index":514},{"krate":0,"index":521},{"krate":0,"index":528},{"krate":0,"index":535},{"krate":0,"index":542},{"krate":0,"index":549},{"krate":0,"index":556}],"decl_id":null,"docs":" Small vectors in various sizes. These store a certain number of elements inline, and fall back\n to the heap for larger allocations.  This can be a useful optimization for improving cache\n locality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n ## no_std support\n\n By default, `smallvec` depends on `libstd`. However, it can be configured to use the unstable\n `liballoc` API instead, for use on platforms that have `liballoc` but not `libstd`.  This\n configuration is currently unstable and is not guaranteed to work on all versions of Rust.\n\n To depend on `smallvec` without `libstd`, use `default-features = false` in the `smallvec`\n section of Cargo.toml to disable its `\"std\"` feature.\n\n ## `union` feature\n\n When the `union` feature is enabled `smallvec` will track its state (inline or spilled)\n without the use of an enum tag, reducing the size of the `smallvec` by one machine word.\n This means that there is potentially no space overhead compared to `Vec`.\n Note that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two\n machine words.\n\n To use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml.\n Note that this feature requires a nightly compiler (for now).\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":1864,"byte_end":1886,"line_start":35,"line_end":35,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":4701,"byte_end":4712,"line_start":138,"line_end":138,"column_start":15,"column_end":26},"name":"unreachable","qualname":"::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Hint to the optimizer that any code path which calls this function is\n statically unreachable and can be removed.\n\n Equivalent to `std::hint::unreachable_unchecked` but works in older versions of Rust.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":4677,"byte_end":4686,"line_start":137,"line_end":137,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5706,"byte_end":5713,"line_start":179,"line_end":179,"column_start":11,"column_end":18},"name":"VecLike","qualname":"::VecLike","value":"VecLike<T>: ops::Index<usize, Output = T> + ops::IndexMut<usize> +\nops::Index<ops::Range<usize>, Output = [T]> +\nops::IndexMut<ops::Range<usize>> + ops::Index<ops::RangeFrom<usize>, Output =\n[T]> + ops::IndexMut<ops::RangeFrom<usize>> + ops::Index<ops::RangeTo<usize>,\nOutput = [T]> + ops::IndexMut<ops::RangeTo<usize>> +\nops::Index<ops::RangeFull, Output = [T]> + ops::IndexMut<ops::RangeFull> +\nops::DerefMut<Target = [T]> + Extend<T>","parent":null,"children":[{"krate":0,"index":28}],"decl_id":null,"docs":" Common operations implemented by both `Vec` and `SmallVec`.\n\n This can be used to write generic code that works with both `Vec` and `SmallVec`.\n\n ## Example\n\n ```rust\n use smallvec::{VecLike, SmallVec};\n\n fn initialize<V: VecLike<u8>>(v: &mut V) {\n     for i in 0..5 {\n         v.push(i);\n     }\n }\n\n let mut vec = Vec::new();\n initialize(&mut vec);\n\n let mut small_vec = SmallVec::<[u8; 8]>::new();\n initialize(&mut small_vec);\n ```\n","sig":null,"attributes":[{"value":"deprecated(note = \"Use `Extend` and `Deref<[T]>` instead\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5634,"byte_end":5695,"line_start":178,"line_end":178,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6280,"byte_end":6284,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"push","qualname":"::VecLike::push","value":"fn (&mut self, value: T) -> ()","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Append an element to the vector.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6961,"byte_end":6976,"line_start":224,"line_end":224,"column_start":11,"column_end":26},"name":"ExtendFromSlice","qualname":"::ExtendFromSlice","value":"ExtendFromSlice<T>","parent":null,"children":[{"krate":0,"index":34}],"decl_id":null,"docs":" Trait to be implemented by a collection that can be extended from a slice\n\n ## Example\n\n ```rust\n use smallvec::{ExtendFromSlice, SmallVec};\n\n fn initialize<V: ExtendFromSlice<u8>>(v: &mut V) {\n     v.extend_from_slice(b\"Test!\");\n }\n\n let mut vec = Vec::new();\n initialize(&mut vec);\n assert_eq!(&vec, b\"Test!\");\n\n let mut small_vec = SmallVec::<[u8; 8]>::new();\n initialize(&mut small_vec);\n assert_eq!(&small_vec as &[_], b\"Test!\");\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7051,"byte_end":7068,"line_start":226,"line_end":226,"column_start":8,"column_end":25},"name":"extend_from_slice","qualname":"::ExtendFromSlice::extend_from_slice","value":"fn (&mut self, other: &[T]) -> ()","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Extends a collection from a slice of its element type\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7576,"byte_end":7581,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"Drain","qualname":"::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":43}],"decl_id":null,"docs":" An iterator that removes the items from a `SmallVec` and yields them by value.\n\n Returned from [`SmallVec::drain`][1].\n\n [1]: struct.SmallVec.html#method.drain\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":11963,"byte_end":11971,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"SmallVec","qualname":"::SmallVec","value":"SmallVec {  }","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" A `Vec`-like container that can store a small number of elements inline.\n\n `SmallVec` acts like a vector, but can store a limited amount of data inline within the\n `SmallVec` struct rather than in a separate allocation.  If the data exceeds this limit, the\n `SmallVec` will \"spill\" its data onto the heap, allocating a new buffer to hold it.\n\n The amount of data that a `SmallVec` can store inline depends on its backing store. The backing\n store can be any type that implements the `Array` trait; usually it is a small fixed-sized\n array.  For example a `SmallVec<[u64; 8]>` can hold up to eight 64-bit integers inline.\n\n ## Example\n\n ```rust\n use smallvec::SmallVec;\n let mut v = SmallVec::<[u8; 4]>::new(); // initialize an empty vector\n\n // The vector can hold up to 4 items without spilling onto the heap.\n v.extend(0..4);\n assert_eq!(v.len(), 4);\n assert!(!v.spilled());\n\n // Pushing another element will force the buffer to spill:\n v.push(4);\n assert_eq!(v.len(), 5);\n assert!(v.spilled());\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":12480,"byte_end":12483,"line_start":410,"line_end":410,"column_start":12,"column_end":15},"name":"new","qualname":"<SmallVec<A>>::new","value":"fn () -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty vector\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":12459,"byte_end":12468,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":13397,"byte_end":13410,"line_start":437,"line_end":437,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SmallVec<A>>::with_capacity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty vector with enough capacity pre-allocated to store at least `n`\n elements.\n\n Will create a heap allocation only if `n` is larger than the inline capacity.\n\n ```\n # use smallvec::SmallVec;\n\n let v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);\n\n assert!(v.is_empty());\n assert!(v.capacity() >= 100);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":13376,"byte_end":13385,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":13930,"byte_end":13938,"line_start":456,"line_end":456,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<SmallVec<A>>::from_vec","value":"fn (mut vec: Vec<A::Item>) -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `SmallVec` from a `Vec<A::Item>`.\n\n Elements will be copied to the inline buffer if vec.capacity() <= A::size().\n\n ```rust\n use smallvec::SmallVec;\n\n let vec = vec![1, 2, 3, 4, 5];\n let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);\n\n assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":13909,"byte_end":13918,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":15020,"byte_end":15028,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"from_buf","qualname":"<SmallVec<A>>::from_buf","value":"fn (buf: A) -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `SmallVec` on the stack from an `A` without\n copying elements.\n\n ```rust\n use smallvec::SmallVec;\n\n let buf = [1, 2, 3, 4, 5];\n let small_vec: SmallVec<_> = SmallVec::from_buf(buf);\n\n assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":14999,"byte_end":15008,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":15643,"byte_end":15659,"line_start":512,"line_end":512,"column_start":12,"column_end":28},"name":"from_buf_and_len","qualname":"<SmallVec<A>>::from_buf_and_len","value":"fn (buf: A, len: usize) -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `SmallVec` on the stack from an `A` without\n copying elements. Also sets the length, which must be less or\n equal to the size of `buf`.\n\n ```rust\n use smallvec::SmallVec;\n\n let buf = [1, 2, 3, 4, 5, 0, 0, 0];\n let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);\n\n assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":15622,"byte_end":15631,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":16317,"byte_end":16343,"line_start":532,"line_end":532,"column_start":19,"column_end":45},"name":"from_buf_and_len_unchecked","qualname":"<SmallVec<A>>::from_buf_and_len_unchecked","value":"fn (buf: A, len: usize) -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `SmallVec` on the stack from an `A` without\n copying elements. Also sets the length. The user is responsible\n for ensuring that `len <= A::size()`.\n\n ```rust\n use smallvec::SmallVec;\n\n let buf = [1, 2, 3, 4, 5, 0, 0, 0];\n let small_vec: SmallVec<_> = unsafe {\n     SmallVec::from_buf_and_len_unchecked(buf, 5)\n };\n\n assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":16289,"byte_end":16298,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":16773,"byte_end":16780,"line_start":545,"line_end":545,"column_start":19,"column_end":26},"name":"set_len","qualname":"<SmallVec<A>>::set_len","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the length of a vector.\n\n This will explicitly set the size of the vector, without actually\n modifying its buffers, so it is up to the caller to ensure that the\n vector is actually the specified size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":16986,"byte_end":16997,"line_start":552,"line_end":552,"column_start":12,"column_end":23},"name":"inline_size","qualname":"<SmallVec<A>>::inline_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The maximum number of elements this vector can hold inline\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":16965,"byte_end":16974,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17118,"byte_end":17121,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"len","qualname":"<SmallVec<A>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of elements stored in the vector\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17097,"byte_end":17106,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17242,"byte_end":17250,"line_start":564,"line_end":564,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SmallVec<A>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the vector is empty\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17221,"byte_end":17230,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17393,"byte_end":17401,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SmallVec<A>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The number of items the vector can hold without reallocating\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":17372,"byte_end":17381,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":18475,"byte_end":18482,"line_start":603,"line_end":603,"column_start":12,"column_end":19},"name":"spilled","qualname":"<SmallVec<A>>::spilled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the data has spilled into a separate heap-allocated buffer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":18454,"byte_end":18463,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":18626,"byte_end":18631,"line_start":608,"line_end":608,"column_start":12,"column_end":17},"name":"drain","qualname":"<SmallVec<A>>::drain","value":"fn (&mut self) -> Drain<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Empty the vector and return an iterator over its former contents.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":19018,"byte_end":19022,"line_start":625,"line_end":625,"column_start":12,"column_end":16},"name":"push","qualname":"<SmallVec<A>>::push","value":"fn (&mut self, value: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append an item to the vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":18997,"byte_end":19006,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":19469,"byte_end":19472,"line_start":639,"line_end":639,"column_start":12,"column_end":15},"name":"pop","qualname":"<SmallVec<A>>::pop","value":"fn (&mut self) -> Option<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Remove an item from the end of the vector and return it, or None if empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":19448,"byte_end":19457,"line_start":638,"line_end":638,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":19962,"byte_end":19966,"line_start":654,"line_end":654,"column_start":12,"column_end":16},"name":"grow","qualname":"<SmallVec<A>>::grow","value":"fn (&mut self, new_cap: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\n Panics if `new_cap` is less than the vector's length.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":21423,"byte_end":21430,"line_start":691,"line_end":691,"column_start":12,"column_end":19},"name":"reserve","qualname":"<SmallVec<A>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more elements to be inserted.\n\n May reserve more space to avoid frequent reallocations.\n\n If the new capacity would overflow `usize` then it will be set to `usize::max_value()`\n instead. (This means that inserting `additional` new elements is not guaranteed to be\n possible after calling this function.)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":21402,"byte_end":21411,"line_start":690,"line_end":690,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":22080,"byte_end":22093,"line_start":707,"line_end":707,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<SmallVec<A>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve the minimum capacity for `additional` more elements to be inserted.\n\n Panics if the new capacity overflows `usize`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":22590,"byte_end":22603,"line_start":721,"line_end":721,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<SmallVec<A>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the vector as much as possible.\n\n When possible, this will move data from an external heap buffer to the vector's inline\n storage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":23498,"byte_end":23506,"line_start":746,"line_end":746,"column_start":12,"column_end":20},"name":"truncate","qualname":"<SmallVec<A>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shorten the vector, keeping the first `len` elements and dropping the rest.\n\n If `len` is greater than or equal to the vector's current length, this has no\n effect.\n\n This does not re-allocate.  If you want the vector's capacity to shrink, call\n `shrink_to_fit` after truncating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":23931,"byte_end":23939,"line_start":760,"line_end":760,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<SmallVec<A>>::as_slice","value":"fn (&self) -> &[A::Item]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire vector.\n\n Equivalent to `&s[..]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24093,"byte_end":24105,"line_start":767,"line_end":767,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<SmallVec<A>>::as_mut_slice","value":"fn (&mut self) -> &mut [A::Item]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire vector.\n\n Equivalent to `&mut s[..]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24380,"byte_end":24391,"line_start":777,"line_end":777,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<SmallVec<A>>::swap_remove","value":"fn (&mut self, index: usize) -> A::Item","parent":null,"children":[],"decl_id":null,"docs":" Remove the element at position `index`, replacing it with the last element.\n\n This does not preserve ordering, but is O(1).\n\n Panics if `index` is out of bounds.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24359,"byte_end":24368,"line_start":776,"line_end":776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24635,"byte_end":24640,"line_start":785,"line_end":785,"column_start":12,"column_end":17},"name":"clear","qualname":"<SmallVec<A>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24614,"byte_end":24623,"line_start":784,"line_end":784,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":24861,"byte_end":24867,"line_start":793,"line_end":793,"column_start":12,"column_end":18},"name":"remove","qualname":"<SmallVec<A>>::remove","value":"fn (&mut self, index: usize) -> A::Item","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the element at position `index`, shifting all elements after it to the\n left.\n\n Panics if `index` is out of bounds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":25414,"byte_end":25420,"line_start":809,"line_end":809,"column_start":12,"column_end":18},"name":"insert","qualname":"<SmallVec<A>>::insert","value":"fn (&mut self, index: usize, element: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert an element at position `index`, shifting all elements after it to the right.\n\n Panics if `index` is out of bounds.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":25946,"byte_end":25957,"line_start":825,"line_end":825,"column_start":12,"column_end":23},"name":"insert_many","qualname":"<SmallVec<A>>::insert_many","value":"fn <I> (&mut self, index: usize, iterable: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert multiple elements at position `index`, shifting all following elements toward the\n back.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":27892,"byte_end":27900,"line_start":871,"line_end":871,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<SmallVec<A>>::into_vec","value":"fn (self) -> Vec<A::Item>","parent":null,"children":[],"decl_id":null,"docs":" Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto\n the heap.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":28542,"byte_end":28552,"line_start":888,"line_end":888,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SmallVec<A>>::into_inner","value":"fn (self) -> Result<A, Self>","parent":null,"children":[],"decl_id":null,"docs":" Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.\n\n This method returns `Err(Self)` if the SmallVec is too short (and the `A` contains uninitialized elements),\n or if the SmallVec is too long (and all the elements were spilled to the heap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":29124,"byte_end":29130,"line_start":905,"line_end":905,"column_start":12,"column_end":18},"name":"retain","qualname":"<SmallVec<A>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.\n\n In other words, remove all elements `e` such that `f(&e)` returns `false`.\n This method operates in place and preserves the order of the retained\n elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":29522,"byte_end":29527,"line_start":919,"line_end":919,"column_start":12,"column_end":17},"name":"dedup","qualname":"<SmallVec<A>>::dedup","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes consecutive duplicate elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":29713,"byte_end":29721,"line_start":924,"line_end":924,"column_start":12,"column_end":20},"name":"dedup_by","qualname":"<SmallVec<A>>::dedup_by","value":"fn <F> (&mut self, mut same_bucket: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes consecutive duplicate elements using the given equality relation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":30649,"byte_end":30661,"line_start":955,"line_end":955,"column_start":12,"column_end":24},"name":"dedup_by_key","qualname":"<SmallVec<A>>::dedup_by_key","value":"fn <F, K> (&mut self, mut key: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes consecutive elements that map to the same key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":33539,"byte_end":33553,"line_start":1030,"line_end":1030,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<SmallVec<A>>::from_raw_parts","value":"fn (ptr: *mut A::Item, length: usize, capacity: usize) -> SmallVec<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SmallVec` directly from the raw components of another\n `SmallVec`.\n\n # Safety\n\n This is highly unsafe, due to the number of invariants that aren't\n checked:\n\n * `ptr` needs to have been previously allocated via `SmallVec` for its\n   spilled storage (at least, it's highly likely to be incorrect if it\n   wasn't).\n * `ptr`'s `A::Item` type needs to be the same size and alignment that\n   it was allocated with\n * `length` needs to be less than or equal to `capacity`.\n * `capacity` needs to be the capacity that the pointer was allocated\n   with.\n\n Violating these may cause problems like corrupting the allocator's\n internal data structures.\n\n Additionally, `capacity` must be greater than the amount of inline\n storage `A` has; that is, the new `SmallVec` must need to spill over\n into heap allocated storage. This condition is asserted against.\n\n The ownership of `ptr` is effectively transferred to the\n `SmallVec` which may then deallocate, reallocate or change the\n contents of memory pointed to by the pointer at will. Ensure\n that nothing else uses the pointer after calling this\n function.\n\n # Examples\n\n ```\n # #[macro_use] extern crate smallvec;\n # use smallvec::SmallVec;\n use std::mem;\n use std::ptr;\n\n fn main() {\n     let mut v: SmallVec<[_; 1]> = smallvec![1, 2, 3];\n\n     // Pull out the important parts of `v`.\n     let p = v.as_mut_ptr();\n     let len = v.len();\n     let cap = v.capacity();\n     let spilled = v.spilled();\n\n     unsafe {\n         // Forget all about `v`. The heap allocation that stored the\n         // three values won't be deallocated.\n         mem::forget(v);\n\n         // Overwrite memory with [4, 5, 6].\n         //\n         // This is only safe if `spilled` is true! Otherwise, we are\n         // writing into the old `SmallVec`'s inline storage on the\n         // stack.\n         assert!(spilled);\n         for i in 0..len as isize {\n             ptr::write(p.offset(i), 4 + i);\n         }\n\n         // Put everything back together into a SmallVec with a different\n         // amount of inline storage, but which is still less than `cap`.\n         let rebuilt = SmallVec::<[_; 2]>::from_raw_parts(p, len, cap);\n         assert_eq!(&*rebuilt, &[4, 5, 6]);\n     }\n }\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":34027,"byte_end":34037,"line_start":1047,"line_end":1047,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<SmallVec<A>>::from_slice","value":"fn (slice: &[A::Item]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copy the elements from a slice into a new `SmallVec`.\n\n For slices of `Copy` types, this is more efficient than `SmallVec::from(slice)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":35078,"byte_end":35095,"line_start":1077,"line_end":1077,"column_start":12,"column_end":29},"name":"insert_from_slice","qualname":"<SmallVec<A>>::insert_from_slice","value":"fn (&mut self, index: usize, slice: &[A::Item]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy elements from a slice into the vector at position `index`, shifting any following\n elements toward the back.\n\n For slices of `Copy` types, this is more efficient than `insert`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":35742,"byte_end":35759,"line_start":1096,"line_end":1096,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<SmallVec<A>>::extend_from_slice","value":"fn (&mut self, slice: &[A::Item]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy elements from a slice and append them to the vector.\n\n For slices of `Copy` types, this is more efficient than `extend`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":35721,"byte_end":35730,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":36222,"byte_end":36228,"line_start":1109,"line_end":1109,"column_start":12,"column_end":18},"name":"resize","qualname":"<SmallVec<A>>::resize","value":"fn (&mut self, len: usize, value: A::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the vector so that its length is equal to `len`.\n\n If `len` is less than the current length, the vector simply truncated.\n\n If `len` is greater than the current length, `value` is appended to the\n vector until its length equals `len`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":36704,"byte_end":36713,"line_start":1126,"line_end":1126,"column_start":12,"column_end":21},"name":"from_elem","qualname":"<SmallVec<A>>::from_elem","value":"fn (elem: A::Item, n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SmallVec` with `n` copies of `elem`.\n ```\n use smallvec::SmallVec;\n\n let v = SmallVec::<[char; 128]>::from_elem('d', 2);\n assert_eq!(v, SmallVec::from_buf(['d', 'd']));\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45691,"byte_end":45699,"line_start":1467,"line_end":1467,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" An iterator that consumes a `SmallVec` and yields its items by value.\n\n Returned from [`SmallVec::into_iter`][1].\n\n [1]: struct.SmallVec.html#method.into_iter\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":47803,"byte_end":47808,"line_start":1554,"line_end":1554,"column_start":18,"column_end":23},"name":"Array","qualname":"::Array","value":"Array","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" Types that can be used as the backing store for a SmallVec\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":47862,"byte_end":47866,"line_start":1556,"line_end":1556,"column_start":10,"column_end":14},"name":"Item","qualname":"::Array::Item","value":"type Item;","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" The type of the array's elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":47931,"byte_end":47935,"line_start":1558,"line_end":1558,"column_start":8,"column_end":12},"name":"size","qualname":"::Array::size","value":"fn () -> usize","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Returns the number of items the array can hold.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48016,"byte_end":48019,"line_start":1560,"line_end":1560,"column_start":8,"column_end":11},"name":"ptr","qualname":"::Array::ptr","value":"fn (&self) -> *const Self::Item","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Returns a pointer to the first element of the array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48125,"byte_end":48132,"line_start":1562,"line_end":1562,"column_start":8,"column_end":15},"name":"ptr_mut","qualname":"::Array::ptr_mut","value":"fn (&mut self) -> *mut Self::Item","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first element of the array.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6354,"byte_end":6357,"line_start":198,"line_end":198,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7135,"byte_end":7138,"line_start":229,"line_end":229,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7659,"byte_end":7664,"line_start":249,"line_end":249,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7971,"byte_end":7976,"line_start":263,"line_end":263,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":8165,"byte_end":8170,"line_start":270,"line_end":270,"column_start":35,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":8208,"byte_end":8213,"line_start":272,"line_end":272,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":9464,"byte_end":9476,"line_start":324,"line_end":324,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":10793,"byte_end":10805,"line_start":370,"line_end":370,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":10850,"byte_end":10862,"line_start":371,"line_end":371,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":12407,"byte_end":12415,"line_start":407,"line_end":407,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":33823,"byte_end":33831,"line_start":1043,"line_end":1043,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":35890,"byte_end":35898,"line_start":1102,"line_end":1102,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37266,"byte_end":37274,"line_start":1145,"line_end":1145,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37519,"byte_end":37527,"line_start":1156,"line_end":1156,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37771,"byte_end":37779,"line_start":1166,"line_end":1166,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37894,"byte_end":37902,"line_start":1173,"line_end":1173,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38026,"byte_end":38034,"line_start":1180,"line_end":1180,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38153,"byte_end":38161,"line_start":1187,"line_end":1187,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38316,"byte_end":38324,"line_start":1195,"line_end":1195,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":40476,"byte_end":40484,"line_start":1279,"line_end":1279,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":40858,"byte_end":40866,"line_start":1293,"line_end":1293,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":41002,"byte_end":41010,"line_start":1300,"line_end":1300,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":41929,"byte_end":41937,"line_start":1332,"line_end":1332,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42135,"byte_end":42143,"line_start":1339,"line_end":1339,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42291,"byte_end":42299,"line_start":1346,"line_end":1346,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42502,"byte_end":42510,"line_start":1354,"line_end":1354,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43252,"byte_end":43260,"line_start":1379,"line_end":1379,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43440,"byte_end":43448,"line_start":1385,"line_end":1385,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43977,"byte_end":43985,"line_start":1407,"line_end":1407,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44308,"byte_end":44316,"line_start":1420,"line_end":1420,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44621,"byte_end":44629,"line_start":1430,"line_end":1430,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44870,"byte_end":44878,"line_start":1438,"line_end":1438,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44934,"byte_end":44942,"line_start":1440,"line_end":1440,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45145,"byte_end":45153,"line_start":1447,"line_end":1447,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45319,"byte_end":45327,"line_start":1454,"line_end":1454,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45469,"byte_end":45477,"line_start":1460,"line_end":1460,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45798,"byte_end":45806,"line_start":1473,"line_end":1473,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45900,"byte_end":45908,"line_start":1479,"line_end":1479,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46471,"byte_end":46479,"line_start":1503,"line_end":1503,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46828,"byte_end":46836,"line_start":1518,"line_end":1518,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46877,"byte_end":46885,"line_start":1520,"line_end":1520,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48395,"byte_end":48407,"line_start":1573,"line_end":1573,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48730,"byte_end":48742,"line_start":1590,"line_end":1590,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5731,"byte_end":5736,"line_start":180,"line_end":180,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5769,"byte_end":5777,"line_start":181,"line_end":181,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1784},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5800,"byte_end":5805,"line_start":182,"line_end":182,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5852,"byte_end":5860,"line_start":183,"line_end":183,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1784},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5895,"byte_end":5900,"line_start":184,"line_end":184,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5951,"byte_end":5959,"line_start":185,"line_end":185,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1784},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":5998,"byte_end":6003,"line_start":186,"line_end":186,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6052,"byte_end":6060,"line_start":187,"line_end":187,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1784},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6097,"byte_end":6102,"line_start":188,"line_end":188,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6146,"byte_end":6154,"line_start":189,"line_end":189,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1784},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6186,"byte_end":6194,"line_start":190,"line_end":190,"column_start":14,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1715},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6219,"byte_end":6225,"line_start":191,"line_end":191,"column_start":9,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":3960},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":6354,"byte_end":6357,"line_start":198,"line_end":198,"column_start":24,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":3846},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7135,"byte_end":7138,"line_start":229,"line_end":229,"column_start":39,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":3846},"to":{"krate":0,"index":32}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7659,"byte_end":7664,"line_start":249,"line_end":249,"column_start":30,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":7971,"byte_end":7976,"line_start":263,"line_end":263,"column_start":41,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":8165,"byte_end":8170,"line_start":270,"line_end":270,"column_start":35,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":8208,"byte_end":8213,"line_start":272,"line_end":272,"column_start":26,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":9464,"byte_end":9476,"line_start":324,"line_end":324,"column_start":16,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":63},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":10793,"byte_end":10805,"line_start":370,"line_end":370,"column_start":39,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":10850,"byte_end":10862,"line_start":371,"line_end":371,"column_start":39,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":1545}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":12407,"byte_end":12415,"line_start":407,"line_end":407,"column_start":16,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":33823,"byte_end":33831,"line_start":1043,"line_end":1043,"column_start":16,"column_end":24},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":35890,"byte_end":35898,"line_start":1102,"line_end":1102,"column_start":16,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37266,"byte_end":37274,"line_start":1145,"line_end":1145,"column_start":31,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":1704}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37519,"byte_end":37527,"line_start":1156,"line_end":1156,"column_start":34,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37771,"byte_end":37779,"line_start":1166,"line_end":1166,"column_start":37,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":37894,"byte_end":37902,"line_start":1173,"line_end":1173,"column_start":37,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2252}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38026,"byte_end":38034,"line_start":1180,"line_end":1180,"column_start":38,"column_end":46},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38153,"byte_end":38161,"line_start":1187,"line_end":1187,"column_start":41,"column_end":49},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2328}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":38316,"byte_end":38324,"line_start":1195,"line_end":1195,"column_start":41,"column_end":49},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":84},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":40476,"byte_end":40484,"line_start":1279,"line_end":1279,"column_start":44,"column_end":52},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":40858,"byte_end":40866,"line_start":1293,"line_end":1293,"column_start":39,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":41002,"byte_end":41010,"line_start":1300,"line_end":1300,"column_start":28,"column_end":36},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":41929,"byte_end":41937,"line_start":1332,"line_end":1332,"column_start":45,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":32}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42135,"byte_end":42143,"line_start":1339,"line_end":1339,"column_start":37,"column_end":45},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":84},"to":{"krate":0,"index":26}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42291,"byte_end":42299,"line_start":1346,"line_end":1346,"column_start":42,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":3947}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":42502,"byte_end":42510,"line_start":1354,"line_end":1354,"column_start":36,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43252,"byte_end":43260,"line_start":1379,"line_end":1379,"column_start":31,"column_end":39},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43440,"byte_end":43448,"line_start":1385,"line_end":1385,"column_start":28,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":43977,"byte_end":43985,"line_start":1407,"line_end":1407,"column_start":25,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44308,"byte_end":44316,"line_start":1420,"line_end":1420,"column_start":26,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44621,"byte_end":44629,"line_start":1430,"line_end":1430,"column_start":53,"column_end":61},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44870,"byte_end":44878,"line_start":1438,"line_end":1438,"column_start":23,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":44934,"byte_end":44942,"line_start":1440,"line_end":1440,"column_start":31,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45145,"byte_end":45153,"line_start":1447,"line_end":1447,"column_start":24,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45319,"byte_end":45327,"line_start":1454,"line_end":1454,"column_start":25,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45469,"byte_end":45477,"line_start":1460,"line_end":1460,"column_start":32,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":1533}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45798,"byte_end":45806,"line_start":1473,"line_end":1473,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":45900,"byte_end":45908,"line_start":1479,"line_end":1479,"column_start":29,"column_end":37},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46471,"byte_end":46479,"line_start":1503,"line_end":1503,"column_start":40,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":3910}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46828,"byte_end":46836,"line_start":1518,"line_end":1518,"column_start":38,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":3939}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":46877,"byte_end":46885,"line_start":1520,"line_end":1520,"column_start":33,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":84},"to":{"krate":2,"index":3951}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48395,"byte_end":48407,"line_start":1573,"line_end":1573,"column_start":10,"column_end":22},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smallvec-0.6.13\\lib.rs","byte_start":48730,"byte_end":48742,"line_start":1590,"line_end":1590,"column_start":19,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":263},"to":{"krate":2,"index":1726}}]}