{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","tempdir","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=9e26a1eda9655c90","-C","extra-filename=-9e26a1eda9655c90","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","rand=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\librand-4f172a674eb65361.rmeta","--extern","remove_dir_all=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libremove_dir_all-cb9b3f4f9ffd5488.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libtempdir-9e26a1eda9655c90.rmeta"},"prelude":{"crate_id":{"name":"tempdir","disambiguator":[7411265641031093213,18360442266208961635]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":14,"id":{"name":"rand","disambiguator":[11842240924324933670,14938610365815122774]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":15,"id":{"name":"winapi","disambiguator":[16884225663357164607,15698575546599551137]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","num":16,"id":{"name":"remove_dir_all","disambiguator":[15287886082768418378,4122354540918252390]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":467,"byte_end":12817,"line_start":11,"line_end":356,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":467,"byte_end":12817,"line_start":11,"line_end":356,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35}],"decl_id":null,"docs":" Temporary directories of files.\n\n The [`TempDir`] type creates a directory on the file system that\n is deleted once it goes out of scope. At construction, the\n `TempDir` creates a new directory with a randomly generated name\n and a prefix of your choosing.\n\n [`TempDir`]: struct.TempDir.html\n [`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n\n # Examples\n\n ```\n extern crate tempdir;\n\n use std::fs::File;\n use std::io::{self, Write};\n use tempdir::TempDir;\n\n fn main() {\n     if let Err(_) = run() {\n         ::std::process::exit(1);\n     }\n }\n\n fn run() -> Result<(), io::Error> {\n     // Create a directory inside of `std::env::temp_dir()`, named with\n     // the prefix \"example\".\n     let tmp_dir = TempDir::new(\"example\")?;\n     let file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\n     let mut tmp_file = File::create(file_path)?;\n     writeln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n     // By closing the `TempDir` explicitly, we can check that it has\n     // been deleted successfully. If we don't close it explicitly,\n     // the directory will still be deleted when `tmp_dir` goes out\n     // of scope, but we won't know whether deleting the directory\n     // succeeded.\n     drop(tmp_file);\n     tmp_dir.close()?;\n     Ok(())\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":4783,"byte_end":4790,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"TempDir","qualname":"::TempDir","value":"TempDir {  }","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" A directory in the filesystem that is automatically deleted when\n it goes out of scope.\n\n The [`TempDir`] type creates a directory on the file system that\n is deleted once it goes out of scope. At construction, the\n `TempDir` creates a new directory with a randomly generated name,\n and with a prefix of your choosing.\n\n The default constructor, [`TempDir::new`], creates directories in\n the location returned by [`std::env::temp_dir()`], but `TempDir`\n can be configured to manage a temporary directory in any location\n by constructing with [`TempDir::new_in`].\n\n After creating a `TempDir`, work with the file system by doing\n standard [`std::fs`] file system operations on its [`Path`],\n which can be retrieved with [`TempDir::path`]. Once the `TempDir`\n value is dropped, the directory at the path will be deleted, along\n with any files and directories it contains. It is your responsibility\n to ensure that no further file system operations are attempted\n inside the temporary directory once it has been deleted.\n\n Various platform-specific conditions may cause `TempDir` to fail\n to delete the underlying directory. It's important to ensure that\n handles (like [`File`] and [`ReadDir`]) to files inside the\n directory are dropped before the `TempDir` goes out of scope. The\n `TempDir` destructor will silently ignore any errors in deleting\n the directory; to instead handle errors call [`TempDir::close`].\n\n Note that if the program exits before the `TempDir` destructor is\n run, such as via [`std::process::exit`], by segfaulting, or by\n receiving a signal like `SIGINT`, then the temporary directory\n will not be deleted.\n \n [`File`]: http://doc.rust-lang.org/std/fs/struct.File.html\n [`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n [`ReadDir`]: http://doc.rust-lang.org/std/fs/struct.ReadDir.html\n [`TempDir::close`]: struct.TempDir.html#method.close\n [`TempDir::new`]: struct.TempDir.html#method.new\n [`TempDir::new_in`]: struct.TempDir.html#method.new_in\n [`TempDir::path`]: struct.TempDir.html#method.path\n [`TempDir`]: struct.TempDir.html\n [`std::env::temp_dir()`]: https://doc.rust-lang.org/std/env/fn.temp_dir.html\n [`std::fs`]: http://doc.rust-lang.org/std/fs/index.html\n [`std::process::exit`]: http://doc.rust-lang.org/std/process/fn.exit.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":6391,"byte_end":6394,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<TempDir>::new","value":"fn (prefix: &str) -> io::Result<TempDir>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a temporary directory inside of `env::temp_dir()` whose\n name will have the prefix, `prefix`. The directory and\n everything inside it will be automatically deleted once the\n returned `TempDir` is destroyed.\n\n # Errors\n\n If the directory can not be created, `Err` is returned.\n\n # Examples\n\n ```\n use std::fs::File;\n use std::io::Write;\n use tempdir::TempDir;\n\n # use std::io;\n # fn run() -> Result<(), io::Error> {\n // Create a directory inside of `std::env::temp_dir()`, named with\n // the prefix, \"example\".\n let tmp_dir = TempDir::new(\"example\")?;\n let file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\n let mut tmp_file = File::create(file_path)?;\n writeln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n // `tmp_dir` goes out of scope, the directory as well as\n // `tmp_file` will be deleted here.\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":7444,"byte_end":7450,"line_start":190,"line_end":190,"column_start":12,"column_end":18},"name":"new_in","qualname":"<TempDir>::new_in","value":"fn <P> (tmpdir: P, prefix: &str) -> io::Result<TempDir>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a temporary directory inside of `tmpdir`\n whose name will have the prefix `prefix`. The directory and\n everything inside it will be automatically deleted once the\n returned `TempDir` is destroyed.\n\n # Errors\n\n If the directory can not be created, `Err` is returned.\n\n # Examples\n\n ```\n use std::fs::{self, File};\n use std::io::Write;\n use tempdir::TempDir;\n\n # use std::io;\n # fn run() -> Result<(), io::Error> {\n // Create a directory inside of the current directory, named with\n // the prefix, \"example\".\n let tmp_dir = TempDir::new_in(\".\", \"example\")?;\n let file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\n let mut tmp_file = File::create(file_path)?;\n writeln!(tmp_file, \"Brian was here. Briefly.\")?;\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":9525,"byte_end":9529,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"path","qualname":"<TempDir>::path","value":"fn (&self) -> &path::Path","parent":null,"children":[],"decl_id":null,"docs":" Accesses the [`Path`] to the temporary directory.\n\n [`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n # Examples\n\n ```\n use tempdir::TempDir;\n\n # use std::io;\n # fn run() -> Result<(), io::Error> {\n let tmp_path;\n\n {\n    let tmp_dir = TempDir::new(\"example\")?;\n    tmp_path = tmp_dir.path().to_owned();\n\n    // Check that the temp directory actually exists.\n    assert!(tmp_path.exists());\n\n    // End of `tmp_dir` scope, directory will be deleted\n }\n\n // Temp directory should be deleted by now\n assert_eq!(tmp_path.exists(), false);\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":10396,"byte_end":10405,"line_start":280,"line_end":280,"column_start":12,"column_end":21},"name":"into_path","qualname":"<TempDir>::into_path","value":"fn (mut self) -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the [`Path`] contained in the `TempDir` and\n returns it. This destroys the `TempDir` without deleting the\n directory represented by the returned `Path`.\n\n [`Path`]: http://doc.rust-lang.org/std/path/struct.Path.html\n\n # Examples\n\n ```\n use std::fs;\n use tempdir::TempDir;\n\n # use std::io;\n # fn run() -> Result<(), io::Error> {\n let tmp_dir = TempDir::new(\"example\")?;\n\n // Convert `tmp_dir` into a `Path`, destroying the `TempDir`\n // without deleting the directory.\n let tmp_path = tmp_dir.into_path();\n\n // Delete the temporary directory ourselves.\n fs::remove_dir_all(tmp_path)?;\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12102,"byte_end":12107,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"close","qualname":"<TempDir>::close","value":"fn (mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Closes and removes the temporary directory, returing a `Result`.\n\n Although `TempDir` removes the directory on drop, in the destructor\n any errors are ignored. To detect errors cleaning up the temporary\n directory, call `close` instead.\n\n # Errors\n\n This function may return a variety of [`std::io::Error`]s that result from deleting\n the files and directories contained with the temporary directory,\n as well as from deleting the temporary directory itself. These errors\n may be platform specific.\n\n [`std::io::Error`]: http://doc.rust-lang.org/std/io/struct.Error.html\n\n # Examples\n\n ```\n use std::fs::File;\n use std::io::Write;\n use tempdir::TempDir;\n\n # use std::io;\n # fn run() -> Result<(), io::Error> {\n // Create a directory inside of `std::env::temp_dir()`, named with\n // the prefix, \"example\".\n let tmp_dir = TempDir::new(\"example\")?;\n let file_path = tmp_dir.path().join(\"my-temporary-note.txt\");\n let mut tmp_file = File::create(file_path)?;\n writeln!(tmp_file, \"Brian was here. Briefly.\")?;\n\n // By closing the `TempDir` explicitly we can check that it has\n // been deleted successfully. If we don't close it explicitly,\n // the directory will still be deleted when `tmp_dir` goes out\n // of scope, but we won't know whether deleting the directory\n // succeeded.\n drop(tmp_file);\n tmp_dir.close()?;\n # Ok(())\n # }\n ```\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":5316,"byte_end":5323,"line_start":128,"line_end":128,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12331,"byte_end":12338,"line_start":335,"line_end":335,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12422,"byte_end":12429,"line_start":341,"line_end":341,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12611,"byte_end":12618,"line_start":349,"line_end":349,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":5316,"byte_end":5323,"line_start":128,"line_end":128,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12331,"byte_end":12338,"line_start":335,"line_end":335,"column_start":22,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2249}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12422,"byte_end":12429,"line_start":341,"line_end":341,"column_start":21,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tempdir-0.3.7\\src\\lib.rs","byte_start":12611,"byte_end":12618,"line_start":349,"line_end":349,"column_start":15,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":1726}}]}