{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","toml","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=910cdddfd9758857","-C","extra-filename=-910cdddfd9758857","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","serde=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libserde-8a90bc9f5c8c20af.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libtoml-910cdddfd9758857.rmeta"},"prelude":{"crate_id":{"name":"toml","disambiguator":[6427858246485063329,12435168285340824553]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","num":14,"id":{"name":"serde","disambiguator":[6102045605132837110,15498387563891141157]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":0,"byte_end":4642,"line_start":1,"line_end":174,"column_start":1,"column_end":33}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21525,"byte_end":21533,"line_start":16,"line_end":16,"column_start":27,"column_end":35},"alias_span":null,"name":"Datetime","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21535,"byte_end":21553,"line_start":16,"line_end":16,"column_start":37,"column_end":55},"alias_span":null,"name":"DatetimeParseError","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21577,"byte_end":21580,"line_start":18,"line_end":18,"column_start":21,"column_end":24},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4341,"byte_end":4346,"line_start":159,"line_end":159,"column_start":23,"column_end":28},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4415,"byte_end":4424,"line_start":164,"line_end":164,"column_start":22,"column_end":31},"alias_span":null,"name":"to_string","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4426,"byte_end":4442,"line_start":164,"line_end":164,"column_start":33,"column_end":49},"alias_span":null,"name":"to_string_pretty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4444,"byte_end":4450,"line_start":164,"line_end":164,"column_start":51,"column_end":57},"alias_span":null,"name":"to_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4452,"byte_end":4462,"line_start":164,"line_end":164,"column_start":59,"column_end":69},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4515,"byte_end":4525,"line_start":167,"line_end":167,"column_start":21,"column_end":31},"alias_span":null,"name":"from_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4527,"byte_end":4535,"line_start":167,"line_end":167,"column_start":33,"column_end":41},"alias_span":null,"name":"from_str","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4537,"byte_end":4549,"line_start":167,"line_end":167,"column_start":43,"column_end":55},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":1192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","byte_start":215289,"byte_end":215300,"line_start":1,"line_end":1,"column_start":21,"column_end":32},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":1346}},{"kind":"Use","ref_id":{"krate":14,"index":1408},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","byte_start":215302,"byte_end":215318,"line_start":1,"line_end":1,"column_start":34,"column_end":50},"alias_span":null,"name":"IntoDeserializer","value":"","parent":{"krate":0,"index":1346}},{"kind":"Use","ref_id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4634,"byte_end":4641,"line_start":174,"line_end":174,"column_start":25,"column_end":32},"alias_span":null,"name":"Spanned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":0,"byte_end":4642,"line_start":1,"line_end":174,"column_start":1,"column_end":33},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":162},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":535},{"krate":0,"index":908},{"krate":0,"index":913},{"krate":0,"index":1282},{"krate":0,"index":1286},{"krate":0,"index":1346},{"krate":0,"index":1360},{"krate":0,"index":1421}],"decl_id":null,"docs":" A [TOML]-parsing library\n\n This library implements a [TOML] v0.5.0 compatible parser,\n primarily supporting the [`serde`] library for encoding/decoding\n various types in Rust.\n\n TOML itself is a simple, ergonomic, and readable configuration format:\n\n ```toml\n [package]\n name = \"toml\"\n version = \"0.4.2\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n\n [dependencies]\n serde = \"1.0\"\n ```\n\n The TOML format tends to be relatively common throughout the Rust community\n for configuration, notably being used by [Cargo], Rust's package manager.\n\n ## TOML values\n\n A value in TOML is represented with the `Value` enum in this crate:\n\n ```rust,ignore\n pub enum Value {\n     String(String),\n     Integer(i64),\n     Float(f64),\n     Boolean(bool),\n     Datetime(Datetime),\n     Array(Array),\n     Table(Table),\n }\n ```\n\n TOML is similar to JSON with the notable addition of a `Datetime`\n type. In general, TOML and JSON are interchangeable in terms of\n formats.\n\n ## Parsing TOML\n\n The easiest way to parse a TOML document is via the `Value` type:\n\n ```rust\n use toml::Value;\n\n let value = \"foo = 'bar'\".parse::<Value>().unwrap();\n\n assert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n ```\n\n The `Value` type implements a number of convenience methods and\n traits; the example above uses `FromStr` to parse a `str` into a\n `Value`.\n\n ## Deserialization and Serialization\n\n This crate supports [`serde`] 1.0 with a number of\n implementations of the `Deserialize`, `Serialize`, `Deserializer`, and\n `Serializer` traits. Namely, you'll find:\n\n * `Deserialize for Value`\n * `Serialize for Value`\n * `Deserialize for Datetime`\n * `Serialize for Datetime`\n * `Deserializer for de::Deserializer`\n * `Serializer for ser::Serializer`\n * `Deserializer for Value`\n\n This means that you can use Serde to deserialize/serialize the\n `Value` type as well as the `Datetime` type in this crate. You can also\n use the `Deserializer`, `Serializer`, or `Value` type itself to act as\n a deserializer/serializer for arbitrary types.\n\n An example of deserializing with TOML is:\n\n ```rust\n use serde_derive::Deserialize;\n\n #[derive(Deserialize)]\n struct Config {\n     ip: String,\n     port: Option<u16>,\n     keys: Keys,\n }\n\n #[derive(Deserialize)]\n struct Keys {\n     github: String,\n     travis: Option<String>,\n }\n\n fn main() {\n     let config: Config = toml::from_str(r#\"\n         ip = '127.0.0.1'\n\n         [keys]\n         github = 'xxxxxxxxxxxxxxxxx'\n         travis = 'yyyyyyyyyyyyyyyyy'\n     \"#).unwrap();\n\n     assert_eq!(config.ip, \"127.0.0.1\");\n     assert_eq!(config.port, None);\n     assert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\n     assert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n }\n ```\n\n You can serialize types in a similar fashion:\n\n ```rust\n use serde_derive::Serialize;\n\n #[derive(Serialize)]\n struct Config {\n     ip: String,\n     port: Option<u16>,\n     keys: Keys,\n }\n\n #[derive(Serialize)]\n struct Keys {\n     github: String,\n     travis: Option<String>,\n }\n\n fn main() {\n     let config = Config {\n         ip: \"127.0.0.1\".to_string(),\n         port: None,\n         keys: Keys {\n             github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n             travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n         },\n     };\n\n     let toml = toml::to_string(&config).unwrap();\n }\n ```\n\n [TOML]: https://github.com/toml-lang/toml\n [Cargo]: https://crates.io/\n [`serde`]: https://serde.rs/\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":3892,"byte_end":3914,"line_start":148,"line_end":148,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":3915,"byte_end":3941,"line_start":149,"line_end":149,"column_start":1,"column_end":27}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4248,"byte_end":4271,"line_start":154,"line_end":154,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":68},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":125},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":1422},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":1433},{"krate":0,"index":1438},{"krate":0,"index":1441},{"krate":0,"index":145},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":1444},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":1452},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":1463},{"krate":0,"index":1468},{"krate":0,"index":1471}],"decl_id":null,"docs":" A map of String to toml::Value.\n\n By default the map is backed by a [`BTreeMap`]. Enable the `preserve_order`\n feature of toml-rs to use [`LinkedHashMap`] instead.\n\n [`BTreeMap`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\n [`LinkedHashMap`]: https://docs.rs/linked-hash-map/*/linked_hash_map/struct.LinkedHashMap.html\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":5714,"byte_end":5717,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" Represents a JSON key/value type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":5985,"byte_end":5988,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<String, Value>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new empty Map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":5964,"byte_end":5973,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6197,"byte_end":6210,"line_start":53,"line_end":53,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Map<String, Value>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new empty Map with the given initial capacity.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"preserve_order\"))","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6069,"byte_end":6108,"line_start":50,"line_end":50,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6176,"byte_end":6185,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6692,"byte_end":6697,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map<String, Value>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6671,"byte_end":6680,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6996,"byte_end":6999,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<String, Value>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.\n\n The key may be any borrowed form of the map's key type, but the ordering\n on the borrowed form *must* match the ordering on the key type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":6975,"byte_end":6984,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":7407,"byte_end":7419,"line_start":94,"line_end":94,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<Map<String, Value>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.\n\n The key may be any borrowed form of the map's key type, but the ordering\n on the borrowed form *must* match the ordering on the key type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":7386,"byte_end":7395,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":7829,"byte_end":7836,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Map<String, Value>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.\n\n The key may be any borrowed form of the map's key type, but the ordering\n on the borrowed form *must* match the ordering on the key type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":7808,"byte_end":7817,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":8368,"byte_end":8374,"line_start":123,"line_end":123,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<String, Value>>::insert","value":"fn (&mut self, k: String, v: Value) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.\n\n If the map did not have this key present, `None` is returned.\n\n If the map did have this key present, the value is updated, and the old\n value is returned. The key is not updated, though; this matters for\n types that can be `==` without being identical.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":8347,"byte_end":8356,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":8762,"byte_end":8768,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<String, Value>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.\n\n The key may be any borrowed form of the map's key type, but the ordering\n on the borrowed form *must* match the ordering on the key type.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":8741,"byte_end":8750,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9030,"byte_end":9035,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"entry","qualname":"<Map<String, Value>>::entry","value":"fn <S> (&mut self, key: S) -> Entry<'_>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place\n manipulation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9618,"byte_end":9621,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"len","qualname":"<Map<String, Value>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9597,"byte_end":9606,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9749,"byte_end":9757,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map<String, Value>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9728,"byte_end":9737,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9889,"byte_end":9893,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"iter","qualname":"<Map<String, Value>>::iter","value":"fn (&self) -> Iter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the entries of the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":9868,"byte_end":9877,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10068,"byte_end":10076,"line_start":180,"line_end":180,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Map<String, Value>>::iter_mut","value":"fn (&mut self) -> IterMut<'_>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable iterator over the entries of the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10047,"byte_end":10056,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10255,"byte_end":10259,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map<String, Value>>::keys","value":"fn (&self) -> Keys<'_>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the keys of the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10234,"byte_end":10243,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10426,"byte_end":10432,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"values","qualname":"<Map<String, Value>>::values","value":"fn (&self) -> Values<'_>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the values of the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10405,"byte_end":10414,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":14968,"byte_end":14974,"line_start":378,"line_end":378,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a>)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" A vacant Entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15024,"byte_end":15032,"line_start":380,"line_end":380,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a>)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" An occupied Entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":14928,"byte_end":14933,"line_start":376,"line_end":376,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Vacant, Occupied}","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":94}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.\n This enum is constructed from the [`entry`] method on [`Map`].\n\n [`entry`]: struct.Map.html#method.entry\n [`Map`]: struct.Map.html\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15156,"byte_end":15167,"line_start":386,"line_end":386,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":99}],"decl_id":null,"docs":" A vacant Entry. It is part of the [`Entry`] enum.\n\n [`Entry`]: enum.Entry.html\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15313,"byte_end":15326,"line_start":393,"line_end":393,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" An occupied Entry. It is part of the [`Entry`] enum.\n\n [`Entry`]: enum.Entry.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15902,"byte_end":15905,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &String","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":16210,"byte_end":16219,"line_start":418,"line_end":418,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: Value) -> &'a mut Value","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and\n returns a mutable reference to the value in the entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":16598,"byte_end":16612,"line_start":428,"line_end":428,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut Value","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default\n function if empty, and returns a mutable reference to the value in the\n entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17017,"byte_end":17020,"line_start":443,"line_end":443,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &String","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the VacantEntry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":16996,"byte_end":17005,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17210,"byte_end":17216,"line_start":450,"line_end":450,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: Value) -> &'a mut Value","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key, and returns a\n mutable reference to it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17189,"byte_end":17198,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17403,"byte_end":17406,"line_start":458,"line_end":458,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &String","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17382,"byte_end":17391,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17539,"byte_end":17542,"line_start":464,"line_end":464,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &Value","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17518,"byte_end":17527,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17682,"byte_end":17689,"line_start":470,"line_end":470,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut Value","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17661,"byte_end":17670,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17847,"byte_end":17855,"line_start":476,"line_end":476,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut Value","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to its value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17826,"byte_end":17835,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":18057,"byte_end":18063,"line_start":483,"line_end":483,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: Value) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the `OccupiedEntry`'s key, and returns\n the entry's old value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":18036,"byte_end":18045,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":18237,"byte_end":18243,"line_start":489,"line_end":489,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Takes the value of the entry out of the map, and returns it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":18216,"byte_end":18225,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":18684,"byte_end":18688,"line_start":508,"line_end":508,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":132}],"decl_id":null,"docs":" An iterator over a toml::Map's entries.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":19382,"byte_end":19389,"line_start":533,"line_end":533,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" A mutable iterator over a toml::Map's entries.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":20080,"byte_end":20088,"line_start":558,"line_end":558,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" An owning iterator over a toml::Map's entries.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":20494,"byte_end":20498,"line_start":572,"line_end":572,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":154}],"decl_id":null,"docs":" An iterator over a toml::Map's keys.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":20905,"byte_end":20911,"line_start":586,"line_end":586,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":159}],"decl_id":null,"docs":" An iterator over a toml::Map's values.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"value","qualname":"::value","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":1474},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1498},{"krate":0,"index":1496},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":226},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":237},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":254},{"krate":0,"index":259},{"krate":0,"index":264},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":284},{"krate":0,"index":316},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":351},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":428},{"krate":0,"index":436},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":451}],"decl_id":null,"docs":" Definition of a TOML value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1475},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21708,"byte_end":21714,"line_start":24,"line_end":24,"column_start":5,"column_end":11},"name":"String","qualname":"::value::Value::String","value":"Value::String(String)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML string\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21762,"byte_end":21769,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Integer","qualname":"::value::Value::Integer","value":"Value::Integer(i64)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML integer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21812,"byte_end":21817,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Float","qualname":"::value::Value::Float","value":"Value::Float(f64)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML float\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21862,"byte_end":21869,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::value::Value::Boolean","value":"Value::Boolean(bool)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML boolean\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1487},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21916,"byte_end":21924,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"Datetime","qualname":"::value::Value::Datetime","value":"Value::Datetime(Datetime)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML datetime\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1490},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21972,"byte_end":21977,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"Array","qualname":"::value::Value::Array","value":"Value::Array(Array)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML array\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1493},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22022,"byte_end":22027,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"name":"Table","qualname":"::value::Value::Table","value":"Value::Table(Table)","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":" Represents a TOML table\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":21663,"byte_end":21668,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Value","qualname":"::value::Value","value":"Value::{String, Integer, Float, Boolean, Datetime, Array, Table}","parent":null,"children":[{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1493}],"decl_id":null,"docs":" Representation of a TOML value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22122,"byte_end":22127,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Array","qualname":"::value::Array","value":"Vec<Value>","parent":null,"children":[],"decl_id":null,"docs":" Type representing a TOML array, payload of the `Value::Array` variant\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22342,"byte_end":22347,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"name":"Table","qualname":"::value::Table","value":"Map<String, Value>","parent":null,"children":[],"decl_id":null,"docs":" Type representing a TOML table, payload of the `Value::Table` variant.\n By default it is backed by a BTreeMap, enable the `preserve_order` feature\n to use a LinkedHashMap instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22653,"byte_end":22661,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Value>::try_from","value":"fn <T> (value: T) -> Result<Value, crate::ser::Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `T` into `toml::Value` which is an enum that can represent\n any valid TOML data.\n\n This conversion can fail if `T`'s implementation of `Serialize` decides to\n fail, or if `T` contains a map with non-string keys.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":23397,"byte_end":23405,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"try_into","qualname":"<Value>::try_into","value":"fn <'de, T> (self) -> Result<T, crate::de::Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret a `toml::Value` as an instance of type `T`.\n\n This conversion can fail if the structure of the `Value` does not match the\n structure expected by `T`, for example if `T` is a struct type but the\n `Value` contains something other than a TOML table. It can also fail if the\n structure is correct but `T`'s implementation of `Deserialize` decides that\n something is wrong with the data, for example required struct fields are\n missing from the TOML map or some number is too big to fit in the expected\n primitive type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":24045,"byte_end":24048,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"get","qualname":"<Value>::get","value":"fn <I> (&self, index: I) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Index into a TOML array or map. A string index can be used to access a\n value in a map, and a usize index can be used to access an element of an\n array.\n\n Returns `None` if the type of `self` does not match the type of the\n index, for example if the index is a string and `self` is an array or a\n number. Also returns `None` if the given key does not exist in the map\n or the given index is not within the bounds of the array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":24632,"byte_end":24639,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Value>::get_mut","value":"fn <I> (&mut self, index: I) -> Option<&mut Value>","parent":null,"children":[],"decl_id":null,"docs":" Mutably index into a TOML array or map. A string index can be used to\n access a value in a map, and a usize index can be used to access an\n element of an array.\n\n Returns `None` if the type of `self` does not match the type of the\n index, for example if the index is a string and `self` is an array or a\n number. Also returns `None` if the given key does not exist in the map\n or the given index is not within the bounds of the array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":24799,"byte_end":24809,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"as_integer","qualname":"<Value>::as_integer","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the integer value if it is an integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":24997,"byte_end":25007,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Value>::is_integer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is an integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25130,"byte_end":25138,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"as_float","qualname":"<Value>::as_float","value":"fn (&self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the float value if it is a float.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25321,"byte_end":25329,"line_start":122,"line_end":122,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Value>::is_float","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is a float.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25454,"byte_end":25461,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"as_bool","qualname":"<Value>::as_bool","value":"fn (&self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the boolean value if it is a boolean.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25649,"byte_end":25656,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"is_bool","qualname":"<Value>::is_bool","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is a boolean.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25786,"byte_end":25792,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Value>::as_str","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the string of this value if it is a string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":25980,"byte_end":25986,"line_start":148,"line_end":148,"column_start":12,"column_end":18},"name":"is_str","qualname":"<Value>::is_str","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if this value is a string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":26287,"byte_end":26298,"line_start":160,"line_end":160,"column_start":12,"column_end":23},"name":"as_datetime","qualname":"<Value>::as_datetime","value":"fn (&self) -> Option<&Datetime>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the datetime value if it is a datetime.\n\n Note that a parsed TOML value will only contain ISO 8601 dates. An\n example date is:\n\n ```notrust\n 1979-05-27T07:32:00Z\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":26497,"byte_end":26508,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"is_datetime","qualname":"<Value>::is_datetime","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is a datetime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":26633,"byte_end":26641,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"as_array","qualname":"<Value>::as_array","value":"fn (&self) -> Option<&Vec<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the array value if it is an array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":26843,"byte_end":26855,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"as_array_mut","qualname":"<Value>::as_array_mut","value":"fn (&mut self) -> Option<&mut Vec<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the array value if it is an array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27063,"byte_end":27071,"line_start":189,"line_end":189,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Value>::is_array","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is an array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27192,"byte_end":27200,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"as_table","qualname":"<Value>::as_table","value":"fn (&self) -> Option<&Table>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the table value if it is a table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27396,"byte_end":27408,"line_start":202,"line_end":202,"column_start":12,"column_end":24},"name":"as_table_mut","qualname":"<Value>::as_table_mut","value":"fn (&mut self) -> Option<&mut Table>","parent":null,"children":[],"decl_id":null,"docs":" Extracts the table value if it is a table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27610,"byte_end":27618,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"is_table","qualname":"<Value>::is_table","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this value is a table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27753,"byte_end":27762,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"same_type","qualname":"<Value>::same_type","value":"fn (&self, other: &Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether this and another value have the same type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":27938,"byte_end":27946,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"type_str","qualname":"<Value>::type_str","value":"fn (&self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns a human-readable representation of the type of this value.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30294,"byte_end":30299,"line_start":312,"line_end":312,"column_start":11,"column_end":16},"name":"Index","qualname":"::value::Index","value":"Index: Sealed","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":240}],"decl_id":null,"docs":" Types that can be used to index a `toml::Value`\n\n Currently this is implemented for `usize` to index arrays and `str` to index\n tables.\n\n This trait is sealed and not intended for implementation outside of the\n `toml` crate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30336,"byte_end":30341,"line_start":314,"line_end":314,"column_start":8,"column_end":13},"name":"index","qualname":"::value::Index::index","value":"fn <'a> (&self, val: &'a Value) -> Option<&'a Value>","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30417,"byte_end":30426,"line_start":316,"line_end":316,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::value::Index::index_mut","value":"fn <'a> (&self, val: &'a mut Value) -> Option<&'a mut Value>","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30634,"byte_end":30640,"line_start":322,"line_end":322,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::value::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" An implementation detail that should not be implemented, this will change in\n the future and break code otherwise.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1576},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":53041,"byte_end":53049,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Datetime","qualname":"::datetime::Datetime","value":"Datetime {  }","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" A parsed TOML datetime value\n\n This structure is intended to represent the datetime primitive type that can\n be encoded into TOML documents. This type is a parsed version that contains\n all metadata internally.\n\n Currently this type is intentionally conservative and only supports\n `to_string` as an accessor. Over time though it's intended that it'll grow\n more support!\n\n Note that if you're using `Deserialize` to deserialize a TOML document, you\n can use this as a placeholder for where you're expecting a datetime to be\n specified.\n\n Also note though that while this type implements `Serialize` and\n `Deserialize` it's only recommended to use this type with the TOML format,\n otherwise encoded in other formats it may look a little odd.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":53244,"byte_end":53262,"line_start":33,"line_end":33,"column_start":12,"column_end":30},"name":"DatetimeParseError","qualname":"::datetime::DatetimeParseError","value":"DatetimeParseError {  }","parent":null,"children":[{"krate":0,"index":1587}],"decl_id":null,"docs":" Error returned from parsing a `Datetime` in the `FromStr` implementation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ser","qualname":"::ser","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":1625},{"krate":0,"index":1656},{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1647},{"krate":0,"index":1658},{"krate":0,"index":1665},{"krate":0,"index":1663},{"krate":0,"index":1661},{"krate":0,"index":552},{"krate":0,"index":1667},{"krate":0,"index":1673},{"krate":0,"index":1671},{"krate":0,"index":1669},{"krate":0,"index":554},{"krate":0,"index":1675},{"krate":0,"index":1682},{"krate":0,"index":1680},{"krate":0,"index":1678},{"krate":0,"index":556},{"krate":0,"index":1684},{"krate":0,"index":1692},{"krate":0,"index":1691},{"krate":0,"index":1689},{"krate":0,"index":1694},{"krate":0,"index":1711},{"krate":0,"index":1708},{"krate":0,"index":561},{"krate":0,"index":568},{"krate":0,"index":579},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":654},{"krate":0,"index":662},{"krate":0,"index":670},{"krate":0,"index":678},{"krate":0,"index":686},{"krate":0,"index":696},{"krate":0,"index":704},{"krate":0,"index":709},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":808},{"krate":0,"index":815},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":864},{"krate":0,"index":871},{"krate":0,"index":878},{"krate":0,"index":885},{"krate":0,"index":892},{"krate":0,"index":901}],"decl_id":null,"docs":" Serializing Rust structures into TOML.\n\n This module contains all the Serde support for serializing Rust structures\n into TOML documents (as strings). Note that some top-level functions here\n are also provided at the top of the crate.\n\n Note that the TOML format has a restriction that if a table itself contains\n tables, all keys with non-table values must be emitted first. This is\n typically easy to ensure happens when you're defining a `struct` as you can\n reorder the fields manually, but when working with maps (such as `BTreeMap`\n or `HashMap`) this can lead to serialization errors. In those situations you\n may use the `tables_last` function in this module like so:\n\n ```rust\n # use serde_derive::Serialize;\n # use std::collections::HashMap;\n #[derive(Serialize)]\n struct Manifest {\n     package: Package,\n     #[serde(serialize_with = \"toml::ser::tables_last\")]\n     dependencies: HashMap<String, Dependency>,\n }\n # type Package = String;\n # type Dependency = String;\n # fn main() {}\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":66382,"byte_end":66388,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::ser::to_vec","value":"fn <T> (value: &T) -> Result<Vec<u8>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as a TOML byte vector.\n\n Serialization can fail if `T`'s implementation of `Serialize` decides to\n fail, if `T` contains a map with non-string keys, or if `T` attempts to\n serialize an unsupported datatype such as an enum, tuple, or tuple struct.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":67492,"byte_end":67501,"line_start":87,"line_end":87,"column_start":8,"column_end":17},"name":"to_string","qualname":"::ser::to_string","value":"fn <T> (value: &T) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as a String of TOML.\n\n Serialization can fail if `T`'s implementation of `Serialize` decides to\n fail, if `T` contains a map with non-string keys, or if `T` attempts to\n serialize an unsupported datatype such as an enum, tuple, or tuple struct.\n\n # Examples\n\n ```\n use serde_derive::Serialize;\n\n #[derive(Serialize)]\n struct Config {\n     database: Database,\n }\n\n #[derive(Serialize)]\n struct Database {\n     ip: String,\n     port: Vec<u16>,\n     connection_max: u32,\n     enabled: bool,\n }\n\n fn main() {\n     let config = Config {\n         database: Database {\n             ip: \"192.168.1.1\".to_string(),\n             port: vec![8001, 8002, 8003],\n             connection_max: 5000,\n             enabled: false,\n         },\n     };\n\n     let toml = toml::to_string(&config).unwrap();\n     println!(\"{}\", toml)\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":67912,"byte_end":67928,"line_start":100,"line_end":100,"column_start":8,"column_end":24},"name":"to_string_pretty","qualname":"::ser::to_string_pretty","value":"fn <T> (value: &T) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given data structure as a \"pretty\" String of TOML.\n\n This is identical to `to_string` except the output string has a more\n \"pretty\" output. See `Serializer::pretty` for more details.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":68462,"byte_end":68477,"line_start":117,"line_end":117,"column_start":5,"column_end":20},"name":"UnsupportedType","qualname":"::ser::Error::UnsupportedType","value":"Error::UnsupportedType","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Indicates that a Rust type was requested to be serialized but it was not\n supported.\n\n Currently the TOML format does not support serializing types such as\n enums, tuples and tuple structs.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1628},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":68615,"byte_end":68627,"line_start":121,"line_end":121,"column_start":5,"column_end":17},"name":"KeyNotString","qualname":"::ser::Error::KeyNotString","value":"Error::KeyNotString","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" The key of all TOML maps must be strings, but serialization was\n attempted where the key of a map was not a string.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1630},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":68726,"byte_end":68736,"line_start":125,"line_end":125,"column_start":5,"column_end":15},"name":"KeyNewline","qualname":"::ser::Error::KeyNewline","value":"Error::KeyNewline","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" An error that we never omit but keep for backwards compatibility\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":68843,"byte_end":68857,"line_start":129,"line_end":129,"column_start":5,"column_end":19},"name":"ArrayMixedType","qualname":"::ser::Error::ArrayMixedType","value":"Error::ArrayMixedType","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" An array had to be homogenous, but now it is allowed to be heterogenous.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1634},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69034,"byte_end":69049,"line_start":134,"line_end":134,"column_start":5,"column_end":20},"name":"ValueAfterTable","qualname":"::ser::Error::ValueAfterTable","value":"Error::ValueAfterTable","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" All values in a TOML table must be emitted before further tables are\n emitted. If a value is emitted *after* a table then this error is\n generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69095,"byte_end":69106,"line_start":137,"line_end":137,"column_start":5,"column_end":16},"name":"DateInvalid","qualname":"::ser::Error::DateInvalid","value":"Error::DateInvalid","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" A serialized date was invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69154,"byte_end":69167,"line_start":140,"line_end":140,"column_start":5,"column_end":18},"name":"NumberInvalid","qualname":"::ser::Error::NumberInvalid","value":"Error::NumberInvalid","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" A serialized number was invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69243,"byte_end":69258,"line_start":143,"line_end":143,"column_start":5,"column_end":20},"name":"UnsupportedNone","qualname":"::ser::Error::UnsupportedNone","value":"Error::UnsupportedNone","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" None was attempted to be serialized, but it's not supported.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69357,"byte_end":69363,"line_start":147,"line_end":147,"column_start":5,"column_end":11},"name":"Custom","qualname":"::ser::Error::Custom","value":"Error::Custom(String)","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" A custom error which could be generated when serializing a particular\n type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1645},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69397,"byte_end":69412,"line_start":150,"line_end":150,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::ser::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1625},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":68224,"byte_end":68229,"line_start":111,"line_end":111,"column_start":10,"column_end":15},"name":"Error","qualname":"::ser::Error","value":"Error::{UnsupportedType, KeyNotString, KeyNewline, ArrayMixedType, ValueAfterTable, DateInvalid, NumberInvalid, UnsupportedNone, Custom, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1645}],"decl_id":null,"docs":" Errors that can occur when serializing a type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":70634,"byte_end":70644,"line_start":198,"line_end":198,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::Serializer","value":"Serializer {  }","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"decl_id":null,"docs":" Serialization implementation for TOML.\n\n This structure implements serialization support for TOML to serialize an\n arbitrary type to TOML. Note that the TOML format does not support all\n datatypes in Rust, such as enums, tuples, and tuple structs. These types\n will generate an error when serialized.\n\n Currently a serializer always writes its output to an in-memory `String`,\n which is passed in when creating the serializer itself.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71189,"byte_end":71201,"line_start":228,"line_end":228,"column_start":12,"column_end":24},"name":"SerializeSeq","qualname":"::ser::SerializeSeq","value":"SerializeSeq {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71385,"byte_end":71393,"line_start":237,"line_end":237,"column_start":5,"column_end":13},"name":"Datetime","qualname":"::ser::SerializeTable::Datetime","value":"SerializeTable::Datetime(&'b mut Serializer<'a>)","parent":{"krate":0,"index":568},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71423,"byte_end":71428,"line_start":238,"line_end":238,"column_start":5,"column_end":10},"name":"Table","qualname":"::ser::SerializeTable::Table","value":"SerializeTable::Table { ser, key, first, table_emitted }","parent":{"krate":0,"index":568},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71356,"byte_end":71370,"line_start":236,"line_end":236,"column_start":10,"column_end":24},"name":"SerializeTable","qualname":"::ser::SerializeTable","value":"SerializeTable::{Datetime, Table}","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":574}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71801,"byte_end":71804,"line_start":251,"line_end":251,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer>::new","value":"fn (dst: &'a mut String) -> Serializer<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new serializer which will emit TOML into the buffer provided.\n\n The serializer can then be used to serialize a type after which the data\n will be present in `dst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":72363,"byte_end":72369,"line_start":267,"line_end":267,"column_start":12,"column_end":18},"name":"pretty","qualname":"<Serializer>::pretty","value":"fn (dst: &'a mut String) -> Serializer<'a>","parent":null,"children":[],"decl_id":null,"docs":" Instantiate a \"pretty\" formatter\n\n By default this will use:\n\n - pretty strings: strings with newlines will use the `'''` syntax. See\n   `Serializer::pretty_string`\n - pretty arrays: each item in arrays will be on a newline, have an indentation of 4 and\n   have a trailing comma. See `Serializer::pretty_array`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":73198,"byte_end":73211,"line_start":301,"line_end":301,"column_start":12,"column_end":25},"name":"pretty_string","qualname":"<Serializer>::pretty_string","value":"fn (&mut self, value: bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enable or Disable pretty strings\n\n If enabled, literal strings will be used when possible and strings with\n one or more newlines will use triple quotes (i.e.: `'''` or `\"\"\"`)\n\n # Examples\n\n Instead of:\n\n ```toml,ignore\n single = \"no newlines\"\n text = \"\\nfoo\\nbar\\n\"\n ```\n\n You will have:\n\n ```toml,ignore\n single = 'no newlines'\n text = '''\n foo\n bar\n '''\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":74107,"byte_end":74128,"line_start":336,"line_end":336,"column_start":12,"column_end":33},"name":"pretty_string_literal","qualname":"<Serializer>::pretty_string_literal","value":"fn (&mut self, value: bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enable or Disable Literal strings for pretty strings\n\n If enabled, literal strings will be used when possible and strings with\n one or more newlines will use triple quotes (i.e.: `'''` or `\"\"\"`)\n\n If disabled, literal strings will NEVER be used and strings with one or\n more newlines will use `\"\"\"`\n\n # Examples\n\n Instead of:\n\n ```toml,ignore\n single = \"no newlines\"\n text = \"\\nfoo\\nbar\\n\"\n ```\n\n You will have:\n\n ```toml,ignore\n single = \"no newlines\"\n text = \"\"\"\n foo\n bar\n \"\"\"\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":75289,"byte_end":75301,"line_start":379,"line_end":379,"column_start":12,"column_end":24},"name":"pretty_array","qualname":"<Serializer>::pretty_array","value":"fn (&mut self, value: bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Enable or Disable pretty arrays\n\n If enabled, arrays will always have each item on their own line.\n\n Some specific features can be controlled via other builder methods:\n\n - `Serializer::pretty_array_indent`: set the indent to a value other\n   than 4.\n - `Serializer::pretty_array_trailing_comma`: enable/disable the trailing\n   comma on the last item.\n\n # Examples\n\n Instead of:\n\n ```toml,ignore\n array = [\"foo\", \"bar\"]\n ```\n\n You will have:\n\n ```toml,ignore\n array = [\n     \"foo\",\n     \"bar\",\n ]\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":75633,"byte_end":75652,"line_start":391,"line_end":391,"column_start":12,"column_end":31},"name":"pretty_array_indent","qualname":"<Serializer>::pretty_array_indent","value":"fn (&mut self, value: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Set the indent for pretty arrays\n\n See `Serializer::pretty_array` for more details.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":76258,"byte_end":76285,"line_start":410,"line_end":410,"column_start":12,"column_end":39},"name":"pretty_array_trailing_comma","qualname":"<Serializer>::pretty_array_trailing_comma","value":"fn (&mut self, value: bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify whether to use a trailing comma when serializing pretty arrays\n\n See `Serializer::pretty_array` for more details.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":111421,"byte_end":111432,"line_start":1579,"line_end":1579,"column_start":8,"column_end":19},"name":"tables_last","qualname":"::ser::tables_last","value":"fn <'a, I, K, V, S> (data: &'a I, serializer: S) -> Result<S::Ok, S::Error>","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to serialize items in a map in an order valid with\n TOML.\n\n TOML carries the restriction that keys in a table must be serialized last if\n their value is a table itself. This isn't always easy to guarantee, so this\n helper can be used like so:\n\n ```rust\n # use serde_derive::Serialize;\n # use std::collections::HashMap;\n #[derive(Serialize)]\n struct Manifest {\n     package: Package,\n     #[serde(serialize_with = \"toml::ser::tables_last\")]\n     dependencies: HashMap<String, Dependency>,\n }\n # type Package = String;\n # type Dependency = String;\n # fn main() {}\n ```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"de","qualname":"::de","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":1724},{"krate":0,"index":1735},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1726},{"krate":0,"index":1737},{"krate":0,"index":1753},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1744},{"krate":0,"index":1755},{"krate":0,"index":1821},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1812},{"krate":0,"index":941},{"krate":0,"index":947},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":977},{"krate":0,"index":991},{"krate":0,"index":1008},{"krate":0,"index":1021},{"krate":0,"index":1035},{"krate":0,"index":1039},{"krate":0,"index":1043},{"krate":0,"index":1048},{"krate":0,"index":1055},{"krate":0,"index":1059},{"krate":0,"index":1063},{"krate":0,"index":1080},{"krate":0,"index":1085},{"krate":0,"index":1090},{"krate":0,"index":1094},{"krate":0,"index":1101},{"krate":0,"index":1109},{"krate":0,"index":1113},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1127},{"krate":0,"index":1131},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1149},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1172},{"krate":0,"index":1240},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1268},{"krate":0,"index":1274},{"krate":0,"index":2081},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2115},{"krate":0,"index":1279}],"decl_id":null,"docs":" Deserializing TOML into Rust structures.\n\n This module contains all the Serde support for deserializing TOML documents\n into Rust structures. Note that some top-level functions here are also\n provided at the top of the crate.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":119375,"byte_end":119385,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::de::from_slice","value":"fn <'de, T> (bytes: &'de [u8]) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a byte slice into a type.\n\n This function will attempt to interpret `bytes` as UTF-8 data and then\n deserialize `T` from the TOML document provided.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":120297,"byte_end":120305,"line_start":75,"line_end":75,"column_start":8,"column_end":16},"name":"from_str","qualname":"::de::from_str","value":"fn <'de, T> (s: &'de str) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a string into a type.\n\n This function will attempt to interpret `s` as a TOML document and\n deserialize `T` from the document.\n\n # Examples\n\n ```\n use serde_derive::Deserialize;\n\n #[derive(Deserialize)]\n struct Config {\n     title: String,\n     owner: Owner,\n }\n\n #[derive(Deserialize)]\n struct Owner {\n     name: String,\n }\n\n fn main() {\n     let config: Config = toml::from_str(r#\"\n         title = 'TOML Example'\n\n         [owner]\n         name = 'Lisa'\n     \"#).unwrap();\n\n     assert_eq!(config.title, \"TOML Example\");\n     assert_eq!(config.owner.name, \"Lisa\");\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1724},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":120593,"byte_end":120598,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"Error","qualname":"::de::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1725}],"decl_id":null,"docs":" Errors that can occur when deserializing a type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":123500,"byte_end":123512,"line_start":199,"line_end":199,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946}],"decl_id":null,"docs":" Deserialization implementation for TOML.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":158432,"byte_end":158435,"line_start":1266,"line_end":1266,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer>::new","value":"fn (input: &'a str) -> Deserializer<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new deserializer which will be deserializing the string\n provided.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":158942,"byte_end":158945,"line_start":1279,"line_end":1279,"column_start":12,"column_end":15},"name":"end","qualname":"<Deserializer>::end","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" The `Deserializer::end` method should be called after a value has been\n fully deserialized.  This allows the `Deserializer` to validate that the\n input stream is at the end or that it only has trailing\n whitespace/comments.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":159359,"byte_end":159390,"line_start":1289,"line_end":1289,"column_start":12,"column_end":43},"name":"set_require_newline_after_table","qualname":"<Deserializer>::set_require_newline_after_table","value":"fn (&mut self, require: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Historical versions of toml-rs accidentally allowed a newline after a\n table definition, but the TOML spec requires a newline after a table\n definition header.\n\n This option can be set to `false` (the default is `true`) to emulate\n this behavior for backwards compatibility with older toml-rs versions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":159859,"byte_end":159897,"line_start":1299,"line_end":1299,"column_start":12,"column_end":50},"name":"set_allow_duplicate_after_longer_table","qualname":"<Deserializer>::set_allow_duplicate_after_longer_table","value":"fn (&mut self, allow: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Historical versions of toml-rs accidentally allowed a duplicate table\n header after a longer table header was previously defined. This is\n invalid according to the TOML spec, however.\n\n This option can be set to `true` (the default is `false`) to emulate\n this behavior for backwards compatibility with older toml-rs versions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":184689,"byte_end":184697,"line_start":2014,"line_end":2014,"column_start":12,"column_end":20},"name":"line_col","qualname":"<Error>::line_col","value":"fn (&self) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Produces a (line, column) pair of the position of the error if available\n\n All indexes are 0-based.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2118},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":192028,"byte_end":192032,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Span","qualname":"::tokens::Span","value":"Span { start, end }","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120}],"decl_id":null,"docs":" A span, designating a range of bytes where a token is located.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":192075,"byte_end":192080,"line_start":13,"line_end":13,"column_start":9,"column_end":14},"name":"start","qualname":"::tokens::Span::start","value":"usize","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" The start of the range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2120},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":192139,"byte_end":192142,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"end","qualname":"::tokens::Span::end","value":"usize","parent":{"krate":0,"index":2118},"children":[],"decl_id":null,"docs":" The end of the range (exclusive).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","byte_start":234557,"byte_end":234568,"line_start":413,"line_end":413,"column_start":8,"column_end":19},"name":"insert_toml","qualname":"::macros::insert_toml","value":"fn (root: &mut Value, path: &[&str], value: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\macros.rs","byte_start":234768,"byte_end":234777,"line_start":419,"line_end":419,"column_start":8,"column_end":17},"name":"push_toml","qualname":"::macros::push_toml","value":"fn (root: &mut Value, path: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237010,"byte_end":237017,"line_start":35,"line_end":35,"column_start":12,"column_end":19},"name":"Spanned","qualname":"::spanned::Spanned","value":"Spanned {  }","parent":null,"children":[{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257}],"decl_id":null,"docs":" A spanned value, indicating the range at which it is defined in the source.\n\n ```\n use serde_derive::Deserialize;\n use toml::Spanned;\n\n #[derive(Deserialize)]\n struct Value {\n     s: Spanned<String>,\n }\n\n fn main() {\n     let t = \"s = \\\"value\\\"\\n\";\n\n     let u: Value = toml::from_str(t).unwrap();\n\n     assert_eq!(u.s.start(), 4);\n     assert_eq!(u.s.end(), 11);\n     assert_eq!(u.s.get_ref(), \"value\");\n     assert_eq!(u.s.into_inner(), String::from(\"value\"));\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237254,"byte_end":237259,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"start","qualname":"<Spanned<T>>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Access the start of the span of the contained value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237374,"byte_end":237377,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"end","qualname":"<Spanned<T>>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Access the end of the span of the contained value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237476,"byte_end":237480,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"span","qualname":"<Spanned<T>>::span","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the span of the contained value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237625,"byte_end":237635,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Spanned<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the spanned value and returns the contained value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237738,"byte_end":237745,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Spanned<T>>::get_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the contained value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237859,"byte_end":237866,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Spanned<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contained value.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":5908,"byte_end":5911,"line_start":41,"line_end":41,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10546,"byte_end":10549,"line_start":203,"line_end":203,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10689,"byte_end":10692,"line_start":212,"line_end":212,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10841,"byte_end":10844,"line_start":221,"line_end":221,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11090,"byte_end":11093,"line_start":230,"line_end":230,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11415,"byte_end":11418,"line_start":244,"line_end":244,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11633,"byte_end":11636,"line_start":254,"line_end":254,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11815,"byte_end":11818,"line_start":261,"line_end":261,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":12241,"byte_end":12244,"line_start":277,"line_end":277,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":12455,"byte_end":12462,"line_start":285,"line_end":285,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":13352,"byte_end":13355,"line_start":319,"line_end":319,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":13589,"byte_end":13592,"line_start":330,"line_end":330,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15830,"byte_end":15835,"line_start":407,"line_end":407,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":16863,"byte_end":16874,"line_start":439,"line_end":439,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17308,"byte_end":17321,"line_start":455,"line_end":455,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":19799,"byte_end":19802,"line_start":546,"line_end":546,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22376,"byte_end":22381,"line_start":47,"line_end":47,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28342,"byte_end":28347,"line_start":233,"line_end":233,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28526,"byte_end":28531,"line_start":244,"line_end":244,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28698,"byte_end":28703,"line_start":253,"line_end":253,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28843,"byte_end":28848,"line_start":260,"line_end":260,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":29025,"byte_end":29030,"line_start":266,"line_end":266,"column_start":64,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":29271,"byte_end":29276,"line_start":274,"line_end":274,"column_start":75,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30708,"byte_end":30714,"line_start":325,"line_end":325,"column_start":17,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":31561,"byte_end":31567,"line_start":360,"line_end":360,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32078,"byte_end":32083,"line_start":383,"line_end":383,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32290,"byte_end":32295,"line_start":391,"line_end":391,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32446,"byte_end":32451,"line_start":398,"line_end":398,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":34186,"byte_end":34191,"line_start":445,"line_end":445,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":34379,"byte_end":34391,"line_start":452,"line_end":452,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":37624,"byte_end":37629,"line_start":544,"line_end":544,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":40338,"byte_end":40353,"line_start":632,"line_end":632,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":40507,"byte_end":40522,"line_start":640,"line_end":640,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":41167,"byte_end":41182,"line_start":666,"line_end":666,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":41369,"byte_end":41384,"line_start":675,"line_end":675,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":42511,"byte_end":42516,"line_start":713,"line_end":713,"column_start":59,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":42658,"byte_end":42668,"line_start":723,"line_end":723,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48002,"byte_end":48014,"line_start":913,"line_end":913,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48407,"byte_end":48419,"line_start":930,"line_end":930,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48815,"byte_end":48827,"line_start":946,"line_end":946,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":49222,"byte_end":49234,"line_start":962,"line_end":962,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":49620,"byte_end":49632,"line_start":978,"line_end":978,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":50641,"byte_end":50653,"line_start":1014,"line_end":1014,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":51214,"byte_end":51229,"line_start":1039,"line_end":1039,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":51475,"byte_end":51490,"line_start":1050,"line_end":1050,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54029,"byte_end":54037,"line_start":67,"line_end":67,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54169,"byte_end":54177,"line_start":73,"line_end":73,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54649,"byte_end":54653,"line_start":91,"line_end":91,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54822,"byte_end":54826,"line_start":97,"line_end":97,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":55171,"byte_end":55177,"line_start":108,"line_end":108,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":55434,"byte_end":55442,"line_start":117,"line_end":117,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":61494,"byte_end":61502,"line_start":308,"line_end":308,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":61833,"byte_end":61841,"line_start":321,"line_end":321,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":62035,"byte_end":62050,"line_start":328,"line_end":328,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":62892,"byte_end":62903,"line_start":355,"line_end":355,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":63097,"byte_end":63109,"line_start":362,"line_end":362,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":63819,"byte_end":63837,"line_start":390,"line_end":390,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64033,"byte_end":64040,"line_start":397,"line_end":397,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64678,"byte_end":64696,"line_start":419,"line_end":419,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64835,"byte_end":64853,"line_start":425,"line_end":425,"column_start":23,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69571,"byte_end":69584,"line_start":160,"line_end":160,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69879,"byte_end":69893,"line_start":176,"line_end":176,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71570,"byte_end":71580,"line_start":246,"line_end":246,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":94411,"byte_end":94423,"line_start":969,"line_end":969,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":95920,"byte_end":95932,"line_start":1018,"line_end":1018,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":96303,"byte_end":96315,"line_start":1034,"line_end":1034,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":96683,"byte_end":96695,"line_start":1050,"line_end":1050,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":97055,"byte_end":97069,"line_start":1066,"line_end":1066,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":99003,"byte_end":99017,"line_start":1131,"line_end":1131,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":100745,"byte_end":100759,"line_start":1189,"line_end":1189,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":105237,"byte_end":105252,"line_start":1360,"line_end":1360,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":109795,"byte_end":109800,"line_start":1528,"line_end":1528,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":110573,"byte_end":110578,"line_start":1545,"line_end":1545,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":110603,"byte_end":110608,"line_start":1547,"line_end":1547,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":112234,"byte_end":112244,"line_start":1609,"line_end":1609,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":112362,"byte_end":112372,"line_start":1615,"line_end":1615,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":116466,"byte_end":116476,"line_start":1770,"line_end":1770,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":116782,"byte_end":116792,"line_start":1783,"line_end":1783,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117105,"byte_end":117115,"line_start":1796,"line_end":1796,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117425,"byte_end":117435,"line_start":1809,"line_end":1809,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117737,"byte_end":117747,"line_start":1822,"line_end":1822,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":118170,"byte_end":118180,"line_start":1839,"line_end":1839,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":130696,"byte_end":130706,"line_start":397,"line_end":397,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":135987,"byte_end":135997,"line_start":539,"line_end":539,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":137931,"byte_end":137941,"line_start":599,"line_end":599,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1031},{"krate":0,"index":1033},{"krate":0,"index":1875},{"krate":0,"index":1877},{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1897},{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141061,"byte_end":141076,"line_start":709,"line_end":709,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141410,"byte_end":141425,"line_start":721,"line_end":721,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141576,"byte_end":141591,"line_start":729,"line_end":729,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973},{"krate":0,"index":1975}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":142938,"byte_end":142955,"line_start":776,"line_end":776,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":143277,"byte_end":143294,"line_start":790,"line_end":790,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1070},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1977},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":2015},{"krate":0,"index":2017},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2023}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":148977,"byte_end":148987,"line_start":961,"line_end":961,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":149356,"byte_end":149361,"line_start":977,"line_end":977,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":149741,"byte_end":149760,"line_start":992,"line_end":992,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":151107,"byte_end":151127,"line_start":1037,"line_end":1037,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":151726,"byte_end":151751,"line_start":1061,"line_end":1061,"column_start":37,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":2025},{"krate":0,"index":2027},{"krate":0,"index":2029},{"krate":0,"index":2031},{"krate":0,"index":2033},{"krate":0,"index":2035},{"krate":0,"index":2037},{"krate":0,"index":2039},{"krate":0,"index":2041},{"krate":0,"index":2043},{"krate":0,"index":2045},{"krate":0,"index":2047},{"krate":0,"index":2049},{"krate":0,"index":2051},{"krate":0,"index":2053},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2069},{"krate":0,"index":2071},{"krate":0,"index":2073},{"krate":0,"index":2075},{"krate":0,"index":2077},{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":152323,"byte_end":152346,"line_start":1083,"line_end":1083,"column_start":35,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":152895,"byte_end":152918,"line_start":1102,"line_end":1102,"column_start":34,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":153636,"byte_end":153659,"line_start":1126,"line_end":1126,"column_start":35,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":154595,"byte_end":154616,"line_start":1157,"line_end":1157,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":158310,"byte_end":158322,"line_start":1263,"line_end":1263,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1194},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":184548,"byte_end":184553,"line_start":2010,"line_end":2010,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":186162,"byte_end":186167,"line_start":2071,"line_end":2071,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":186309,"byte_end":186314,"line_start":2077,"line_end":2077,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":189626,"byte_end":189631,"line_start":2156,"line_end":2156,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":189655,"byte_end":189660,"line_start":2158,"line_end":2158,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":190057,"byte_end":190063,"line_start":2180,"line_end":2180,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":191348,"byte_end":191349,"line_start":2231,"line_end":2231,"column_start":10,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":193369,"byte_end":193378,"line_start":84,"line_end":84,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1331},{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":206837,"byte_end":206845,"line_start":480,"line_end":480,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":207270,"byte_end":207281,"line_start":497,"line_end":497,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":208128,"byte_end":208133,"line_start":530,"line_end":530,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237169,"byte_end":237176,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237944,"byte_end":237951,"line_start":76,"line_end":76,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238059,"byte_end":238066,"line_start":82,"line_end":82,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238177,"byte_end":238184,"line_start":88,"line_end":88,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238215,"byte_end":238222,"line_start":90,"line_end":90,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238351,"byte_end":238358,"line_start":96,"line_end":96,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238501,"byte_end":238508,"line_start":102,"line_end":102,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238644,"byte_end":238651,"line_start":108,"line_end":108,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238921,"byte_end":238935,"line_start":118,"line_end":118,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":240297,"byte_end":240304,"line_start":161,"line_end":161,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4281,"byte_end":4284,"line_start":156,"line_end":156,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4294,"byte_end":4299,"line_start":157,"line_end":157,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":162}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4371,"byte_end":4374,"line_start":162,"line_end":162,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":535}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4473,"byte_end":4475,"line_start":165,"line_end":165,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":913}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\lib.rs","byte_start":4588,"byte_end":4594,"line_start":171,"line_end":171,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1346}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":5908,"byte_end":5911,"line_start":41,"line_end":41,"column_start":6,"column_end":9},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10546,"byte_end":10549,"line_start":203,"line_end":203,"column_start":18,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10689,"byte_end":10692,"line_start":212,"line_end":212,"column_start":16,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":10841,"byte_end":10844,"line_start":221,"line_end":221,"column_start":20,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11090,"byte_end":11093,"line_start":230,"line_end":230,"column_start":43,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11415,"byte_end":11418,"line_start":244,"line_end":244,"column_start":46,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11633,"byte_end":11636,"line_start":254,"line_end":254,"column_start":16,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":11815,"byte_end":11818,"line_start":261,"line_end":261,"column_start":25,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":18},"to":{"krate":14,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":12241,"byte_end":12244,"line_start":277,"line_end":277,"column_start":36,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":18},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":12455,"byte_end":12462,"line_start":285,"line_end":285,"column_start":40,"column_end":47},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":72},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":13352,"byte_end":13355,"line_start":319,"line_end":319,"column_start":40,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":3947}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":13589,"byte_end":13592,"line_start":330,"line_end":330,"column_start":34,"column_end":37},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":15830,"byte_end":15835,"line_start":407,"line_end":407,"column_start":10,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":16863,"byte_end":16874,"line_start":439,"line_end":439,"column_start":10,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":17308,"byte_end":17321,"line_start":455,"line_end":455,"column_start":10,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\map.rs","byte_start":19799,"byte_end":19802,"line_start":546,"line_end":546,"column_start":23,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":3951}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":22376,"byte_end":22381,"line_start":47,"line_end":47,"column_start":6,"column_end":11},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28342,"byte_end":28347,"line_start":233,"line_end":233,"column_start":27,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1780}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28526,"byte_end":28531,"line_start":244,"line_end":244,"column_start":30,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":1784}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28698,"byte_end":28703,"line_start":253,"line_end":253,"column_start":28,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":28843,"byte_end":28848,"line_start":260,"line_end":260,"column_start":39,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":29025,"byte_end":29030,"line_start":266,"line_end":266,"column_start":64,"column_end":69},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":29271,"byte_end":29276,"line_start":274,"line_end":274,"column_start":75,"column_end":80},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30301,"byte_end":30307,"line_start":312,"line_end":312,"column_start":18,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":242},"to":{"krate":0,"index":237}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":30708,"byte_end":30714,"line_start":325,"line_end":325,"column_start":17,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":5,"index":4497},"to":{"krate":0,"index":242}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":31561,"byte_end":31567,"line_start":360,"line_end":360,"column_start":16,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":5,"index":4497},"to":{"krate":0,"index":237}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32078,"byte_end":32083,"line_start":383,"line_end":383,"column_start":23,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32290,"byte_end":32295,"line_start":391,"line_end":391,"column_start":18,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1474},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":32446,"byte_end":32451,"line_start":398,"line_end":398,"column_start":25,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1474},"to":{"krate":14,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":34186,"byte_end":34191,"line_start":445,"line_end":445,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1474},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":34379,"byte_end":34391,"line_start":452,"line_end":452,"column_start":40,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":288},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":37624,"byte_end":37629,"line_start":544,"line_end":544,"column_start":37,"column_end":42},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1474},"to":{"krate":14,"index":1214}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":40338,"byte_end":40353,"line_start":632,"line_end":632,"column_start":6,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":40507,"byte_end":40522,"line_start":640,"line_end":640,"column_start":34,"column_end":49},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":327},"to":{"krate":14,"index":1332}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":41167,"byte_end":41182,"line_start":666,"line_end":666,"column_start":6,"column_end":21},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":41369,"byte_end":41384,"line_start":675,"line_end":675,"column_start":34,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":337},"to":{"krate":14,"index":1350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":42511,"byte_end":42516,"line_start":713,"line_end":713,"column_start":59,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1474},"to":{"krate":14,"index":1408}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":42658,"byte_end":42668,"line_start":723,"line_end":723,"column_start":26,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":355},"to":{"krate":14,"index":1640}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48002,"byte_end":48014,"line_start":913,"line_end":913,"column_start":28,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":399},"to":{"krate":14,"index":1691}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48407,"byte_end":48419,"line_start":930,"line_end":930,"column_start":30,"column_end":42},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":399},"to":{"krate":14,"index":1697}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":48815,"byte_end":48827,"line_start":946,"line_end":946,"column_start":36,"column_end":48},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":399},"to":{"krate":14,"index":1703}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":49222,"byte_end":49234,"line_start":962,"line_end":962,"column_start":37,"column_end":49},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":399},"to":{"krate":14,"index":1709}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":49620,"byte_end":49632,"line_start":978,"line_end":978,"column_start":28,"column_end":40},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":401},"to":{"krate":14,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":50641,"byte_end":50653,"line_start":1014,"line_end":1014,"column_start":31,"column_end":43},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":401},"to":{"krate":14,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":51214,"byte_end":51229,"line_start":1039,"line_end":1039,"column_start":44,"column_end":59},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":442},"to":{"krate":14,"index":1203}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\value.rs","byte_start":51475,"byte_end":51490,"line_start":1050,"line_end":1050,"column_start":36,"column_end":51},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":442},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54029,"byte_end":54037,"line_start":67,"line_end":67,"column_start":21,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54169,"byte_end":54177,"line_start":73,"line_end":73,"column_start":23,"column_end":31},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54649,"byte_end":54653,"line_start":91,"line_end":91,"column_start":23,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":54822,"byte_end":54826,"line_start":97,"line_end":97,"column_start":23,"column_end":27},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1602},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":55171,"byte_end":55177,"line_start":108,"line_end":108,"column_start":23,"column_end":29},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1613},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":55434,"byte_end":55442,"line_start":117,"line_end":117,"column_start":18,"column_end":26},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":61494,"byte_end":61502,"line_start":308,"line_end":308,"column_start":25,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1576},"to":{"krate":14,"index":1637}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":61833,"byte_end":61841,"line_start":321,"line_end":321,"column_start":36,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1576},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":62035,"byte_end":62050,"line_start":328,"line_end":328,"column_start":40,"column_end":55},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":494},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":62892,"byte_end":62903,"line_start":355,"line_end":355,"column_start":36,"column_end":47},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":504},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":63097,"byte_end":63109,"line_start":362,"line_end":362,"column_start":40,"column_end":52},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":510},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":63819,"byte_end":63837,"line_start":390,"line_end":390,"column_start":36,"column_end":54},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":518},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64033,"byte_end":64040,"line_start":397,"line_end":397,"column_start":40,"column_end":47},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":524},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64678,"byte_end":64696,"line_start":419,"line_end":419,"column_start":23,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1586},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\datetime.rs","byte_start":64835,"byte_end":64853,"line_start":425,"line_end":425,"column_start":23,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1586},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69571,"byte_end":69584,"line_start":160,"line_end":160,"column_start":6,"column_end":19},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":69879,"byte_end":69893,"line_start":176,"line_end":176,"column_start":6,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1667},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":71570,"byte_end":71580,"line_start":246,"line_end":246,"column_start":10,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":94411,"byte_end":94423,"line_start":969,"line_end":969,"column_start":36,"column_end":48},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":561},"to":{"krate":14,"index":1691}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":95920,"byte_end":95932,"line_start":1018,"line_end":1018,"column_start":38,"column_end":50},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":561},"to":{"krate":14,"index":1697}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":96303,"byte_end":96315,"line_start":1034,"line_end":1034,"column_start":45,"column_end":57},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":561},"to":{"krate":14,"index":1709}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":96683,"byte_end":96695,"line_start":1050,"line_end":1050,"column_start":44,"column_end":56},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":561},"to":{"krate":14,"index":1703}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":97055,"byte_end":97069,"line_start":1066,"line_end":1066,"column_start":36,"column_end":50},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":568},"to":{"krate":14,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":99003,"byte_end":99017,"line_start":1131,"line_end":1131,"column_start":39,"column_end":53},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":568},"to":{"krate":14,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":100745,"byte_end":100759,"line_start":1189,"line_end":1189,"column_start":34,"column_end":48},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":704},"to":{"krate":14,"index":1640}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":105237,"byte_end":105252,"line_start":1360,"line_end":1360,"column_start":26,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":752},"to":{"krate":14,"index":1640}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":109795,"byte_end":109800,"line_start":1528,"line_end":1528,"column_start":23,"column_end":28},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1625},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":110573,"byte_end":110578,"line_start":1545,"line_end":1545,"column_start":23,"column_end":28},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1625},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":110603,"byte_end":110608,"line_start":1547,"line_end":1547,"column_start":21,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1625},"to":{"krate":14,"index":8642}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":112234,"byte_end":112244,"line_start":1609,"line_end":1609,"column_start":9,"column_end":19},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":112362,"byte_end":112372,"line_start":1615,"line_end":1615,"column_start":41,"column_end":51},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1640}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":116466,"byte_end":116476,"line_start":1770,"line_end":1770,"column_start":43,"column_end":53},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1691}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":116782,"byte_end":116792,"line_start":1783,"line_end":1783,"column_start":45,"column_end":55},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1697}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117105,"byte_end":117115,"line_start":1796,"line_end":1796,"column_start":52,"column_end":62},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1709}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117425,"byte_end":117435,"line_start":1809,"line_end":1809,"column_start":51,"column_end":61},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1703}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":117737,"byte_end":117747,"line_start":1822,"line_end":1822,"column_start":43,"column_end":53},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1715}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\ser.rs","byte_start":118170,"byte_end":118180,"line_start":1839,"line_end":1839,"column_start":46,"column_end":56},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":815},"to":{"krate":14,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":130696,"byte_end":130706,"line_start":397,"line_end":397,"column_start":38,"column_end":48},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":977},"to":{"krate":14,"index":1350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":135987,"byte_end":135997,"line_start":539,"line_end":539,"column_start":38,"column_end":48},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":977},"to":{"krate":14,"index":1332}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":137931,"byte_end":137941,"line_start":599,"line_end":599,"column_start":41,"column_end":51},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":977},"to":{"krate":14,"index":1214}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141061,"byte_end":141076,"line_start":709,"line_end":709,"column_start":10,"column_end":25},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141410,"byte_end":141425,"line_start":721,"line_end":721,"column_start":50,"column_end":65},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1035},"to":{"krate":14,"index":1408}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":141576,"byte_end":141591,"line_start":729,"line_end":729,"column_start":37,"column_end":52},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1035},"to":{"krate":14,"index":1214}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":142938,"byte_end":142955,"line_start":776,"line_end":776,"column_start":10,"column_end":27},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":143277,"byte_end":143294,"line_start":790,"line_end":790,"column_start":37,"column_end":54},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1055},"to":{"krate":14,"index":1214}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":148977,"byte_end":148987,"line_start":961,"line_end":961,"column_start":52,"column_end":62},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":977},"to":{"krate":14,"index":1408}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":149356,"byte_end":149361,"line_start":977,"line_end":977,"column_start":48,"column_end":53},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2081},"to":{"krate":14,"index":1408}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":149741,"byte_end":149760,"line_start":992,"line_end":992,"column_start":37,"column_end":56},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1094},"to":{"krate":14,"index":1350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":151107,"byte_end":151127,"line_start":1037,"line_end":1037,"column_start":34,"column_end":54},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1109},"to":{"krate":14,"index":1350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":151726,"byte_end":151751,"line_start":1061,"line_end":1061,"column_start":37,"column_end":62},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1120},"to":{"krate":14,"index":1214}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":152323,"byte_end":152346,"line_start":1083,"line_end":1083,"column_start":35,"column_end":58},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1127},"to":{"krate":14,"index":1388}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":152895,"byte_end":152918,"line_start":1102,"line_end":1102,"column_start":34,"column_end":57},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1138},"to":{"krate":14,"index":1350}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":153636,"byte_end":153659,"line_start":1126,"line_end":1126,"column_start":35,"column_end":58},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1138},"to":{"krate":14,"index":1388}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":154595,"byte_end":154616,"line_start":1157,"line_end":1157,"column_start":38,"column_end":59},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1156},"to":{"krate":14,"index":1396}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":158310,"byte_end":158322,"line_start":1263,"line_end":1263,"column_start":10,"column_end":22},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":184548,"byte_end":184553,"line_start":2010,"line_end":2010,"column_start":6,"column_end":11},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":186162,"byte_end":186167,"line_start":2071,"line_end":2071,"column_start":45,"column_end":50},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":2469},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":186309,"byte_end":186314,"line_start":2077,"line_end":2077,"column_start":23,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1724},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":189626,"byte_end":189631,"line_start":2156,"line_end":2156,"column_start":23,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1724},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":189655,"byte_end":189660,"line_start":2158,"line_end":2158,"column_start":20,"column_end":25},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1724},"to":{"krate":14,"index":8044}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":190057,"byte_end":190063,"line_start":2180,"line_end":2180,"column_start":10,"column_end":16},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\de.rs","byte_start":191348,"byte_end":191349,"line_start":2231,"line_end":2231,"column_start":10,"column_end":11},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":193369,"byte_end":193378,"line_start":84,"line_end":84,"column_start":10,"column_end":19},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":206837,"byte_end":206845,"line_start":480,"line_end":480,"column_start":23,"column_end":31},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2238},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":207270,"byte_end":207281,"line_start":497,"line_end":497,"column_start":6,"column_end":17},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\tokens.rs","byte_start":208128,"byte_end":208133,"line_start":530,"line_end":530,"column_start":10,"column_end":15},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237169,"byte_end":237176,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":237944,"byte_end":237951,"line_start":76,"line_end":76,"column_start":22,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":2325}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238059,"byte_end":238066,"line_start":82,"line_end":82,"column_start":34,"column_end":41},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238177,"byte_end":238184,"line_start":88,"line_end":88,"column_start":20,"column_end":27},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238215,"byte_end":238222,"line_start":90,"line_end":90,"column_start":24,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":7285}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238351,"byte_end":238358,"line_start":96,"line_end":96,"column_start":36,"column_end":43},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":2077}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238501,"byte_end":238508,"line_start":102,"line_end":102,"column_start":22,"column_end":29},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2253},"to":{"krate":2,"index":2066}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238644,"byte_end":238651,"line_start":108,"line_end":108,"column_start":39,"column_end":46},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2253},"to":{"krate":14,"index":1192}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":238921,"byte_end":238935,"line_start":118,"line_end":118,"column_start":43,"column_end":57},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1404},"to":{"krate":14,"index":1276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\toml-0.5.6\\src\\spanned.rs","byte_start":240297,"byte_end":240304,"line_start":161,"line_end":161,"column_start":44,"column_end":51},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2253},"to":{"krate":14,"index":1637}}]}