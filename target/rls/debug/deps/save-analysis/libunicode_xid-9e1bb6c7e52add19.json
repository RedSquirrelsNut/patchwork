{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","unicode_xid","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=9e1bb6c7e52add19","-C","extra-filename=-9e1bb6c7e52add19","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libunicode_xid-9e1bb6c7e52add19.rmeta"},"prelude":{"crate_id":{"name":"unicode_xid","disambiguator":[15361905284584492656,4983868481998783666]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":472,"byte_end":2696,"line_start":11,"line_end":87,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":1619,"byte_end":1634,"line_start":55,"line_end":55,"column_start":17,"column_end":32},"alias_span":null,"name":"UNICODE_VERSION","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":472,"byte_end":2696,"line_start":11,"line_end":87,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":19},{"krate":0,"index":22}],"decl_id":null,"docs":" Determine if a `char` is a valid identifier for a parser and/or lexer according to\n [Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.\n\n ```rust\n extern crate unicode_xid;\n\n use unicode_xid::UnicodeXID;\n\n fn main() {\n     let ch = 'a';\n     println!(\"Is {} a valid start of an identifier? {}\", ch, UnicodeXID::is_xid_start(ch));\n }\n ```\n\n # features\n\n unicode-xid supports a `no_std` feature. This eliminates dependence\n on std, and instead uses equivalent functions from core.\n\n # crates.io\n\n You can use this package in your project by adding the following\n to your `Cargo.toml`:\n\n ```toml\n [dependencies]\n unicode-xid = \"0.0.4\"\n ```\n","sig":null,"attributes":[{"value":"deny(missing_docs, unsafe_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":1217,"byte_end":1252,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"no_std","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":1404,"byte_end":1414,"line_start":44,"line_end":44,"column_start":1,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\tables.rs","byte_start":3438,"byte_end":3453,"line_start":17,"line_end":17,"column_start":11,"column_end":26},"name":"UNICODE_VERSION","qualname":"::tables::UNICODE_VERSION","value":"(u64, u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" The version of [Unicode](http://www.unicode.org/)\n that this version of unicode-xid is based on.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":1761,"byte_end":1771,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"UnicodeXID","qualname":"::UnicodeXID","value":"UnicodeXID","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"decl_id":null,"docs":" Methods for determining if a character is a valid identifier character.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":2096,"byte_end":2108,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"is_xid_start","qualname":"::UnicodeXID::is_xid_start","value":"fn (self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns whether the specified character satisfies the 'XID_Start'\n Unicode property.\n\n 'XID_Start' is a Unicode Derived Property specified in\n [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n mostly similar to ID_Start but modified for closure under NFKx.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unicode-xid-0.2.0\\src\\lib.rs","byte_start":2455,"byte_end":2470,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"is_xid_continue","qualname":"::UnicodeXID::is_xid_continue","value":"fn (self) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Returns whether the specified `char` satisfies the 'XID_Continue'\n Unicode property.\n\n 'XID_Continue' is a Unicode Derived Property specified in\n [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n mostly similar to 'ID_Continue' but modified for closure under NFKx.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}