{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","version_check","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=549a1bc9606a22d9","-C","extra-filename=-549a1bc9606a22d9","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libversion_check-549a1bc9606a22d9.rmeta"},"prelude":{"crate_id":{"name":"version_check","disambiguator":[13455829896879962243,17225012164637178017]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":0,"byte_end":9505,"line_start":1,"line_end":255,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":0,"byte_end":9505,"line_start":1,"line_end":255,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":9},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" This tiny crate checks that the running or installed `rustc` meets some\n version requirements. The version is queried by calling the Rust compiler\n with `--version`. The path to the compiler is determined first via the\n `RUSTC` environment variable. If it is not set, then `rustc` is used. If\n that fails, no determination is made, and calls return `None`.\n\n # Example\n\n Check that the running compiler is a nightly release:\n\n ```rust\n extern crate version_check;\n\n match version_check::is_nightly() {\n     Some(true) => \"running a nightly\",\n     Some(false) => \"not nightly\",\n     None => \"couldn't figure it out\"\n };\n ```\n\n Check that the running compiler is at least version `1.13.0`:\n\n ```rust\n extern crate version_check;\n\n match version_check::is_min_version(\"1.13.0\") {\n     Some((true, version)) => format!(\"Yes! It's: {}\", version),\n     Some((false, version)) => format!(\"No! {} is too old!\", version),\n     None => \"couldn't figure it out\".into()\n };\n ```\n\n Check that the running compiler was released on or after `2016-12-18`:\n\n ```rust\n extern crate version_check;\n\n match version_check::is_min_date(\"2016-12-18\") {\n     Some((true, date)) => format!(\"Yes! It's: {}\", date),\n     Some((false, date)) => format!(\"No! {} is too long ago!\", date),\n     None => \"couldn't figure it out\".into()\n };\n ```\n\n # Alternatives\n\n This crate is dead simple with no dependencies. If you need something more\n and don't care about panicking if the version cannot be obtained or adding\n dependencies, see [rustc_version](https://crates.io/crates/rustc_version).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":4005,"byte_end":4016,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"is_min_date","qualname":"::is_min_date","value":"fn (min_date: &str) -> Option<(bool, String)>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the running or installed `rustc` was released no earlier than\n some date.\n\n The format of `min_date` must be YYYY-MM-DD. For instance: `2016-12-20` or\n `2017-01-09`.\n\n If the date cannot be retrieved or parsed, or if `min_date` could not be\n parsed, returns `None`. Otherwise returns a tuple where the first value is\n `true` if the installed `rustc` is at least from `min_data` and the second\n value is the date (in YYYY-MM-DD) of the installed `rustc`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":4868,"byte_end":4882,"line_start":135,"line_end":135,"column_start":8,"column_end":22},"name":"is_min_version","qualname":"::is_min_version","value":"fn (min_version: &str) -> Option<(bool, String)>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the running or installed `rustc` is at least some minimum\n version.\n\n The format of `min_version` is a semantic version: `1.3.0`, `1.15.0-beta`,\n `1.14.0`, `1.16.0-nightly`, etc.\n\n If the version cannot be retrieved or parsed, or if `min_version` could not\n be parsed, returns `None`. Otherwise returns a tuple where the first value\n is `true` if the installed `rustc` is at least `min_version` and the second\n value is the version (semantic) of the installed `rustc`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":5703,"byte_end":5713,"line_start":157,"line_end":157,"column_start":8,"column_end":18},"name":"is_nightly","qualname":"::is_nightly","value":"fn () -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Determines whether the running or installed `rustc` is on the nightly\n channel.\n\n If the version could not be determined, returns `None`. Otherwise returns\n `Some(true)` if the running version is a nightly release, and `Some(false)`\n otherwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":6032,"byte_end":6039,"line_start":166,"line_end":166,"column_start":8,"column_end":15},"name":"is_beta","qualname":"::is_beta","value":"fn () -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Determines whether the running or installed `rustc` is on the beta channel.\n\n If the version could not be determined, returns `None`. Otherwise returns\n `Some(true)` if the running version is a beta release, and `Some(false)`\n otherwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":6353,"byte_end":6359,"line_start":175,"line_end":175,"column_start":8,"column_end":14},"name":"is_dev","qualname":"::is_dev","value":"fn () -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Determines whether the running or installed `rustc` is on the dev channel.\n\n If the version could not be determined, returns `None`. Otherwise returns\n `Some(true)` if the running version is a dev release, and `Some(false)`\n otherwise.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\version_check-0.1.5\\src\\lib.rs","byte_start":6739,"byte_end":6756,"line_start":185,"line_end":185,"column_start":8,"column_end":25},"name":"supports_features","qualname":"::supports_features","value":"fn () -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Determines whether the running or installed `rustc` supports feature flags.\n In other words, if the channel is either \"nightly\" or \"dev\".\n\n If the version could not be determined, returns `None`. Otherwise returns\n `Some(true)` if the running version supports features, and `Some(false)`\n otherwise.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}