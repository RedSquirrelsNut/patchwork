{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","xml","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=6cb9bc6f30fd9042","-C","extra-filename=-6cb9bc6f30fd9042","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libxml-6cb9bc6f30fd9042.rmeta"},"prelude":{"crate_id":{"name":"xml","disambiguator":[11503899362133089805,11080977897192891933]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":24,"byte_end":448,"line_start":2,"line_end":21,"column_start":1,"column_end":10}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":203,"byte_end":214,"line_start":8,"line_end":8,"column_start":17,"column_end":28},"alias_span":null,"name":"EventReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":232,"byte_end":244,"line_start":9,"line_end":9,"column_start":17,"column_end":29},"alias_span":null,"name":"ParserConfig","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":262,"byte_end":273,"line_start":10,"line_end":10,"column_start":17,"column_end":28},"alias_span":null,"name":"EventWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":291,"byte_end":304,"line_start":11,"line_end":11,"column_start":17,"column_end":30},"alias_span":null,"name":"EmitterConfig","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":37869,"byte_end":37881,"line_start":11,"line_end":11,"column_start":23,"column_end":35},"alias_span":null,"name":"ParserConfig","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":37905,"byte_end":37913,"line_start":12,"line_end":12,"column_start":23,"column_end":31},"alias_span":null,"name":"XmlEvent","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38028,"byte_end":38033,"line_start":22,"line_end":22,"column_start":23,"column_end":28},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38035,"byte_end":38044,"line_start":22,"line_end":22,"column_start":30,"column_end":39},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":243}},{"kind":"Use","ref_id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140511,"byte_end":140517,"line_start":6,"line_end":6,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":662}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140542,"byte_end":140554,"line_start":7,"line_end":7,"column_start":24,"column_end":36},"alias_span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140558,"byte_end":140563,"line_start":7,"line_end":7,"column_start":40,"column_end":45},"name":"Error","value":"","parent":{"krate":0,"index":662}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140587,"byte_end":140600,"line_start":8,"line_end":8,"column_start":23,"column_end":36},"alias_span":null,"name":"EmitterConfig","value":"","parent":{"krate":0,"index":662}},{"kind":"Use","ref_id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140624,"byte_end":140632,"line_start":9,"line_end":9,"column_start":23,"column_end":31},"alias_span":null,"name":"XmlEvent","value":"","parent":{"krate":0,"index":662}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":24,"byte_end":448,"line_start":2,"line_end":21,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":67},{"krate":0,"index":86},{"krate":0,"index":109},{"krate":0,"index":141},{"krate":0,"index":243},{"krate":0,"index":662},{"krate":0,"index":830}],"decl_id":null,"docs":" This crate currently provides an almost XML 1.0/1.1-compliant pull parser.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":24,"byte_end":44,"line_start":2,"line_end":2,"column_start":1,"column_end":21}},{"value":"allow(unused_variables)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":45,"byte_end":72,"line_start":3,"line_end":3,"column_start":1,"column_end":28}},{"value":"forbid(non_camel_case_types)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":73,"byte_end":105,"line_start":4,"line_end":4,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\macros.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9}],"decl_id":null,"docs":" Contains several macros used in this crate.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\macros.rs","byte_start":450,"byte_end":463,"line_start":1,"line_end":1,"column_start":1,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"name","qualname":"::name","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":847},{"krate":0,"index":873},{"krate":0,"index":870},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":855},{"krate":0,"index":852},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":34},{"krate":0,"index":39},{"krate":0,"index":875},{"krate":0,"index":891},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":881},{"krate":0,"index":879},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":60},{"krate":0,"index":63}],"decl_id":null,"docs":" Contains XML qualified names manipulation types and functions.\n\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3346,"byte_end":3350,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"Name","qualname":"::name::Name","value":"Name { local_name, namespace, prefix }","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851}],"decl_id":null,"docs":" Represents a qualified XML name.\n\n A qualified name always consists at least of a local name. It can optionally contain\n a prefix; when reading an XML document, if it contains a prefix, it must also contain a\n namespace URI, but this is not enforced statically; see below. The name can contain a\n namespace without a prefix; in that case a default, empty prefix is assumed.\n\n When writing XML documents, it is possible to omit the namespace URI, leaving only\n the prefix. In this case the writer will check that the specifed prefix is bound to some\n URI in the current namespace context. If both prefix and namespace URI are specified,\n it is checked that the current namespace context contains this exact correspondence\n between prefix and namespace URI.\n\n # Prefixes and URIs\n\n A qualified name with a prefix must always contain a proper namespace URI --- names with\n a prefix but without a namespace associated with that prefix are meaningless. However,\n it is impossible to obtain proper namespace URI by a prefix without a context, and such\n context is only available when parsing a document (or it can be constructed manually\n when writing a document). Tying a name to a context statically seems impractical. This\n may change in future, though.\n\n # Conversions\n\n `Name` implements some `From` instances for conversion from strings and tuples. For example:\n\n ```rust\n # use xml::name::Name;\n let n1: Name = \"p:some-name\".into();\n let n2: Name = (\"p\", \"some-name\").into();\n\n assert_eq!(n1, n2);\n assert_eq!(n1.local_name, \"some-name\");\n assert_eq!(n1.prefix, Some(\"p\"));\n assert!(n1.namespace.is_none());\n ```\n\n This is added to support easy specification of XML elements when writing XML documents.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3418,"byte_end":3428,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"local_name","qualname":"::name::Name::local_name","value":"&'a str","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" A local name, e.g. `string` in `xsi:string`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3511,"byte_end":3520,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"name":"namespace","qualname":"::name::Name::namespace","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3599,"byte_end":3605,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"prefix","qualname":"::name::Name::prefix","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":" A name prefix, e.g. `xsi` in `xsi:string`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4562,"byte_end":4570,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Name>::to_owned","value":"fn (&self) -> OwnedName","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned variant of the qualified name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4879,"byte_end":4884,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"local","qualname":"<Name>::local","value":"fn (local_name: &str) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance representing plain local name.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4858,"byte_end":4867,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":5124,"byte_end":5132,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"prefixed","qualname":"<Name>::prefixed","value":"fn (local_name: &'a str, prefix: &'a str) -> Name<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance with the given local name and prefix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":5103,"byte_end":5112,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":5455,"byte_end":5464,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"qualified","qualname":"<Name>::qualified","value":"fn (local_name: &'a str, namespace: &'a str, prefix: Option<&'a str>) -> Name<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance representing a qualified name with or without a prefix and\n with a namespace URI.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":5434,"byte_end":5443,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":5893,"byte_end":5900,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"to_repr","qualname":"<Name>::to_repr","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a correct XML representation of this local name and prefix.\n\n This method is different from the autoimplemented `to_string()` because it does not\n include namespace URI in the result.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6233,"byte_end":6245,"line_start":145,"line_end":145,"column_start":12,"column_end":24},"name":"repr_display","qualname":"<Name>::repr_display","value":"fn (&self) -> ReprDisplay","parent":null,"children":[],"decl_id":null,"docs":" Returns a structure which can be displayed with `std::fmt` machinery to obtain this\n local name and prefix.\n\n This method is needed for efficiency purposes in order not to create unnecessary\n allocations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6212,"byte_end":6221,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6412,"byte_end":6423,"line_start":151,"line_end":151,"column_start":12,"column_end":23},"name":"prefix_repr","qualname":"<Name>::prefix_repr","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6391,"byte_end":6400,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6631,"byte_end":6642,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"ReprDisplay","qualname":"::name::ReprDisplay","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is\n displayed in an XML document.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":875},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7118,"byte_end":7127,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"OwnedName","qualname":"::name::OwnedName","value":"OwnedName { local_name, namespace, prefix }","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"decl_id":null,"docs":" An owned variant of `Name`.\n\n Everything about `Name` applies to this structure as well.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":876},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7191,"byte_end":7201,"line_start":175,"line_end":175,"column_start":9,"column_end":19},"name":"local_name","qualname":"::name::OwnedName::local_name","value":"std::string::String","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":" A local name, e.g. `string` in `xsi:string`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7283,"byte_end":7292,"line_start":178,"line_end":178,"column_start":9,"column_end":18},"name":"namespace","qualname":"::name::OwnedName::namespace","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":" A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":878},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7370,"byte_end":7376,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"name":"prefix","qualname":"::name::OwnedName::prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":" A name prefix, e.g. `xsi` in `xsi:string`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7649,"byte_end":7655,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"borrow","qualname":"<OwnedName>::borrow","value":"fn (&self) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Constructs a borrowed `Name` based on this owned name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7967,"byte_end":7972,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"local","qualname":"<OwnedName>::local","value":"fn <S> (local_name: S) -> OwnedName","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `OwnedName` instance representing a plain local name.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7946,"byte_end":7955,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":8320,"byte_end":8329,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"qualified","qualname":"<OwnedName>::qualified","value":"fn <S1, S2, S3> (local_name: S1, namespace: S2, prefix: Option<S3>) -> OwnedName","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `OwnedName` instance representing a qualified name with or without\n a prefix and with a namespace URI.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":8299,"byte_end":8308,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":8793,"byte_end":8803,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"prefix_ref","qualname":"<OwnedName>::prefix_ref","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\n but avoids extra work.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":8772,"byte_end":8781,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9026,"byte_end":9039,"line_start":234,"line_end":234,"column_start":12,"column_end":25},"name":"namespace_ref","qualname":"<OwnedName>::namespace_ref","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\n but avoids extra work.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9005,"byte_end":9014,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"attribute","qualname":"::attribute","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":893},{"krate":0,"index":918},{"krate":0,"index":915},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":900},{"krate":0,"index":897},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":920},{"krate":0,"index":935},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":925},{"krate":0,"index":923},{"krate":0,"index":80},{"krate":0,"index":84}],"decl_id":null,"docs":" Contains XML attributes manipulation types and functions.\n\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11516,"byte_end":11525,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::attribute::Attribute","value":"Attribute { name, value }","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896}],"decl_id":null,"docs":" A borrowed version of an XML attribute.\n\n Consists of a borrowed qualified name and a borrowed string value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11564,"byte_end":11568,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"name","qualname":"::attribute::Attribute::name","value":"name::Name<'a>","parent":{"krate":0,"index":893},"children":[],"decl_id":null,"docs":" Attribute name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11614,"byte_end":11619,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"value","qualname":"::attribute::Attribute::value","value":"&'a str","parent":{"krate":0,"index":893},"children":[],"decl_id":null,"docs":" Attribute value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11929,"byte_end":11937,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Attribute>::to_owned","value":"fn (&self) -> OwnedAttribute","parent":null,"children":[],"decl_id":null,"docs":" Creates an owned attribute out of this borrowed one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11908,"byte_end":11917,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12205,"byte_end":12208,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<Attribute>::new","value":"fn (name: Name<'a>, value: &'a str) -> Attribute<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a borrowed attribute using the provided borrowed name and a borrowed string value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12184,"byte_end":12193,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":920},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12473,"byte_end":12487,"line_start":48,"line_end":48,"column_start":12,"column_end":26},"name":"OwnedAttribute","qualname":"::attribute::OwnedAttribute","value":"OwnedAttribute { name, value }","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"decl_id":null,"docs":" An owned version of an XML attribute.\n\n Consists of an owned qualified name and an owned string value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":921},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12522,"byte_end":12526,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"name":"name","qualname":"::attribute::OwnedAttribute::name","value":"name::OwnedName","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Attribute name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12573,"byte_end":12578,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"value","qualname":"::attribute::OwnedAttribute::value","value":"std::string::String","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Attribute value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12685,"byte_end":12691,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"borrow","qualname":"<OwnedAttribute>::borrow","value":"fn (&self) -> Attribute","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed `Attribute` out of this owned one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12942,"byte_end":12945,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedAttribute>::new","value":"fn <S> (name: OwnedName, value: S) -> OwnedAttribute","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owned attribute using the provided owned name and an owned string value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12921,"byte_end":12930,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"common","qualname":"::common","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":937},{"krate":0,"index":949},{"krate":0,"index":947},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":88},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":950},{"krate":0,"index":963},{"krate":0,"index":961},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" Contains common types and functions used throughout the library.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":937},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":13942,"byte_end":13954,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"TextPosition","qualname":"::common::TextPosition","value":"TextPosition { row, column }","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939}],"decl_id":null,"docs":" Represents a position inside some textual document.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":13994,"byte_end":13997,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"name":"row","qualname":"::common::TextPosition::row","value":"u64","parent":{"krate":0,"index":937},"children":[],"decl_id":null,"docs":" Row, counting from 0\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14044,"byte_end":14050,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"column","qualname":"::common::TextPosition::column","value":"u64","parent":{"krate":0,"index":937},"children":[],"decl_id":null,"docs":" Column, counting from 0\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14181,"byte_end":14184,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<TextPosition>::new","value":"fn () -> TextPosition","parent":null,"children":[],"decl_id":null,"docs":" Creates a new position initialized to the beginning of the document\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14160,"byte_end":14169,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14320,"byte_end":14327,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"advance","qualname":"<TextPosition>::advance","value":"fn (&mut self, count: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the position in a line\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14299,"byte_end":14308,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14486,"byte_end":14500,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"advance_to_tab","qualname":"<TextPosition>::advance_to_tab","value":"fn (&mut self, width: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the position in a line to the next tab position\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14465,"byte_end":14474,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14706,"byte_end":14714,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"new_line","qualname":"<TextPosition>::new_line","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advances the position to the beginning of the next line\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14685,"byte_end":14694,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15277,"byte_end":15285,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Position","qualname":"::common::Position","value":"Position","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" Get the position in the document corresponding to the object\n\n This trait is implemented by parsers, lexers and errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15375,"byte_end":15383,"line_start":61,"line_end":61,"column_start":8,"column_end":16},"name":"position","qualname":"::common::Position::position","value":"fn (&self) -> TextPosition","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Returns the current position or a position corresponding to the object.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15640,"byte_end":15649,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"Version10","qualname":"::common::XmlVersion::Version10","value":"XmlVersion::Version10","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" XML version 1.0.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":953},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15681,"byte_end":15690,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"Version11","qualname":"::common::XmlVersion::Version11","value":"XmlVersion::Version11","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" XML version 1.1.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15598,"byte_end":15608,"line_start":73,"line_end":73,"column_start":10,"column_end":20},"name":"XmlVersion","qualname":"::common::XmlVersion","value":"XmlVersion::{Version10, Version11}","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":953}],"decl_id":null,"docs":" XML version enumeration.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":16289,"byte_end":16307,"line_start":100,"line_end":100,"column_start":8,"column_end":26},"name":"is_whitespace_char","qualname":"::common::is_whitespace_char","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a white space character (`S`)\n as is defined by XML 1.1 specification, [section 2.3][1].\n\n [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":16597,"byte_end":16614,"line_start":110,"line_end":110,"column_start":8,"column_end":25},"name":"is_whitespace_str","qualname":"::common::is_whitespace_str","value":"fn (s: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given string is compound only by white space\n characters (`S`) using the previous is_whitespace_char to check\n all characters of this string\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":16901,"byte_end":16919,"line_start":118,"line_end":118,"column_start":8,"column_end":26},"name":"is_name_start_char","qualname":"::common::is_name_start_char","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a name start character (`NameStartChar`)\n as is defined by XML 1.1 specification, [section 2.3][1].\n\n [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":17595,"byte_end":17607,"line_start":135,"line_end":135,"column_start":8,"column_end":20},"name":"is_name_char","qualname":"::common::is_name_char","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a name character (`NameChar`)\n as is defined by XML 1.1 specification, [section 2.3][1].\n\n [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"escape","qualname":"::escape","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":140}],"decl_id":null,"docs":" Contains functions for performing XML special characters escaping.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":20380,"byte_end":20400,"line_start":94,"line_end":94,"column_start":8,"column_end":28},"name":"escape_str_attribute","qualname":"::escape::escape_str_attribute","value":"fn (s: &str) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Performs escaping of common XML characters inside an attribute value.\n\n This function replaces several important markup characters with their\n entity equivalents:\n\n * `<` → `&lt;`\n * `>` → `&gt;`\n * `\"` → `&quot;`\n * `'` → `&apos;`\n * `&` → `&amp;`\n\n The resulting string is safe to use inside XML attribute values or in PCDATA sections.\n\n Does not perform allocations if the given string does not contain escapable characters.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":20363,"byte_end":20372,"line_start":93,"line_end":93,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":20900,"byte_end":20917,"line_start":110,"line_end":110,"column_start":8,"column_end":25},"name":"escape_str_pcdata","qualname":"::escape::escape_str_pcdata","value":"fn (s: &str) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Performs escaping of common XML characters inside PCDATA.\n\n This function replaces several important markup characters with their\n entity equivalents:\n\n * `<` → `&lt;`\n * `&` → `&amp;`\n\n The resulting string is safe to use inside PCDATA sections but NOT inside attribute values.\n\n Does not perform allocations if the given string does not contain escapable characters.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":20883,"byte_end":20892,"line_start":109,"line_end":109,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"namespace","qualname":"::namespace","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":964},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":969},{"krate":0,"index":967},{"krate":0,"index":157},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":978},{"krate":0,"index":990},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":981},{"krate":0,"index":184},{"krate":0,"index":206},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":219},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":238}],"decl_id":null,"docs":" Contains namespace manipulation types and functions.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":21722,"byte_end":21737,"line_start":14,"line_end":14,"column_start":11,"column_end":26},"name":"NS_XMLNS_PREFIX","qualname":"::namespace::NS_XMLNS_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates prefix for namespace definitions.\n\n See [Namespaces in XML][namespace] spec for more information.\n\n   [namespace]: http://www.w3.org/TR/xml-names/#ns-decl\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":21956,"byte_end":21968,"line_start":21,"line_end":21,"column_start":11,"column_end":23},"name":"NS_XMLNS_URI","qualname":"::namespace::NS_XMLNS_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the standard URI for `xmlns` prefix.\n\n See [A Namespace Name for xmlns Attributes][1] for more information.\n\n   [namespace]: http://www.w3.org/2000/xmlns/\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":22479,"byte_end":22492,"line_start":32,"line_end":32,"column_start":11,"column_end":24},"name":"NS_XML_PREFIX","qualname":"::namespace::NS_XML_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates prefix for a namespace containing several special predefined attributes.\n\n See [2.10 White Space handling][1],  [2.1 Language Identification][2],\n [XML Base specification][3] and [xml:id specification][4] for more information.\n\n   [1]: http://www.w3.org/TR/REC-xml/#sec-white-space\n   [2]: http://www.w3.org/TR/REC-xml/#sec-lang-tag\n   [3]: http://www.w3.org/TR/xmlbase/\n   [4]: http://www.w3.org/TR/xml-id/\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":22643,"byte_end":22653,"line_start":37,"line_end":37,"column_start":11,"column_end":21},"name":"NS_XML_URI","qualname":"::namespace::NS_XML_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the standard URI for `xml` prefix.\n\n See `NS_XML_PREFIX` documentation for more information.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":23431,"byte_end":23443,"line_start":55,"line_end":55,"column_start":11,"column_end":23},"name":"NS_NO_PREFIX","qualname":"::namespace::NS_NO_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the absence of prefix in a qualified name.\n\n This constant should be used to define or query default namespace which should be used\n for element or attribute names without prefix. For example, if a namespace mapping\n at a particular point in the document contains correspondence like\n\n ```none\n   NS_NO_PREFIX  -->  urn:some:namespace\n ```\n\n then all names declared without an explicit prefix `urn:some:namespace` is assumed as\n a namespace URI.\n\n By default empty prefix corresponds to absence of namespace, but this can change either\n when writing an XML document (manually) or when reading an XML document (based on namespace\n declarations).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":23881,"byte_end":23893,"line_start":63,"line_end":63,"column_start":11,"column_end":23},"name":"NS_EMPTY_URI","qualname":"::namespace::NS_EMPTY_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates an empty namespace URI, which is equivalent to absence of namespace.\n\n This constant should not usually be used directly; it is used to designate that\n empty prefix corresponds to absent namespace in `NamespaceStack` instances created with\n `NamespaceStack::default()`. Therefore, it can be used to restore `NS_NO_PREFIX` mapping\n in a namespace back to its default value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":964},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24109,"byte_end":24118,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"Namespace","qualname":"::namespace::Namespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Namespace is a map from prefixes to namespace URIs.\n\n No prefix (i.e. default namespace) is designated by `NS_NO_PREFIX` constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24229,"byte_end":24234,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"empty","qualname":"<Namespace>::empty","value":"fn () -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty namespace.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24208,"byte_end":24217,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24355,"byte_end":24363,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Namespace>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24334,"byte_end":24343,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24553,"byte_end":24573,"line_start":84,"line_end":84,"column_start":12,"column_end":32},"name":"is_essentially_empty","qualname":"<Namespace>::is_essentially_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace is essentially empty, that is, it does not contain\n anything but default mappings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":25241,"byte_end":25249,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"contains","qualname":"<Namespace>::contains","value":"fn <P> (&self, prefix: &P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace mapping contains the given prefix.\n\n # Parameters\n * `prefix`  --- namespace prefix.\n\n # Return value\n `true` if this namespace contains the given prefix, `false` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":25220,"byte_end":25229,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":25863,"byte_end":25866,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"put","qualname":"<Namespace>::put","value":"fn <P, U> (&mut self, prefix: P, uri: U) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into this namespace.\n\n This method does not override any already existing mappings.\n\n Returns a boolean flag indicating whether the map already contained\n the given prefix.\n\n # Parameters\n * `prefix` --- namespace prefix;\n * `uri`    --- namespace URI.\n\n # Return value\n `true` if `prefix` has been inserted successfully; `false` if the `prefix`\n was already present in the namespace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":26714,"byte_end":26723,"line_start":147,"line_end":147,"column_start":12,"column_end":21},"name":"force_put","qualname":"<Namespace>::force_put","value":"fn <P, U> (&mut self, prefix: P, uri: U) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into this namespace forcefully.\n\n This method, unlike `put()`, does replace an already existing mapping.\n\n Returns previous URI which was assigned to the given prefix, if it is present.\n\n # Parameters\n * `prefix` --- namespace prefix;\n * `uri`    --- namespace URI.\n\n # Return value\n `Some(uri)` with `uri` being a previous URI assigned to the `prefix`, or\n `None` if such prefix was not present in the namespace before.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":27126,"byte_end":27129,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"get","qualname":"<Namespace>::get","value":"fn <'a, P> (&'a self, prefix: &P) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Queries the namespace for the given prefix.\n\n # Parameters\n * `prefix` --- namespace prefix.\n\n # Return value\n Namespace URI corresponding to the given prefix, if it is present.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":27347,"byte_end":27364,"line_start":166,"line_end":166,"column_start":10,"column_end":27},"name":"NamespaceMappings","qualname":"::namespace::NamespaceMappings","value":"Map<Entries<'a, String, String>,\n    for<'b>fn((&'b String, &'b String)) -> UriMapping<'b>>","parent":null,"children":[],"decl_id":null,"docs":" An alias for iterator type for namespace mappings contained in a namespace.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":978},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28024,"byte_end":28038,"line_start":188,"line_end":188,"column_start":12,"column_end":26},"name":"NamespaceStack","qualname":"::namespace::NamespaceStack","value":"","parent":null,"children":[],"decl_id":null,"docs":" Namespace stack is a sequence of namespaces.\n\n Namespace stack is used to represent cumulative namespace consisting of\n combined namespaces from nested elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28150,"byte_end":28155,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"empty","qualname":"<NamespaceStack>::empty","value":"fn () -> NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty namespace stack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28129,"byte_end":28138,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28476,"byte_end":28483,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"default","qualname":"<NamespaceStack>::default","value":"fn () -> NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Returns a namespace stack with default items in it.\n\n Default items are the following:\n\n * `xml` → `http://www.w3.org/XML/1998/namespace`;\n * `xmlns` → `http://www.w3.org/2000/xmlns/`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28455,"byte_end":28464,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28897,"byte_end":28907,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"push_empty","qualname":"<NamespaceStack>::push_empty","value":"fn (&mut self) -> &mut NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Adds an empty namespace to the top of this stack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28876,"byte_end":28885,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29129,"byte_end":29132,"line_start":225,"line_end":225,"column_start":12,"column_end":15},"name":"pop","qualname":"<NamespaceStack>::pop","value":"fn (&mut self) -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Removes the topmost namespace in this stack.\n\n Panics if the stack is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29108,"byte_end":29117,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29365,"byte_end":29372,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"try_pop","qualname":"<NamespaceStack>::try_pop","value":"fn (&mut self) -> Option<Namespace>","parent":null,"children":[],"decl_id":null,"docs":" Removes the topmost namespace in this stack.\n\n Returns `Some(namespace)` if this stack is not empty and `None` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29344,"byte_end":29353,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29579,"byte_end":29587,"line_start":241,"line_end":241,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<NamespaceStack>::peek_mut","value":"fn (&mut self) -> &mut Namespace","parent":null,"children":[],"decl_id":null,"docs":" Borrows the topmost namespace mutably, leaving the stack intact.\n\n Panics if the stack is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29558,"byte_end":29567,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29807,"byte_end":29811,"line_start":249,"line_end":249,"column_start":12,"column_end":16},"name":"peek","qualname":"<NamespaceStack>::peek","value":"fn (&self) -> &Namespace","parent":null,"children":[],"decl_id":null,"docs":" Borrows the topmost namespace immutably, leaving the stack intact.\n\n Panics if the stack is empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":29786,"byte_end":29795,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":30531,"byte_end":30542,"line_start":266,"line_end":266,"column_start":12,"column_end":23},"name":"put_checked","qualname":"<NamespaceStack>::put_checked","value":"fn <P, U> (&mut self, prefix: P, uri: U) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into the topmost namespace if this stack does not already contain one.\n\n Returns a boolean flag indicating whether the insertion has completed successfully.\n Note that both key and value are matched and the mapping is inserted if either\n namespace prefix is not already mapped, or if it is mapped, but to a different URI.\n\n # Parameters\n * `prefix` --- namespace prefix;\n * `uri`    --- namespace URI.\n\n # Return value\n `true` if `prefix` has been inserted successfully; `false` if the `prefix`\n was already present in the namespace stack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":31575,"byte_end":31578,"line_start":294,"line_end":294,"column_start":12,"column_end":15},"name":"put","qualname":"<NamespaceStack>::put","value":"fn <P, U> (&mut self, prefix: P, uri: U) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into the topmost namespace in this stack.\n\n This method does not override a mapping in the topmost namespace if it is\n already present, however, it does not depend on other namespaces in the stack,\n so it is possible to put a mapping which is present in lower namespaces.\n\n Returns a boolean flag indicating whether the insertion has completed successfully.\n\n # Parameters\n * `prefix` --- namespace prefix;\n * `uri`    --- namespace URI.\n\n # Return value\n `true` if `prefix` has been inserted successfully; `false` if the `prefix`\n was already present in the namespace.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":31554,"byte_end":31563,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":32099,"byte_end":32102,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"get","qualname":"<NamespaceStack>::get","value":"fn <'a, P> (&'a self, prefix: &P) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Performs a search for the given prefix in the whole stack.\n\n This method walks the stack from top to bottom, querying each namespace\n in order for the given prefix. If none of the namespaces contains the prefix,\n `None` is returned.\n\n # Parameters\n * `prefix` --- namespace prefix.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":32078,"byte_end":32087,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":32610,"byte_end":32616,"line_start":324,"line_end":324,"column_start":12,"column_end":18},"name":"squash","qualname":"<NamespaceStack>::squash","value":"fn (&self) -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Combines this stack of namespaces into a single namespace.\n\n Namespaces are combined in left-to-right order, that is, rightmost namespace\n elements take priority over leftmost ones.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33012,"byte_end":33026,"line_start":336,"line_end":336,"column_start":12,"column_end":26},"name":"checked_target","qualname":"<NamespaceStack>::checked_target","value":"fn (&mut self) -> CheckedTarget","parent":null,"children":[],"decl_id":null,"docs":" Returns an object which implements `Extend` using `put_checked()` instead of `put()`.\n\n See `CheckedTarget` for more information.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":32991,"byte_end":33000,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33188,"byte_end":33192,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"iter","qualname":"<NamespaceStack>::iter","value":"fn (&self) -> NamespaceStackMappings","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all mappings in this namespace stack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33167,"byte_end":33176,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33697,"byte_end":33719,"line_start":361,"line_end":361,"column_start":12,"column_end":34},"name":"NamespaceStackMappings","qualname":"::namespace::NamespaceStackMappings","value":"NamespaceStackMappings {  }","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":" An iterator over mappings from prefixes to URIs in a namespace stack.\n\n # Example\n ```\n # use xml::namespace::NamespaceStack;\n let mut nst = NamespaceStack::empty();\n nst.push_empty();\n nst.put(\"a\", \"urn:A\");\n nst.put(\"b\", \"urn:B\");\n nst.push_empty();\n nst.put(\"c\", \"urn:C\");\n\n assert_eq!(vec![(\"c\", \"urn:C\"), (\"a\", \"urn:A\"), (\"b\", \"urn:B\")], nst.iter().collect::<Vec<_>>());\n ```\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":35697,"byte_end":35707,"line_start":421,"line_end":421,"column_start":10,"column_end":20},"name":"UriMapping","qualname":"::namespace::UriMapping","value":"(&'a str, &'a str)","parent":null,"children":[],"decl_id":null,"docs":" A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":37282,"byte_end":37295,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"CheckedTarget","qualname":"::namespace::CheckedTarget","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.\n\n # Example\n\n ```\n # use xml::namespace::NamespaceStack;\n\n let mut nst = NamespaceStack::empty();\n nst.push_empty();\n nst.put(\"a\", \"urn:A\");\n nst.put(\"b\", \"urn:B\");\n nst.push_empty();\n nst.put(\"c\", \"urn:C\");\n\n nst.checked_target().extend(vec![(\"a\", \"urn:Z\"), (\"b\", \"urn:B\"), (\"c\", \"urn:Y\"), (\"d\", \"urn:D\")]);\n assert_eq!(\n     vec![(\"a\", \"urn:Z\"), (\"c\", \"urn:C\"), (\"d\", \"urn:D\"), (\"b\", \"urn:B\")],\n     nst.iter().collect::<Vec<_>>()\n );\n ```\n\n Compare:\n\n ```\n # use xml::namespace::NamespaceStack;\n # let mut nst = NamespaceStack::empty();\n # nst.push_empty();\n # nst.put(\"a\", \"urn:A\");\n # nst.put(\"b\", \"urn:B\");\n # nst.push_empty();\n # nst.put(\"c\", \"urn:C\");\n\n nst.extend(vec![(\"a\", \"urn:Z\"), (\"b\", \"urn:B\"), (\"c\", \"urn:Y\"), (\"d\", \"urn:D\")]);\n assert_eq!(\n     vec![(\"a\", \"urn:Z\"), (\"b\", \"urn:B\"), (\"c\", \"urn:C\"), (\"d\", \"urn:D\")],\n     nst.iter().collect::<Vec<_>>()\n );\n ```\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::reader","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":352},{"krate":0,"index":556},{"krate":0,"index":569},{"krate":0,"index":583},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":646},{"krate":0,"index":650},{"krate":0,"index":655},{"krate":0,"index":659}],"decl_id":null,"docs":" Contains high-level interface for a pull-based XML parser.\n\n The most important type in this module is `EventReader`, which provides an iterator\n view for events in XML document.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":122257,"byte_end":122269,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"ParserConfig","qualname":"::reader::config::ParserConfig","value":"ParserConfig { trim_whitespace, whitespace_to_characters, cdata_to_characters, ignore_comments, coalesce_characters, extra_entities, ignore_end_of_stream }","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231}],"decl_id":null,"docs":" Parser configuration structure.\n\n This structure contains various configuration options which affect\n behavior of the parser.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1225},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":122972,"byte_end":122987,"line_start":24,"line_end":24,"column_start":9,"column_end":24},"name":"trim_whitespace","qualname":"::reader::config::ParserConfig::trim_whitespace","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not should whitespace in textual events be removed. Default is false.\n\n When true, all standalone whitespace will be removed (this means no\n `Whitespace` events will ve emitted), and leading and trailing whitespace\n from `Character` events will be deleted. If after trimming `Characters`\n event will be empty, it will also be omitted from output stream. This is\n possible, however, only if `whitespace_to_characters` or\n `cdata_to_characters` options are set.\n\n This option does not affect CDATA events, unless `cdata_to_characters`\n option is also set. In that case CDATA content will also be trimmed.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":123337,"byte_end":123361,"line_start":32,"line_end":32,"column_start":9,"column_end":33},"name":"whitespace_to_characters","qualname":"::reader::config::ParserConfig::whitespace_to_characters","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not should whitespace be converted to characters.\n Default is false.\n\n If true, instead of `Whitespace` events `Characters` events with the\n same content will be emitted. If `trim_whitespace` is also true, these\n events will be trimmed to nothing and, consequently, not emitted.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":123768,"byte_end":123787,"line_start":41,"line_end":41,"column_start":9,"column_end":28},"name":"cdata_to_characters","qualname":"::reader::config::ParserConfig::cdata_to_characters","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not should CDATA be converted to characters.\n Default is false.\n\n If true, instead of `CData` events `Characters` events with the same\n content will be emitted. If `trim_whitespace` is also true, these events\n will be trimmed. If corresponding CDATA contained nothing but whitespace,\n this event will be omitted from the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":123942,"byte_end":123957,"line_start":46,"line_end":46,"column_start":9,"column_end":24},"name":"ignore_comments","qualname":"::reader::config::ParserConfig::ignore_comments","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not should comments be omitted. Default is true.\n\n If true, `Comment` events will not be emitted at all.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":124443,"byte_end":124462,"line_start":57,"line_end":57,"column_start":9,"column_end":28},"name":"coalesce_characters","qualname":"::reader::config::ParserConfig::coalesce_characters","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not should sequential `Characters` events be merged.\n Default is true.\n\n If true, multiple sequential `Characters` events will be merged into\n a single event, that is, their data will be concatenated.\n\n Multiple sequential `Characters` events are only possible if either\n `cdata_to_characters` or `ignore_comments` are set. Otherwise character\n events will always be separated by other events.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":124888,"byte_end":124902,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"name":"extra_entities","qualname":"::reader::config::ParserConfig::extra_entities","value":"std::collections::HashMap<std::string::String, std::string::String>","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" A map of extra entities recognized by the parser. Default is an empty map.\n\n By default the XML parser recognizes the entities defined in the XML spec. Sometimes,\n however, it is convenient to make the parser recognize additional entities which\n are also not available through the DTD definitions (especially given that at the moment\n DTD parsing is not supported).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":125661,"byte_end":125681,"line_start":77,"line_end":77,"column_start":9,"column_end":29},"name":"ignore_end_of_stream","qualname":"::reader::config::ParserConfig::ignore_end_of_stream","value":"bool","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" Whether or not the parser should ignore the end of stream. Default is false.\n\n By default the parser will either error out when it encounters a premature end of\n stream or complete normally if the end of stream was expected. If you want to continue\n reading from a stream whose input is supplied progressively, you can set this option to true.\n In this case the parser will allow you to invoke the next() method even if a supposed end\n of stream has happened.\n\n Note that support for this functionality is incomplete; for example, the parser will fail if\n the premature end of stream happens inside PCDATA. Therefore, use this option at your own risk.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":126080,"byte_end":126083,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserConfig>::new","value":"fn () -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Returns a new config with default values.\n\n You can tweak default values using builder-like pattern:\n\n ```rust\n use xml::reader::ParserConfig;\n\n let config = ParserConfig::new()\n     .trim_whitespace(true)\n     .ignore_comments(true)\n     .coalesce_characters(false);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":127061,"byte_end":127074,"line_start":124,"line_end":124,"column_start":12,"column_end":25},"name":"create_reader","qualname":"<ParserConfig>::create_reader","value":"fn <R> (self, source: R) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML reader with this configuration.\n\n This is a convenience method for configuring and creating a reader at the same time:\n\n ```rust\n use xml::reader::ParserConfig;\n\n let mut source: &[u8] = b\"...\";\n\n let reader = ParserConfig::new()\n     .trim_whitespace(true)\n     .ignore_comments(true)\n     .coalesce_characters(false)\n     .create_reader(&mut source);\n ```\n\n This method is exactly equivalent to calling `EventReader::new_with_config()` with\n this configuration object.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":127040,"byte_end":127049,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":127709,"byte_end":127719,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"add_entity","qualname":"<ParserConfig>::add_entity","value":"fn <S, T> (mut self, entity: S, value: T) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Adds a new entity mapping and returns an updated config object.\n\n This is a convenience method for adding external entities mappings to the XML parser.\n An example:\n\n ```rust\n use xml::reader::ParserConfig;\n\n let mut source: &[u8] = b\"...\";\n\n let reader = ParserConfig::new()\n     .add_entity(\"nbsp\", \" \")\n     .add_entity(\"copy\", \"©\")\n     .add_entity(\"reg\", \"®\")\n     .create_reader(&mut source);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128041,"byte_end":128056,"line_start":158,"line_end":158,"column_start":5,"column_end":20},"name":"trim_whitespace","qualname":"<ParserConfig>::trim_whitespace","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128072,"byte_end":128096,"line_start":159,"line_end":159,"column_start":5,"column_end":29},"name":"whitespace_to_characters","qualname":"<ParserConfig>::whitespace_to_characters","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128112,"byte_end":128131,"line_start":160,"line_end":160,"column_start":5,"column_end":24},"name":"cdata_to_characters","qualname":"<ParserConfig>::cdata_to_characters","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128147,"byte_end":128162,"line_start":161,"line_end":161,"column_start":5,"column_end":20},"name":"ignore_comments","qualname":"<ParserConfig>::ignore_comments","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128178,"byte_end":128197,"line_start":162,"line_end":162,"column_start":5,"column_end":24},"name":"coalesce_characters","qualname":"<ParserConfig>::coalesce_characters","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":128213,"byte_end":128233,"line_start":163,"line_end":163,"column_start":5,"column_end":25},"name":"ignore_end_of_stream","qualname":"<ParserConfig>::ignore_end_of_stream","value":"fn (mut self, value: bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1256},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":128889,"byte_end":128902,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"StartDocument","qualname":"::reader::events::XmlEvent::StartDocument","value":"XmlEvent::StartDocument { version, encoding, standalone }","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Corresponds to XML document declaration.\n\n This event is always emitted before any other event. It is emitted\n even if the actual declaration is not present in the document.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":129860,"byte_end":129871,"line_start":46,"line_end":46,"column_start":5,"column_end":16},"name":"EndDocument","qualname":"::reader::events::XmlEvent::EndDocument","value":"XmlEvent::EndDocument","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes to the end of the document stream.\n\n This event is always emitted after any other event (except `Error`). After it\n is emitted for the first time, it will always be emitted on next event pull attempts.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":130074,"byte_end":130095,"line_start":52,"line_end":52,"column_start":5,"column_end":26},"name":"ProcessingInstruction","qualname":"::reader::events::XmlEvent::ProcessingInstruction","value":"XmlEvent::ProcessingInstruction { name, data }","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes an XML processing instruction.\n\n This event contains a processing instruction target (`name`) and opaque `data`. It\n is up to the application to process them.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":130460,"byte_end":130472,"line_start":64,"line_end":64,"column_start":5,"column_end":17},"name":"StartElement","qualname":"::reader::events::XmlEvent::StartElement","value":"XmlEvent::StartElement { name, attributes, namespace }","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes a beginning of an XML element.\n\n This event is emitted after parsing opening tags or after parsing bodiless tags. In the\n latter case `EndElement` event immediately follows.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":131084,"byte_end":131094,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"EndElement","qualname":"::reader::events::XmlEvent::EndElement","value":"XmlEvent::EndElement { name }","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes an end of an XML element.\n\n This event is emitted after parsing closing tags or after parsing bodiless tags. In the\n latter case it is emitted immediately after corresponding `StartElement` event.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":131463,"byte_end":131468,"line_start":92,"line_end":92,"column_start":5,"column_end":10},"name":"CData","qualname":"::reader::events::XmlEvent::CData","value":"XmlEvent::CData(String)","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes CDATA content.\n\n This event contains unparsed data. No unescaping will be performed.\n\n It is possible to configure a parser to emit `Characters` event instead of `CData`. See\n `pull::ParserConfiguration` structure for more information.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1274},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":131692,"byte_end":131699,"line_start":98,"line_end":98,"column_start":5,"column_end":12},"name":"Comment","qualname":"::reader::events::XmlEvent::Comment","value":"XmlEvent::Comment(String)","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes a comment.\n\n It is possible to configure a parser to ignore comments, so this event will never be emitted.\n See `pull::ParserConfiguration` structure for more information.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":132085,"byte_end":132095,"line_start":107,"line_end":107,"column_start":5,"column_end":15},"name":"Characters","qualname":"::reader::events::XmlEvent::Characters","value":"XmlEvent::Characters(String)","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes character data outside of tags.\n\n Contents of this event will always be unescaped, so no entities like `&lt;` or `&amp;` or `&#123;`\n will appear in it.\n\n It is possible to configure a parser to trim leading and trailing whitespace for this event.\n See `pull::ParserConfiguration` structure for more information.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":132464,"byte_end":132474,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"Whitespace","qualname":"::reader::events::XmlEvent::Whitespace","value":"XmlEvent::Whitespace(String)","parent":{"krate":0,"index":1255},"children":[],"decl_id":null,"docs":" Denotes a chunk of whitespace outside of tags.\n\n It is possible to configure a parser to emit `Characters` event instead of `Whitespace`.\n See `pull::ParserConfiguration` structure for more information. When combined with whitespace\n trimming, it will eliminate standalone whitespace from the event stream completely.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":128671,"byte_end":128679,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"XmlEvent","qualname":"::reader::events::XmlEvent","value":"XmlEvent::{StartDocument, EndDocument, ProcessingInstruction, StartElement, EndElement, CData, Comment, Characters, Whitespace}","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1280}],"decl_id":null,"docs":" An element of an XML input stream.\n\n Items of this enum are emitted by `reader::EventReader`. They correspond to different\n elements of an XML document.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":135578,"byte_end":135593,"line_start":191,"line_end":191,"column_start":12,"column_end":27},"name":"as_writer_event","qualname":"<XmlEvent>::as_writer_event","value":"fn <'a> (&'a self) -> Option<::writer::events::XmlEvent<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a writer event from this reader event.\n\n This method is useful for streaming processing of XML documents where the output\n is also an XML document. With this method it is possible to process some events\n while passing other events through to the writer unchanged:\n\n ```rust\n use std::str;\n\n use xml::{EventReader, EventWriter};\n use xml::reader::XmlEvent as ReaderEvent;\n use xml::writer::XmlEvent as WriterEvent;\n\n let mut input: &[u8] = b\"<hello>world</hello>\";\n let mut output: Vec<u8> = Vec::new();\n\n {\n     let mut reader = EventReader::new(&mut input);\n     let mut writer = EventWriter::new(&mut output);\n\n     for e in reader {\n         match e.unwrap() {\n             ReaderEvent::Characters(s) =>\n                 writer.write(WriterEvent::characters(&s.to_uppercase())).unwrap(),\n             e => if let Some(e) = e.as_writer_event() {\n                 writer.write(e).unwrap()\n             }\n         }\n     }\n }\n\n assert_eq!(\n     str::from_utf8(&output).unwrap(),\n     r#\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>WORLD</hello>\"#\n );\n ```\n\n Note that this API may change or get additions in future to improve its ergonomics.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137288,"byte_end":137294,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::reader::error::ErrorKind::Syntax","value":"ErrorKind::Syntax(Cow<'static, str>)","parent":{"krate":0,"index":1290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1294},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137319,"byte_end":137321,"line_start":14,"line_end":14,"column_start":5,"column_end":7},"name":"Io","qualname":"::reader::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137338,"byte_end":137342,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::reader::error::ErrorKind::Utf8","value":"ErrorKind::Utf8(str::Utf8Error)","parent":{"krate":0,"index":1290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1300},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137364,"byte_end":137377,"line_start":16,"line_end":16,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::reader::error::ErrorKind::UnexpectedEof","value":"ErrorKind::UnexpectedEof","parent":{"krate":0,"index":1290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137272,"byte_end":137281,"line_start":12,"line_end":12,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::reader::error::ErrorKind","value":"ErrorKind::{Syntax, Io, Utf8, UnexpectedEof}","parent":null,"children":[{"krate":0,"index":1291},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1300}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137550,"byte_end":137555,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Error","qualname":"::reader::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306}],"decl_id":null,"docs":" An XML parsing error.\n\n Consists of a 2D position in a document and a textual message describing the error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137964,"byte_end":137967,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"msg","qualname":"<Error>::msg","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a message which is contained inside this error.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137943,"byte_end":137952,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138284,"byte_end":138288,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38099,"byte_end":38105,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Result","qualname":"::reader::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A result type yielded by `XmlReader`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38237,"byte_end":38248,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"EventReader","qualname":"::reader::EventReader","value":"EventReader {  }","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629}],"decl_id":null,"docs":" A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38415,"byte_end":38418,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<EventReader<R>>::new","value":"fn (source: R) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader, consuming the given stream.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38394,"byte_end":38403,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38637,"byte_end":38652,"line_start":42,"line_end":42,"column_start":12,"column_end":27},"name":"new_with_config","qualname":"<EventReader<R>>::new_with_config","value":"fn (source: R, config: ParserConfig) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with the provded configuration, consuming the given stream.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38616,"byte_end":38625,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39023,"byte_end":39027,"line_start":51,"line_end":51,"column_start":12,"column_end":16},"name":"next","qualname":"<EventReader<R>>::next","value":"fn (&mut self) -> Result<XmlEvent>","parent":null,"children":[],"decl_id":null,"docs":" Pulls and returns next XML event from the stream.\n\n If returned event is `XmlEvent::Error` or `XmlEvent::EndDocument`, then\n further calls to this method will return this event again.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39002,"byte_end":39011,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39122,"byte_end":39128,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"source","qualname":"<EventReader<R>>::source","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39170,"byte_end":39180,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"source_mut","qualname":"<EventReader<R>>::source_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39538,"byte_end":39548,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EventReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `EventReader`, returning the underlying reader.\n\n Note that this operation is destructive; unwrapping the reader and wrapping it\n again with `EventReader::new()` will create a fresh reader which will attempt\n to parse an XML document from the beginning.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40270,"byte_end":40276,"line_start":89,"line_end":89,"column_start":12,"column_end":18},"name":"Events","qualname":"::reader::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649}],"decl_id":null,"docs":" An iterator over XML events created from some type implementing `Read`.\n\n When the next event is `xml::event::Error` or `xml::event::EndDocument`, then\n it will be returned by the iterator once, and then it will stop producing events.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40457,"byte_end":40467,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Events<R>>::into_inner","value":"fn (self) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the iterator, returning the internal `EventReader`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40436,"byte_end":40445,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40532,"byte_end":40538,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"name":"source","qualname":"<Events<R>>::source","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40587,"byte_end":40597,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"source_mut","qualname":"<Events<R>>::source_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":41243,"byte_end":41251,"line_start":126,"line_end":126,"column_start":12,"column_end":20},"name":"from_str","qualname":"<EventReader<&'r [u8]>>::from_str","value":"fn (source: &'r str) -> EventReader<&'r [u8]>","parent":null,"children":[],"decl_id":null,"docs":" A convenience method to create an `XmlReader` from a string slice.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":41222,"byte_end":41231,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::writer","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":760},{"krate":0,"index":770},{"krate":0,"index":817},{"krate":0,"index":821}],"decl_id":null,"docs":" Contains high-level interface for an events-based XML emitter.\n\n The most important type in this module is `EventWriter` which allows writing an XML document\n to some output stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":144668,"byte_end":144670,"line_start":21,"line_end":21,"column_start":5,"column_end":7},"name":"Io","qualname":"::writer::emitter::EmitterError::Io","value":"EmitterError::Io(io::Error)","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" An I/O error occured in the underlying `Write` instance.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":144764,"byte_end":144791,"line_start":24,"line_end":24,"column_start":5,"column_end":32},"name":"DocumentStartAlreadyEmitted","qualname":"::writer::emitter::EmitterError::DocumentStartAlreadyEmitted","value":"EmitterError::DocumentStartAlreadyEmitted","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" Document declaration has already been written to the output stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":144861,"byte_end":144888,"line_start":27,"line_end":27,"column_start":5,"column_end":32},"name":"LastElementNameNotAvailable","qualname":"::writer::emitter::EmitterError::LastElementNameNotAvailable","value":"EmitterError::LastElementNameNotAvailable","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" The name of the last opening element is not available.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145006,"byte_end":145052,"line_start":31,"line_end":31,"column_start":5,"column_end":51},"name":"EndElementNameIsNotEqualToLastStartElementName","qualname":"::writer::emitter::EmitterError::EndElementNameIsNotEqualToLastStartElementName","value":"EmitterError::EndElementNameIsNotEqualToLastStartElementName","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" The name of the last opening element is not equal to the name of the provided\n closing element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145197,"byte_end":145225,"line_start":35,"line_end":35,"column_start":5,"column_end":33},"name":"EndElementNameIsNotSpecified","qualname":"::writer::emitter::EmitterError::EndElementNameIsNotSpecified","value":"EmitterError::EndElementNameIsNotSpecified","parent":{"krate":0,"index":1318},"children":[],"decl_id":null,"docs":" End element name is not specified when it is needed, for example, when automatic\n closing is not enabled in configuration.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":144584,"byte_end":144596,"line_start":19,"line_end":19,"column_start":10,"column_end":22},"name":"EmitterError","qualname":"::writer::emitter::EmitterError","value":"EmitterError::{Io, DocumentStartAlreadyEmitted, LastElementNameNotAvailable, EndElementNameIsNotEqualToLastStartElementName, EndElementNameIsNotSpecified}","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1328}],"decl_id":null,"docs":" An error which may be returned by `XmlWriter` when writing XML events.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":146467,"byte_end":146473,"line_start":76,"line_end":76,"column_start":10,"column_end":16},"name":"Result","qualname":"::writer::emitter::Result","value":"result::Result<T, EmitterError>","parent":null,"children":[],"decl_id":null,"docs":" A result type yielded by `XmlWriter`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":158382,"byte_end":158395,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"EmitterConfig","qualname":"::writer::config::EmitterConfig","value":"EmitterConfig { line_separator, indent_string, perform_indent, perform_escaping, write_document_declaration, normalize_empty_elements, cdata_to_characters, keep_element_names_stack, autopad_comments }","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359}],"decl_id":null,"docs":" Emitter configuration structure.\n\n This structure contains various options which control XML document emitter behavior.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":158492,"byte_end":158506,"line_start":14,"line_end":14,"column_start":9,"column_end":23},"name":"line_separator","qualname":"::writer::config::EmitterConfig::line_separator","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Line separator used to separate lines in formatted output. Default is `\"\\n\"`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":158647,"byte_end":158660,"line_start":18,"line_end":18,"column_start":9,"column_end":22},"name":"indent_string","qualname":"::writer::config::EmitterConfig::indent_string","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" A string which will be used for a single level of indentation. Default is `\"  \"`\n (two spaces).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":159258,"byte_end":159272,"line_start":29,"line_end":29,"column_start":9,"column_end":23},"name":"perform_indent","qualname":"::writer::config::EmitterConfig::perform_indent","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not the emitted document should be indented. Default is false.\n\n The emitter is capable to perform automatic indentation of the emitted XML document.\n It is done in stream-like fashion and does not require the knowledge of the whole\n document in advance.\n\n Sometimes, however, automatic indentation is undesirable, e.g. when you want to keep\n existing layout when processing an existing XML document. Also the indentiation algorithm\n is not thoroughly tested. Hence by default it is disabled.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1354},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":159861,"byte_end":159877,"line_start":40,"line_end":40,"column_start":9,"column_end":25},"name":"perform_escaping","qualname":"::writer::config::EmitterConfig::perform_escaping","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not characters in output events will be escaped. Default is true.\n\n The emitter can automatically escape characters which can't appear in PCDATA sections\n or element attributes of an XML document, like `<` or `\"` (in attributes). This may\n introduce some overhead because then every corresponding piece of character data\n should be scanned for invalid characters.\n\n If this option is disabled, the XML writer may produce non-well-formed documents, so\n use `false` value for this option with care.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":160197,"byte_end":160223,"line_start":47,"line_end":47,"column_start":9,"column_end":35},"name":"write_document_declaration","qualname":"::writer::config::EmitterConfig::write_document_declaration","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not to write XML document declaration at the beginning of a document.\n Default is true.\n\n This option controls whether the document declaration should be emitted automatically\n before a root element is written if it was not emitted explicitly by the user.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":160478,"byte_end":160502,"line_start":53,"line_end":53,"column_start":9,"column_end":33},"name":"normalize_empty_elements","qualname":"::writer::config::EmitterConfig::normalize_empty_elements","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not to convert elements with empty content to empty elements. Default is true.\n\n This option allows turning elements like `<a></a>` (an element with empty content)\n into `<a />` (an empty element).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":160878,"byte_end":160897,"line_start":60,"line_end":60,"column_start":9,"column_end":28},"name":"cdata_to_characters","qualname":"::writer::config::EmitterConfig::cdata_to_characters","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not to emit CDATA events as plain characters. Default is false.\n\n This option forces the emitter to convert CDATA events into regular character events,\n performing all the necessary escaping beforehand. This may be occasionally useful\n for feeding the document into incorrect parsers which do not support CDATA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":161234,"byte_end":161258,"line_start":67,"line_end":67,"column_start":9,"column_end":33},"name":"keep_element_names_stack","qualname":"::writer::config::EmitterConfig::keep_element_names_stack","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not to keep element names to support `EndElement` events without explicit names.\n Default is true.\n\n This option makes the emitter to keep names of written elements in order to allow\n omitting names when writing closing element tags. This could incur some memory overhead.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":161635,"byte_end":161651,"line_start":75,"line_end":75,"column_start":9,"column_end":25},"name":"autopad_comments","qualname":"::writer::config::EmitterConfig::autopad_comments","value":"bool","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Whether or not to automatically insert leading and trailing spaces in emitted comments,\n if necessary. Default is true.\n\n This is a convenience option in order for the user not to append spaces before and after\n comments text in order to get more pretty comments: `<!-- something -->` instead of\n `<!--something-->`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":162085,"byte_end":162088,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<EmitterConfig>::new","value":"fn () -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Creates an emitter configuration with default values.\n\n You can tweak default options with builder-like pattern:\n\n ```rust\n use xml::writer::EmitterConfig;\n\n let config = EmitterConfig::new()\n     .line_separator(\"\\r\\n\")\n     .perform_indent(true)\n     .normalize_empty_elements(false);\n ```\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":162064,"byte_end":162073,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163178,"byte_end":163191,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"create_writer","qualname":"<EmitterConfig>::create_writer","value":"fn <W> (self, sink: W) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML writer with this configuration.\n\n This is a convenience method for configuring and creating a writer at the same time:\n\n ```rust\n use xml::writer::EmitterConfig;\n\n let mut target: Vec<u8> = Vec::new();\n\n let writer = EmitterConfig::new()\n     .line_separator(\"\\r\\n\")\n     .perform_indent(true)\n     .normalize_empty_elements(false)\n     .create_writer(&mut target);\n ```\n\n This method is exactly equivalent to calling `EventWriter::new_with_config()` with\n this configuration object.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163157,"byte_end":163166,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163448,"byte_end":163462,"line_start":138,"line_end":138,"column_start":5,"column_end":19},"name":"line_separator","qualname":"<EmitterConfig>::line_separator","value":"fn <T> (mut self, value: T) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163492,"byte_end":163505,"line_start":139,"line_end":139,"column_start":5,"column_end":18},"name":"indent_string","qualname":"<EmitterConfig>::indent_string","value":"fn <T> (mut self, value: T) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163535,"byte_end":163549,"line_start":140,"line_end":140,"column_start":5,"column_end":19},"name":"perform_indent","qualname":"<EmitterConfig>::perform_indent","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163565,"byte_end":163591,"line_start":141,"line_end":141,"column_start":5,"column_end":31},"name":"write_document_declaration","qualname":"<EmitterConfig>::write_document_declaration","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163607,"byte_end":163631,"line_start":142,"line_end":142,"column_start":5,"column_end":29},"name":"normalize_empty_elements","qualname":"<EmitterConfig>::normalize_empty_elements","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163647,"byte_end":163666,"line_start":143,"line_end":143,"column_start":5,"column_end":24},"name":"cdata_to_characters","qualname":"<EmitterConfig>::cdata_to_characters","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163682,"byte_end":163706,"line_start":144,"line_end":144,"column_start":5,"column_end":29},"name":"keep_element_names_stack","qualname":"<EmitterConfig>::keep_element_names_stack","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163722,"byte_end":163738,"line_start":145,"line_end":145,"column_start":5,"column_end":21},"name":"autopad_comments","qualname":"<EmitterConfig>::autopad_comments","value":"fn (mut self, value: bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"events","qualname":"::writer::events","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":1389},{"krate":0,"index":1413},{"krate":0,"index":778},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":805},{"krate":0,"index":814}],"decl_id":null,"docs":" Contains `XmlEvent` datatype, instances of which are consumed by the writer.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":164475,"byte_end":164488,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"StartDocument","qualname":"::writer::events::XmlEvent::StartDocument","value":"XmlEvent::StartDocument { version, encoding, standalone }","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Corresponds to XML document declaration.\n\n This event should always be written before any other event. If it is not written\n at all, a default XML declaration will be outputted if the corresponding option\n is set in the configuration. Otherwise an error will be returned.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":164907,"byte_end":164928,"line_start":39,"line_end":39,"column_start":5,"column_end":26},"name":"ProcessingInstruction","qualname":"::writer::events::XmlEvent::ProcessingInstruction","value":"XmlEvent::ProcessingInstruction { name, data }","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes an XML processing instruction.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":165131,"byte_end":165143,"line_start":48,"line_end":48,"column_start":5,"column_end":17},"name":"StartElement","qualname":"::writer::events::XmlEvent::StartElement","value":"XmlEvent::StartElement { name, attributes, namespace }","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes a beginning of an XML element.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":165982,"byte_end":165992,"line_start":68,"line_end":68,"column_start":5,"column_end":15},"name":"EndElement","qualname":"::writer::events::XmlEvent::EndElement","value":"XmlEvent::EndElement { name }","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes an end of an XML element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":166478,"byte_end":166483,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"name":"CData","qualname":"::writer::events::XmlEvent::CData","value":"XmlEvent::CData(&'a str)","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes CDATA content.\n\n This event contains unparsed data, and no escaping will be performed when writing it\n to the output stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":166649,"byte_end":166656,"line_start":87,"line_end":87,"column_start":5,"column_end":12},"name":"Comment","qualname":"::writer::events::XmlEvent::Comment","value":"XmlEvent::Comment(&'a str)","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes a comment.\n\n The string will be checked for invalid sequences and error will be returned by the\n write operation\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":166903,"byte_end":166913,"line_start":93,"line_end":93,"column_start":5,"column_end":15},"name":"Characters","qualname":"::writer::events::XmlEvent::Characters","value":"XmlEvent::Characters(&'a str)","parent":{"krate":0,"index":1389},"children":[],"decl_id":null,"docs":" Denotes character data outside of tags.\n\n Contents of this event will be escaped if `perform_escaping` option is enabled,\n that is, every character invalid for PCDATA will appear as a character entity.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":164148,"byte_end":164156,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"XmlEvent","qualname":"::writer::events::XmlEvent","value":"XmlEvent::{StartDocument, ProcessingInstruction, StartElement, EndElement, CData, Comment, Characters}","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410}],"decl_id":null,"docs":" A part of an XML output stream.\n\n Objects of this enum are consumed by `EventWriter`. They correspond to different parts of\n an XML document.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167037,"byte_end":167059,"line_start":99,"line_end":99,"column_start":12,"column_end":34},"name":"processing_instruction","qualname":"<XmlEvent>::processing_instruction","value":"fn (name: &'a str, data: Option<&'a str>) -> XmlEvent<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an writer event for a processing instruction.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167016,"byte_end":167025,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167379,"byte_end":167392,"line_start":108,"line_end":108,"column_start":12,"column_end":25},"name":"start_element","qualname":"<XmlEvent>::start_element","value":"fn <S> (name: S) -> StartElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder for a starting element.\n\n This builder can then be used to tweak attributes and namespace starting at\n this element.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167358,"byte_end":167367,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167977,"byte_end":167988,"line_start":122,"line_end":122,"column_start":12,"column_end":23},"name":"end_element","qualname":"<XmlEvent>::end_element","value":"fn () -> EndElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder for an closing element.\n\n This method, unline `start_element()`, does not accept a name because by default\n the writer is able to determine it automatically. However, when this functionality\n is disabled, it is possible to specify the name with `name()` method on the builder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":167956,"byte_end":167965,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168266,"byte_end":168271,"line_start":131,"line_end":131,"column_start":12,"column_end":17},"name":"cdata","qualname":"<XmlEvent>::cdata","value":"fn (data: &'a str) -> XmlEvent<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a CDATA event.\n\n Naturally, the provided string won't be escaped, except for closing CDATA token `]]>`\n (depending on the configuration).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168245,"byte_end":168254,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168506,"byte_end":168516,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"characters","qualname":"<XmlEvent>::characters","value":"fn (data: &'a str) -> XmlEvent<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a regular characters (PCDATA) event.\n\n All offending symbols, in particular, `&` and `<`, will be escaped by the writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168485,"byte_end":168494,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168638,"byte_end":168645,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"comment","qualname":"<XmlEvent>::comment","value":"fn (data: &'a str) -> XmlEvent<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a comment event.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168617,"byte_end":168626,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168846,"byte_end":168863,"line_start":149,"line_end":149,"column_start":12,"column_end":29},"name":"EndElementBuilder","qualname":"::writer::events::EndElementBuilder","value":"EndElementBuilder {  }","parent":null,"children":[{"krate":0,"index":792}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169385,"byte_end":169389,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"name","qualname":"<EndElementBuilder>::name","value":"fn <N> (mut self, name: N) -> EndElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Sets the name of this closing element.\n\n Usually the writer is able to determine closing element names automatically. If\n this functionality is enabled (by default it is), then this name is checked for correctness.\n It is possible, however, to disable such behavior; then the user must ensure that\n closing element name is correct manually.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169364,"byte_end":169373,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169746,"byte_end":169765,"line_start":175,"line_end":175,"column_start":12,"column_end":31},"name":"StartElementBuilder","qualname":"::writer::events::StartElementBuilder","value":"StartElementBuilder {  }","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804}],"decl_id":null,"docs":" A builder for a starting element event.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":170527,"byte_end":170531,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"attr","qualname":"<StartElementBuilder>::attr","value":"fn <N> (mut self, name: N, value: &'a str) -> StartElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Sets an attribute value of this element to the given string.\n\n This method can be used to add attributes to the starting element. Name is a qualified\n name; its namespace is ignored, but its prefix is checked for correctness, that is,\n it is checked that the prefix is bound to some namespace in the current context.\n\n Currently attributes are not checked for duplicates. Note that duplicate attributes\n are a violation of XML document well-formedness.\n\n The writer checks that you don't specify reserved prefix names, for example `xmlns`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":170506,"byte_end":170515,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":171430,"byte_end":171432,"line_start":213,"line_end":213,"column_start":12,"column_end":14},"name":"ns","qualname":"<StartElementBuilder>::ns","value":"fn <S1, S2> (mut self, prefix: S1, uri: S2) -> StartElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Adds a namespace to the current namespace context.\n\n If no namespace URI was bound to the provided prefix at this point of the document,\n then the mapping from the prefix to the provided namespace URI will be written as\n a part of this element attribute set.\n\n If the same namespace URI was bound to the provided prefix at this point of the document,\n then no namespace attributes will be emitted.\n\n If some other namespace URI was bound to the provided prefix at this point of the document,\n then another binding will be added as a part of this element attribute set, shadowing\n the outer binding.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":171409,"byte_end":171418,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":171806,"byte_end":171816,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"default_ns","qualname":"<StartElementBuilder>::default_ns","value":"fn <S> (mut self, uri: S) -> StartElementBuilder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Adds a default namespace mapping to the current namespace context.\n\n Same rules as for `ns()` are also valid for the default namespace mapping.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":171785,"byte_end":171794,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140852,"byte_end":140863,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"EventWriter","qualname":"::writer::EventWriter","value":"EventWriter {  }","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"decl_id":null,"docs":" A wrapper around an `std::io::Write` instance which emits XML document according to provided\n events.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":141076,"byte_end":141079,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<EventWriter<W>>::new","value":"fn (sink: W) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `EventWriter` out of an `std::io::Write` instance using the default\n configuration.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":141055,"byte_end":141064,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":141320,"byte_end":141335,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"new_with_config","qualname":"<EventWriter<W>>::new_with_config","value":"fn (sink: W, config: EmitterConfig) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `EventWriter` out of an `std::io::Write` instance using the provided\n configuration.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":141299,"byte_end":141308,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":141957,"byte_end":141962,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"write","qualname":"<EventWriter<W>>::write","value":"fn <'a, E> (&mut self, event: E) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the next piece of XML document according to the provided event.\n\n Note that output data may not exactly correspond to the written event because\n of various configuration options. For example, `XmlEvent::EndElement` may\n correspond to a separate closing element or it may cause writing an empty element.\n Another example is that `XmlEvent::CData` may be represented as characters in\n the output stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":143645,"byte_end":143654,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<EventWriter<W>>::inner_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying `Writer`.\n\n Note that having a reference to the underlying sink makes it very easy to emit invalid XML\n documents. Use this method with care. Valid use cases for this method include accessing\n methods like `Write::flush`, which do not emit new data but rather change the state\n of the stream itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":144041,"byte_end":144051,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EventWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `EventWriter`, returning the underlying writer.\n\n Note that this is a destructive operation: unwrapping a writer and then wrapping\n it again with `EventWriter::new()` will create a fresh writer whose state will be\n blank; for example, accumulated namespaces will be reset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172377,"byte_end":172390,"line_start":7,"line_end":7,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::util::CharReadError::UnexpectedEof","value":"CharReadError::UnexpectedEof","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172396,"byte_end":172400,"line_start":8,"line_end":8,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::util::CharReadError::Utf8","value":"CharReadError::Utf8(str::Utf8Error)","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172422,"byte_end":172424,"line_start":9,"line_end":9,"column_start":5,"column_end":7},"name":"Io","qualname":"::util::CharReadError::Io","value":"CharReadError::Io(io::Error)","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172357,"byte_end":172370,"line_start":6,"line_end":6,"column_start":10,"column_end":23},"name":"CharReadError","qualname":"::util::CharReadError","value":"CharReadError::{UnexpectedEof, Utf8, Io}","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1422}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3653,"byte_end":3657,"line_start":59,"line_end":59,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4010,"byte_end":4014,"line_start":70,"line_end":70,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4155,"byte_end":4159,"line_start":76,"line_end":76,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4484,"byte_end":4488,"line_start":90,"line_end":90,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6703,"byte_end":6714,"line_start":160,"line_end":160,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7419,"byte_end":7428,"line_start":184,"line_end":184,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7563,"byte_end":7572,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9148,"byte_end":9157,"line_start":239,"line_end":239,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9261,"byte_end":9270,"line_start":246,"line_end":246,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11658,"byte_end":11667,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11827,"byte_end":11836,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12595,"byte_end":12609,"line_start":56,"line_end":56,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":13127,"byte_end":13141,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14065,"byte_end":14077,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14805,"byte_end":14817,"line_start":42,"line_end":42,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14982,"byte_end":14994,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15429,"byte_end":15441,"line_start":64,"line_end":64,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15716,"byte_end":15726,"line_start":81,"line_end":81,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15958,"byte_end":15968,"line_start":90,"line_end":90,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":17975,"byte_end":17980,"line_start":10,"line_end":10,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":18662,"byte_end":18669,"line_start":38,"line_end":38,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":19520,"byte_end":19527,"line_start":65,"line_end":65,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24156,"byte_end":24165,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28066,"byte_end":28080,"line_start":190,"line_end":190,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33866,"byte_end":33888,"line_start":367,"line_end":367,"column_start":10,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":34098,"byte_end":34120,"line_start":374,"line_end":374,"column_start":23,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":35771,"byte_end":35780,"line_start":423,"line_end":423,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":35999,"byte_end":36013,"line_start":431,"line_end":431,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":37366,"byte_end":37379,"line_start":479,"line_end":479,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":42610,"byte_end":42615,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":43962,"byte_end":43967,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":48735,"byte_end":48740,"line_start":227,"line_end":227,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":48886,"byte_end":48891,"line_start":233,"line_end":233,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":340},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\outside_tag.rs","byte_start":91913,"byte_end":91923,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_processing_instruction.rs","byte_start":97678,"byte_end":97688,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_declaration.rs","byte_start":101858,"byte_end":101868,"line_start":12,"line_end":12,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_doctype.rs","byte_start":108946,"byte_end":108956,"line_start":5,"line_end":5,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_opening_tag.rs","byte_start":109428,"byte_end":109438,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_closing_tag_name.rs","byte_start":115270,"byte_end":115280,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_comment.rs","byte_start":116845,"byte_end":116855,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_cdata.rs","byte_start":117860,"byte_end":117870,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_reference.rs","byte_start":118790,"byte_end":118800,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":73660,"byte_end":73670,"line_start":90,"line_end":90,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":74849,"byte_end":74859,"line_start":128,"line_end":128,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":76336,"byte_end":76346,"line_start":208,"line_end":208,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":77473,"byte_end":77483,"line_start":240,"line_end":240,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":125696,"byte_end":125708,"line_start":80,"line_end":80,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":127907,"byte_end":127919,"line_start":150,"line_end":150,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":132506,"byte_end":132514,"line_start":117,"line_end":117,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":134138,"byte_end":134146,"line_start":152,"line_end":152,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137627,"byte_end":137632,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137770,"byte_end":137775,"line_start":34,"line_end":34,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137852,"byte_end":137857,"line_start":39,"line_end":39,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138350,"byte_end":138355,"line_start":55,"line_end":55,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138460,"byte_end":138465,"line_start":60,"line_end":60,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138710,"byte_end":138715,"line_start":69,"line_end":69,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139112,"byte_end":139117,"line_start":83,"line_end":83,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139280,"byte_end":139289,"line_start":92,"line_end":92,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139661,"byte_end":139670,"line_start":103,"line_end":103,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":140210,"byte_end":140219,"line_start":119,"line_end":119,"column_start":13,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38315,"byte_end":38326,"line_start":33,"line_end":33,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39618,"byte_end":39629,"line_start":68,"line_end":68,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39832,"byte_end":39843,"line_start":76,"line_end":76,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40352,"byte_end":40358,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40678,"byte_end":40684,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":41119,"byte_end":41130,"line_start":123,"line_end":123,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145254,"byte_end":145266,"line_start":38,"line_end":38,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145376,"byte_end":145388,"line_start":44,"line_end":44,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145742,"byte_end":145754,"line_start":58,"line_end":58,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":146895,"byte_end":146902,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":147395,"byte_end":147402,"line_start":119,"line_end":119,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":161667,"byte_end":161680,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163312,"byte_end":163325,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":166935,"byte_end":166943,"line_start":96,"line_end":96,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168735,"byte_end":168743,"line_start":144,"line_end":144,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168952,"byte_end":168969,"line_start":154,"line_end":154,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169565,"byte_end":169573,"line_start":168,"line_end":168,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169865,"byte_end":169884,"line_start":181,"line_end":181,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":172013,"byte_end":172021,"line_start":232,"line_end":232,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140921,"byte_end":140932,"line_start":26,"line_end":26,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172469,"byte_end":172482,"line_start":12,"line_end":12,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172600,"byte_end":172613,"line_start":18,"line_end":18,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172721,"byte_end":172734,"line_start":24,"line_end":24,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":315,"byte_end":321,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":331,"byte_end":335,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":345,"byte_end":354,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":364,"byte_end":370,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":86}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":380,"byte_end":386,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":109}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":396,"byte_end":405,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":141}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":415,"byte_end":421,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":243}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src/lib.rs","byte_start":431,"byte_end":437,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":662}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140723,"byte_end":140729,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":770}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":3653,"byte_end":3657,"line_start":59,"line_end":59,"column_start":28,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":847},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4010,"byte_end":4014,"line_start":70,"line_end":70,"column_start":39,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":847},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4155,"byte_end":4159,"line_start":76,"line_end":76,"column_start":27,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":847},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":4484,"byte_end":4488,"line_start":90,"line_end":90,"column_start":10,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":6703,"byte_end":6714,"line_start":160,"line_end":160,"column_start":34,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":34},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7419,"byte_end":7428,"line_start":184,"line_end":184,"column_start":23,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":875},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":7563,"byte_end":7572,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":875},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9148,"byte_end":9157,"line_start":239,"line_end":239,"column_start":29,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":875},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\name.rs","byte_start":9261,"byte_end":9270,"line_start":246,"line_end":246,"column_start":18,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":875},"to":{"krate":2,"index":6815}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11658,"byte_end":11667,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":893},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":11827,"byte_end":11836,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":12595,"byte_end":12609,"line_start":56,"line_end":56,"column_start":6,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\attribute.rs","byte_start":13127,"byte_end":13141,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":920},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14065,"byte_end":14077,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14805,"byte_end":14817,"line_start":42,"line_end":42,"column_start":21,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":937},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":14982,"byte_end":14994,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":937},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15429,"byte_end":15441,"line_start":64,"line_end":64,"column_start":19,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":937},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15716,"byte_end":15726,"line_start":81,"line_end":81,"column_start":23,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\common.rs","byte_start":15958,"byte_end":15968,"line_start":90,"line_end":90,"column_start":21,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":950},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":17975,"byte_end":17980,"line_start":10,"line_end":10,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":18662,"byte_end":18669,"line_start":38,"line_end":38,"column_start":10,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\escape.rs","byte_start":19520,"byte_end":19527,"line_start":65,"line_end":65,"column_start":37,"column_end":44},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":121},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":24156,"byte_end":24165,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":28066,"byte_end":28080,"line_start":190,"line_end":190,"column_start":6,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":33866,"byte_end":33888,"line_start":367,"line_end":367,"column_start":10,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":34098,"byte_end":34120,"line_start":374,"line_end":374,"column_start":23,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":206},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":35771,"byte_end":35780,"line_start":423,"line_end":423,"column_start":37,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":964},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":35999,"byte_end":36013,"line_start":431,"line_end":431,"column_start":37,"column_end":51},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":978},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\namespace.rs","byte_start":37366,"byte_end":37379,"line_start":479,"line_end":479,"column_start":41,"column_end":54},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":234},"to":{"krate":2,"index":3960}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":42610,"byte_end":42615,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":992},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":43962,"byte_end":43967,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":48735,"byte_end":48740,"line_start":227,"line_end":227,"column_start":19,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":300},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\lexer.rs","byte_start":48886,"byte_end":48891,"line_start":233,"line_end":233,"column_start":6,"column_end":11},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\outside_tag.rs","byte_start":91913,"byte_end":91923,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_processing_instruction.rs","byte_start":97678,"byte_end":97688,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_declaration.rs","byte_start":101858,"byte_end":101868,"line_start":12,"line_end":12,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_doctype.rs","byte_start":108946,"byte_end":108956,"line_start":5,"line_end":5,"column_start":6,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_opening_tag.rs","byte_start":109428,"byte_end":109438,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_closing_tag_name.rs","byte_start":115270,"byte_end":115280,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_comment.rs","byte_start":116845,"byte_end":116855,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_cdata.rs","byte_start":117860,"byte_end":117870,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\inside_reference.rs","byte_start":118790,"byte_end":118800,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":73660,"byte_end":73670,"line_start":90,"line_end":90,"column_start":6,"column_end":16},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":74849,"byte_end":74859,"line_start":128,"line_end":128,"column_start":19,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":499},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":76336,"byte_end":76346,"line_start":208,"line_end":208,"column_start":6,"column_end":16},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\parser\\mod.rs","byte_start":77473,"byte_end":77483,"line_start":240,"line_end":240,"column_start":6,"column_end":16},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":125696,"byte_end":125708,"line_start":80,"line_end":80,"column_start":6,"column_end":18},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\config.rs","byte_start":127907,"byte_end":127919,"line_start":150,"line_end":150,"column_start":18,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1224},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":132506,"byte_end":132514,"line_start":117,"line_end":117,"column_start":21,"column_end":29},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1255},"to":{"krate":2,"index":7643}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\events.rs","byte_start":134138,"byte_end":134146,"line_start":152,"line_end":152,"column_start":6,"column_end":14},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137627,"byte_end":137632,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137770,"byte_end":137775,"line_start":34,"line_end":34,"column_start":19,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1304},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":137852,"byte_end":137857,"line_start":39,"line_end":39,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138350,"byte_end":138355,"line_start":55,"line_end":55,"column_start":23,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1304},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138460,"byte_end":138465,"line_start":60,"line_end":60,"column_start":37,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":138710,"byte_end":138715,"line_start":69,"line_end":69,"column_start":36,"column_end":41},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139112,"byte_end":139117,"line_start":83,"line_end":83,"column_start":26,"column_end":31},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1304},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139280,"byte_end":139289,"line_start":92,"line_end":92,"column_start":16,"column_end":25},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":2181}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":139661,"byte_end":139670,"line_start":103,"line_end":103,"column_start":20,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":2040}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\error.rs","byte_start":140210,"byte_end":140219,"line_start":119,"line_end":119,"column_start":13,"column_end":22},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":2045}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":38315,"byte_end":38326,"line_start":33,"line_end":33,"column_start":15,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39618,"byte_end":39629,"line_start":68,"line_end":68,"column_start":28,"column_end":39},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":626},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":39832,"byte_end":39843,"line_start":76,"line_end":76,"column_start":32,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":626},"to":{"krate":2,"index":3951}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40352,"byte_end":40358,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":40678,"byte_end":40684,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":646},"to":{"krate":2,"index":3653}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\reader\\mod.rs","byte_start":41119,"byte_end":41130,"line_start":123,"line_end":123,"column_start":10,"column_end":21},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145254,"byte_end":145266,"line_start":38,"line_end":38,"column_start":26,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1318},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145376,"byte_end":145388,"line_start":44,"line_end":44,"column_start":23,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1318},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":145742,"byte_end":145754,"line_start":58,"line_end":58,"column_start":16,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":1616}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":146895,"byte_end":146902,"line_start":94,"line_end":94,"column_start":6,"column_end":13},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\emitter.rs","byte_start":147395,"byte_end":147402,"line_start":119,"line_end":119,"column_start":6,"column_end":13},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":161667,"byte_end":161680,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\config.rs","byte_start":163312,"byte_end":163325,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1350},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":166935,"byte_end":166943,"line_start":96,"line_end":96,"column_start":10,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168735,"byte_end":168743,"line_start":144,"line_end":144,"column_start":28,"column_end":36},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1389},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":168952,"byte_end":168969,"line_start":154,"line_end":154,"column_start":10,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169565,"byte_end":169573,"line_start":168,"line_end":168,"column_start":42,"column_end":50},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1389},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":169865,"byte_end":169884,"line_start":181,"line_end":181,"column_start":10,"column_end":29},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\events.rs","byte_start":172013,"byte_end":172021,"line_start":232,"line_end":232,"column_start":44,"column_end":52},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1389},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\writer\\mod.rs","byte_start":140921,"byte_end":140932,"line_start":26,"line_end":26,"column_start":16,"column_end":27},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172469,"byte_end":172482,"line_start":12,"line_end":12,"column_start":31,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172600,"byte_end":172613,"line_start":18,"line_end":18,"column_start":26,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\xml-rs-0.8.0\\src\\util.rs","byte_start":172721,"byte_end":172734,"line_start":24,"line_end":24,"column_start":23,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1416},"to":{"krate":2,"index":7648}}]}