{"config":{"output_file":null,"full_docs":true,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4","program":"C:\\Users\\chapm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","zip","C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bzip2\"","-C","metadata=a6da7638ff16a441","-C","extra-filename=-a6da7638ff16a441","--out-dir","c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps","--extern","bzip2=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libbzip2-ecad111e973a27d6.rmeta","--extern","crc32fast=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libcrc32fast-fa772b045600203d.rmeta","--extern","podio=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libpodio-3484319e64d3fdaa.rmeta","--cap-lints","allow","-L","native=c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\build\\bzip2-sys-7712649e481824a9\\out\\lib","--error-format=json","--sysroot","C:\\Users\\chapm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\chapm\\Documents\\Projects\\git\\mosaic\\target\\rls\\debug\\deps\\libzip-a6da7638ff16a441.rmeta"},"prelude":{"crate_id":{"name":"zip","disambiguator":[3645831157033010249,4120314716719594104]},"crate_root":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src","external_crates":[{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[12580338268255904863,12487381105248359217]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4800340595136090738,11980400279241392758]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16293423844334339663,11755502083335674850]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3461810660782397055,13833665689054202598]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12998339428753072936,5307867808309457385]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3374893436585051705,15533137816714572843]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3128393747248474415,2329478791457811584]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6526974580395412454,5976980321596639697]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8056933235965822994,12193290402514539467]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16500325717628480317,8800586121391060646]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","num":14,"id":{"name":"podio","disambiguator":[7783151386493856101,16182283707096306674]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","num":15,"id":{"name":"crc32fast","disambiguator":[14984425738714601369,14028776434072473916]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","num":16,"id":{"name":"cfg_if","disambiguator":[2442249708866091360,16714075183114805585]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","num":17,"id":{"name":"bzip2","disambiguator":[15655670376043437555,6764230511161840000]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","num":18,"id":{"name":"bzip2_sys","disambiguator":[15957281080361489341,14141310249794299824]}},{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","num":19,"id":{"name":"libc","disambiguator":[5464519403103214804,849774347526692301]}}],"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":0,"byte_end":310,"line_start":1,"line_end":17,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":81,"byte_end":91,"line_start":5,"line_end":5,"column_start":22,"column_end":32},"alias_span":null,"name":"ZipArchive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":115,"byte_end":124,"line_start":6,"line_end":6,"column_start":23,"column_end":32},"alias_span":null,"name":"ZipWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":154,"byte_end":171,"line_start":7,"line_end":7,"column_start":29,"column_end":46},"alias_span":null,"name":"CompressionMethod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":195,"byte_end":203,"line_start":8,"line_end":8,"column_start":23,"column_end":31},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":0,"byte_end":310,"line_start":1,"line_end":17,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":59},{"krate":0,"index":76},{"krate":0,"index":99},{"krate":0,"index":185},{"krate":0,"index":192},{"krate":0,"index":275},{"krate":0,"index":291}],"decl_id":null,"docs":" A basic ZipReader/Writer crate\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":36,"byte_end":58,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10398,"byte_end":10406,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::types::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" A DateTime field to be used for storing timestamps in a zip file\n\n This structure does bounds checking to ensure the date is able to be stored in a zip file.\n\n When constructed manually from a date and time, it will also check if the input is sensible\n (e.g. months are from [1, 12]), but when read from a zip some parts may be out of their normal\n bounds (e.g. month 0, or hour 31).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10901,"byte_end":10911,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"from_msdos","qualname":"<DateTime>::from_msdos","value":"fn (datepart: u16, timepart: u16) -> DateTime","parent":null,"children":[],"decl_id":null,"docs":" Converts an msdos (u16, u16) pair to a DateTime object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":11814,"byte_end":11832,"line_start":86,"line_end":86,"column_start":12,"column_end":30},"name":"from_date_and_time","qualname":"<DateTime>::from_date_and_time","value":"fn (year: u16, month: u8, day: u8, hour: u8, minute: u8, second: u8) -> Result<DateTime, ()>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a DateTime from a specific date and time\n\n The bounds are:\n * year: [1980, 2107]\n * month: [1, 12]\n * day: [1, 31]\n * hour: [0, 23]\n * minute: [0, 59]\n * second: [0, 60]\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":13374,"byte_end":13382,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"timepart","qualname":"<DateTime>::timepart","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Gets the time portion of this datetime in the msdos representation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":13587,"byte_end":13595,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"datepart","qualname":"<DateTime>::datepart","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Gets the date portion of this datetime in the msdos representation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14355,"byte_end":14359,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"year","qualname":"<DateTime>::year","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the year. There is no epoch, i.e. 2018 will be returned as 2018.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14471,"byte_end":14476,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"month","qualname":"<DateTime>::month","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the month, where 1 = january and 12 = december\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14549,"byte_end":14552,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"day","qualname":"<DateTime>::day","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the day\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14624,"byte_end":14628,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"hour","qualname":"<DateTime>::hour","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the hour\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14703,"byte_end":14709,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"minute","qualname":"<DateTime>::minute","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the minute\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":14786,"byte_end":14792,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"second","qualname":"<DateTime>::second","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the second\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":360},{"krate":0,"index":370},{"krate":0,"index":367},{"krate":0,"index":122},{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":182}],"decl_id":null,"docs":" Structs for reading a ZIP archive\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":22993,"byte_end":23003,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"ZipArchive","qualname":"::read::ZipArchive","value":"ZipArchive {  }","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366}],"decl_id":null,"docs":" Wrapper for reading the contents of a ZIP file.\n\n ```\n fn doit() -> zip::result::ZipResult<()>\n {\n     use std::io::prelude::*;\n\n     // For demonstration purposes we read from an empty buffer.\n     // Normally a File object would be used.\n     let buf: &[u8] = &[0u8; 128];\n     let mut reader = std::io::Cursor::new(buf);\n\n     let mut zip = zip::ZipArchive::new(reader)?;\n\n     for i in 0..zip.len()\n     {\n         let mut file = zip.by_index(i).unwrap();\n         println!(\"Filename: {}\", file.name());\n         let first_byte = file.bytes().next().unwrap()?;\n         println!(\"{}\", first_byte);\n     }\n     Ok(())\n }\n\n println!(\"Result: {:?}\", doit());\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":23503,"byte_end":23510,"line_start":73,"line_end":73,"column_start":12,"column_end":19},"name":"ZipFile","qualname":"::read::ZipFile","value":"ZipFile {  }","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"decl_id":null,"docs":" A struct for reading a zip file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":28752,"byte_end":28755,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<ZipArchive<R>>::new","value":"fn (mut reader: R) -> ZipResult<ZipArchive<R>>","parent":null,"children":[],"decl_id":null,"docs":" Opens a Zip archive and parses the central directory\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":30303,"byte_end":30306,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"len","qualname":"<ZipArchive<R>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of files contained in this zip.\n\n ```\n fn iter() {\n     let mut zip = zip::ZipArchive::new(std::io::Cursor::new(vec![])).unwrap();\n\n     for i in 0..zip.len() {\n         let mut file = zip.by_index(i).unwrap();\n         // Do something with file i\n     }\n }\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":30635,"byte_end":30641,"line_start":250,"line_end":250,"column_start":12,"column_end":18},"name":"offset","qualname":"<ZipArchive<R>>::offset","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the offset from the beginning of the underlying reader that this zip begins at, in bytes.\n\n Normally this value is zero, but if the zip has arbitrary data prepended to it, then this value will be the size\n of that prepended data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":30736,"byte_end":30743,"line_start":255,"line_end":255,"column_start":12,"column_end":19},"name":"by_name","qualname":"<ZipArchive<R>>::by_name","value":"fn <'a> (&'a mut self, name: &str) -> ZipResult<ZipFile<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Search for a file entry by name\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":31051,"byte_end":31059,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"by_index","qualname":"<ZipArchive<R>>::by_index","value":"fn <'a> (&'a mut self, file_number: usize) -> ZipResult<ZipFile<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Get a contained file by index\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":32485,"byte_end":32495,"line_start":298,"line_end":298,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZipArchive<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap and return the inner reader object\n\n The position of the reader is undefined.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":37484,"byte_end":37499,"line_start":432,"line_end":432,"column_start":12,"column_end":27},"name":"version_made_by","qualname":"<ZipFile>::version_made_by","value":"fn (&self) -> (u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Get the version of the file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":37644,"byte_end":37648,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"name","qualname":"<ZipFile>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":37790,"byte_end":37798,"line_start":440,"line_end":440,"column_start":12,"column_end":20},"name":"name_raw","qualname":"<ZipFile>::name_raw","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the file, in the raw (internal) byte representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38022,"byte_end":38036,"line_start":445,"line_end":445,"column_start":12,"column_end":26},"name":"sanitized_name","qualname":"<ZipFile>::sanitized_name","value":"fn (&self) -> ::std::path::PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the file in a sanitized form. It truncates the name to the first NULL byte,\n removes a leading '/' and removes '..' parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38163,"byte_end":38170,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"name":"comment","qualname":"<ZipFile>::comment","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the comment of the file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38296,"byte_end":38307,"line_start":453,"line_end":453,"column_start":12,"column_end":23},"name":"compression","qualname":"<ZipFile>::compression","value":"fn (&self) -> CompressionMethod","parent":null,"children":[],"decl_id":null,"docs":" Get the compression method used to store the file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38440,"byte_end":38455,"line_start":457,"line_end":457,"column_start":12,"column_end":27},"name":"compressed_size","qualname":"<ZipFile>::compressed_size","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the file in the archive\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38574,"byte_end":38578,"line_start":461,"line_end":461,"column_start":12,"column_end":16},"name":"size","qualname":"<ZipFile>::size","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the file when uncompressed\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38696,"byte_end":38709,"line_start":465,"line_end":465,"column_start":12,"column_end":25},"name":"last_modified","qualname":"<ZipFile>::last_modified","value":"fn (&self) -> DateTime","parent":null,"children":[],"decl_id":null,"docs":" Get the time the file was last modified\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":38842,"byte_end":38848,"line_start":469,"line_end":469,"column_start":12,"column_end":18},"name":"is_dir","qualname":"<ZipFile>::is_dir","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the file is actually a directory\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":39016,"byte_end":39023,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"is_file","qualname":"<ZipFile>::is_file","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the file is a regular file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":39116,"byte_end":39125,"line_start":477,"line_end":477,"column_start":12,"column_end":21},"name":"unix_mode","qualname":"<ZipFile>::unix_mode","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Get unix mode for the file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":39983,"byte_end":39988,"line_start":503,"line_end":503,"column_start":12,"column_end":17},"name":"crc32","qualname":"<ZipFile>::crc32","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the CRC32 hash of the original file\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":40114,"byte_end":40124,"line_start":508,"line_end":508,"column_start":12,"column_end":22},"name":"data_start","qualname":"<ZipFile>::data_start","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the starting offset of the data of the compressed file\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":42393,"byte_end":42417,"line_start":564,"line_end":564,"column_start":8,"column_end":32},"name":"read_zipfile_from_stream","qualname":"::read::read_zipfile_from_stream","value":"fn <'a, R> (reader: &'a mut R) -> ZipResult<Option<ZipFile<'_>>>","parent":null,"children":[],"decl_id":null,"docs":" Read ZipFile structures from a non-seekable reader.\n\n This is an alternative method to read a zip file. If possible, use the ZipArchive functions\n as some information will be missing when reading this manner.\n\n Reads a file header from the start of the stream. Will return `Ok(Some(..))` if a file is\n present at the start of the stream. Returns `Ok(None)` if the start of the central directory\n is encountered. No more files should be read after this.\n\n The Drop implementation of ZipFile ensures that the reader will be correctly positioned after\n the structure is done.\n\n Missing fields are:\n * `comment`: set to an empty string\n * `data_start`: set to 0\n * `external_attributes`: `unix_mode()`: will return None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":48925,"byte_end":48931,"line_start":10,"line_end":10,"column_start":5,"column_end":11},"name":"Stored","qualname":"::compression::CompressionMethod::Stored","value":"CompressionMethod::Stored","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" The file is stored (no compression)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49091,"byte_end":49096,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Bzip2","qualname":"::compression::CompressionMethod::Bzip2","value":"CompressionMethod::Bzip2","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" File is compressed using BZIP2 algorithm\n","sig":null,"attributes":[{"value":"cfg(feature = \"bzip2\")","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49061,"byte_end":49086,"line_start":15,"line_end":15,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49141,"byte_end":49152,"line_start":18,"line_end":18,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::compression::CompressionMethod::Unsupported","value":"CompressionMethod::Unsupported(u16)","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Unsupported compression method\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":48857,"byte_end":48874,"line_start":7,"line_end":7,"column_start":10,"column_end":27},"name":"CompressionMethod","qualname":"::compression::CompressionMethod","value":"CompressionMethod::{Stored, Bzip2, Unsupported}","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378}],"decl_id":null,"docs":" Compression methods for the contents of a ZIP file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49261,"byte_end":49269,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"from_u16","qualname":"<CompressionMethod>::from_u16","value":"fn (val: u16) -> CompressionMethod","parent":null,"children":[],"decl_id":null,"docs":" Converts an u16 to its corresponding CompressionMethod\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49661,"byte_end":49667,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"to_u16","qualname":"<CompressionMethod>::to_u16","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a CompressionMethod to a u16\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":222},{"krate":0,"index":390},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":402},{"krate":0,"index":400},{"krate":0,"index":228},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274}],"decl_id":null,"docs":" Structs for creating a new zip archive\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":52927,"byte_end":52936,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"ZipWriter","qualname":"::write::ZipWriter","value":"ZipWriter {  }","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Generator for ZIP files.\n\n ```\n fn doit() -> zip::result::ZipResult<()>\n {\n     use std::io::Write;\n\n     // For this example we write to a buffer, but normally you should use a File\n     let mut buf: &mut [u8] = &mut [0u8; 65536];\n     let mut w = std::io::Cursor::new(buf);\n     let mut zip = zip::ZipWriter::new(w);\n\n     let options = zip::write::FileOptions::default().compression_method(zip::CompressionMethod::Stored);\n     zip.start_file(\"hello_world.txt\", options)?;\n     zip.write(b\"Hello, World!\")?;\n\n     // Optionally finish the zip. (this is also done on drop)\n     zip.finish()?;\n\n     Ok(())\n }\n\n println!(\"Result: {:?}\", doit().unwrap());\n ```\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":53256,"byte_end":53267,"line_start":72,"line_end":72,"column_start":12,"column_end":23},"name":"FileOptions","qualname":"::write::FileOptions","value":"FileOptions {  }","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"decl_id":null,"docs":" Metadata for a file to be written\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":53453,"byte_end":53460,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"default","qualname":"<FileOptions>::default","value":"fn () -> FileOptions","parent":null,"children":[],"decl_id":null,"docs":" Construct a new FileOptions object\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":54195,"byte_end":54213,"line_start":95,"line_end":95,"column_start":12,"column_end":30},"name":"compression_method","qualname":"<FileOptions>::compression_method","value":"fn (mut self, method: CompressionMethod) -> FileOptions","parent":null,"children":[],"decl_id":null,"docs":" Set the compression method for the new file\n\n The default is `CompressionMethod::Deflated`. If the deflate compression feature is\n disabled, `CompressionMethod::Stored` becomes the default.\n otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":54496,"byte_end":54514,"line_start":104,"line_end":104,"column_start":12,"column_end":30},"name":"last_modified_time","qualname":"<FileOptions>::last_modified_time","value":"fn (mut self, mod_time: DateTime) -> FileOptions","parent":null,"children":[],"decl_id":null,"docs":" Set the last modified time\n\n The default is the current timestamp if the 'time' feature is enabled, and 1980-01-01\n otherwise\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":54892,"byte_end":54908,"line_start":114,"line_end":114,"column_start":12,"column_end":28},"name":"unix_permissions","qualname":"<FileOptions>::unix_permissions","value":"fn (mut self, mode: u32) -> FileOptions","parent":null,"children":[],"decl_id":null,"docs":" Set the permissions for the new file.\n\n The format is represented with unix-style permissions.\n The default is `0o644`, which represents `rw-r--r--` for files,\n and `0o755`, which represents `rwxr-xr-x` for directories\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":56326,"byte_end":56329,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<ZipWriter<W>>::new","value":"fn (inner: W) -> ZipWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Initializes the ZipWriter.\n\n Before writing to this object, the start_file command should be called.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":58907,"byte_end":58917,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"start_file","qualname":"<ZipWriter<W>>::start_file","value":"fn <S> (&mut self, name: S, mut options: FileOptions) -> ZipResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Starts a file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":59510,"byte_end":59530,"line_start":267,"line_end":267,"column_start":12,"column_end":32},"name":"start_file_from_path","qualname":"<ZipWriter<W>>::start_file_from_path","value":"fn (&mut self, path: &std::path::Path, options: FileOptions) -> ZipResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Starts a file, taking a Path as argument.\n\n This function ensures that the '/' path seperator is used. It also ignores all non 'Normal'\n Components, such as a starting '/' or '..' and '.'.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":59772,"byte_end":59785,"line_start":274,"line_end":274,"column_start":12,"column_end":25},"name":"add_directory","qualname":"<ZipWriter<W>>::add_directory","value":"fn <S> (&mut self, name: S, mut options: FileOptions) -> ZipResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a directory entry.\n\n You can't write data to the file afterwards.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":60747,"byte_end":60770,"line_start":299,"line_end":299,"column_start":12,"column_end":35},"name":"add_directory_from_path","qualname":"<ZipWriter<W>>::add_directory_from_path","value":"fn (&mut self, path: &std::path::Path, options: FileOptions) -> ZipResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a directory entry, taking a Path as argument.\n\n This function ensures that the '/' path seperator is used. It also ignores all non 'Normal'\n Components, such as a starting '/' or '..' and '.'.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":61168,"byte_end":61174,"line_start":307,"line_end":307,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZipWriter<W>>::finish","value":"fn (&mut self) -> ZipResult<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish the last file and write all other zip-structures\n\n This will return the writer, but one should normally not append any data to the end of the file.\n Note that the zipfile will also be finished on drop.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\cp437.rs","byte_start":72623,"byte_end":72629,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Target","qualname":"::cp437::FromCp437::Target","value":"type Target;","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Target type\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":403},{"krate":0,"index":415},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305},{"krate":0,"index":307}],"decl_id":null,"docs":" Error types that can be emitted from this library\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77615,"byte_end":77624,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ZipResult","qualname":"::result::ZipResult","value":"Result<T, ZipError>","parent":null,"children":[],"decl_id":null,"docs":" Generic result type with ZipError as its error variant\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77747,"byte_end":77749,"line_start":16,"line_end":16,"column_start":5,"column_end":7},"name":"Io","qualname":"::result::ZipError::Io","value":"ZipError::Io(io::Error)","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" An Error caused by I/O\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77815,"byte_end":77829,"line_start":19,"line_end":19,"column_start":5,"column_end":19},"name":"InvalidArchive","qualname":"::result::ZipError::InvalidArchive","value":"ZipError::InvalidArchive(&'static str)","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" This file is probably not a zip archive\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77888,"byte_end":77906,"line_start":22,"line_end":22,"column_start":5,"column_end":23},"name":"UnsupportedArchive","qualname":"::result::ZipError::UnsupportedArchive","value":"ZipError::UnsupportedArchive(&'static str)","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" This archive is not supported\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77988,"byte_end":78000,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"FileNotFound","qualname":"::result::ZipError::FileNotFound","value":"ZipError::FileNotFound","parent":{"krate":0,"index":403},"children":[],"decl_id":null,"docs":" The requested file could not be found in the archive\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":77701,"byte_end":77709,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"ZipError","qualname":"::result::ZipError","value":"ZipError::{Io, InvalidArchive, UnsupportedArchive, FileNotFound}","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413}],"decl_id":null,"docs":" Error type for Zip\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":1060,"byte_end":1079,"line_start":23,"line_end":23,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":4834,"byte_end":4865,"line_start":109,"line_end":109,"column_start":6,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":6138,"byte_end":6162,"line_start":144,"line_end":144,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","byte_start":8667,"byte_end":8678,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","byte_start":9150,"byte_end":9161,"line_start":39,"line_end":39,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":9752,"byte_end":9758,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10534,"byte_end":10542,"line_start":43,"line_end":43,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10816,"byte_end":10824,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":16030,"byte_end":16041,"line_start":228,"line_end":228,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":24711,"byte_end":24721,"line_start":117,"line_end":117,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":37332,"byte_end":37339,"line_start":427,"line_end":427,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":40197,"byte_end":40204,"line_start":513,"line_end":513,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":40339,"byte_end":40346,"line_start":519,"line_end":519,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49167,"byte_end":49184,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":50009,"byte_end":50026,"line_start":47,"line_end":47,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":53385,"byte_end":53396,"line_start":78,"line_end":78,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":55033,"byte_end":55044,"line_start":120,"line_end":120,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":55141,"byte_end":55150,"line_start":126,"line_end":126,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":56003,"byte_end":56017,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":56177,"byte_end":56186,"line_start":164,"line_end":164,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":62350,"byte_end":62359,"line_start":346,"line_end":346,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":62627,"byte_end":62643,"line_start":359,"line_end":359,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\cp437.rs","byte_start":73180,"byte_end":73183,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78010,"byte_end":78018,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78611,"byte_end":78619,"line_start":49,"line_end":49,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78740,"byte_end":78745,"line_start":57,"line_end":57,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78875,"byte_end":78883,"line_start":65,"line_end":65,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":79036,"byte_end":79044,"line_start":73,"line_end":73,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":246,"byte_end":250,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":99}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":277,"byte_end":282,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":192}},{"kind":"Mod","span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\lib.rs","byte_start":303,"byte_end":309,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":291}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":1060,"byte_end":1079,"line_start":23,"line_end":23,"column_start":6,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":4834,"byte_end":4865,"line_start":109,"line_end":109,"column_start":6,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\spec.rs","byte_start":6138,"byte_end":6162,"line_start":144,"line_end":144,"column_start":6,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","byte_start":8667,"byte_end":8678,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":63},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\crc32.rs","byte_start":9150,"byte_end":9161,"line_start":39,"line_end":39,"column_start":24,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":63},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":9752,"byte_end":9758,"line_start":13,"line_end":13,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10534,"byte_end":10542,"line_start":43,"line_end":43,"column_start":34,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":329},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":10816,"byte_end":10824,"line_start":57,"line_end":57,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\types.rs","byte_start":16030,"byte_end":16041,"line_start":228,"line_end":228,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":24711,"byte_end":24721,"line_start":117,"line_end":117,"column_start":24,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":37332,"byte_end":37339,"line_start":427,"line_end":427,"column_start":10,"column_end":17},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":40197,"byte_end":40204,"line_start":513,"line_end":513,"column_start":19,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":132},"to":{"krate":1,"index":2849}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\read.rs","byte_start":40339,"byte_end":40346,"line_start":519,"line_end":519,"column_start":19,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":132},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":49167,"byte_end":49184,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\compression.rs","byte_start":50009,"byte_end":50026,"line_start":47,"line_end":47,"column_start":23,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":373},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":53385,"byte_end":53396,"line_start":78,"line_end":78,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":55033,"byte_end":55044,"line_start":120,"line_end":120,"column_start":18,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":396},"to":{"krate":2,"index":2206}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":55141,"byte_end":55150,"line_start":126,"line_end":126,"column_start":35,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":2903}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":56003,"byte_end":56017,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":56177,"byte_end":56186,"line_start":164,"line_end":164,"column_start":25,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":62350,"byte_end":62359,"line_start":346,"line_end":346,"column_start":34,"column_end":43},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":1726}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\write.rs","byte_start":62627,"byte_end":62643,"line_start":359,"line_end":359,"column_start":25,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\cp437.rs","byte_start":73180,"byte_end":73183,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":5,"index":3846},"to":{"krate":0,"index":276}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78010,"byte_end":78018,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78611,"byte_end":78619,"line_start":49,"line_end":49,"column_start":35,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78740,"byte_end":78745,"line_start":57,"line_end":57,"column_start":38,"column_end":43},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":2469},"to":{"krate":2,"index":2258}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":78875,"byte_end":78883,"line_start":65,"line_end":65,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":403},"to":{"krate":2,"index":7648}},{"span":{"file_name":"C:\\Users\\chapm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\zip-0.5.4\\src\\result.rs","byte_start":79036,"byte_end":79044,"line_start":73,"line_end":73,"column_start":23,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":403},"to":{"krate":1,"index":1616}}]}